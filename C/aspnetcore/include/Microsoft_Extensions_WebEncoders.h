// this file is automatically generated with SourceGear Bridge

#include <stdint.h>

#ifndef INCLUDE_Microsoft_Extensions_WebEncoders
#define INCLUDE_Microsoft_Extensions_WebEncoders

#ifdef __cplusplus
extern "C" {
#endif

typedef const void* _Nonnull SG_HNDL_NONNULL;
typedef const void* _Nullable SG_HNDL_NULLABLE;
typedef const void* _Nonnull TYP;
typedef uint64_t GVAL;

SG_HNDL_NONNULL Microsoft_Extensions_DependencyInjection_EncoderServiceCollectionExtensions_IServiceCollection__AddWebEncoders_0__1__IServiceCollection(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL services);

SG_HNDL_NONNULL Microsoft_Extensions_DependencyInjection_EncoderServiceCollectionExtensions_IServiceCollection__AddWebEncoders_0__2__IServiceCollection_System_Action_Microsoft_Extensions_WebEncoders_WebEncoderOptions_(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL services, SG_HNDL_NONNULL setupAction);

TYP Microsoft_Extensions_WebEncoders_WebEncoderOptions_get_type_handle(void);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_WebEncoderOptions_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NULLABLE Microsoft_Extensions_WebEncoders_WebEncoderOptions_TextEncoderSettings__get_TextEncoderSettings_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

void Microsoft_Extensions_WebEncoders_WebEncoderOptions_void__set_TextEncoderSettings_0__1__TextEncoderSettings(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NULLABLE value);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_WebEncoderOptions_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_get_type_handle(void);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_String__Encode_0__1__String(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL value);

void Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

void Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

int32_t Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_bool__WillEncode_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar);

int32_t Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int16_t* _Nullable text, int32_t textLength);

int32_t Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar, int16_t* _Nullable buffer, int32_t bufferLength, int32_t* _Nonnull __numberOfCharactersWritten_out_ptr);

int32_t Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_get_type_handle(void);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_String__Encode_0__1__String(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL value);

void Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

void Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

int32_t Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_bool__WillEncode_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar);

int32_t Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int16_t* _Nullable text, int32_t textLength);

int32_t Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar, int16_t* _Nullable buffer, int32_t bufferLength, int32_t* _Nonnull __numberOfCharactersWritten_out_ptr);

int32_t Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_get_type_handle(void);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_ctor_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_String__Encode_0__1__String(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL value);

void Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

void Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NONNULL output, SG_HNDL_NONNULL value, int32_t startIndex, int32_t characterCount);

int32_t Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_bool__WillEncode_0__1__i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar);

int32_t Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int16_t* _Nullable text, int32_t textLength);

int32_t Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, int32_t unicodeScalar, int16_t* _Nullable buffer, int32_t bufferLength, int32_t* _Nonnull __numberOfCharactersWritten_out_ptr);

int32_t Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);


#ifdef __cplusplus
}
#endif

#endif // INCLUDE_Microsoft_Extensions_WebEncoders

