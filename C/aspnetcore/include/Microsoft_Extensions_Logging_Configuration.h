// this file is automatically generated with SourceGear Bridge

#include <stdint.h>

#ifndef INCLUDE_Microsoft_Extensions_Logging_Configuration
#define INCLUDE_Microsoft_Extensions_Logging_Configuration

#ifdef __cplusplus
extern "C" {
#endif

typedef const void* _Nonnull SG_HNDL_NONNULL;
typedef const void* _Nullable SG_HNDL_NULLABLE;
typedef const void* _Nonnull TYP;
typedef uint64_t GVAL;

TYP Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory_get_type_handle(void);

SG_HNDL_NULLABLE Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory_IConfiguration__GetConfiguration_0__1__Type(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h, SG_HNDL_NULLABLE providerType);

SG_HNDL_NONNULL Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory_cast(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

TYP Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_get_type_handle(TYP T);

SG_HNDL_NULLABLE Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_IConfiguration__get_Configuration_0__0(TYP T, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL specialize_Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_IConfiguration__get_Configuration_0__0(TYP T, SG_HNDL_NULLABLE * _Nonnull __thrown);

SG_HNDL_NULLABLE invoke_Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_IConfiguration__get_Configuration_0__0(SG_HNDL_NONNULL ____hdel, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __self_h);

SG_HNDL_NONNULL Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_cast(TYP T, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

void Microsoft_Extensions_Logging_Configuration_LoggerProviderOptions_void__RegisterProviderOptions_2__1__IServiceCollection(TYP TOptions, TYP TProvider, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NULLABLE services);

SG_HNDL_NONNULL specialize_Microsoft_Extensions_Logging_Configuration_LoggerProviderOptions_void__RegisterProviderOptions_2__1__IServiceCollection(TYP TOptions, TYP TProvider, SG_HNDL_NULLABLE * _Nonnull __thrown);

void invoke_Microsoft_Extensions_Logging_Configuration_LoggerProviderOptions_void__RegisterProviderOptions_2__1__IServiceCollection(SG_HNDL_NONNULL ____hdel, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NULLABLE services);

TYP Microsoft_Extensions_Logging_Configuration_LoggerProviderOptionsChangeTokenSource_2_get_type_handle(TYP TOptions, TYP TProvider);

SG_HNDL_NONNULL Microsoft_Extensions_Logging_Configuration_LoggerProviderOptionsChangeTokenSource_2_ctor_0__1__Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_TProvider_(TYP TOptions, TYP TProvider, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NULLABLE providerConfiguration);

SG_HNDL_NONNULL Microsoft_Extensions_Logging_Configuration_LoggerProviderOptionsChangeTokenSource_2_cast(TYP TOptions, TYP TProvider, SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NONNULL __h);

void Microsoft_Extensions_Logging_Configuration_LoggingBuilderConfigurationExtensions_void__AddConfiguration_0__1__ILoggingBuilder(SG_HNDL_NULLABLE * _Nonnull __thrown, SG_HNDL_NULLABLE builder);


#ifdef __cplusplus
}
#endif

#endif // INCLUDE_Microsoft_Extensions_Logging_Configuration

