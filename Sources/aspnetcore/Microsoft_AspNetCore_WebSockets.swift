// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions
public struct WebSocketMiddlewareExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  to the request pipeline.
            

    - Parameter app: 
            The  to configure.
            
    - Returns: 
            The .
            

    */
    public static func UseWebSockets(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebSocketMiddlewareExtensions_IApplicationBuilder__UseWebSockets_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.WebSocketOptions)
// docid: M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WebSocketOptions)
    /**
    
            Adds the  to the request pipeline.
            

    - Parameter app: 
            The  to configure.
            
    - Parameter options: 
            The  to be used for the .
            
    - Returns: 
            The .
            

    */
    public static func UseWebSockets(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebSocketMiddlewareExtensions_IApplicationBuilder__UseWebSockets_0__2__IApplicationBuilder_WebSocketOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // WebSocketMiddlewareExtensions


// type: Microsoft.AspNetCore.Builder.WebSocketOptions
    /**
    
            Configuration options for the WebSocketMiddleware.
            

    */
open class WebSocketOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_WebSocketOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Builder_WebSocketOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.#ctor
    /**
    
            Constructs the  class with default values.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_WebSocketOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_KeepAliveInterval()
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.get_KeepAliveInterval
    open func get_KeepAliveInterval() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebSocketOptions_TimeSpan__get_KeepAliveInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeepAliveInterval(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.set_KeepAliveInterval(System.TimeSpan)
    open func set_KeepAliveInterval(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebSocketOptions_void__set_KeepAliveInterval_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ReceiveBufferSize()
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.get_ReceiveBufferSize
    open func get_ReceiveBufferSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebSocketOptions_i32__get_ReceiveBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ReceiveBufferSize(System.Int32)
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.set_ReceiveBufferSize(System.Int32)
    open func set_ReceiveBufferSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebSocketOptions_void__set_ReceiveBufferSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedOrigins()
// docid: M:Microsoft.AspNetCore.Builder.WebSocketOptions.get_AllowedOrigins
    open func get_AllowedOrigins() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebSocketOptions_System_Collections_Generic_IList_string___get_AllowedOrigins_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Set the Origin header values allowed for WebSocket requests to prevent Cross-Site WebSocket Hijacking.
            By default all Origins are allowed.
            

    */
    open var AllowedOrigins : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedOrigins();
        }
    }
    /**
    
            Gets or sets the frequency at which to send Ping/Pong keep-alive control frames.
            The default is two minutes.
            

    */
    open var KeepAliveInterval : dotnet.System.TimeSpan {
        get {
            return try! get_KeepAliveInterval();
        }
        set(v) {
            return try! set_KeepAliveInterval(value: v);
        }
    }
    /**
    
            Gets or sets the size of the protocol buffer used to receive and parse frames.
            The default is 4kb.
            

    */
    open var ReceiveBufferSize : Swift.Int32 {
        get {
            return try! get_ReceiveBufferSize();
        }
        set(v) {
            return try! set_ReceiveBufferSize(value: v);
        }
    }
} // WebSocketOptions


}

// Microsoft.AspNetCore.WebSockets
extension Microsoft.AspNetCore.WebSockets {
// type: Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext
    /**
    
            Extends the  class with additional properties.
            

    */
open class ExtendedWebSocketAcceptContext
    :
    aspnetcore.Microsoft.AspNetCore.Http.WebSocketAcceptContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_SubProtocol()
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.get_SubProtocol
    open override func get_SubProtocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_String__get_SubProtocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SubProtocol(System.String)
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.set_SubProtocol(System.String)
    open override func set_SubProtocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_void__set_SubProtocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ReceiveBufferSize()
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.get_ReceiveBufferSize
    open func get_ReceiveBufferSize() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_System_Nullable_i32___get_ReceiveBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ReceiveBufferSize(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.set_ReceiveBufferSize(System.Nullable{System.Int32})
    open func set_ReceiveBufferSize(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_void__set_ReceiveBufferSize_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_KeepAliveInterval()
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.get_KeepAliveInterval
    open override func get_KeepAliveInterval() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_System_Nullable_System_TimeSpan___get_KeepAliveInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_KeepAliveInterval(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.set_KeepAliveInterval(System.Nullable{System.TimeSpan})
    open override func set_KeepAliveInterval(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebSockets_ExtendedWebSocketAcceptContext_void__set_KeepAliveInterval_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.TimeSpan> get_KeepAliveInterval()
    /**
    
            This property is obsolete and has no effect.
            

    */
    open var ReceiveBufferSize : Optional<Swift.Int32> {
        get {
            return try! get_ReceiveBufferSize();
        }
        set(v) {
            return try! set_ReceiveBufferSize(value: v!);
        }
    }
    /**
    */
    open override var SubProtocol : Optional<dotnet.System.String> {
        get {
            return try! get_SubProtocol();
        }
        set(v) {
            return try! set_SubProtocol(value: v!);
        }
    }
} // ExtendedWebSocketAcceptContext


// type: Microsoft.AspNetCore.WebSockets.WebSocketMiddleware
    /**
    
            Enables accepting WebSocket requests by adding a 
            to the  if the request is a valid WebSocket request.
            

    */
open class WebSocketMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebSockets_WebSocketMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_WebSockets_WebSocketMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.WebSocketOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.WebSockets.WebSocketMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.WebSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new instance of the .
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter options: The configuration options.
    - Parameter loggerFactory: An  instance used to create loggers.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebSockets_WebSocketMiddleware_ctor_0__3__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_WebSocketOptions__ILoggerFactory(&__thrown, next.get_handle(), options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.WebSockets.WebSocketMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Processes a request to determine if it is a WebSocket request, and if so,
            sets the  on the .
            

    - Parameter context: The  representing the request.
    - Returns: The  that represents the completion of the middleware pipeline.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebSockets_WebSocketMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // WebSocketMiddleware


// type: Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions
public struct WebSocketsDependencyInjectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebSockets(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.WebSocketOptions>)
// docid: M:Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions.AddWebSockets(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.WebSocketOptions})
    /**
    
            Extension method for  to add WebSockets configuration.
            

    - Parameter services: The service collection to add WebSockets specific configuration to.
    - Parameter configure: The configuration callback to setup .
    - Returns: 

    */
    public static func AddWebSockets(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebSockets_WebSocketsDependencyInjectionExtensions_IServiceCollection__AddWebSockets_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_WebSocketOptions_(&__thrown, services.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddWebSockets(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions>(configure);
        return try AddWebSockets(services: services, configure: del_configure);
    }
} // WebSocketsDependencyInjectionExtensions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWebSockets() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.WebSocketOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWebSockets(options : aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebSockets(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.WebSocketOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddWebSockets(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions.AddWebSockets(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddWebSockets(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.WebSocketOptions>(configure);
        return try aspnetcore.Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions.AddWebSockets(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

