// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions
public struct HealthCheckServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds the  to the container, using the provided delegate to register
            health checks.
            

    - Parameter services: The  to add the  to.
    - Returns: An instance of  from which health checks can be registered.

    */
    public static func AddHealthChecks(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthCheckServiceCollectionExtensions_IHealthChecksBuilder__AddHealthChecks_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
} // HealthCheckServiceCollectionExtensions


// type: Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions
public struct HealthChecksBuilderAddCheckExtensions {
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter instance: An  instance.
    - Parameter failureStatus: 
            The  that should be reported when the health check reports a failure. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderAddCheckExtensions_IHealthChecksBuilder__AddCheck_0__5__IHealthChecksBuilder_String_IHealthCheck_System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string_(&__thrown, builder.get_handle(), name.get_handle(), instance.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter instance: An  instance.
    - Parameter failureStatus: 
            The  that should be reported when the health check reports a failure. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter timeout: An optional  representing the timeout of the check.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus> = nil, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderAddCheckExtensions_IHealthChecksBuilder__AddCheck_0__6__IHealthChecksBuilder_String_IHealthCheck_System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, builder.get_handle(), name.get_handle(), instance.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.TimeSpan, System.Object[])
} // HealthChecksBuilderAddCheckExtensions


// type: Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions
public struct HealthChecksBuilderDelegateExtensions {
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddCheck_0__4__IHealthChecksBuilder_String_System_Func_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult__System_Collections_Generic_IEnumerable_string_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping () throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try AddCheck(builder: builder, name: name, check: del_check, tags: tags);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Parameter timeout: An optional  representing the timeout of the check.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddCheck_0__5__IHealthChecksBuilder_String_System_Func_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult__System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping () throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try AddCheck(builder: builder, name: name, check: del_check, tags: tags, timeout: timeout);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddCheck_0__4__IHealthChecksBuilder_String_System_Func_System_Threading_CancellationToken_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult__System_Collections_Generic_IEnumerable_string_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), (tags?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try AddCheck(builder: builder, name: name, check: del_check, tags: tags);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Parameter timeout: An optional  representing the timeout of the check.
    - Returns: The .

    */
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddCheck_0__5__IHealthChecksBuilder_String_System_Func_System_Threading_CancellationToken_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult__System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try AddCheck(builder: builder, name: name, check: del_check, tags: tags, timeout: timeout);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Returns: The .

    */
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddAsyncCheck_0__4__IHealthChecksBuilder_String_System_Func_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult___System_Collections_Generic_IEnumerable_string_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try AddAsyncCheck(builder: builder, name: name, check: del_check, tags: tags);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Parameter timeout: An optional  representing the timeout of the check.
    - Returns: The .

    */
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddAsyncCheck_0__5__IHealthChecksBuilder_String_System_Func_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult___System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try AddAsyncCheck(builder: builder, name: name, check: del_check, tags: tags, timeout: timeout);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Returns: The .

    */
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddAsyncCheck_0__4__IHealthChecksBuilder_String_System_Func_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult___System_Collections_Generic_IEnumerable_string_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try AddAsyncCheck(builder: builder, name: name, check: del_check, tags: tags);
    }
    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Adds a new health check with the specified name and implementation.
            

    - Parameter builder: The .
    - Parameter name: The name of the health check.
    - Parameter tags: A list of tags that can be used to filter health checks.
    - Parameter check: A delegate that provides the health check implementation.
    - Parameter timeout: An optional  representing the timeout of the check.
    - Returns: The .

    */
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HealthChecksBuilderDelegateExtensions_IHealthChecksBuilder__AddAsyncCheck_0__5__IHealthChecksBuilder_String_System_Func_System_Threading_CancellationToken_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult___System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, builder.get_handle(), name.get_handle(), check.get_handle(), (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAsyncCheck(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try AddAsyncCheck(builder: builder, name: name, check: del_check, tags: tags, timeout: timeout);
    }
} // HealthChecksBuilderDelegateExtensions


// type: Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
    /**
    
            A builder used to register health checks.
            

    */
open class IHealthChecksBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder Add(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration)
// docid: M:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder.Add(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration)
    /**
    
            Adds a  for a health check.
            

    - Parameter registration: The .
    */
    open func Add(registration : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder_IHealthChecksBuilder__Add_0__1__HealthCheckRegistration(&__thrown, self.get_handle(), registration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder.get_Services
    open func get_Services() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
} // IHealthChecksBuilder


}

// Microsoft.Extensions.Diagnostics
// Microsoft.Extensions.Diagnostics.HealthChecks
extension Microsoft.Extensions.Diagnostics.HealthChecks {
// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions
    /**
    
            Options for the default service that executes  instances.
            

    */
public final class HealthCheckPublisherOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.#ctor
    /**
    
            Creates a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_Delay()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.get_Delay
    public func get_Delay() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_TimeSpan__get_Delay_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Delay(System.TimeSpan)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.set_Delay(System.TimeSpan)
    public func set_Delay(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_void__set_Delay_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_Period()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.get_Period
    public func get_Period() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_TimeSpan__get_Period_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Period(System.TimeSpan)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.set_Period(System.TimeSpan)
    public func set_Period(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_void__set_Period_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,bool> get_Predicate()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.get_Predicate
    public func get_Predicate() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_System_Func_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_bool___get_Predicate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Predicate(System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,bool>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.set_Predicate(System.Func{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,System.Boolean})
    public func set_Predicate(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_void__set_Predicate_0__1__System_Func_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_Predicate(value : @escaping (aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Swift.Bool>(value);
        return try set_Predicate(value: del_value);
    }
    // [IsSpecialName] System.TimeSpan get_Timeout()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.get_Timeout
    public func get_Timeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_TimeSpan__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Timeout(System.TimeSpan)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherOptions.set_Timeout(System.TimeSpan)
    public func set_Timeout(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckPublisherOptions_void__set_Timeout_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the initial delay applied after the application starts before executing
             instances. The delay is applied once at startup, and does
            not apply to subsequent iterations. The default value is 5 seconds.
            

    */
    public var Delay : dotnet.System.TimeSpan {
        get {
            return try! get_Delay();
        }
        set(v) {
            return try! set_Delay(value: v);
        }
    }
    /**
    
            Gets or sets the period of  execution. The default value is
            30 seconds.
            

    */
    public var Period : dotnet.System.TimeSpan {
        get {
            return try! get_Period();
        }
        set(v) {
            return try! set_Period(value: v);
        }
    }
    /**
    
            Gets or sets a predicate that is used to filter the set of health checks executed.
            

    */
    public var Predicate : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Bool>> {
        get {
            return try! get_Predicate();
        }
        set(v) {
            return try! set_Predicate(value: v!);
        }
    }
    /**
    
            Gets or sets the timeout for executing the health checks an all 
            instances. Use  to execute with no timeout.
            The default value is 30 seconds.
            

    */
    public var Timeout : dotnet.System.TimeSpan {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
} // HealthCheckPublisherOptions


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckService
    /**
    
            A service which can be used to check the status of  instances
            registered in the application.
            

    */
open class HealthCheckService
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckService_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport> CheckHealthAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckService.CheckHealthAsync(System.Threading.CancellationToken)
    /**
    
            Runs all the health checks in the application and returns the aggregated status.
            

    - Parameter cancellationToken: A  which can be used to cancel the health checks.
    - Returns: 
            A  which will complete when all the health checks have been run,
            yielding a  containing the results.
            

    */
    open func CheckHealthAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckService_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport___CheckHealthAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport> CheckHealthAsync(System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,bool>, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckService.CheckHealthAsync(System.Func{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,System.Boolean},System.Threading.CancellationToken)
    /**
    
            Runs the provided health checks and returns the aggregated status
            

    - Parameter predicate: 
            A predicate that can be used to include health checks based on user-defined criteria.
            
    - Parameter cancellationToken: A  which can be used to cancel the health checks.
    - Returns: 
            A  which will complete when all the health checks have been run,
            yielding a  containing the results.
            

    */
    open func CheckHealthAsync(predicate : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Bool>>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckService_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport___CheckHealthAsync_0__2__System_Func_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_bool__CancellationToken(&__thrown, self.get_handle(), (predicate?.get_handle()), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func CheckHealthAsync(predicate : @escaping (aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration) throws -> Bool, cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport {
        let del_predicate = try dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration,Swift.Bool>(predicate);
        return try await CheckHealthAsync(predicate: del_predicate, cancellationToken: cancellationToken);
    }
} // HealthCheckService


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckServiceOptions
    /**
    
            Options for the default implementation of 
            

    */
public final class HealthCheckServiceOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckServiceOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckServiceOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckServiceOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration> get_Registrations()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckServiceOptions.get_Registrations
    public func get_Registrations() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckServiceOptions_System_Collections_Generic_ICollection_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration___get_Registrations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    /**
    
            Gets the health check registrations.
            

    */
    public var Registrations : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration> {
        get {
            return try! get_Registrations();
        }
    }
} // HealthCheckServiceOptions


}




public protocol Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHealthChecks() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.AddHealthChecks(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, instance: instance, failureStatus: failureStatus, tags: tags);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus> = nil, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, instance: instance, failureStatus: failureStatus, tags: tags, timeout: timeout);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Object[])
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Object[])

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Object[])
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Object[])

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Object[])
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Object[])

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.TimeSpan, System.Object[])
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddTypeActivatedCheck<T>(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.TimeSpan, System.Object[])

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, check : dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags);
    }
    // delegate closure overload
    public func AddCheck(name : dotnet.System.String, check : @escaping () throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, check : dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags, timeout: timeout);
    }
    // delegate closure overload
    public func AddCheck(name : dotnet.System.String, check : @escaping () throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags, timeout: timeout);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags);
    }
    // delegate closure overload
    public func AddCheck(name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddCheck(name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags, timeout: timeout);
    }
    // delegate closure overload
    public func AddCheck(name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags, timeout: timeout);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddAsyncCheck(name : dotnet.System.String, check : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags);
    }
    // delegate closure overload
    public func AddAsyncCheck(name : dotnet.System.String, check : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddAsyncCheck(name : dotnet.System.String, check : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags, timeout: timeout);
    }
    // delegate closure overload
    public func AddAsyncCheck(name : dotnet.System.String, check : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags, timeout: timeout);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddAsyncCheck(name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags);
    }
    // delegate closure overload
    public func AddAsyncCheck(name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddAsyncCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, System.String, System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
extension Microsoft_Extensions_DependencyInjection_IHealthChecksBuilder {
    public func AddAsyncCheck(name : dotnet.System.String, check : dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> = nil, timeout : Optional<dotnet.System.TimeSpan> = nil) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: check, tags: tags, timeout: timeout);
    }
    // delegate closure overload
    public func AddAsyncCheck(name : dotnet.System.String, check : @escaping (dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder {
        let del_check = try dotnet.System.Func_2<dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>>(check);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HealthChecksBuilderDelegateExtensions.AddAsyncCheck(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder(hndl: __copy_handle(self.get_handle())), name: name, check: del_check, tags: tags, timeout: timeout);
    }
}

