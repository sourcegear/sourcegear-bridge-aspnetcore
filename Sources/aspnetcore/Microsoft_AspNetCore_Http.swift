// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.ApplicationBuilder
    /**
    
            Default implementation for .
            

    */
open class ApplicationBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Builder_IApplicationBuilder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ApplicationBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Builder_ApplicationBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.#ctor(System.IServiceProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter serviceProvider: The  for application services.
    */
    public init(serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_ApplicationBuilder_ctor_0__1__IServiceProvider(&__thrown, serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IServiceProvider, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.#ctor(System.IServiceProvider,System.Object)
    /**
    
            Initializes a new instance of .
            

    - Parameter serviceProvider: The  for application services.
    - Parameter server: The server instance that hosts the application.
    */
    public init(serviceProvider : dotnet.System.IServiceProvider, server : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_ApplicationBuilder_ctor_0__2__IServiceProvider_Object(&__thrown, serviceProvider.get_handle(), server.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Use(System.Func<Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate>)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.Use(System.Func{Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate})
    /**
    
            Adds the middleware to the application request pipeline.
            

    - Parameter middleware: The middleware.
    - Returns: An instance of  after the operation has completed.

    */
    open /* method final */ func Use(middleware : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_IApplicationBuilder__Use_0__1__System_Func_Microsoft_AspNetCore_Http_RequestDelegate_Microsoft_AspNetCore_Http_RequestDelegate_(&__thrown, self.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open /* method final */ func Use(middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>(middleware);
        return try Use(middleware: del_middleware);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder New()
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.New
    /**
    
            Creates a copy of this application builder.
            
            The created clone has the same properties as the current instance, but does not copy
            the request pipeline.
            
            

    - Returns: The cloned instance.

    */
    open /* method final */ func New() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_IApplicationBuilder__New_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.RequestDelegate Build()
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.Build
    /**
    
            Produces a  that executes added middlewares.
            

    - Returns: The .

    */
    open /* method final */ func Build() throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_RequestDelegate__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ApplicationServices()
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.get_ApplicationServices
    open /* method final */ func get_ApplicationServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_IServiceProvider__get_ApplicationServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApplicationServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.set_ApplicationServices(System.IServiceProvider)
    open /* method final */ func set_ApplicationServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ApplicationBuilder_void__set_ApplicationServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_ServerFeatures()
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.get_ServerFeatures
    open /* method final */ func get_ServerFeatures() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_IFeatureCollection__get_ServerFeatures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilder.get_Properties
    open /* method final */ func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilder_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets the  for application services.
            

    */
    public var ApplicationServices : dotnet.System.IServiceProvider {
        get {
            return try! get_ApplicationServices();
        }
        set(v) {
            return try! set_ApplicationServices(value: v);
        }
    }
    /**
    
            Gets a set of properties for .
            

    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets the  for server features.
            

    */
    public var ServerFeatures : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_ServerFeatures();
        }
    }
} // ApplicationBuilder


}

// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.BindingAddress
    /**
    
            An address that a HTTP server may bind to.
            

    */
open class BindingAddress
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_BindingAddress_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_BindingAddress_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_BindingAddress_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Http.BindingAddress Parse(System.String)
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.Parse(System.String)
    /**
    
            Parses the specified  as a .
            

    - Parameter address: The address to parse.
    - Returns: The parsed address.

    */
    open class func Parse(address : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.BindingAddress {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_BindingAddress__Parse_0__1__String(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.BindingAddress(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_Host
    open func get_Host() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PathBase()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_PathBase
    open func get_PathBase() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_String__get_PathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Port()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_Port
    open func get_Port() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_i32__get_Port_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Scheme()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_Scheme
    open func get_Scheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_String__get_Scheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsUnixPipe()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_IsUnixPipe
    open func get_IsUnixPipe() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_bool__get_IsUnixPipe_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_UnixPipePath()
// docid: M:Microsoft.AspNetCore.Http.BindingAddress.get_UnixPipePath
    open func get_UnixPipePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BindingAddress_String__get_UnixPipePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the host component.
            

    */
    open var Host : dotnet.System.String {
        get {
            return try! get_Host();
        }
    }
    /**
    
            Gets a value that determines if this instance represents a Unix pipe.
            
            Returns  if  starts with unix:// prefix.
            
            

    */
    open var IsUnixPipe : Bool {
        get {
            return try! get_IsUnixPipe();
        }
    }
    /**
    
            Gets the path component.
            

    */
    open var PathBase : dotnet.System.String {
        get {
            return try! get_PathBase();
        }
    }
    /**
    
            Gets the port.
            

    */
    open var Port : Swift.Int32 {
        get {
            return try! get_Port();
        }
    }
    /**
    
            Gets the scheme component.
            

    */
    open var Scheme : dotnet.System.String {
        get {
            return try! get_Scheme();
        }
    }
    /**
    
            Gets the unix pipe path if this instance represents a Unix pipe.
            

    */
    open var UnixPipePath : dotnet.System.String {
        get {
            return try! get_UnixPipePath();
        }
    }
} // BindingAddress


// type: Microsoft.AspNetCore.Http.DefaultHttpContext
    /**
    
            Represents an implementation of the HTTP Context class.
            

    */
public final class DefaultHttpContext
    :
    aspnetcore.Microsoft.AspNetCore.Http.HttpContext
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_DefaultHttpContext_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_DefaultHttpContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_DefaultHttpContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new instance of the  class with provided features.
            

    - Parameter features: Initial set of features for the .
    */
    public init(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_DefaultHttpContext_ctor_0__1__IFeatureCollection(&__thrown, features.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Initialize(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.Initialize(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Reinitialize  the current instant of the class with features passed in.
            

    - Parameter features: The new set of features for the .
    */
    public func Initialize(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__Initialize_0__1__IFeatureCollection(&__thrown, self.get_handle(), features.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Uninitialize()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.Uninitialize
    /**
    
            Uninitialize all the features in the .
            

    */
    public func Uninitialize() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__Uninitialize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Abort()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.Abort
    /**
    */
    public override func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.FormOptions get_FormOptions()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_FormOptions
    public func get_FormOptions() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_FormOptions__get_FormOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FormOptions(Microsoft.AspNetCore.Http.Features.FormOptions)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_FormOptions(Microsoft.AspNetCore.Http.Features.FormOptions)
    public func set_FormOptions(value : aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_FormOptions_0__1__FormOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceScopeFactory get_ServiceScopeFactory()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_ServiceScopeFactory
    public func get_ServiceScopeFactory() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_IServiceScopeFactory__get_ServiceScopeFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ServiceScopeFactory(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_ServiceScopeFactory(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
    public func set_ServiceScopeFactory(value : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_ServiceScopeFactory_0__1__IServiceScopeFactory(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_Features()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Features
    public override func get_Features() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_IFeatureCollection__get_Features_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Request
    public override func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Response
    public override func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_HttpResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ConnectionInfo get_Connection()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Connection
    public override func get_Connection() throws -> aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_ConnectionInfo__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.WebSocketManager get_WebSockets()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_WebSockets
    public override func get_WebSockets() throws -> aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_WebSocketManager__get_WebSockets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_User
    public override func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_User(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_User(System.Security.Claims.ClaimsPrincipal)
    public override func set_User(value : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_User_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Items
    public override func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_Items(System.Collections.Generic.IDictionary{System.Object,System.Object})
    public override func set_Items(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_Items_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_RequestServices()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_RequestServices
    public override func get_RequestServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_IServiceProvider__get_RequestServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_RequestServices(System.IServiceProvider)
    public override func set_RequestServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_RequestServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_RequestAborted()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_RequestAborted
    public override func get_RequestAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_CancellationToken__get_RequestAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestAborted(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_RequestAborted(System.Threading.CancellationToken)
    public override func set_RequestAborted(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_RequestAborted_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TraceIdentifier()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_TraceIdentifier
    public override func get_TraceIdentifier() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_String__get_TraceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceIdentifier(System.String)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_TraceIdentifier(System.String)
    public override func set_TraceIdentifier(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_TraceIdentifier_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ISession get_Session()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_Session
    public override func get_Session() throws -> aspnetcore.Microsoft.AspNetCore.Http.ISession {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_ISession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Session(Microsoft.AspNetCore.Http.ISession)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.set_Session(Microsoft.AspNetCore.Http.ISession)
    public override func set_Session(value : aspnetcore.Microsoft.AspNetCore.Http.ISession) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContext_void__set_Session_0__1__ISession(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContext.get_HttpContext
    public func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    /**
    */
    public override var Connection : aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo {
        get {
            return try! get_Connection();
        }
    }
    /**
    */
    public override var Features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_Features();
        }
    }
    /**
    
            Gets or set the  for this instance.
            

    */
    public var FormOptions : aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions {
        get {
            return try! get_FormOptions();
        }
        set(v) {
            return try! set_FormOptions(value: v);
        }
    }
    /**
    
            This API is used by ASP.NET Core's infrastructure and should not be used by application code.
            

    */
    public var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    */
    public override var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v);
        }
    }
    /**
    */
    public override var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    */
    public override var RequestAborted : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_RequestAborted();
        }
        set(v) {
            return try! set_RequestAborted(value: v);
        }
    }
    /**
    */
    public override var RequestServices : dotnet.System.IServiceProvider {
        get {
            return try! get_RequestServices();
        }
        set(v) {
            return try! set_RequestServices(value: v);
        }
    }
    /**
    */
    public override var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            Gets or sets the  for this instance.
            

    */
    public var ServiceScopeFactory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory {
        get {
            return try! get_ServiceScopeFactory();
        }
        set(v) {
            return try! set_ServiceScopeFactory(value: v);
        }
    }
    /**
    */
    public override var Session : aspnetcore.Microsoft.AspNetCore.Http.ISession {
        get {
            return try! get_Session();
        }
        set(v) {
            return try! set_Session(value: v);
        }
    }
    /**
    */
    public override var TraceIdentifier : dotnet.System.String {
        get {
            return try! get_TraceIdentifier();
        }
        set(v) {
            return try! set_TraceIdentifier(value: v);
        }
    }
    /**
    */
    public override var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
        set(v) {
            return try! set_User(value: v);
        }
    }
    /**
    */
    public override var WebSockets : aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager {
        get {
            return try! get_WebSockets();
        }
    }
} // DefaultHttpContext


// type: Microsoft.AspNetCore.Http.FormCollection
    /**
    
            Contains the parsed HTTP form values.
            

    */
open class FormCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_FormCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_FormCollection_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: Microsoft.AspNetCore.Http.FormCollection Empty
    /**
    
            An empty .
            

    */
    open class var Empty : aspnetcore.Microsoft.AspNetCore.Http.FormCollection {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.FormCollection(hndl: Microsoft_AspNetCore_Http_FormCollection_get_Empty());
            return __return;
        }
    }
    // .ctor(System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>, Microsoft.AspNetCore.Http.IFormFileCollection)
// docid: M:Microsoft.AspNetCore.Http.FormCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues},Microsoft.AspNetCore.Http.IFormFileCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter fields: The backing fields.
    - Parameter files: The files associated with the form.
    */
    public init(fields : Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>, files : Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_FormCollection_ctor_0__2__System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues__IFormFileCollection(&__thrown, (fields?.get_handle()), files?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormCollection.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.FormCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Http_FormCollection_bool__TryGetValue_0__2__String_outStringValues(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Http.FormCollection.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.GetEnumerator
    /**
    
            Returns an struct enumerator that iterates through a collection without boxing and
            is also used via the  interface.
            

    - Returns: An  object that can be used to iterate through the collection.

    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Http.FormCollection_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_FormCollection_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.FormCollection_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormFileCollection get_Files()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.get_Files
    open /* method final */ func get_Files() throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_IFormFileCollection__get_Files_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormCollection.get_Item(System.String)
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            Gets the files associated with the HTTP form.
            

    */
    public var Files : aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection {
        get {
            return try! get_Files();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
} // FormCollection


// type: Microsoft.AspNetCore.Http.FormCollection+Enumerator
// boxed value type
    /**
    
            Enumerates a .
            

    */
public final class FormCollection_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_FormCollection_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the element at the current position of the enumerator.
            

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_FormCollection_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.Enumerator.MoveNext
    /**
    
            Advances the enumerator to the next element of the .
            

    - Returns:  if the enumerator was successfully advanced to the next element;
             if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_FormCollection_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues> get_Current()
// docid: M:Microsoft.AspNetCore.Http.FormCollection.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormCollection_Enumerator_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // FormCollection_Enumerator


// type: Microsoft.AspNetCore.Http.FormFile
    /**
    
            Default implementation of .
            

    */
open class FormFile
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_IFormFile
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_FormFile_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_FormFile_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.IO.Stream, System.Int64, System.Int64, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFile.#ctor(System.IO.Stream,System.Int64,System.Int64,System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter baseStream: The  containing the form file.
    - Parameter baseStreamOffset: The offset at which the form file begins.
    - Parameter length: The length of the form file.
    - Parameter name: The name of the form file from the Content-Disposition header.
    - Parameter fileName: The file name from the Content-Disposition header.
    */
    public init(baseStream : dotnet.System.IO.Stream, baseStreamOffset : Swift.Int64, length : Swift.Int64, name : dotnet.System.String, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_FormFile_ctor_0__5__Stream_i64_i64_String_String(&__thrown, baseStream.get_handle(), baseStreamOffset, length, name.get_handle(), fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IO.Stream OpenReadStream()
// docid: M:Microsoft.AspNetCore.Http.FormFile.OpenReadStream
    /**
    
            Opens the request stream for reading the uploaded file.
            

    */
    open /* method final */ func OpenReadStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_Stream__OpenReadStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // void CopyTo(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.FormFile.CopyTo(System.IO.Stream)
    /**
    
            Copies the contents of the uploaded file to the  stream.
            

    - Parameter target: The stream to copy the file contents to.
    */
    open /* method final */ func CopyTo(target : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_FormFile_void__CopyTo_0__1__Stream(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.FormFile.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    /**
    
            Asynchronously copies the contents of the uploaded file to the  stream.
            

    - Parameter target: The stream to copy the file contents to.
    - Parameter cancellationToken: 
    */
    open /* method final */ func CopyToAsync(target : dotnet.System.IO.Stream, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_Task__CopyToAsync_0__2__Stream_CancellationToken(&__thrown, self.get_handle(), target.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.String get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_ContentDisposition
    open /* method final */ func get_ContentDisposition() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_String__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentDisposition(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFile.set_ContentDisposition(System.String)
    open func set_ContentDisposition(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_FormFile_void__set_ContentDisposition_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_ContentType
    open /* method final */ func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFile.set_ContentType(System.String)
    open func set_ContentType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_FormFile_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_Headers
    open /* method final */ func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.FormFile.set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open func set_Headers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_FormFile_void__set_Headers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_Length
    open /* method final */ func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_Name
    open /* method final */ func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.Http.FormFile.get_FileName
    open /* method final */ func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFile_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the raw Content-Disposition header of the uploaded file.
            

    */
    public var ContentDisposition : dotnet.System.String {
        get {
            return try! get_ContentDisposition();
        }
        set(v) {
            return try! set_ContentDisposition(value: v);
        }
    }
    /**
    
            Gets the raw Content-Type header of the uploaded file.
            

    */
    public var ContentType : dotnet.System.String {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    
            Gets the file name from the Content-Disposition header.
            

    */
    public var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
    }
    /**
    
            Gets the header dictionary of the uploaded file.
            

    */
    public var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    
            Gets the file length in bytes.
            

    */
    public var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    
            Gets the name from the Content-Disposition header.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // FormFile


// type: Microsoft.AspNetCore.Http.FormFileCollection
    /**
    
            Default implementation of .
            

    */
open class FormFileCollection
    :
    dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Http.IFormFile>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_FormFileCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_FormFileCollection_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.FormFileCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_FormFileCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.IFormFile GetFile(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFileCollection.GetFile(System.String)
    /**
    */
    open /* method final */ func GetFile(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFileCollection_IFormFile__GetFile_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormFile(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.IFormFile> GetFiles(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFileCollection.GetFiles(System.String)
    /**
    */
    open /* method final */ func GetFiles(name : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFileCollection_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_IFormFile___GetFiles_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormFile get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.FormFileCollection.get_Item(System.String)
    open /* method final */ func get_Item(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FormFileCollection_IFormFile__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormFile(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // FormFileCollection


// type: Microsoft.AspNetCore.Http.HeaderDictionary
    /**
    
            Represents a wrapper for RequestHeaders and ResponseHeaders.
            

    */
open class HeaderDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HeaderDictionary_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_HeaderDictionary_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HeaderDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues})
    /**
    
            Initializes a new instance of .
            

    - Parameter store: The value to use as the backing store.
    */
    public init(store : Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HeaderDictionary_ctor_0__1__System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, (store?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.#ctor(System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter capacity: The initial number of headers that this instance can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HeaderDictionary_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})
    /**
    
            Adds a new header item to the collection.
            

    - Parameter item: The item to add.
    */
    open /* method final */ func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Add(System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Adds the given header and values to the collection.
            

    - Parameter key: The header name.
    - Parameter value: The header values.
    */
    open /* method final */ func Add(key : dotnet.System.String, value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__Add_0__2__String_StringValues(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Clear
    /**
    
            Clears the entire list of objects.
            

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})
    /**
    
            Returns a value indicating whether the specified object occurs within this collection.
            

    - Parameter item: The item.
    - Returns: true if the specified object occurs within this collection; otherwise, false.

    */
    open /* method final */ func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.ContainsKey(System.String)
    /**
    
            Determines whether the  contains a specific key.
            

    - Parameter key: The key.
    - Returns: true if the  contains a specific key; otherwise, false.

    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>[], System.Int32)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues})
    /**
    
            Removes the given item from the the collection.
            

    - Parameter item: The item.
    - Returns: true if the specified object was removed from the collection; otherwise, false.

    */
    open /* method final */ func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Remove(System.String)
    /**
    
            Removes the given header from the collection.
            

    - Parameter key: The header name.
    - Returns: true if the specified object was removed from the collection; otherwise, false.

    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    
            Retrieves a value from the dictionary.
            

    - Parameter key: The header name.
    - Parameter value: The value.
    - Returns: true if the  contains the key; otherwise, false.

    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__TryGetValue_0__2__String_outStringValues(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Http.HeaderDictionary.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.GetEnumerator
    /**
    
            Returns an enumerator that iterates through a collection.
            

    - Returns: An  object that can be used to iterate through the collection.

    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionary_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_HeaderDictionary_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionary_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_ContentLength
    open /* method final */ func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.set_ContentLength(System.Nullable{System.Int64})
    open /* method final */ func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReadOnly(bool)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.set_IsReadOnly(System.Boolean)
    open func set_IsReadOnly(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__set_IsReadOnly_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.Extensions.Primitives.StringValues> get_Values()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_System_Collections_Generic_ICollection_Microsoft_Extensions_Primitives_StringValues___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.get_Item(System.String)
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.set_Item(System.String,Microsoft.Extensions.Primitives.StringValues)
    open /* method final */ func set_Item(key : dotnet.System.String, value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_void__set_Item_0__2__String_StringValues(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    
            Gets the number of elements contained in the ;.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            Gets a value that indicates whether the  is in read-only mode.
            

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
        set(v) {
            return try! set_IsReadOnly(value: v);
        }
    }
    /**
    
            Gets the collection of HTTP header names in this instance.
            

    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    
            Gets the collection of HTTP header values in this instance.
            

    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        get {
            return try! get_Values();
        }
    }
} // HeaderDictionary


// type: Microsoft.AspNetCore.Http.HeaderDictionary+Enumerator
// boxed value type
    /**
    
            Enumerates a .
            

    */
public final class HeaderDictionary_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HeaderDictionary_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the element at the current position of the enumerator.
            

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_HeaderDictionary_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Enumerator.MoveNext
    /**
    
            Advances the enumerator to the next element of the .
            

    - Returns:  if the enumerator was successfully advanced to the next element;
             if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionary_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues> get_Current()
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionary.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionary_Enumerator_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // HeaderDictionary_Enumerator


// type: Microsoft.AspNetCore.Http.HttpContextAccessor
    /**
    
            Provides an implementation of  based on the current execution context.
            

    */
open class HttpContextAccessor
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_IHttpContextAccessor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HttpContextAccessor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_HttpContextAccessor_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.HttpContextAccessor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HttpContextAccessor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Http.HttpContextAccessor.get_HttpContext
    open /* method final */ func get_HttpContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContextAccessor_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.HttpContextAccessor.set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
    open /* method final */ func set_HttpContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContextAccessor_void__set_HttpContext_0__1__HttpContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var HttpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        get {
            return try! get_HttpContext();
        }
        set(v) {
            return try! set_HttpContext(value: v!);
        }
    }
} // HttpContextAccessor


// type: Microsoft.AspNetCore.Http.HttpRequestRewindExtensions
public struct HttpRequestRewindExtensions {
    // void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Ensure the   can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than 30K bytes to disk.
            

    - Parameter request: The  to prepare.
    */
    public static func EnableBuffering(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequestRewindExtensions_void__EnableBuffering_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int32)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int32)
    /**
    
            Ensure the   can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than  bytes to
            disk.
            

    - Parameter request: The  to prepare.
    - Parameter bufferThreshold: 
            The maximum size in bytes of the in-memory  used to buffer the
            stream. Larger request bodies are written to disk.
            
    */
    public static func EnableBuffering(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, bufferThreshold : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequestRewindExtensions_void__EnableBuffering_0__2__HttpRequest_i32(&__thrown, request.get_handle(), bufferThreshold);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int64)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int64)
    /**
    
            Ensure the   can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than 30K bytes to disk.
            

    - Parameter request: The  to prepare.
    - Parameter bufferLimit: 
            The maximum size in bytes of the request body. An attempt to read beyond this limit will cause an
            .
            
    */
    public static func EnableBuffering(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, bufferLimit : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequestRewindExtensions_void__EnableBuffering_0__2__HttpRequest_i64(&__thrown, request.get_handle(), bufferLimit);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int32, System.Int64)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest,System.Int32,System.Int64)
    /**
    
            Ensure the   can be read multiple times. Normally
            buffers request bodies in memory; writes requests larger than  bytes to
            disk.
            

    - Parameter request: The  to prepare.
    - Parameter bufferThreshold: 
            The maximum size in bytes of the in-memory  used to buffer the
            stream. Larger request bodies are written to disk.
            
    - Parameter bufferLimit: 
            The maximum size in bytes of the request body. An attempt to read beyond this limit will cause an
            .
            
    */
    public static func EnableBuffering(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, bufferThreshold : Swift.Int32, bufferLimit : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequestRewindExtensions_void__EnableBuffering_0__3__HttpRequest_i32_i64(&__thrown, request.get_handle(), bufferThreshold, bufferLimit);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HttpRequestRewindExtensions


// type: Microsoft.AspNetCore.Http.MiddlewareFactory
    /**
    
            Default implementation for .
            

    */
open class MiddlewareFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_IMiddlewareFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_MiddlewareFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_MiddlewareFactory_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.MiddlewareFactory.#ctor(System.IServiceProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter serviceProvider: The application services.
    */
    public init(serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_MiddlewareFactory_ctor_0__1__IServiceProvider(&__thrown, serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.IMiddleware Create(System.Type)
// docid: M:Microsoft.AspNetCore.Http.MiddlewareFactory.Create(System.Type)
    /**
    */
    open /* method final */ func Create(middlewareType : dotnet.System.Type_) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IMiddleware> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_MiddlewareFactory_IMiddleware__Create_0__1__Type(&__thrown, self.get_handle(), middlewareType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IMiddleware(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Release(Microsoft.AspNetCore.Http.IMiddleware)
// docid: M:Microsoft.AspNetCore.Http.MiddlewareFactory.Release(Microsoft.AspNetCore.Http.IMiddleware)
    /**
    */
    open /* method final */ func Release(middleware : aspnetcore.Microsoft.AspNetCore.Http.IMiddleware) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_MiddlewareFactory_void__Release_0__1__IMiddleware(&__thrown, self.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MiddlewareFactory


// type: Microsoft.AspNetCore.Http.QueryCollection
    /**
    
            The HttpRequest query string collection
            

    */
open class QueryCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_QueryCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_QueryCollection_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: Microsoft.AspNetCore.Http.QueryCollection Empty
    /**
    
            Gets an empty .
            

    */
    open class var Empty : aspnetcore.Microsoft.AspNetCore.Http.QueryCollection {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.QueryCollection(hndl: Microsoft_AspNetCore_Http_QueryCollection_get_Empty());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_QueryCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues})
    /**
    
            Initializes a new instance of .
            

    - Parameter store: The backing store.
    */
    public init(store : dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_QueryCollection_ctor_0__1__System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, store.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.QueryCollection)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.#ctor(Microsoft.AspNetCore.Http.QueryCollection)
    /**
    
            Creates a shallow copy of the specified .
            

    - Parameter store: The  to clone.
    */
    public init(store : aspnetcore.Microsoft.AspNetCore.Http.QueryCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_QueryCollection_ctor_0__1__QueryCollection(&__thrown, store.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.#ctor(System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter capacity: The initial number of query items that this instance can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_QueryCollection_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.ContainsKey(System.String)
    /**
    
            Determines whether the  contains a specific key.
            

    - Parameter key: The key.
    - Returns: true if the  contains a specific key; otherwise, false.

    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    
            Retrieves a value from the collection.
            

    - Parameter key: The key.
    - Parameter value: The value.
    - Returns: true if the  contains the key; otherwise, false.

    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Http_QueryCollection_bool__TryGetValue_0__2__String_outStringValues(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Http.QueryCollection.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.GetEnumerator
    /**
    
            Returns an enumerator that iterates through a collection.
            

    - Returns: An  object that can be used to iterate through the collection.

    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryCollection_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_QueryCollection_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryCollection_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.get_Item(System.String)
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    /**
    
            Gets the number of elements contained in the ;.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            Gets the collection of query names in this instance.
            

    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
} // QueryCollection


// type: Microsoft.AspNetCore.Http.QueryCollection+Enumerator
// boxed value type
    /**
    
            Enumerates a .
            

    */
public final class QueryCollection_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_QueryCollection_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the element at the current position of the enumerator.
            

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_QueryCollection_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.Enumerator.MoveNext
    /**
    
            Advances the enumerator to the next element of the .
            

    - Returns:  if the enumerator was successfully advanced to the next element;
             if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_QueryCollection_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues> get_Current()
// docid: M:Microsoft.AspNetCore.Http.QueryCollection.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryCollection_Enumerator_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // QueryCollection_Enumerator


// type: Microsoft.AspNetCore.Http.RequestFormReaderExtensions
public struct RequestFormReaderExtensions {
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.Features.FormOptions, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.RequestFormReaderExtensions.ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.Features.FormOptions,System.Threading.CancellationToken)
    /**
    
            Read the request body as a form with the given options. These options will only be used
            if the form has not already been read.
            

    - Parameter request: The request.
    - Parameter options: Options for reading the form.
    - Parameter cancellationToken: 
    - Returns: The parsed form.

    */
    public static func ReadFormAsync(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, options : aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestFormReaderExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Http_IFormCollection___ReadFormAsync_0__3__HttpRequest_FormOptions_CancellationToken(&__thrown, request.get_handle(), options.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // RequestFormReaderExtensions


// type: Microsoft.AspNetCore.Http.SendFileFallback
public struct SendFileFallback {
    // System.Threading.Tasks.Task SendFileAsync(System.IO.Stream, System.String, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.SendFileFallback.SendFileAsync(System.IO.Stream,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Copies the segment of the file to the destination stream.
            

    - Parameter destination: The stream to write the file segment to.
    - Parameter filePath: The full disk path to the file.
    - Parameter offset: The offset in the file to start at.
    - Parameter count: The number of bytes to send, or null to send the remainder of the file.
    - Parameter cancellationToken: A  used to abort the transmission.
    - Returns: 

    */
    public static func SendFileAsync(destination : dotnet.System.IO.Stream, filePath : dotnet.System.String, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SendFileFallback_Task__SendFileAsync_0__5__Stream_String_i64_System_Nullable_i64__CancellationToken(&__thrown, destination.get_handle(), filePath.get_handle(), offset, (count != nil) ? System_Int64_box(count!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // SendFileFallback


// type: Microsoft.AspNetCore.Http.StreamResponseBodyFeature
    /**
    
            An implementation of  that aproximates all of the APIs over the given Stream.
            

    */
open class StreamResponseBodyFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_StreamResponseBodyFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.#ctor(System.IO.Stream)
    /**
    
            Wraps the given stream.
            

    - Parameter stream: 
    */
    public init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature)
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.#ctor(System.IO.Stream,Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature)
    /**
    
            Wraps the given stream and tracks the prior feature instance.
            

    - Parameter stream: 
    - Parameter priorFeature: 
    */
    public init(stream : dotnet.System.IO.Stream, priorFeature : aspnetcore.Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_ctor_0__2__Stream_IHttpResponseBodyFeature(&__thrown, stream.get_handle(), priorFeature.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void DisableBuffering()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.DisableBuffering
    /**
    
            Opts out of write buffering for the response.
            

    */
    open func DisableBuffering() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_StreamResponseBodyFeature_void__DisableBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SendFileAsync(System.String, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.SendFileAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Copies the specified file segment to the given response stream.
            This calls StartAsync if it has not previously been called.
            

    - Parameter path: The full disk path to the file.
    - Parameter offset: The offset in the file to start at.
    - Parameter count: The number of bytes to send, or null to send the remainder of the file.
    - Parameter cancellationToken: A  used to abort the transmission.
    - Returns: 

    */
    open func SendFileAsync(path : dotnet.System.String, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_Task__SendFileAsync_0__4__String_i64_System_Nullable_i64__CancellationToken(&__thrown, self.get_handle(), path.get_handle(), offset, (count != nil) ? System_Int64_box(count!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.StartAsync(System.Threading.CancellationToken)
    /**
    
            Flushes the given stream if this has not previously been called.
            

    - Parameter cancellationToken: 
    - Returns: 

    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task CompleteAsync()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.CompleteAsync
    /**
    
            This calls StartAsync if it has not previously been called.
            It will complete the adapted pipe if it exists.
            

    - Returns: 

    */
    open func CompleteAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_Task__CompleteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.Dispose
    /**
    
            Prevents CompleteAsync from operating.
            

    */
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_StreamResponseBodyFeature_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Stream()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.get_Stream
    open /* method final */ func get_Stream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_Stream__get_Stream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature get_PriorFeature()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.get_PriorFeature
    open func get_PriorFeature() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_IHttpResponseBodyFeature__get_PriorFeature_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.IO.Pipelines.PipeWriter get_Writer()
// docid: M:Microsoft.AspNetCore.Http.StreamResponseBodyFeature.get_Writer
    open /* method final */ func get_Writer() throws -> aspnetcore.System.IO.Pipelines.PipeWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_StreamResponseBodyFeature_PipeWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeWriter(hndl : __return);
        }
    }
    /**
    
            The prior feature, if any.
            

    */
    open var PriorFeature : Optional<aspnetcore.Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature> {
        get {
            return try! get_PriorFeature();
        }
    }
    /**
    
            The original response body stream.
            

    */
    public var Stream : dotnet.System.IO.Stream {
        get {
            return try! get_Stream();
        }
    }
    /**
    
            A PipeWriter adapted over the given stream.
            

    */
    public var Writer : aspnetcore.System.IO.Pipelines.PipeWriter {
        get {
            return try! get_Writer();
        }
    }
} // StreamResponseBodyFeature


}
// Microsoft.AspNetCore.Http.Features
extension Microsoft.AspNetCore.Http.Features {
// type: Microsoft.AspNetCore.Http.Features.DefaultSessionFeature
    /**
    
            This type exists only for the purpose of unit testing where the user can directly set the
             property without the need for creating a .
            

    */
open class DefaultSessionFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_ISessionFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_DefaultSessionFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_DefaultSessionFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.DefaultSessionFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_DefaultSessionFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ISession get_Session()
// docid: M:Microsoft.AspNetCore.Http.Features.DefaultSessionFeature.get_Session
    open /* method final */ func get_Session() throws -> aspnetcore.Microsoft.AspNetCore.Http.ISession {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_DefaultSessionFeature_ISession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Session(Microsoft.AspNetCore.Http.ISession)
// docid: M:Microsoft.AspNetCore.Http.Features.DefaultSessionFeature.set_Session(Microsoft.AspNetCore.Http.ISession)
    open /* method final */ func set_Session(value : aspnetcore.Microsoft.AspNetCore.Http.ISession) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_DefaultSessionFeature_void__set_Session_0__1__ISession(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Session : aspnetcore.Microsoft.AspNetCore.Http.ISession {
        get {
            return try! get_Session();
        }
        set(v) {
            return try! set_Session(value: v);
        }
    }
} // DefaultSessionFeature


// type: Microsoft.AspNetCore.Http.Features.FormFeature
    /**
    
            Default implementation for .
            

    */
open class FormFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IFormFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_FormFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_FormFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.IFormCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.#ctor(Microsoft.AspNetCore.Http.IFormCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter form: The  to use as the backing store.
    */
    public init(form : aspnetcore.Microsoft.AspNetCore.Http.IFormCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FormFeature_ctor_0__1__IFormCollection(&__thrown, form.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.#ctor(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Initializes a new instance of .
            

    - Parameter request: The .
    */
    public init(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FormFeature_ctor_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.Features.FormOptions)
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.#ctor(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.Features.FormOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter request: The .
    - Parameter options: The .
    */
    public init(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, options : aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FormFeature_ctor_0__2__HttpRequest_FormOptions(&__thrown, request.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.IFormCollection ReadForm()
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.ReadForm
    /**
    */
    open /* method final */ func ReadForm() throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormFeature_IFormCollection__ReadForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IFormCollection(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync()
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.ReadFormAsync
    /**
    */
    open func ReadFormAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormFeature_System_Threading_Tasks_Task_Microsoft_AspNetCore_Http_IFormCollection___ReadFormAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.ReadFormAsync(System.Threading.CancellationToken)
    /**
    */
    open /* method final */ func ReadFormAsync(cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormFeature_System_Threading_Tasks_Task_Microsoft_AspNetCore_Http_IFormCollection___ReadFormAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] bool get_HasFormContentType()
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.get_HasFormContentType
    open /* method final */ func get_HasFormContentType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormFeature_bool__get_HasFormContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormCollection get_Form()
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.get_Form
    open /* method final */ func get_Form() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormFeature_IFormCollection__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Form(Microsoft.AspNetCore.Http.IFormCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FormFeature.set_Form(Microsoft.AspNetCore.Http.IFormCollection)
    open /* method final */ func set_Form(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormCollection>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormFeature_void__set_Form_0__1__IFormCollection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Form : Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormCollection> {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v!);
        }
    }
    /**
    */
    public var HasFormContentType : Bool {
        get {
            return try! get_HasFormContentType();
        }
    }
} // FormFeature


// type: Microsoft.AspNetCore.Http.Features.FormOptions
    /**
    
            Options to configure reading the request body as a HTTP form.
            

    */
open class FormOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_FormOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_FormOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.Int32 DefaultMemoryBufferThreshold
    /**
    
            Default value for .
            Defaults to 65,536 bytes‬, which is approximately 64KB.
            

    */
    open class var DefaultMemoryBufferThreshold : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_get_DefaultMemoryBufferThreshold();
            return __return;
        }
    }
    // static field: System.Int32 DefaultBufferBodyLengthLimit
    /**
    
            Default value for .
            Defaults to 134,217,728 bytes‬, which is 128MB.
            

    */
    open class var DefaultBufferBodyLengthLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_get_DefaultBufferBodyLengthLimit();
            return __return;
        }
    }
    // static field: System.Int32 DefaultMultipartBoundaryLengthLimit
    /**
    
            Default value for .
            Defaults to 128 bytes‬.
            

    */
    open class var DefaultMultipartBoundaryLengthLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_get_DefaultMultipartBoundaryLengthLimit();
            return __return;
        }
    }
    // static field: System.Int64 DefaultMultipartBodyLengthLimit
    /**
    
            Default value for .
            Defaults to 134,217,728 bytes‬, which is approximately 128MB.
            

    */
    open class var DefaultMultipartBodyLengthLimit : Swift.Int64 {
        get {
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_get_DefaultMultipartBodyLengthLimit();
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FormOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_BufferBody()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_BufferBody
    open func get_BufferBody() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_bool__get_BufferBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_BufferBody(bool)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_BufferBody(System.Boolean)
    open func set_BufferBody(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_BufferBody_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MemoryBufferThreshold()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_MemoryBufferThreshold
    open func get_MemoryBufferThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_MemoryBufferThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MemoryBufferThreshold(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_MemoryBufferThreshold(System.Int32)
    open func set_MemoryBufferThreshold(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_MemoryBufferThreshold_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_BufferBodyLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_BufferBodyLengthLimit
    open func get_BufferBodyLengthLimit() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i64__get_BufferBodyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BufferBodyLengthLimit(System.Int64)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_BufferBodyLengthLimit(System.Int64)
    open func set_BufferBodyLengthLimit(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_BufferBodyLengthLimit_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCountLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_ValueCountLimit
    open func get_ValueCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_ValueCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_ValueCountLimit(System.Int32)
    open func set_ValueCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_ValueCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_KeyLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_KeyLengthLimit
    open func get_KeyLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_KeyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_KeyLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_KeyLengthLimit(System.Int32)
    open func set_KeyLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_KeyLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_ValueLengthLimit
    open func get_ValueLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_ValueLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_ValueLengthLimit(System.Int32)
    open func set_ValueLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_ValueLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartBoundaryLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_MultipartBoundaryLengthLimit
    open func get_MultipartBoundaryLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_MultipartBoundaryLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartBoundaryLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_MultipartBoundaryLengthLimit(System.Int32)
    open func set_MultipartBoundaryLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_MultipartBoundaryLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartHeadersCountLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_MultipartHeadersCountLimit
    open func get_MultipartHeadersCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_MultipartHeadersCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartHeadersCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_MultipartHeadersCountLimit(System.Int32)
    open func set_MultipartHeadersCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_MultipartHeadersCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartHeadersLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_MultipartHeadersLengthLimit
    open func get_MultipartHeadersLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i32__get_MultipartHeadersLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartHeadersLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_MultipartHeadersLengthLimit(System.Int32)
    open func set_MultipartHeadersLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_MultipartHeadersLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MultipartBodyLengthLimit()
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.get_MultipartBodyLengthLimit
    open func get_MultipartBodyLengthLimit() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FormOptions_i64__get_MultipartBodyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartBodyLengthLimit(System.Int64)
// docid: M:Microsoft.AspNetCore.Http.Features.FormOptions.set_MultipartBodyLengthLimit(System.Int64)
    open func set_MultipartBodyLengthLimit(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FormOptions_void__set_MultipartBodyLengthLimit_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Enables full request body buffering. Use this if multiple components need to read the raw stream.
            Defaults to false.
            

    */
    open var BufferBody : Bool {
        get {
            return try! get_BufferBody();
        }
        set(v) {
            return try! set_BufferBody(value: v);
        }
    }
    /**
    
            If  is enabled, this is the limit for the total number of bytes that will
            be buffered. Forms that exceed this limit will throw an  when parsed.
            Defaults to 134,217,728 bytes‬, which is approximately 128MB.
            

    */
    open var BufferBodyLengthLimit : Swift.Int64 {
        get {
            return try! get_BufferBodyLengthLimit();
        }
        set(v) {
            return try! set_BufferBodyLengthLimit(value: v);
        }
    }
    /**
    
            A limit on the length of individual keys. Forms containing keys that exceed this limit will
            throw an  when parsed.
            Defaults to 2,048 bytes‬, which is approximately 2KB.
            

    */
    open var KeyLengthLimit : Swift.Int32 {
        get {
            return try! get_KeyLengthLimit();
        }
        set(v) {
            return try! set_KeyLengthLimit(value: v);
        }
    }
    /**
    
            If  is enabled, this many bytes of the body will be buffered in memory.
            If this threshold is exceeded then the buffer will be moved to a temp file on disk instead.
            This also applies when buffering individual multipart section bodies.
            Defaults to 65,536 bytes‬, which is approximately 64KB.
            

    */
    open var MemoryBufferThreshold : Swift.Int32 {
        get {
            return try! get_MemoryBufferThreshold();
        }
        set(v) {
            return try! set_MemoryBufferThreshold(value: v);
        }
    }
    /**
    
            A limit for the length of each multipart body. Forms sections that exceed this limit will throw an
             when parsed.
            Defaults to 134,217,728 bytes‬, which is approximately 128MB.
            

    */
    open var MultipartBodyLengthLimit : Swift.Int64 {
        get {
            return try! get_MultipartBodyLengthLimit();
        }
        set(v) {
            return try! set_MultipartBodyLengthLimit(value: v);
        }
    }
    /**
    
            A limit for the length of the boundary identifier. Forms with boundaries that exceed this
            limit will throw an  when parsed.
            Defaults to 128 bytes‬.
            

    */
    open var MultipartBoundaryLengthLimit : Swift.Int32 {
        get {
            return try! get_MultipartBoundaryLengthLimit();
        }
        set(v) {
            return try! set_MultipartBoundaryLengthLimit(value: v);
        }
    }
    /**
    
            A limit for the number of headers to allow in each multipart section. Headers with the same name will
            be combined. Form sections that exceed this limit will throw an 
            when parsed.
            Defaults to 16.
            

    */
    open var MultipartHeadersCountLimit : Swift.Int32 {
        get {
            return try! get_MultipartHeadersCountLimit();
        }
        set(v) {
            return try! set_MultipartHeadersCountLimit(value: v);
        }
    }
    /**
    
            A limit for the total length of the header keys and values in each multipart section.
            Form sections that exceed this limit will throw an  when parsed.
            Defaults to 16,384‬ bytes‬, which is approximately 16KB.
            

    */
    open var MultipartHeadersLengthLimit : Swift.Int32 {
        get {
            return try! get_MultipartHeadersLengthLimit();
        }
        set(v) {
            return try! set_MultipartHeadersLengthLimit(value: v);
        }
    }
    /**
    
            A limit for the number of form entries to allow.
            Forms that exceed this limit will throw an  when parsed.
            Defaults to 1024.
            

    */
    open var ValueCountLimit : Swift.Int32 {
        get {
            return try! get_ValueCountLimit();
        }
        set(v) {
            return try! set_ValueCountLimit(value: v);
        }
    }
    /**
    
            A limit on the length of individual form values. Forms containing values that exceed this
            limit will throw an  when parsed.
            Defaults to 4,194,304 bytes‬, which is approximately 4MB.
            

    */
    open var ValueLengthLimit : Swift.Int32 {
        get {
            return try! get_ValueLengthLimit();
        }
        set(v) {
            return try! set_ValueLengthLimit(value: v);
        }
    }
} // FormOptions


// type: Microsoft.AspNetCore.Http.Features.HttpConnectionFeature
    /**
    
            Default implementation for .
            

    */
open class HttpConnectionFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ConnectionId()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.get_ConnectionId
    open /* method final */ func get_ConnectionId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_String__get_ConnectionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConnectionId(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.set_ConnectionId(System.String)
    open /* method final */ func set_ConnectionId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_void__set_ConnectionId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_LocalIpAddress()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.get_LocalIpAddress
    open /* method final */ func get_LocalIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_IPAddress__get_LocalIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LocalIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.set_LocalIpAddress(System.Net.IPAddress)
    open /* method final */ func set_LocalIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_void__set_LocalIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LocalPort()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.get_LocalPort
    open /* method final */ func get_LocalPort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_i32__get_LocalPort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LocalPort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.set_LocalPort(System.Int32)
    open /* method final */ func set_LocalPort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_void__set_LocalPort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_RemoteIpAddress()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.get_RemoteIpAddress
    open /* method final */ func get_RemoteIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_IPAddress__get_RemoteIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RemoteIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.set_RemoteIpAddress(System.Net.IPAddress)
    open /* method final */ func set_RemoteIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_void__set_RemoteIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RemotePort()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.get_RemotePort
    open /* method final */ func get_RemotePort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_i32__get_RemotePort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_RemotePort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpConnectionFeature.set_RemotePort(System.Int32)
    open /* method final */ func set_RemotePort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpConnectionFeature_void__set_RemotePort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var ConnectionId : dotnet.System.String {
        get {
            return try! get_ConnectionId();
        }
        set(v) {
            return try! set_ConnectionId(value: v);
        }
    }
    /**
    */
    public var LocalIpAddress : Optional<dotnet.System.Net.IPAddress> {
        get {
            return try! get_LocalIpAddress();
        }
        set(v) {
            return try! set_LocalIpAddress(value: v!);
        }
    }
    /**
    */
    public var LocalPort : Swift.Int32 {
        get {
            return try! get_LocalPort();
        }
        set(v) {
            return try! set_LocalPort(value: v);
        }
    }
    /**
    */
    public var RemoteIpAddress : Optional<dotnet.System.Net.IPAddress> {
        get {
            return try! get_RemoteIpAddress();
        }
        set(v) {
            return try! set_RemoteIpAddress(value: v!);
        }
    }
    /**
    */
    public var RemotePort : Swift.Int32 {
        get {
            return try! get_RemotePort();
        }
        set(v) {
            return try! set_RemotePort(value: v);
        }
    }
} // HttpConnectionFeature


// type: Microsoft.AspNetCore.Http.Features.HttpRequestFeature
    /**
    
            Default implementation for .
            

    */
open class HttpRequestFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpRequestFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpRequestFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.#ctor
    /**
    
            Initiaizes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Protocol
    open /* method final */ func get_Protocol() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Protocol(System.String)
    open /* method final */ func set_Protocol(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Scheme()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Scheme
    open /* method final */ func get_Scheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_Scheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Scheme(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Scheme(System.String)
    open /* method final */ func set_Scheme(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Scheme_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Method
    open /* method final */ func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Method(System.String)
    open /* method final */ func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PathBase()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_PathBase
    open /* method final */ func get_PathBase() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_PathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PathBase(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_PathBase(System.String)
    open /* method final */ func set_PathBase(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_PathBase_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Path
    open /* method final */ func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Path(System.String)
    open /* method final */ func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_QueryString()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_QueryString
    open /* method final */ func get_QueryString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_QueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QueryString(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_QueryString(System.String)
    open /* method final */ func set_QueryString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_QueryString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RawTarget()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_RawTarget
    open /* method final */ func get_RawTarget() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_String__get_RawTarget_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RawTarget(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_RawTarget(System.String)
    open /* method final */ func set_RawTarget(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_RawTarget_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Headers
    open /* method final */ func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open /* method final */ func set_Headers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Headers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.get_Body
    open /* method final */ func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestFeature_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestFeature.set_Body(System.IO.Stream)
    open /* method final */ func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestFeature_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Body : dotnet.System.IO.Stream {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    */
    public var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    */
    public var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    */
    public var PathBase : dotnet.System.String {
        get {
            return try! get_PathBase();
        }
        set(v) {
            return try! set_PathBase(value: v);
        }
    }
    /**
    */
    public var Protocol_ : dotnet.System.String {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v);
        }
    }
    /**
    */
    public var QueryString : dotnet.System.String {
        get {
            return try! get_QueryString();
        }
        set(v) {
            return try! set_QueryString(value: v);
        }
    }
    /**
    */
    public var RawTarget : dotnet.System.String {
        get {
            return try! get_RawTarget();
        }
        set(v) {
            return try! set_RawTarget(value: v);
        }
    }
    /**
    */
    public var Scheme : dotnet.System.String {
        get {
            return try! get_Scheme();
        }
        set(v) {
            return try! set_Scheme(value: v);
        }
    }
} // HttpRequestFeature


// type: Microsoft.AspNetCore.Http.Features.HttpRequestIdentifierFeature
    /**
    
            Default implementation for .
            

    */
open class HttpRequestIdentifierFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpRequestIdentifierFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_HttpRequestIdentifierFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestIdentifierFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_HttpRequestIdentifierFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_TraceIdentifier()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestIdentifierFeature.get_TraceIdentifier
    open /* method final */ func get_TraceIdentifier() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestIdentifierFeature_String__get_TraceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceIdentifier(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestIdentifierFeature.set_TraceIdentifier(System.String)
    open /* method final */ func set_TraceIdentifier(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestIdentifierFeature_void__set_TraceIdentifier_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var TraceIdentifier : dotnet.System.String {
        get {
            return try! get_TraceIdentifier();
        }
        set(v) {
            return try! set_TraceIdentifier(value: v);
        }
    }
} // HttpRequestIdentifierFeature


// type: Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature
    /**
    
            Default implementation for .
            

    */
open class HttpRequestLifetimeFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Abort()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature.Abort
    /**
    */
    open /* method final */ func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_RequestAborted()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature.get_RequestAborted
    open /* method final */ func get_RequestAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_CancellationToken__get_RequestAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestAborted(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpRequestLifetimeFeature.set_RequestAborted(System.Threading.CancellationToken)
    open /* method final */ func set_RequestAborted(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpRequestLifetimeFeature_void__set_RequestAborted_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var RequestAborted : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_RequestAborted();
        }
        set(v) {
            return try! set_RequestAborted(value: v);
        }
    }
} // HttpRequestLifetimeFeature


// type: Microsoft.AspNetCore.Http.Features.HttpResponseFeature
    /**
    
            Default implementation for .
            

    */
open class HttpResponseFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IHttpResponseFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpResponseFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnStarting(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.OnStarting(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    */
    open func OnStarting(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__OnStarting_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnStarting(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnStarting(callback: del_callback, state: state);
    }
    // void OnCompleted(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.OnCompleted(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    */
    open func OnCompleted(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__OnCompleted_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnCompleted(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnCompleted(callback: del_callback, state: state);
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.set_StatusCode(System.Int32)
    open /* method final */ func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReasonPhrase()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.get_ReasonPhrase
    open /* method final */ func get_ReasonPhrase() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_String__get_ReasonPhrase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReasonPhrase(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.set_ReasonPhrase(System.String)
    open /* method final */ func set_ReasonPhrase(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__set_ReasonPhrase_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.get_Headers
    open /* method final */ func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open /* method final */ func set_Headers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__set_Headers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.get_Body
    open /* method final */ func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.set_Body(System.IO.Stream)
    open /* method final */ func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_HttpResponseFeature_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasStarted()
// docid: M:Microsoft.AspNetCore.Http.Features.HttpResponseFeature.get_HasStarted
    open func get_HasStarted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_HttpResponseFeature_bool__get_HasStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var Body : dotnet.System.IO.Stream {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    */
    open var HasStarted : Bool {
        get {
            return try! get_HasStarted();
        }
    }
    /**
    */
    public var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    */
    public var ReasonPhrase : Optional<dotnet.System.String> {
        get {
            return try! get_ReasonPhrase();
        }
        set(v) {
            return try! set_ReasonPhrase(value: v!);
        }
    }
    /**
    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
} // HttpResponseFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpActivityFeature
    /**
    
            Feature to access the  associated with a request.
            

    */
open class IHttpActivityFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpActivityFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpActivityFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_IHttpActivityFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] System.Diagnostics.Activity get_Activity()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.get_Activity
    open func get_Activity() throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpActivityFeature_Activity__get_Activity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Activity(System.Diagnostics.Activity)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.set_Activity(System.Diagnostics.Activity)
    open func set_Activity(value : dotnet.System.Diagnostics.Activity) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpActivityFeature_void__set_Activity_0__1__Activity(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpActivityFeature


// type: Microsoft.AspNetCore.Http.Features.ItemsFeature
    /**
    
            Default implementation for .
            

    */
open class ItemsFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IItemsFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ItemsFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_ItemsFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.ItemsFeature.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_ItemsFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Http.Features.ItemsFeature.get_Items
    open /* method final */ func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ItemsFeature_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.Features.ItemsFeature.set_Items(System.Collections.Generic.IDictionary{System.Object,System.Object})
    open /* method final */ func set_Items(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ItemsFeature_void__set_Items_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v);
        }
    }
} // ItemsFeature


// type: Microsoft.AspNetCore.Http.Features.QueryFeature
    /**
    
            Default implementation for .
            

    */
open class QueryFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IQueryFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_QueryFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_QueryFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.IQueryCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.QueryFeature.#ctor(Microsoft.AspNetCore.Http.IQueryCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter query: The  to use as a backing store.
    */
    public init(query : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_QueryFeature_ctor_0__1__IQueryCollection(&__thrown, query.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.QueryFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter features: The  to initialize.
    */
    public init(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_QueryFeature_ctor_0__1__IFeatureCollection(&__thrown, features.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IQueryCollection get_Query()
// docid: M:Microsoft.AspNetCore.Http.Features.QueryFeature.get_Query
    open /* method final */ func get_Query() throws -> aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_QueryFeature_IQueryCollection__get_Query_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.QueryFeature.set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
    open /* method final */ func set_Query(value : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_QueryFeature_void__set_Query_0__1__IQueryCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Query : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection {
        get {
            return try! get_Query();
        }
        set(v) {
            return try! set_Query(value: v);
        }
    }
} // QueryFeature


// type: Microsoft.AspNetCore.Http.Features.RequestBodyPipeFeature
    /**
    
            Default implementation for .
            

    */
open class RequestBodyPipeFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IRequestBodyPipeFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_RequestBodyPipeFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_RequestBodyPipeFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestBodyPipeFeature.#ctor(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: 
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_RequestBodyPipeFeature_ctor_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.Pipelines.PipeReader get_Reader()
// docid: M:Microsoft.AspNetCore.Http.Features.RequestBodyPipeFeature.get_Reader
    open /* method final */ func get_Reader() throws -> aspnetcore.System.IO.Pipelines.PipeReader {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_RequestBodyPipeFeature_PipeReader__get_Reader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeReader(hndl : __return);
        }
    }
    /**
    */
    public var Reader : aspnetcore.System.IO.Pipelines.PipeReader {
        get {
            return try! get_Reader();
        }
    }
} // RequestBodyPipeFeature


// type: Microsoft.AspNetCore.Http.Features.RequestCookiesFeature
    /**
    
            Default implementation for .
            

    */
open class RequestCookiesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.IRequestCookieCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestCookiesFeature.#ctor(Microsoft.AspNetCore.Http.IRequestCookieCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter cookies: The  to use as backing store.
    */
    public init(cookies : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_ctor_0__1__IRequestCookieCollection(&__thrown, cookies.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestCookiesFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter features: The  to initialize.
    */
    public init(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_ctor_0__1__IFeatureCollection(&__thrown, features.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IRequestCookieCollection get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.Features.RequestCookiesFeature.get_Cookies
    open /* method final */ func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_IRequestCookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestCookiesFeature.set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
    open /* method final */ func set_Cookies(value : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_RequestCookiesFeature_void__set_Cookies_0__1__IRequestCookieCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Cookies : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection {
        get {
            return try! get_Cookies();
        }
        set(v) {
            return try! set_Cookies(value: v);
        }
    }
} // RequestCookiesFeature


// type: Microsoft.AspNetCore.Http.Features.RequestServicesFeature
    /**
    
            An implementation for  for accessing request services.
            

    */
open class RequestServicesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature,
    System_IDisposable,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_RequestServicesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_RequestServicesFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestServicesFeature.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The .
    - Parameter scopeFactory: The .
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scopeFactory : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_RequestServicesFeature_ctor_0__2__HttpContext_IServiceScopeFactory(&__thrown, context.get_handle(), scopeFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.Http.Features.RequestServicesFeature.DisposeAsync
    /**
    */
    open /* method final */ func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_RequestServicesFeature_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.Features.RequestServicesFeature.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_RequestServicesFeature_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_RequestServices()
// docid: M:Microsoft.AspNetCore.Http.Features.RequestServicesFeature.get_RequestServices
    open /* method final */ func get_RequestServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_RequestServicesFeature_IServiceProvider__get_RequestServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.Features.RequestServicesFeature.set_RequestServices(System.IServiceProvider)
    open /* method final */ func set_RequestServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_RequestServicesFeature_void__set_RequestServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var RequestServices : dotnet.System.IServiceProvider {
        get {
            return try! get_RequestServices();
        }
        set(v) {
            return try! set_RequestServices(value: v);
        }
    }
} // RequestServicesFeature


// type: Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature
    /**
    
            Default implementation of .
            

    */
open class ResponseCookiesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IResponseCookiesFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ResponseCookiesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_ResponseCookiesFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new  instance.
            

    - Parameter features: 
             containing all defined features, including this
             and the .
            
    */
    public init(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_ResponseCookiesFeature_ctor_0__1__IFeatureCollection(&__thrown, features.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection, Microsoft.Extensions.ObjectPool.ObjectPool<System.Text.StringBuilder>)
// docid: M:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection,Microsoft.Extensions.ObjectPool.ObjectPool{System.Text.StringBuilder})
    /**
    
            Initializes a new  instance.
            

    - Parameter features: 
             containing all defined features, including this
             and the .
            
    - Parameter builderPool: The , if available.
    */
    public init(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection, builderPool : Optional<aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<dotnet.System.Text.StringBuilder>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_ResponseCookiesFeature_ctor_0__2__IFeatureCollection_Microsoft_Extensions_ObjectPool_ObjectPool_System_Text_StringBuilder_(&__thrown, features.get_handle(), (builderPool?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IResponseCookies get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.Features.ResponseCookiesFeature.get_Cookies
    open /* method final */ func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ResponseCookiesFeature_IResponseCookies__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies(hndl : __return);
        }
    }
    /**
    */
    public var Cookies : aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies {
        get {
            return try! get_Cookies();
        }
    }
} // ResponseCookiesFeature


// type: Microsoft.AspNetCore.Http.Features.RouteValuesFeature
    /**
    
            A feature for routing values. Use 
            to access the values associated with the current request.
            

    */
open class RouteValuesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IRouteValuesFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_RouteValuesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_RouteValuesFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.RouteValuesFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_RouteValuesFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Http.Features.RouteValuesFeature.get_RouteValues
    open /* method final */ func get_RouteValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_RouteValuesFeature_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.RouteValuesFeature.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open /* method final */ func set_RouteValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_RouteValuesFeature_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  associated with the currrent
            request.
            

    */
    public var RouteValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v);
        }
    }
} // RouteValuesFeature


// type: Microsoft.AspNetCore.Http.Features.ServiceProvidersFeature
    /**
    
            Default implementation for .
            

    */
open class ServiceProvidersFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ServiceProvidersFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_ServiceProvidersFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.ServiceProvidersFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_ServiceProvidersFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_RequestServices()
// docid: M:Microsoft.AspNetCore.Http.Features.ServiceProvidersFeature.get_RequestServices
    open /* method final */ func get_RequestServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ServiceProvidersFeature_IServiceProvider__get_RequestServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.Features.ServiceProvidersFeature.set_RequestServices(System.IServiceProvider)
    open /* method final */ func set_RequestServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ServiceProvidersFeature_void__set_RequestServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var RequestServices : dotnet.System.IServiceProvider {
        get {
            return try! get_RequestServices();
        }
        set(v) {
            return try! set_RequestServices(value: v);
        }
    }
} // ServiceProvidersFeature


// type: Microsoft.AspNetCore.Http.Features.TlsConnectionFeature
    /**
    
            Default implementation for .
            

    */
open class TlsConnectionFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.TlsConnectionFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.TlsConnectionFeature.GetClientCertificateAsync(System.Threading.CancellationToken)
    /**
    */
    open /* method final */ func GetClientCertificateAsync(cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_System_Threading_Tasks_Task_System_Security_Cryptography_X509Certificates_X509Certificate2___GetClientCertificateAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509Certificate2 get_ClientCertificate()
// docid: M:Microsoft.AspNetCore.Http.Features.TlsConnectionFeature.get_ClientCertificate
    open /* method final */ func get_ClientCertificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_X509Certificate2__get_ClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
// docid: M:Microsoft.AspNetCore.Http.Features.TlsConnectionFeature.set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
    open /* method final */ func set_ClientCertificate(value : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_TlsConnectionFeature_void__set_ClientCertificate_0__1__X509Certificate2(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var ClientCertificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        get {
            return try! get_ClientCertificate();
        }
        set(v) {
            return try! set_ClientCertificate(value: v!);
        }
    }
} // TlsConnectionFeature


}
// Microsoft.AspNetCore.Http.Features.Authentication
extension Microsoft.AspNetCore.Http.Features.Authentication {
// type: Microsoft.AspNetCore.Http.Features.Authentication.HttpAuthenticationFeature
    /**
    
            Default implementation for .
            

    */
open class HttpAuthenticationFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_Authentication_HttpAuthenticationFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Http_Features_Authentication_HttpAuthenticationFeature_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.Authentication.HttpAuthenticationFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_Authentication_HttpAuthenticationFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Http.Features.Authentication.HttpAuthenticationFeature.get_User
    open /* method final */ func get_User() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_Authentication_HttpAuthenticationFeature_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_User(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Http.Features.Authentication.HttpAuthenticationFeature.set_User(System.Security.Claims.ClaimsPrincipal)
    open /* method final */ func set_User(value : Optional<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_Authentication_HttpAuthenticationFeature_void__set_User_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var User : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_User();
        }
        set(v) {
            return try! set_User(value: v!);
        }
    }
} // HttpAuthenticationFeature


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions
public struct HttpServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpContextAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions.AddHttpContextAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds a default implementation for the  service.
            

    - Parameter services: The .
    - Returns: The service collection.

    */
    public static func AddHttpContextAccessor(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpServiceCollectionExtensions_IServiceCollection__AddHttpContextAccessor_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
} // HttpServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Http_Features_IHttpActivityFeature
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func EnableBuffering() throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(request: self);
    }
}

// EXTENSION METHOD void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func EnableBuffering(bufferThreshold : Swift.Int32) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(request: self, bufferThreshold: bufferThreshold);
    }
}

// EXTENSION METHOD void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int64)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func EnableBuffering(bufferLimit : Swift.Int64) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(request: self, bufferLimit: bufferLimit);
    }
}

// EXTENSION METHOD void EnableBuffering(Microsoft.AspNetCore.Http.HttpRequest, System.Int32, System.Int64)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func EnableBuffering(bufferThreshold : Swift.Int32, bufferLimit : Swift.Int64) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestRewindExtensions.EnableBuffering(request: self, bufferThreshold: bufferThreshold, bufferLimit: bufferLimit);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest, Microsoft.AspNetCore.Http.Features.FormOptions, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func ReadFormAsync(options : aspnetcore.Microsoft.AspNetCore.Http.Features.FormOptions, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        return try await aspnetcore.Microsoft.AspNetCore.Http.RequestFormReaderExtensions.ReadFormAsync(request: self, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpContextAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpContextAccessor() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpServiceCollectionExtensions.AddHttpContextAccessor(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

