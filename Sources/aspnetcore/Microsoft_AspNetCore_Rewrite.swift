// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.RewriteBuilderExtensions
public struct RewriteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Checks if a given Url matches rules and conditions, and modifies the HttpContext on match.
            

    - Parameter app: The 
    - Returns: 

    */
    public static func UseRewriter(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RewriteBuilderExtensions_IApplicationBuilder__UseRewriter_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Checks if a given Url matches rules and conditions, and modifies the HttpContext on match.
            

    - Parameter app: The 
    - Parameter options: Options for rewrite.
    - Returns: 

    */
    public static func UseRewriter(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RewriteBuilderExtensions_IApplicationBuilder__UseRewriter_0__2__IApplicationBuilder_RewriteOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // RewriteBuilderExtensions


}

// Microsoft.AspNetCore.Rewrite
extension Microsoft.AspNetCore.Rewrite {
// type: Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions
public struct ApacheModRewriteOptionsExtensions {
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.Extensions.FileProviders.IFileProvider, System.String)
// docid: M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String)
    /**
    
            Add rules from an Apache mod_rewrite file
            

    - Parameter options: The 
    - Parameter fileProvider: The  
    - Parameter filePath: The path to the file containing mod_rewrite rules.
    */
    public static func AddApacheModRewrite(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, fileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider, filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_ApacheModRewriteOptionsExtensions_RewriteOptions__AddApacheModRewrite_0__3__RewriteOptions_IFileProvider_String(&__thrown, options.get_handle(), fileProvider.get_handle(), filePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.IO.TextReader)
// docid: M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader)
    /**
    
            Add rules from an Apache mod_rewrite file
            

    - Parameter options: The 
    - Parameter reader: A stream of mod_rewrite rules.
    */
    public static func AddApacheModRewrite(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, reader : dotnet.System.IO.TextReader) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_ApacheModRewriteOptionsExtensions_RewriteOptions__AddApacheModRewrite_0__2__RewriteOptions_TextReader(&__thrown, options.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
} // ApacheModRewriteOptionsExtensions


// type: Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions
public struct IISUrlRewriteOptionsExtensions {
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool)
// docid: M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean)
    /**
    
            Add rules from a IIS config file containing Url Rewrite rules
            

    - Parameter options: The 
    - Parameter fileProvider: The  
    - Parameter filePath: The path to the file containing UrlRewrite rules.
    - Parameter alwaysUseManagedServerVariables: Server variables are by default sourced from the server if it supports the  feature. Use true to disable that behavior
    */
    public static func AddIISUrlRewrite(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, fileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider, filePath : dotnet.System.String, alwaysUseManagedServerVariables : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_IISUrlRewriteOptionsExtensions_RewriteOptions__AddIISUrlRewrite_0__4__RewriteOptions_IFileProvider_String_bool(&__thrown, options.get_handle(), fileProvider.get_handle(), filePath.get_handle(), Swift.Int32(alwaysUseManagedServerVariables ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.IO.TextReader, bool)
// docid: M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader,System.Boolean)
    /**
    
            Add rules from a IIS config file containing Url Rewrite rules
            

    - Parameter options: The 
    - Parameter reader: The text reader stream.
    - Parameter alwaysUseManagedServerVariables: Server variables are by default sourced from the server if it supports the  feature. Use true to disable that behavior
    */
    public static func AddIISUrlRewrite(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, reader : dotnet.System.IO.TextReader, alwaysUseManagedServerVariables : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_IISUrlRewriteOptionsExtensions_RewriteOptions__AddIISUrlRewrite_0__3__RewriteOptions_TextReader_bool(&__thrown, options.get_handle(), reader.get_handle(), Swift.Int32(alwaysUseManagedServerVariables ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
} // IISUrlRewriteOptionsExtensions


// type: Microsoft.AspNetCore.Rewrite.IRule
    /**
    
            Represents a rule.
            

    */
open class IRule
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Rewrite_IRule
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Rewrite_IRule_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Rewrite_IRule_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void ApplyRule(Microsoft.AspNetCore.Rewrite.RewriteContext)
// docid: M:Microsoft.AspNetCore.Rewrite.IRule.ApplyRule(Microsoft.AspNetCore.Rewrite.RewriteContext)
    /**
    
            Applies the rule.
            Implementations of ApplyRule should set the value for 
            (defaults to RuleResult.ContinueRules)
            

    - Parameter context: 
    */
    open func ApplyRule(context : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_IRule_void__ApplyRule_0__1__RewriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRule


// type: Microsoft.AspNetCore.Rewrite.RewriteContext
    /**
    
            A context object for 
            

    */
open class RewriteContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Rewrite_RewriteContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Rewrite_RewriteContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Rewrite_RewriteContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
    open func set_HttpContext(value : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_RewriteContext_void__set_HttpContext_0__1__HttpContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_StaticFileProvider()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.get_StaticFileProvider
    open func get_StaticFileProvider() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteContext_IFileProvider__get_StaticFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StaticFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.set_StaticFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_StaticFileProvider(value : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_RewriteContext_void__set_StaticFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.ILogger get_Logger()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.get_Logger
    open func get_Logger() throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteContext_ILogger__get_Logger_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Logger(Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.set_Logger(Microsoft.Extensions.Logging.ILogger)
    open func set_Logger(value : aspnetcore.Microsoft.Extensions.Logging.ILogger) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_RewriteContext_void__set_Logger_0__1__ILogger(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Rewrite.RuleResult get_Result()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteContext_RuleResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult(val: __return);
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Rewrite.RuleResult)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteContext.set_Result(Microsoft.AspNetCore.Rewrite.RuleResult)
    open func set_Result(value : aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_RewriteContext_void__set_Result_0__1__RuleResult(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets and sets the 
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
        set(v) {
            return try! set_HttpContext(value: v);
        }
    }
    /**
    
            Gets and sets the logger
            

    */
    open var Logger : aspnetcore.Microsoft.Extensions.Logging.ILogger {
        get {
            return try! get_Logger();
        }
        set(v) {
            return try! set_Logger(value: v);
        }
    }
    /**
    
            A shared result that is set appropriately by each rule for the next action that
            should be taken. See 
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v);
        }
    }
    /**
    
            Gets and sets the File Provider for file and directory checks.
            

    */
    open var StaticFileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        get {
            return try! get_StaticFileProvider();
        }
        set(v) {
            return try! set_StaticFileProvider(value: v);
        }
    }
} // RewriteContext


// type: Microsoft.AspNetCore.Rewrite.RewriteMiddleware
    /**
    
            Represents a middleware that rewrites urls
            

    */
open class RewriteMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Rewrite_RewriteMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Rewrite_RewriteMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Rewrite.RewriteOptions>)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Rewrite.RewriteOptions})
    /**
    
            Creates a new instance of 
            

    - Parameter next: The delegate representing the next middleware in the request pipeline.
    - Parameter hostingEnvironment: The Hosting Environment.
    - Parameter loggerFactory: The Logger Factory.
    - Parameter options: The middleware options, containing the rules to apply.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Rewrite_RewriteMiddleware_ctor_0__4__RequestDelegate_IWebHostEnvironment_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Rewrite_RewriteOptions_(&__thrown, next.get_handle(), hostingEnvironment.get_handle(), loggerFactory.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RewriteMiddleware


// type: Microsoft.AspNetCore.Rewrite.RewriteOptions
    /**
    
            Options for the 
            

    */
open class RewriteOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Rewrite_RewriteOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Rewrite_RewriteOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Rewrite_RewriteOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Rewrite.IRule> get_Rules()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptions.get_Rules
    open func get_Rules() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Rewrite.IRule> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Rewrite_IRule___get_Rules_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_StaticFileProvider()
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptions.get_StaticFileProvider
    open func get_StaticFileProvider() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptions_IFileProvider__get_StaticFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StaticFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptions.set_StaticFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_StaticFileProvider(value : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Rewrite_RewriteOptions_void__set_StaticFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            A list of  that will be applied in order upon a request.
            

    */
    open var Rules : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Rewrite.IRule> {
        get {
            return try! get_Rules();
        }
    }
    /**
    
            Gets and sets the File Provider for file and directory checks.
            

    */
    open var StaticFileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        get {
            return try! get_StaticFileProvider();
        }
        set(v) {
            return try! set_StaticFileProvider(value: v);
        }
    }
} // RewriteOptions


// type: Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions
public struct RewriteOptionsExtensions {
    // Microsoft.AspNetCore.Rewrite.RewriteOptions Add(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.AspNetCore.Rewrite.IRule)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.AspNetCore.Rewrite.IRule)
    /**
    
            Adds a rule to the current rules.
            

    - Parameter options: The .
    - Parameter rule: A rule to be added to the current rules.
    - Returns: The Rewrite options.

    */
    public static func Add(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, rule : aspnetcore.Microsoft.AspNetCore.Rewrite.IRule) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__Add_0__2__RewriteOptions_IRule(&__thrown, options.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions Add(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Action<Microsoft.AspNetCore.Rewrite.RewriteContext>)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Action{Microsoft.AspNetCore.Rewrite.RewriteContext})
    /**
    
            Adds a rule to the current rules.
            

    - Parameter options: The .
    - Parameter applyRule: A Func that checks and applies the rule.
    - Returns: 

    */
    public static func Add(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, applyRule : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__Add_0__2__RewriteOptions_System_Action_Microsoft_AspNetCore_Rewrite_RewriteContext_(&__thrown, options.get_handle(), applyRule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Add(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, applyRule : @escaping (aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        let del_applyRule = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext>(applyRule);
        return try Add(options: options, applyRule: del_applyRule);
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Boolean)
    /**
    
            Adds a rule that rewrites the path if the regex matches the HttpContext's PathString.
            

    - Parameter options: The .
    - Parameter regex: The regex string to compare with.
    - Parameter replacement: If the regex matches, what to replace the uri with.
    - Parameter skipRemainingRules: If the regex matches, conditionally stop processing other rules.
    - Returns: The Rewrite options.

    */
    public static func AddRewrite(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, regex : dotnet.System.String, replacement : dotnet.System.String, skipRemainingRules : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRewrite_0__4__RewriteOptions_String_String_bool(&__thrown, options.get_handle(), regex.get_handle(), replacement.get_handle(), Swift.Int32(skipRemainingRules ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String)
    /**
    
            Redirect the request if the regex matches the HttpContext's PathString
            

    - Parameter options: The .
    - Parameter regex: The regex string to compare with.
    - Parameter replacement: If the regex matches, what to replace the uri with.
    - Returns: The Rewrite options.

    */
    public static func AddRedirect(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, regex : dotnet.System.String, replacement : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirect_0__3__RewriteOptions_String_String(&__thrown, options.get_handle(), regex.get_handle(), replacement.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Int32)
    /**
    
            Redirect the request if the regex matches the HttpContext's PathString
            

    - Parameter options: The .
    - Parameter regex: The regex string to compare with.
    - Parameter replacement: If the regex matches, what to replace the uri with.
    - Parameter statusCode: The status code to add to the response.
    - Returns: The Rewrite options.

    */
    public static func AddRedirect(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, regex : dotnet.System.String, replacement : dotnet.System.String, statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirect_0__4__RewriteOptions_String_String_i32(&__thrown, options.get_handle(), regex.get_handle(), replacement.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttpsPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttpsPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Redirect a request to https if the incoming request is http, with returning a 301
            status code for permanently redirected.
            

    - Parameter options: The .
    - Returns: 

    */
    public static func AddRedirectToHttpsPermanent(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToHttpsPermanent_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Redirect a request to https if the incoming request is http
            

    - Parameter options: The .
    */
    public static func AddRedirectToHttps(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToHttps_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32)
    /**
    
            Redirect a request to https if the incoming request is http
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    */
    public static func AddRedirectToHttps(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToHttps_0__2__RewriteOptions_i32(&__thrown, options.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32,System.Nullable{System.Int32})
    /**
    
            Redirect a request to https if the incoming request is http
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    - Parameter sslPort: The SSL port to add to the response.
    */
    public static func AddRedirectToHttps(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32, sslPort : Optional<Swift.Int32>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToHttps_0__3__RewriteOptions_i32_System_Nullable_i32_(&__thrown, options.get_handle(), statusCode, (sslPort != nil) ? System_Int32_box(sslPort!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Permanently redirects the request to the www subdomain if the request is non-www.
            

    - Parameter options: The .
    - Returns: 

    */
    public static func AddRedirectToWwwPermanent(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWwwPermanent_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String[])
    /**
    
            Permanently redirects the request to the www subdomain if the request is non-www.
            

    - Parameter options: The .
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    - Returns: 

    */
    public static func AddRedirectToWwwPermanent(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWwwPermanent_0__2__RewriteOptions_StringArray(&__thrown, options.get_handle(), domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Redirect the request to the www subdomain if the incoming request is non-www.
            

    - Parameter options: The .
    */
    public static func AddRedirectToWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWww_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String[])
    /**
    
            Redirect the request to the www subdomain if the incoming request is non-www.
            

    - Parameter options: The .
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    */
    public static func AddRedirectToWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWww_0__2__RewriteOptions_StringArray(&__thrown, options.get_handle(), domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32)
    /**
    
            Redirect the request to the www subdomain if the incoming request is non-www.
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    */
    public static func AddRedirectToWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWww_0__2__RewriteOptions_i32(&__thrown, options.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32,System.String[])
    /**
    
            Redirect the request to the www subdomain if the incoming request is non-www.
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    */
    public static func AddRedirectToWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToWww_0__3__RewriteOptions_i32_StringArray(&__thrown, options.get_handle(), statusCode, domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Permanently redirects the request to the root domain if the request is from the www subdomain.
            

    - Parameter options: The .
    - Returns: 

    */
    public static func AddRedirectToNonWwwPermanent(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWwwPermanent_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String[])
    /**
    
            Permanently redirects the request to the root domain if the request is from the www subdomain.
            

    - Parameter options: The .
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    - Returns: 

    */
    public static func AddRedirectToNonWwwPermanent(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWwwPermanent_0__2__RewriteOptions_StringArray(&__thrown, options.get_handle(), domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
    /**
    
            Redirect the request to the root domain if the incoming request is from the www subdomain.
            

    - Parameter options: The .
    */
    public static func AddRedirectToNonWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWww_0__1__RewriteOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String[])
    /**
    
            Redirect the request to the root domain if the incoming request is from the www subdomain.
            

    - Parameter options: The .
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    */
    public static func AddRedirectToNonWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWww_0__2__RewriteOptions_StringArray(&__thrown, options.get_handle(), domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32)
    /**
    
            Redirect the request to the root domain if the incoming request is from the www subdomain.
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    */
    public static func AddRedirectToNonWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWww_0__2__RewriteOptions_i32(&__thrown, options.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.String[])
// docid: M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32,System.String[])
    /**
    
            Redirect the request to the root domain if the incoming request is from the www subdomain.
            

    - Parameter options: The .
    - Parameter statusCode: The status code to add to the response.
    - Parameter domains: Limit the rule to apply only on the specified domain(s).
    */
    public static func AddRedirectToNonWww(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions, statusCode : Swift.Int32, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Rewrite_RewriteOptionsExtensions_RewriteOptions__AddRedirectToNonWww_0__3__RewriteOptions_i32_StringArray(&__thrown, options.get_handle(), statusCode, domains.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions(hndl : __return);
        }
    }
} // RewriteOptionsExtensions


// type: Microsoft.AspNetCore.Rewrite.RuleResult
    /**
    
            An enum representing the result of a rule.
            

    */
public struct RuleResult : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Rewrite_RuleResult_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Rewrite.RuleResult ContinueRules
    /**
    
            Default value, continue applying rules.
            

    */
    public static var ContinueRules : aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult(val: Microsoft_AspNetCore_Rewrite_RuleResult_get_ContinueRules());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Rewrite.RuleResult EndResponse
    /**
    
             The rule ended the request by providing a response.
             

    */
    public static var EndResponse : aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult(val: Microsoft_AspNetCore_Rewrite_RuleResult_get_EndResponse());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Rewrite.RuleResult SkipRemainingRules
    /**
    
            Stop applying rules and send context to the next middleware
            

    */
    public static var SkipRemainingRules : aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Rewrite.RuleResult(val: Microsoft_AspNetCore_Rewrite_RuleResult_get_SkipRemainingRules());
            return __return;
        }
    }
} // RuleResult


}



public protocol Microsoft_AspNetCore_Rewrite_IRule
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRewriter() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRewriter(options : aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.Extensions.FileProviders.IFileProvider, System.String)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddApacheModRewrite(fileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider, filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(options: self, fileProvider: fileProvider, filePath: filePath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.IO.TextReader)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddApacheModRewrite(reader : dotnet.System.IO.TextReader) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(options: self, reader: reader);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddIISUrlRewrite(fileProvider : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider, filePath : dotnet.System.String, alwaysUseManagedServerVariables : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(options: self, fileProvider: fileProvider, filePath: filePath, alwaysUseManagedServerVariables: alwaysUseManagedServerVariables);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.IO.TextReader, bool)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddIISUrlRewrite(reader : dotnet.System.IO.TextReader, alwaysUseManagedServerVariables : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(options: self, reader: reader, alwaysUseManagedServerVariables: alwaysUseManagedServerVariables);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions Add(Microsoft.AspNetCore.Rewrite.RewriteOptions, Microsoft.AspNetCore.Rewrite.IRule)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func Add(rule : aspnetcore.Microsoft.AspNetCore.Rewrite.IRule) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(options: self, rule: rule);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions Add(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Action<Microsoft.AspNetCore.Rewrite.RewriteContext>)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func Add(applyRule : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(options: self, applyRule: applyRule);
    }
    // delegate closure overload
    public func Add(applyRule : @escaping (aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        let del_applyRule = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteContext>(applyRule);
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(options: self, applyRule: del_applyRule);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String, bool)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRewrite(regex : dotnet.System.String, replacement : dotnet.System.String, skipRemainingRules : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRewrite(options: self, regex: regex, replacement: replacement, skipRemainingRules: skipRemainingRules);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirect(regex : dotnet.System.String, replacement : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(options: self, regex: regex, replacement: replacement);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String, System.String, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirect(regex : dotnet.System.String, replacement : dotnet.System.String, statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(options: self, regex: regex, replacement: replacement, statusCode: statusCode);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttpsPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToHttpsPermanent() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttpsPermanent(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToHttps() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToHttps(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(options: self, statusCode: statusCode);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.Nullable<System.Int32>)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToHttps(statusCode : Swift.Int32, sslPort : Optional<Swift.Int32>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(options: self, statusCode: statusCode, sslPort: sslPort);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWwwPermanent() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWwwPermanent(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWwwPermanent(domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWwwPermanent(options: self, domains: domains);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWww() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWww(domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(options: self, domains: domains);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWww(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(options: self, statusCode: statusCode);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToWww(statusCode : Swift.Int32, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToWww(options: self, statusCode: statusCode, domains: domains);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWwwPermanent() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWwwPermanent(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWwwPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWwwPermanent(domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWwwPermanent(options: self, domains: domains);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWww() throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(options: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWww(domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(options: self, domains: domains);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWww(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(options: self, statusCode: statusCode);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToNonWww(Microsoft.AspNetCore.Rewrite.RewriteOptions, System.Int32, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
    public func AddRedirectToNonWww(statusCode : Swift.Int32, domains : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptions {
        return try aspnetcore.Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToNonWww(options: self, statusCode: statusCode, domains: domains);
    }
}

