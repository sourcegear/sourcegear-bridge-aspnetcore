// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Html
extension Microsoft.AspNetCore.Html {
// type: Microsoft.AspNetCore.Html.HtmlContentBuilder
    /**
    
            An  implementation using an in memory list.
            

    */
open class HtmlContentBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContentBuilder,
    Microsoft_AspNetCore_Html_IHtmlContentContainer,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_HtmlContentBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_HtmlContentBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlContentBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.#ctor(System.Int32)
    /**
    
            Creates a new  with the given initial capacity.
            

    - Parameter capacity: The initial capacity of the backing store.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlContentBuilder_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.Object>)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.#ctor(System.Collections.Generic.IList{System.Object})
    /**
    
            Creates a new  with the given list of entries.
            

    - Parameter entries: 
            The list of entries. The  will use this list without making a copy.
            
    */
    public init(entries : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlContentBuilder_ctor_0__1__System_Collections_Generic_IList_object_(&__thrown, entries.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder Append(System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.Append(System.String)
    /**
    */
    open /* method final */ func Append(unencoded : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilder_IHtmlContentBuilder__Append_0__1__String(&__thrown, self.get_handle(), unencoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    */
    open /* method final */ func AppendHtml(htmlContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilder_IHtmlContentBuilder__AppendHtml_0__1__IHtmlContent(&__thrown, self.get_handle(), htmlContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtml(System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.AppendHtml(System.String)
    /**
    */
    open /* method final */ func AppendHtml(encoded : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilder_IHtmlContentBuilder__AppendHtml_0__1__String(&__thrown, self.get_handle(), encoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder Clear()
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.Clear
    /**
    */
    open /* method final */ func Clear() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilder_IHtmlContentBuilder__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // void CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open /* method final */ func CopyTo(destination : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_HtmlContentBuilder_void__CopyTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open /* method final */ func MoveTo(destination : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_HtmlContentBuilder_void__MoveTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_HtmlContentBuilder_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilder.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilder_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the number of elements in the .
            

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // HtmlContentBuilder


// type: Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions
public struct HtmlContentBuilderExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String,System.Object[])
    /**
    
            Appends the specified  to the existing content after replacing each format
            item with the HTML encoded  representation of the corresponding item in the
             array.
            

    - Parameter builder: The .
    - Parameter format: 
            The composite format  (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            The format string is assumed to be HTML encoded as-provided, and no further encoding will be performed.
            
    - Parameter args: 
            The object array to format. Each element in the array will be formatted and then HTML encoded.
            
    - Returns: A reference to this instance after the append operation has completed.

    */
    public static func AppendFormat(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendFormat_0__3__IHtmlContentBuilder_String_ObjectArray(&__thrown, builder.get_handle(), format.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.IFormatProvider, System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.IFormatProvider,System.String,System.Object[])
    /**
    
            Appends the specified  to the existing content with information from the
             after replacing each format item with the HTML encoded
             representation of the corresponding item in the  array.
            

    - Parameter builder: The .
    - Parameter formatProvider: An object that supplies culture-specific formatting information.
    - Parameter format: 
            The composite format  (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            The format string is assumed to be HTML encoded as-provided, and no further encoding will be performed.
            
    - Parameter args: 
            The object array to format. Each element in the array will be formatted and then HTML encoded.
            
    - Returns: A reference to this instance after the append operation has completed.

    */
    public static func AppendFormat(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, formatProvider : dotnet.System.IFormatProvider, format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendFormat_0__4__IHtmlContentBuilder_IFormatProvider_String_ObjectArray(&__thrown, builder.get_handle(), formatProvider.get_handle(), format.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    
            Appends an .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AppendLine(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendLine_0__1__IHtmlContentBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)
    /**
    
            Appends an  after appending the  value.
            The value is treated as unencoded as-provided, and will be HTML encoded before writing to output.
            

    - Parameter builder: The .
    - Parameter unencoded: The  to append.
    - Returns: The .

    */
    public static func AppendLine(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, unencoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendLine_0__2__IHtmlContentBuilder_String(&__thrown, builder.get_handle(), unencoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Appends an  after appending the  value.
            

    - Parameter builder: The .
    - Parameter content: The  to append.
    - Returns: The .

    */
    public static func AppendLine(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, content : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendLine_0__2__IHtmlContentBuilder_IHtmlContent(&__thrown, builder.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtmlLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendHtmlLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)
    /**
    
            Appends an  after appending the  value.
            The value is treated as HTML encoded as-provided, and no further encoding will be performed.
            

    - Parameter builder: The .
    - Parameter encoded: The HTML encoded  to append.
    - Returns: The .

    */
    public static func AppendHtmlLine(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, encoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__AppendHtmlLine_0__2__IHtmlContentBuilder_String(&__thrown, builder.get_handle(), encoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder SetContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)
    /**
    
            Sets the content to the  value. The value is treated as unencoded as-provided,
            and will be HTML encoded before writing to output.
            

    - Parameter builder: The .
    - Parameter unencoded: The  value that replaces the content.
    - Returns: The .

    */
    public static func SetContent(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, unencoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__SetContent_0__2__IHtmlContentBuilder_String(&__thrown, builder.get_handle(), unencoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Sets the content to the  value.
            

    - Parameter builder: The .
    - Parameter content: The  value that replaces the content.
    - Returns: The .

    */
    public static func SetHtmlContent(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, content : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__SetHtmlContent_0__2__IHtmlContentBuilder_IHtmlContent(&__thrown, builder.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)
    /**
    
            Sets the content to the  value. The value is treated as HTML encoded as-provided, and
            no further encoding will be performed.
            

    - Parameter builder: The .
    - Parameter encoded: The HTML encoded  that replaces the content.
    - Returns: The .

    */
    public static func SetHtmlContent(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder, encoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlContentBuilderExtensions_IHtmlContentBuilder__SetHtmlContent_0__2__IHtmlContentBuilder_String(&__thrown, builder.get_handle(), encoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
} // HtmlContentBuilderExtensions


// type: Microsoft.AspNetCore.Html.HtmlFormattableString
    /**
    
            An  implementation of composite string formatting
            (see https://msdn.microsoft.com/en-us/library/txafckwd(v=vs.110).aspx) which HTML encodes
            formatted arguments.
            

    */
open class HtmlFormattableString
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_HtmlFormattableString_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_HtmlFormattableString_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Html.HtmlFormattableString.#ctor(System.String,System.Object[])
    /**
    
            Creates a new  with the given  and
            .
            

    - Parameter format: A composite format string.
    - Parameter args: An array that contains objects to format.
    */
    public init(format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlFormattableString_ctor_0__2__String_ObjectArray(&__thrown, format.get_handle(), args.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IFormatProvider, System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Html.HtmlFormattableString.#ctor(System.IFormatProvider,System.String,System.Object[])
    /**
    
            Creates a new  with the given ,
             and .
            

    - Parameter formatProvider: An object that provides culture-specific formatting information.
    - Parameter format: A composite format string.
    - Parameter args: An array that contains objects to format.
    */
    public init(formatProvider : Optional<dotnet.System.IFormatProvider>, format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlFormattableString_ctor_0__3__IFormatProvider_String_ObjectArray(&__thrown, formatProvider?.get_handle() ?? nil, format.get_handle(), args.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Html.HtmlFormattableString.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_HtmlFormattableString_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HtmlFormattableString


// type: Microsoft.AspNetCore.Html.HtmlString
    /**
    
            An  implementation that wraps an HTML encoded .
            

    */
open class HtmlString
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_HtmlString_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_HtmlString_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: Microsoft.AspNetCore.Html.HtmlString NewLine
    /**
    
            An  instance for .
            

    */
    open class var NewLine : aspnetcore.Microsoft.AspNetCore.Html.HtmlString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl: Microsoft_AspNetCore_Html_HtmlString_get_NewLine());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Html.HtmlString Empty
    /**
    
            An  instance for .
            

    */
    open class var Empty : aspnetcore.Microsoft.AspNetCore.Html.HtmlString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl: Microsoft_AspNetCore_Html_HtmlString_get_Empty());
            return __return;
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Html.HtmlString.#ctor(System.String)
    /**
    
            Creates a new .
            

    - Parameter value: The HTML encoded value.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Html_HtmlString_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Html.HtmlString.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_HtmlString_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Html.HtmlString.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Html.HtmlString.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_HtmlString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the HTML encoded value.
            

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
    }
} // HtmlString


// type: Microsoft.AspNetCore.Html.IHtmlContent
    /**
    
            HTML content which can be written to a TextWriter.
            

    */
open class IHtmlContent
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_IHtmlContent_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_IHtmlContent_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContent.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Writes the content by encoding it with the specified 
            to the specified .
            

    - Parameter writer: The  to which the content is written.
    - Parameter encoder: The  which encodes the content to be written.
    */
    open func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_IHtmlContent_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHtmlContent


// type: Microsoft.AspNetCore.Html.IHtmlContentBuilder
    /**
    
            A builder for HTML content.
            

    */
open class IHtmlContentBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Html_IHtmlContentBuilder,
    Microsoft_AspNetCore_Html_IHtmlContentContainer
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_IHtmlContentBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_IHtmlContentBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentBuilder.AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Appends an  instance.
            

    - Parameter content: The  to append.
    - Returns: The .

    */
    open func AppendHtml(content : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_IHtmlContentBuilder_IHtmlContentBuilder__AppendHtml_0__1__IHtmlContent(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder Append(System.String)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentBuilder.Append(System.String)
    /**
    
            Appends a  value. The value is treated as unencoded as-provided, and will be HTML
            encoded before writing to output.
            

    - Parameter unencoded: The  to append.
    - Returns: The .

    */
    open func Append(unencoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_IHtmlContentBuilder_IHtmlContentBuilder__Append_0__1__String(&__thrown, self.get_handle(), unencoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtml(System.String)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentBuilder.AppendHtml(System.String)
    /**
    
            Appends an HTML encoded  value. The value is treated as HTML encoded as-provided, and
            no further encoding will be performed.
            

    - Parameter encoded: The HTML encoded  to append.
    - Returns: The .

    */
    open func AppendHtml(encoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_IHtmlContentBuilder_IHtmlContentBuilder__AppendHtml_0__1__String(&__thrown, self.get_handle(), encoded.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContentBuilder Clear()
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentBuilder.Clear
    /**
    
            Clears the content.
            

    - Returns: The .

    */
    open func Clear() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Html_IHtmlContentBuilder_IHtmlContentBuilder__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
} // IHtmlContentBuilder


// type: Microsoft.AspNetCore.Html.IHtmlContentContainer
    /**
    
            Defines a contract for  instances made up of several components which
            can be copied into an .
            

    */
open class IHtmlContentContainer
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Html_IHtmlContentContainer,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Html_IHtmlContentContainer_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Html_IHtmlContentContainer_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentContainer.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    
            Copies the contained content of this  into .
            

    - Parameter builder: The .
    */
    open func CopyTo(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_IHtmlContentContainer_void__CopyTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Html.IHtmlContentContainer.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    
            
            Moves the contained content of this  into .
            
            
            After  is called, this  instance should be left
            in an empty state.
            
            

    - Parameter builder: The .
    */
    open func MoveTo(builder : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Html_IHtmlContentContainer_void__MoveTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHtmlContentContainer


}



public protocol Microsoft_AspNetCore_Html_IHtmlContent
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Html_IHtmlContentBuilder
    :
    Microsoft_AspNetCore_Html_IHtmlContentContainer
{
}

public protocol Microsoft_AspNetCore_Html_IHtmlContentContainer
    :
    Microsoft_AspNetCore_Html_IHtmlContent
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String, System.Object[])
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendFormat(format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), format: format, args: args);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.IFormatProvider, System.String, System.Object[])
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendFormat(formatProvider : dotnet.System.IFormatProvider, format : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), formatProvider: formatProvider, format: format, args: args);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendLine() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendLine(unencoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), unencoded: unencoded);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, Microsoft.AspNetCore.Html.IHtmlContent)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendLine(content : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), content: content);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtmlLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func AppendHtmlLine(encoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendHtmlLine(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), encoded: encoded);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder SetContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func SetContent(unencoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetContent(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), unencoded: unencoded);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, Microsoft.AspNetCore.Html.IHtmlContent)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func SetHtmlContent(content : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), content: content);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder, System.String)
extension Microsoft_AspNetCore_Html_IHtmlContentBuilder {
    public func SetHtmlContent(encoded : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(builder: aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl: __copy_handle(self.get_handle())), encoded: encoded);
    }
}

