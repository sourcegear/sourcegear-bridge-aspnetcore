// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions
public struct CookiePolicyAppBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  handler to the specified , which enables cookie policy capabilities.
            

    - Parameter app: The  to add the handler to.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseCookiePolicy(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyAppBuilderExtensions_IApplicationBuilder__UseCookiePolicy_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.CookiePolicyOptions)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.CookiePolicyOptions)
    /**
    
            Adds the  handler to the specified , which enables cookie policy capabilities.
            

    - Parameter app: The  to add the handler to.
    - Parameter options: A  that specifies options for the handler.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseCookiePolicy(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyAppBuilderExtensions_IApplicationBuilder__UseCookiePolicy_0__2__IApplicationBuilder_CookiePolicyOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // CookiePolicyAppBuilderExtensions


// type: Microsoft.AspNetCore.Builder.CookiePolicyOptions
    /**
    
            Provides programmatic configuration for the .
            

    */
open class CookiePolicyOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_CookiePolicyOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_CookiePolicyOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.SameSiteMode get_MinimumSameSitePolicy()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_MinimumSameSitePolicy
    open func get_MinimumSameSitePolicy() throws -> aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_SameSiteMode__get_MinimumSameSitePolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: __return);
        }
    }
    // [IsSpecialName] void set_MinimumSameSitePolicy(Microsoft.AspNetCore.Http.SameSiteMode)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_MinimumSameSitePolicy(Microsoft.AspNetCore.Http.SameSiteMode)
    open func set_MinimumSameSitePolicy(value : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_MinimumSameSitePolicy_0__1__SameSiteMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy get_HttpOnly()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_HttpOnly
    open func get_HttpOnly() throws -> aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_HttpOnlyPolicy__get_HttpOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_HttpOnly(Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_HttpOnly(Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy)
    open func set_HttpOnly(value : aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_HttpOnly_0__1__HttpOnlyPolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieSecurePolicy get_Secure()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_Secure
    open func get_Secure() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_CookieSecurePolicy__get_Secure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_Secure(Microsoft.AspNetCore.Http.CookieSecurePolicy)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_Secure(Microsoft.AspNetCore.Http.CookieSecurePolicy)
    open func set_Secure(value : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_Secure_0__1__CookieSecurePolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_ConsentCookie()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_ConsentCookie
    open func get_ConsentCookie() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_CookieBuilder__get_ConsentCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConsentCookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_ConsentCookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_ConsentCookie(value : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_ConsentCookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Http.HttpContext,bool> get_CheckConsentNeeded()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_CheckConsentNeeded
    open func get_CheckConsentNeeded() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_System_Func_Microsoft_AspNetCore_Http_HttpContext_bool___get_CheckConsentNeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CheckConsentNeeded(System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_CheckConsentNeeded(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean})
    open func set_CheckConsentNeeded(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_CheckConsentNeeded_0__1__System_Func_Microsoft_AspNetCore_Http_HttpContext_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_CheckConsentNeeded(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(value);
        return try set_CheckConsentNeeded(value: del_value);
    }
    // [IsSpecialName] System.Action<Microsoft.AspNetCore.CookiePolicy.AppendCookieContext> get_OnAppendCookie()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_OnAppendCookie
    open func get_OnAppendCookie() throws -> Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_System_Action_Microsoft_AspNetCore_CookiePolicy_AppendCookieContext___get_OnAppendCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnAppendCookie(System.Action<Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_OnAppendCookie(System.Action{Microsoft.AspNetCore.CookiePolicy.AppendCookieContext})
    open func set_OnAppendCookie(value : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_OnAppendCookie_0__1__System_Action_Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnAppendCookie(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>(value);
        return try set_OnAppendCookie(value: del_value);
    }
    // [IsSpecialName] System.Action<Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext> get_OnDeleteCookie()
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.get_OnDeleteCookie
    open func get_OnDeleteCookie() throws -> Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CookiePolicyOptions_System_Action_Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext___get_OnDeleteCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OnDeleteCookie(System.Action<Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>)
// docid: M:Microsoft.AspNetCore.Builder.CookiePolicyOptions.set_OnDeleteCookie(System.Action{Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext})
    open func set_OnDeleteCookie(value : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_CookiePolicyOptions_void__set_OnDeleteCookie_0__1__System_Action_Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnDeleteCookie(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>(value);
        return try set_OnDeleteCookie(value: del_value);
    }
    /**
    
            Checks if consent policies should be evaluated on this request. The default is false.
            

    */
    open var CheckConsentNeeded : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>> {
        get {
            return try! get_CheckConsentNeeded();
        }
        set(v) {
            return try! set_CheckConsentNeeded(value: v!);
        }
    }
    /**
    
            Gets or sets the  that is used to track if the user consented to the
            cookie use policy.
            

    */
    open var ConsentCookie : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        get {
            return try! get_ConsentCookie();
        }
        set(v) {
            return try! set_ConsentCookie(value: v);
        }
    }
    /**
    
            Affects whether cookies must be HttpOnly.
            

    */
    open var HttpOnly : aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy {
        get {
            return try! get_HttpOnly();
        }
        set(v) {
            return try! set_HttpOnly(value: v);
        }
    }
    /**
    
            Affects the cookie's same site attribute.
            

    */
    open var MinimumSameSitePolicy : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
            return try! get_MinimumSameSitePolicy();
        }
        set(v) {
            return try! set_MinimumSameSitePolicy(value: v);
        }
    }
    /**
    
            Called when a cookie is appended.
            

    */
    open var OnAppendCookie : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.AppendCookieContext>> {
        get {
            return try! get_OnAppendCookie();
        }
        set(v) {
            return try! set_OnAppendCookie(value: v!);
        }
    }
    /**
    
            Called when a cookie is deleted.
            

    */
    open var OnDeleteCookie : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext>> {
        get {
            return try! get_OnDeleteCookie();
        }
        set(v) {
            return try! set_OnDeleteCookie(value: v!);
        }
    }
    /**
    
            Affects whether cookies must be Secure.
            

    */
    open var Secure : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        get {
            return try! get_Secure();
        }
        set(v) {
            return try! set_Secure(value: v);
        }
    }
} // CookiePolicyOptions


}

// Microsoft.AspNetCore.CookiePolicy
extension Microsoft.AspNetCore.CookiePolicy {
// type: Microsoft.AspNetCore.CookiePolicy.AppendCookieContext
    /**
    
            Context for  that allows changes to the cookie prior to being appended.
            

    */
open class AppendCookieContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.CookieOptions, System.String, System.String)
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.CookieOptions,System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The request .
    - Parameter options: The  passed to the cookie policy.
    - Parameter name: The cookie name.
    - Parameter value: The cookie value.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions, name : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_ctor_0__4__HttpContext_CookieOptions_String_String(&__thrown, context.get_handle(), options.get_handle(), name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_Context()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_HttpContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieOptions get_CookieOptions()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_CookieOptions
    open func get_CookieOptions() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_CookieOptions__get_CookieOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_CookieName()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_CookieName
    open func get_CookieName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_String__get_CookieName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieName(System.String)
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.set_CookieName(System.String)
    open func set_CookieName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_void__set_CookieName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CookieValue()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_CookieValue
    open func get_CookieValue() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_String__get_CookieValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieValue(System.String)
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.set_CookieValue(System.String)
    open func set_CookieValue(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_void__set_CookieValue_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsConsentNeeded()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_IsConsentNeeded
    open func get_IsConsentNeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_bool__get_IsConsentNeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasConsent()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_HasConsent
    open func get_HasConsent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_bool__get_HasConsent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IssueCookie()
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.get_IssueCookie
    open func get_IssueCookie() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_bool__get_IssueCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IssueCookie(bool)
// docid: M:Microsoft.AspNetCore.CookiePolicy.AppendCookieContext.set_IssueCookie(System.Boolean)
    open func set_IssueCookie(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_AppendCookieContext_void__set_IssueCookie_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the .
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets or sets the cookie name.
            

    */
    open var CookieName : dotnet.System.String {
        get {
            return try! get_CookieName();
        }
        set(v) {
            return try! set_CookieName(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var CookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        get {
            return try! get_CookieOptions();
        }
    }
    /**
    
            Gets or sets the cookie value.
            

    */
    open var CookieValue : dotnet.System.String {
        get {
            return try! get_CookieValue();
        }
        set(v) {
            return try! set_CookieValue(value: v);
        }
    }
    /**
    
            Gets a value that determines if cookie consent was provided.
            

    */
    open var HasConsent : Bool {
        get {
            return try! get_HasConsent();
        }
    }
    /**
    
            Gets a value that determines if cookie consent is required before setting this cookie.
            

    */
    open var IsConsentNeeded : Bool {
        get {
            return try! get_IsConsentNeeded();
        }
    }
    /**
    
            Gets or sets a value that determines if the cookie can be appended. If set to ,
            the cookie is not appended.
            

    */
    open var IssueCookie : Bool {
        get {
            return try! get_IssueCookie();
        }
        set(v) {
            return try! set_IssueCookie(value: v);
        }
    }
} // AppendCookieContext


// type: Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware
    /**
    
            Initializes a new instance of .
            

    */
open class CookiePolicyMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.CookiePolicyOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.CookiePolicyOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter next: A reference to the next item in the application pipeline.
    - Parameter options: Accessor to .
    - Parameter factory: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>, factory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_ctor_0__3__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_CookiePolicyOptions__ILoggerFactory(&__thrown, next.get_handle(), options.get_handle(), factory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.CookiePolicyOptions>)
// docid: M:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.CookiePolicyOptions})
    /**
    
            Initializes a new instance of .
            

    - Parameter next: A reference to the next item in the application pipeline.
    - Parameter options: Accessor to .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_ctor_0__2__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_CookiePolicyOptions_(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the middleware.
            

    - Parameter context: The .
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.CookiePolicyOptions get_Options()
// docid: M:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware.get_Options
    open func get_Options() throws -> aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_CookiePolicyOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Options(Microsoft.AspNetCore.Builder.CookiePolicyOptions)
// docid: M:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware.set_Options(Microsoft.AspNetCore.Builder.CookiePolicyOptions)
    open func set_Options(value : aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_CookiePolicyMiddleware_void__set_Options_0__1__CookiePolicyOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Options : aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions {
        get {
            return try! get_Options();
        }
        set(v) {
            return try! set_Options(value: v);
        }
    }
} // CookiePolicyMiddleware


// type: Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext
    /**
    
            Context for  that allows changes to the cookie prior to being deleted.
            

    */
open class DeleteCookieContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.CookieOptions, System.String)
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.CookieOptions,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The request .
    - Parameter options: The  passed to the cookie policy.
    - Parameter name: The cookie name to be deleted.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_ctor_0__3__HttpContext_CookieOptions_String(&__thrown, context.get_handle(), options.get_handle(), name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_Context()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_HttpContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieOptions get_CookieOptions()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_CookieOptions
    open func get_CookieOptions() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_CookieOptions__get_CookieOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_CookieName()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_CookieName
    open func get_CookieName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_String__get_CookieName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieName(System.String)
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.set_CookieName(System.String)
    open func set_CookieName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_void__set_CookieName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsConsentNeeded()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_IsConsentNeeded
    open func get_IsConsentNeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_bool__get_IsConsentNeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasConsent()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_HasConsent
    open func get_HasConsent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_bool__get_HasConsent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IssueCookie()
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.get_IssueCookie
    open func get_IssueCookie() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_bool__get_IssueCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IssueCookie(bool)
// docid: M:Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext.set_IssueCookie(System.Boolean)
    open func set_IssueCookie(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_CookiePolicy_DeleteCookieContext_void__set_IssueCookie_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the .
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets or sets the cookie name.
            

    */
    open var CookieName : dotnet.System.String {
        get {
            return try! get_CookieName();
        }
        set(v) {
            return try! set_CookieName(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var CookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        get {
            return try! get_CookieOptions();
        }
    }
    /**
    
            Gets a value that determines if cookie consent was provided.
            

    */
    open var HasConsent : Bool {
        get {
            return try! get_HasConsent();
        }
    }
    /**
    
            Gets a value that determines if cookie consent is required before setting this cookie.
            

    */
    open var IsConsentNeeded : Bool {
        get {
            return try! get_IsConsentNeeded();
        }
    }
    /**
    
            Gets or sets a value that determines if the cookie can be deleted. If set to ,
            cookie deletion is suppressed.
            

    */
    open var IssueCookie : Bool {
        get {
            return try! get_IssueCookie();
        }
        set(v) {
            return try! set_IssueCookie(value: v);
        }
    }
} // DeleteCookieContext


// type: Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy
    /**
    
            Describes the HttpOnly behavior for cookies.
            

    */
public struct HttpOnlyPolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_CookiePolicy_HttpOnlyPolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy None
    /**
    
            The cookie does not have a configured HttpOnly behavior. This cookie can be accessed by
            JavaScript document.cookie API.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy(val: Microsoft_AspNetCore_CookiePolicy_HttpOnlyPolicy_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy Always
    /**
    
            The cookie is configured with a HttpOnly attribute. This cookie inaccessible to the
            JavaScript document.cookie API.
            

    */
    public static var Always : aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy(val: Microsoft_AspNetCore_CookiePolicy_HttpOnlyPolicy_get_Always());
            return __return;
        }
    }
} // HttpOnlyPolicy


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions
public struct CookiePolicyServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddCookiePolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.CookiePolicyOptions})
    /**
    
            Adds services and options for the cookie policy middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddCookiePolicy(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookiePolicyServiceCollectionExtensions_IServiceCollection__AddCookiePolicy_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_CookiePolicyOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCookiePolicy(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>(configureOptions);
        return try AddCookiePolicy(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddCookiePolicy<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions,TService>)
// docid: M:Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.CookiePolicyOptions,``0})
    /**
    
            Adds services and options for the cookie policy middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddCookiePolicy<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookiePolicyServiceCollectionExtensions_IServiceCollection__AddCookiePolicy_1__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_CookiePolicyOptions_UTService_(UTService.get_type_handle(), &__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCookiePolicy<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions,UTService>(configureOptions);
        return try AddCookiePolicy(services: services, configureOptions: del_configureOptions);
    }
} // CookiePolicyServiceCollectionExtensions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCookiePolicy() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.CookiePolicyOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCookiePolicy(options : aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddCookiePolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddCookiePolicy(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddCookiePolicy(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddCookiePolicy<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions,TService>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddCookiePolicy<UTService : SGBridgeGenericValue>(configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddCookiePolicy<UTService : SGBridgeGenericValue>(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions>, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.CookiePolicyOptions,UTService>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookiePolicyServiceCollectionExtensions.AddCookiePolicy(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

