// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Logging
extension Microsoft.Extensions.Logging {
// type: Microsoft.Extensions.Logging.EventId
// boxed value type
    /**
    
            Identifies a logging event. The primary identifier is the "Id" property, with the "Name" property providing a short description of this type of event.
            

    */
public final class EventId
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_EventId_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the numeric identifier for this event.
            

    */
    public var Id : Swift.Int32 {
        get {
            return try! get_Id();
        }
    }
    /**
    
            Gets the name of this event.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    // .ctor(System.Int32, System.String)
// docid: M:Microsoft.Extensions.Logging.EventId.#ctor(System.Int32,System.String)
    /**
    
            Initializes an instance of the  struct.
            

    - Parameter id: The numeric identifier for this event.
    - Parameter name: The name of this event.
    */
    public init(id : Swift.Int32, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_EventId_ctor_0__2__i32_String(&__thrown, id, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Logging_EventId_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(Microsoft.Extensions.Logging.EventId)
// docid: M:Microsoft.Extensions.Logging.EventId.Equals(Microsoft.Extensions.Logging.EventId)
    /**
    
            Indicates whether the current object is equal to another object of the same type. Two events are equal if they have the same id.
            

    - Parameter other: An object to compare with this object.
    - Returns:  if the current object is equal to the other parameter; otherwise, .

    */
    public func Equals(other : aspnetcore.Microsoft.Extensions.Logging.EventId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_bool__Equals_0__1__EventId(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Extensions.Logging.EventId.Equals(System.Object)
    /**
    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Extensions.Logging.EventId.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.EventId)
// docid: M:Microsoft.Extensions.Logging.EventId.op_Equality(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.EventId)
    /**
    
            Checks if two specified  instances have the same value. They are equal if they have the same Id.
            

    - Parameter left: The first .
    - Parameter right: The second .
    - Returns:  if the objects are equal.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Logging.EventId, right : aspnetcore.Microsoft.Extensions.Logging.EventId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_bool__op_Equality_0__2__EventId_EventId(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.EventId op_Implicit(System.Int32)
// docid: M:Microsoft.Extensions.Logging.EventId.op_Implicit(System.Int32)
    public class func op_Implicit(i : Swift.Int32) throws -> aspnetcore.Microsoft.Extensions.Logging.EventId {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_EventId__op_Implicit_0__1__i32(&__thrown, i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.EventId(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.EventId)
// docid: M:Microsoft.Extensions.Logging.EventId.op_Inequality(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.EventId)
    /**
    
            Checks if two specified  instances have different values.
            

    - Parameter left: The first .
    - Parameter right: The second .
    - Returns:  if the objects are not equal.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Logging.EventId, right : aspnetcore.Microsoft.Extensions.Logging.EventId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_bool__op_Inequality_0__2__EventId_EventId(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Extensions.Logging.EventId.ToString
    /**
    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Id()
// docid: M:Microsoft.Extensions.Logging.EventId.get_Id
    public func get_Id() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_i32__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Logging.EventId.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventId_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EventId


// type: Microsoft.Extensions.Logging.IExternalScopeProvider
    /**
    
            Represents a storage of common scope data.
            

    */
open class IExternalScopeProvider
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_IExternalScopeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_IExternalScopeProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void ForEachScope<TState>(System.Action<System.Object,TState>, TState)
// docid: M:Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope``1(System.Action{System.Object,``0},``0)
    /**
    
            Executes callback for each currently active scope objects in order of creation.
            All callbacks are guaranteed to be called inline from this method.
            

    - Parameter callback: The callback to be executed for every scope object
    - Parameter state: The state object to be passed into the callback
    */
    open func ForEachScope<UTState : SGBridgeGenericValue>(callback : dotnet.System.Action_2<dotnet.System.Object,UTState>, state : UTState) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_IExternalScopeProvider_void__ForEachScope_1__2__System_Action_object_UTState__UTState(UTState.get_type_handle(), &__thrown, self.get_handle(), callback.get_handle(), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func ForEachScope<UTState : SGBridgeGenericValue>(callback : @escaping (Optional<dotnet.System.Object>, UTState) throws -> Void, state : UTState) throws {
        let del_callback = try dotnet.System.Action_2<dotnet.System.Object,UTState>(callback);
        return try ForEachScope(callback: del_callback, state: state);
    }
    // System.IDisposable Push(System.Object)
// docid: M:Microsoft.Extensions.Logging.IExternalScopeProvider.Push(System.Object)
    /**
    
            Adds scope object to the list
            

    - Parameter state: The scope object
    - Returns: The  token that removes scope on dispose.

    */
    open func Push(state : Optional<dotnet.System.Object>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_IExternalScopeProvider_IDisposable__Push_0__1__Object(&__thrown, self.get_handle(), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
} // IExternalScopeProvider


// type: Microsoft.Extensions.Logging.ILogger
    /**
    
            Represents a type used to perform logging.
            

    */
open class ILogger
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_ILogger
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_ILogger_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IDisposable BeginScope<TState>(TState)
// docid: M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
    /**
    
            Begins a logical operation scope.
            

    - Parameter state: The identifier for the scope.
    - Returns: An  that ends the logical operation scope on dispose.

    */
    open func BeginScope<UTState : SGBridgeGenericValue>(state : UTState) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ILogger_IDisposable__BeginScope_1__1__UTState(UTState.get_type_handle(), &__thrown, self.get_handle(), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // bool IsEnabled(Microsoft.Extensions.Logging.LogLevel)
// docid: M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
    /**
    
            Checks if the given  is enabled.
            

    - Parameter logLevel: Level to be checked.
    - Returns: true if enabled.

    */
    open func IsEnabled(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ILogger_bool__IsEnabled_0__1__LogLevel(&__thrown, self.get_handle(), logLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState,System.Exception,System.String>)
// docid: M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    /**
    
            Writes a log entry.
            

    - Parameter logLevel: Entry will be written on this level.
    - Parameter eventId: Id of the event.
    - Parameter state: The entry to be written. Can be also an object.
    - Parameter exception: The exception related to this entry.
    - Parameter formatter: Function to create a  message of the  and .
    */
    open func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_ILogger_void__Log_1__5__LogLevel_EventId_UTState_Exception_System_Func_UTState_System_Exception_string_(UTState.get_type_handle(), &__thrown, self.get_handle(), logLevel.get_value(), eventId.get_handle(), state.to_gval(), exception?.get_handle() ?? nil, formatter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : @escaping (UTState, Optional<dotnet.System.Exception>) throws -> dotnet.System.String) throws {
        let del_formatter = try dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>(formatter);
        return try Log(logLevel: logLevel, eventId: eventId, state: state, exception: exception, formatter: del_formatter);
    }
} // ILogger


// type: Microsoft.Extensions.Logging.ILoggerFactory
    /**
    
            Represents a type used to configure the logging system and create instances of  from
            the registered s.
            

    */
open class ILoggerFactory
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_ILoggerFactory,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_ILoggerFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
// docid: M:Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
    /**
    
            Adds an  to the logging system.
            

    - Parameter provider: The .
    */
    open func AddProvider(provider : aspnetcore.Microsoft.Extensions.Logging.ILoggerProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_ILoggerFactory_void__AddProvider_0__1__ILoggerProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
    /**
    
            Creates a new  instance.
            

    - Parameter categoryName: The category name for messages produced by the logger.
    - Returns: The .

    */
    open func CreateLogger(categoryName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ILoggerFactory_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), categoryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
} // ILoggerFactory


// type: Microsoft.Extensions.Logging.ILoggerProvider
    /**
    
            Represents a type that can create instances of .
            

    */
open class ILoggerProvider
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_ILoggerProvider,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_ILoggerProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.ILoggerProvider.CreateLogger(System.String)
    /**
    
            Creates a new  instance.
            

    - Parameter categoryName: The category name for messages produced by the logger.
    - Returns: The instance of  that was created.

    */
    open func CreateLogger(categoryName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ILoggerProvider_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), categoryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
} // ILoggerProvider


// type: Microsoft.Extensions.Logging.ILogger`1
    /**
    
            A generic interface for logging where the category name is derived from the specified
             type name.
            Generally used to enable activation of a named  from dependency injection.
            

    */
open class ILogger_1<TCategoryName : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_ILogger_1,
    Microsoft_Extensions_Logging_ILogger
{
    public typealias TCategoryName_ILogger_1 = TCategoryName;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_ILogger_1_get_type_handle(TCategoryName.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // ILogger_1


// type: Microsoft.Extensions.Logging.ISupportExternalScope
    /**
    
            Represents a  that is able to consume external scope information.
            

    */
open class ISupportExternalScope
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_ISupportExternalScope
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_ISupportExternalScope_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
// docid: M:Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
    /**
    
            Sets external scope information source for logger provider.
            

    - Parameter scopeProvider: The provider of scope data.
    */
    open func SetScopeProvider(scopeProvider : aspnetcore.Microsoft.Extensions.Logging.IExternalScopeProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_ISupportExternalScope_void__SetScopeProvider_0__1__IExternalScopeProvider(&__thrown, self.get_handle(), scopeProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ISupportExternalScope


// type: Microsoft.Extensions.Logging.LogDefineOptions
    /**
    
            Options for  and its overloads
            

    */
open class LogDefineOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_LogDefineOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.LogDefineOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_LogDefineOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SkipEnabledCheck()
// docid: M:Microsoft.Extensions.Logging.LogDefineOptions.get_SkipEnabledCheck
    open func get_SkipEnabledCheck() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LogDefineOptions_bool__get_SkipEnabledCheck_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SkipEnabledCheck(bool)
// docid: M:Microsoft.Extensions.Logging.LogDefineOptions.set_SkipEnabledCheck(System.Boolean)
    open func set_SkipEnabledCheck(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LogDefineOptions_void__set_SkipEnabledCheck_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the flag to skip IsEnabled check for the logging method.
            

    */
    open var SkipEnabledCheck : Bool {
        get {
            return try! get_SkipEnabledCheck();
        }
        set(v) {
            return try! set_SkipEnabledCheck(value: v);
        }
    }
} // LogDefineOptions


// type: Microsoft.Extensions.Logging.LogLevel
    /**
    
            Defines logging severity levels.
            

    */
public struct LogLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_LogLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Extensions.Logging.LogLevel Trace
    /**
    
            Logs that contain the most detailed messages. These messages may contain sensitive application data.
            These messages are disabled by default and should never be enabled in a production environment.
            

    */
    public static var Trace : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Trace());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel Debug
    /**
    
            Logs that are used for interactive investigation during development.  These logs should primarily contain
            information useful for debugging and have no long-term value.
            

    */
    public static var Debug : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Debug());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel Information
    /**
    
            Logs that track the general flow of the application. These logs should have long-term value.
            

    */
    public static var Information : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Information());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel Warning
    /**
    
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
            application execution to stop.
            

    */
    public static var Warning : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Warning());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel Error
    /**
    
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
            failure in the current activity, not an application-wide failure.
            

    */
    public static var Error : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Error());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel Critical
    /**
    
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
            immediate attention.
            

    */
    public static var Critical : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_Critical());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.LogLevel None
    /**
    
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            

    */
    public static var None : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: Microsoft_Extensions_Logging_LogLevel_get_None());
            return __return;
        }
    }
} // LogLevel


// type: Microsoft.Extensions.Logging.LoggerExtensions
public struct LoggerExtensions {
    // System.IDisposable BeginScope(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.BeginScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats the message and creates a scope.
            

    - Parameter logger: The  to create the scope in.
    - Parameter messageFormat: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    - Returns: A disposable scope object. Can be null.

    */
    public static func BeginScope(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, messageFormat : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerExtensions_IDisposable__BeginScope_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), messageFormat.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a log message at the specified log level.
            

    - Parameter logger: The  to write to.
    - Parameter logLevel: Entry will be written on this level.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message.
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func Log(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__Log_0__6__ILogger_LogLevel_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), logLevel.get_value(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes a log message at the specified log level.
            

    - Parameter logger: The  to write to.
    - Parameter logLevel: Entry will be written on this level.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message.
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func Log(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__Log_0__5__ILogger_LogLevel_EventId_String_ObjectArray(&__thrown, logger.get_handle(), logLevel.get_value(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a log message at the specified log level.
            

    - Parameter logger: The  to write to.
    - Parameter logLevel: Entry will be written on this level.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message.
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func Log(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__Log_0__5__ILogger_LogLevel_Exception_String_ObjectArray(&__thrown, logger.get_handle(), logLevel.get_value(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[])
    /**
    
            Formats and writes a log message at the specified log level.
            

    - Parameter logger: The  to write to.
    - Parameter logLevel: Entry will be written on this level.
    - Parameter message: Format string of the log message.
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func Log(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__Log_0__4__ILogger_LogLevel_String_ObjectArray(&__thrown, logger.get_handle(), logLevel.get_value(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogCritical(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a critical log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogCritical(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogCritical_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogCritical(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes a critical log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogCritical(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogCritical_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogCritical(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a critical log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogCritical(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogCritical_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogCritical(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes a critical log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogCritical(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogCritical_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogDebug(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a debug log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogDebug(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogDebug_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogDebug(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes a debug log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogDebug(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogDebug_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogDebug(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a debug log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogDebug(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogDebug_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogDebug(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes a debug log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogDebug(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogDebug_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogError(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes an error log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogError(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogError_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogError(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes an error log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogError(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogError_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogError(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes an error log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogError(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogError_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogError(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes an error log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogError(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogError_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogInformation(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes an informational log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogInformation(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogInformation_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogInformation(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes an informational log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogInformation(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogInformation_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogInformation(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes an informational log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogInformation(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogInformation_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogInformation(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes an informational log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogInformation(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogInformation_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogTrace(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a trace log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogTrace(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogTrace_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogTrace(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes a trace log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogTrace(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogTrace_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogTrace(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a trace log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogTrace(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogTrace_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogTrace(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes a trace log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogTrace(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogTrace_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogWarning(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a warning log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogWarning(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogWarning_0__5__ILogger_EventId_Exception_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogWarning(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])
    /**
    
            Formats and writes a warning log message.
            

    - Parameter logger: The  to write to.
    - Parameter eventId: The event id associated with the log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogWarning(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogWarning_0__4__ILogger_EventId_String_ObjectArray(&__thrown, logger.get_handle(), eventId.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogWarning(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])
    /**
    
            Formats and writes a warning log message.
            

    - Parameter logger: The  to write to.
    - Parameter exception: The exception to log.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogWarning(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogWarning_0__4__ILogger_Exception_String_ObjectArray(&__thrown, logger.get_handle(), exception?.get_handle() ?? nil, message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LogWarning(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
// docid: M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
    /**
    
            Formats and writes a warning log message.
            

    - Parameter logger: The  to write to.
    - Parameter message: Format string of the log message in message template format. Example: "User {User} logged in from {Address}"
    - Parameter args: An object array that contains zero or more objects to format.
    */
    public static func LogWarning(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExtensions_void__LogWarning_0__3__ILogger_String_ObjectArray(&__thrown, logger.get_handle(), message?.get_handle() ?? nil, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // LoggerExtensions


// type: Microsoft.Extensions.Logging.LoggerExternalScopeProvider
    /**
    
            Default implementation of 
            

    */
open class LoggerExternalScopeProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_IExternalScopeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_LoggerExternalScopeProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.LoggerExternalScopeProvider.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_LoggerExternalScopeProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void ForEachScope<TState>(System.Action<System.Object,TState>, TState)
// docid: M:Microsoft.Extensions.Logging.LoggerExternalScopeProvider.ForEachScope``1(System.Action{System.Object,``0},``0)
    /**
    */
    open /* method final */ func ForEachScope<UTState : SGBridgeGenericValue>(callback : dotnet.System.Action_2<dotnet.System.Object,UTState>, state : UTState) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerExternalScopeProvider_void__ForEachScope_1__2__System_Action_object_UTState__UTState(UTState.get_type_handle(), &__thrown, self.get_handle(), callback.get_handle(), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func ForEachScope<UTState : SGBridgeGenericValue>(callback : @escaping (Optional<dotnet.System.Object>, UTState) throws -> Void, state : UTState) throws {
        let del_callback = try dotnet.System.Action_2<dotnet.System.Object,UTState>(callback);
        return try ForEachScope(callback: del_callback, state: state);
    }
    // System.IDisposable Push(System.Object)
// docid: M:Microsoft.Extensions.Logging.LoggerExternalScopeProvider.Push(System.Object)
    /**
    */
    open /* method final */ func Push(state : Optional<dotnet.System.Object>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerExternalScopeProvider_IDisposable__Push_0__1__Object(&__thrown, self.get_handle(), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
} // LoggerExternalScopeProvider


// type: Microsoft.Extensions.Logging.LoggerFactoryExtensions
public struct LoggerFactoryExtensions {
    // Microsoft.Extensions.Logging.ILogger CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory, System.Type)
// docid: M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Type)
    /**
    
            Creates a new  instance using the full name of the given .
            

    - Parameter factory: The factory.
    - Parameter type: The type.
    */
    public static func CreateLogger(factory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, type : dotnet.System.Type_) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerFactoryExtensions_ILogger__CreateLogger_0__2__ILoggerFactory_Type(&__thrown, factory.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Logging.ILogger<T> CreateLogger<T>(Microsoft.Extensions.Logging.ILoggerFactory)
} // LoggerFactoryExtensions


// type: Microsoft.Extensions.Logging.LoggerMessage
public struct LoggerMessage {
    // System.Action<Microsoft.Extensions.Logging.ILogger,System.Exception> Define(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// docid: M:Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
    /**
    
            Creates a delegate which can be invoked for logging a message.
            

    - Parameter logLevel: The 
    - Parameter eventId: The event id
    - Parameter formatString: The named format string
    - Returns: A delegate which when invoked creates a log message.

    */
    public static func Define(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, formatString : dotnet.System.String) throws -> dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Logging.ILogger,dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessage_System_Action_Microsoft_Extensions_Logging_ILogger_System_Exception___Define_0__3__LogLevel_EventId_String(&__thrown, logLevel.get_value(), eventId.get_handle(), formatString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.Extensions.Logging.ILogger,System.Exception> Define(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// docid: M:Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,Microsoft.Extensions.Logging.LogDefineOptions)
    /**
    
            Creates a delegate which can be invoked for logging a message.
            

    - Parameter logLevel: The 
    - Parameter eventId: The event id
    - Parameter formatString: The named format string
    - Parameter options: The 
    - Returns: A delegate which when invoked creates a log message.

    */
    public static func Define(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, formatString : dotnet.System.String, options : Optional<aspnetcore.Microsoft.Extensions.Logging.LogDefineOptions>) throws -> dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Logging.ILogger,dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessage_System_Action_Microsoft_Extensions_Logging_ILogger_System_Exception___Define_0__4__LogLevel_EventId_String_LogDefineOptions(&__thrown, logLevel.get_value(), eventId.get_handle(), formatString.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_2(hndl : __return);
        }
    }
    // System.Func<Microsoft.Extensions.Logging.ILogger,System.IDisposable> DefineScope(System.String)
// docid: M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)
    /**
    
            Creates a delegate which can be invoked to create a log scope.
            

    - Parameter formatString: The named format string
    - Returns: A delegate which when invoked creates a log scope.

    */
    public static func DefineScope(formatString : dotnet.System.String) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Logging.ILogger,dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessage_System_Func_Microsoft_Extensions_Logging_ILogger_System_IDisposable___DefineScope_0__1__String(&__thrown, formatString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,System.IDisposable> DefineScope<T1>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,T2,System.IDisposable> DefineScope<T1, T2>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,System.IDisposable> DefineScope<T1, T2, T3>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,System.IDisposable> DefineScope<T1, T2, T3, T4>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,System.IDisposable> DefineScope<T1, T2, T3, T4, T5>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Func<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,T6,System.IDisposable> DefineScope<T1, T2, T3, T4, T5, T6>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,System.Exception> Define<T1>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,System.Exception> Define<T1>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,System.Exception> Define<T1, T2>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,System.Exception> Define<T1, T2>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,System.Exception> Define<T1, T2, T3>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,System.Exception> Define<T1, T2, T3>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,System.Exception> Define<T1, T2, T3, T4>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,System.Exception> Define<T1, T2, T3, T4>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,System.Exception> Define<T1, T2, T3, T4, T5>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,System.Exception> Define<T1, T2, T3, T4, T5>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,T6,System.Exception> Define<T1, T2, T3, T4, T5, T6>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Action<Microsoft.Extensions.Logging.ILogger,T1,T2,T3,T4,T5,T6,System.Exception> Define<T1, T2, T3, T4, T5, T6>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, Microsoft.Extensions.Logging.LogDefineOptions)
} // LoggerMessage


// type: Microsoft.Extensions.Logging.LoggerMessageAttribute
    /**
    
            Provides information to guide the production of a strongly-typed logging method.
            

    */
public final class LoggerMessageAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_LoggerMessageAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.#ctor
    /**
    
            Initializes a new instance of the  class
            which is used to guide the production of a strongly-typed logging method.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_LoggerMessageAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, Microsoft.Extensions.Logging.LogLevel, System.String)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.#ctor(System.Int32,Microsoft.Extensions.Logging.LogLevel,System.String)
    /**
    
            Initializes a new instance of the  class
            which is used to guide the production of a strongly-typed logging method.
            

    - Parameter eventId: The log event Id.
    - Parameter level: The log level.
    - Parameter message: Format string of the log message.
    */
    public init(eventId : Swift.Int32, level : aspnetcore.Microsoft.Extensions.Logging.LogLevel, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_LoggerMessageAttribute_ctor_0__3__i32_LogLevel_String(&__thrown, eventId, level.get_value(), message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_EventId()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.get_EventId
    public func get_EventId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessageAttribute_i32__get_EventId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_EventId(System.Int32)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.set_EventId(System.Int32)
    public func set_EventId(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerMessageAttribute_void__set_EventId_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EventName()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.get_EventName
    public func get_EventName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessageAttribute_String__get_EventName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EventName(System.String)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.set_EventName(System.String)
    public func set_EventName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerMessageAttribute_void__set_EventName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.LogLevel get_Level()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.get_Level
    public func get_Level() throws -> aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessageAttribute_LogLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(Microsoft.Extensions.Logging.LogLevel)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.set_Level(Microsoft.Extensions.Logging.LogLevel)
    public func set_Level(value : aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerMessageAttribute_void__set_Level_0__1__LogLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.get_Message
    public func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessageAttribute_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Message(System.String)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.set_Message(System.String)
    public func set_Message(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerMessageAttribute_void__set_Message_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SkipEnabledCheck()
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.get_SkipEnabledCheck
    public func get_SkipEnabledCheck() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_LoggerMessageAttribute_bool__get_SkipEnabledCheck_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SkipEnabledCheck(bool)
// docid: M:Microsoft.Extensions.Logging.LoggerMessageAttribute.set_SkipEnabledCheck(System.Boolean)
    public func set_SkipEnabledCheck(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_LoggerMessageAttribute_void__set_SkipEnabledCheck_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the logging event id for the logging method.
            

    */
    public var EventId : Swift.Int32 {
        get {
            return try! get_EventId();
        }
        set(v) {
            return try! set_EventId(value: v);
        }
    }
    /**
    
            Gets or sets the logging event name for the logging method.
            

    */
    public var EventName : Optional<dotnet.System.String> {
        get {
            return try! get_EventName();
        }
        set(v) {
            return try! set_EventName(value: v!);
        }
    }
    /**
    
            Gets the logging level for the logging method.
            

    */
    public var Level : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
    /**
    
            Gets the message text for the logging method.
            

    */
    public var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
        set(v) {
            return try! set_Message(value: v);
        }
    }
    /**
    
            Gets the flag to skip IsEnabled check for the logging method.
            

    */
    public var SkipEnabledCheck : Bool {
        get {
            return try! get_SkipEnabledCheck();
        }
        set(v) {
            return try! set_SkipEnabledCheck(value: v);
        }
    }
} // LoggerMessageAttribute


// type: Microsoft.Extensions.Logging.Logger`1
    /**
    
            Delegates to a new  instance using the full name of the given type, created by the
            provided .
            

    */
open class Logger_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILogger
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Logger_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.Extensions.Logging.Logger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter factory: The factory.
    */
    public init(factory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Logger_1_ctor_0__1__ILoggerFactory(T.get_type_handle(), &__thrown, factory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // Logger_1


}
// Microsoft.Extensions.Logging.Abstractions
extension Microsoft.Extensions.Logging.Abstractions {
// type: Microsoft.Extensions.Logging.Abstractions.LogEntry`1
// boxed value type
    /**
    
            Holds the information for a single log entry.
            

    */
public final class LogEntry_1<TState : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Abstractions_LogEntry_1_get_type_handle(TState.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the log category
            

    */
    public var Category : dotnet.System.String {
        get {
            return try! get_Category();
        }
    }
    /**
    
            Gets the log EventId
            

    */
    public var EventId : aspnetcore.Microsoft.Extensions.Logging.EventId {
        get {
            return try! get_EventId();
        }
    }
    /**
    
            Gets the log exception
            

    */
    public var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
    }
    /**
    
            Gets the formatter
            

    */
    public var Formatter : Optional<dotnet.System.Func_3<TState,dotnet.System.Exception,dotnet.System.String>> {
        get {
            return try! get_Formatter();
        }
    }
    /**
    
            Gets the LogLevel
            

    */
    public var LogLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
            return try! get_LogLevel();
        }
    }
    /**
    
            Gets the TState
            

    */
    public var State : TState {
        get {
            return try! get_State();
        }
    }
    // .ctor(Microsoft.Extensions.Logging.LogLevel, System.String, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState,System.Exception,System.String>)
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String,Microsoft.Extensions.Logging.EventId,`0,System.Exception,System.Func{`0,System.Exception,System.String})
    /**
    
            Initializes an instance of the LogEntry struct.
            

    - Parameter logLevel: The log level.
    - Parameter category: The category name for the log.
    - Parameter eventId: The log event Id.
    - Parameter state: The state for which log is being written.
    - Parameter exception: The log exception.
    - Parameter formatter: The formatter.
    */
    public init(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, category : dotnet.System.String, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : TState, exception : Optional<dotnet.System.Exception>, formatter : dotnet.System.Func_3<TState,dotnet.System.Exception,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_ctor_0__6__LogLevel_String_EventId_TState_Exception_System_Func_TState_System_Exception_string_(TState.get_type_handle(), &__thrown, logLevel.get_value(), category.get_handle(), eventId.get_handle(), state.to_gval(), exception?.get_handle() ?? nil, formatter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_implicit_ctor(TState.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Category()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_Category
    public func get_Category() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_String__get_Category_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.EventId get_EventId()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_EventId
    public func get_EventId() throws -> aspnetcore.Microsoft.Extensions.Logging.EventId {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_EventId__get_EventId_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.EventId(hndl : __return);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_Exception
    public func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_Exception__get_Exception_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TState,System.Exception,System.String> get_Formatter()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_Formatter
    public func get_Formatter() throws -> Optional<dotnet.System.Func_3<TState,dotnet.System.Exception,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_System_Func_TState_System_Exception_string___get_Formatter_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.LogLevel get_LogLevel()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_LogLevel
    public func get_LogLevel() throws -> aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_LogLevel__get_LogLevel_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: __return);
        }
    }
    // [IsSpecialName] TState get_State()
// docid: M:Microsoft.Extensions.Logging.Abstractions.LogEntry`1.get_State
    public func get_State() throws -> TState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_LogEntry_1_TState__get_State_0__0(TState.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TState(gval: __return);
        }
    }
} // LogEntry_1


// type: Microsoft.Extensions.Logging.Abstractions.NullLogger
    /**
    
            Minimalistic logger that does nothing.
            

    */
open class NullLogger
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILogger
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Abstractions_NullLogger_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.IDisposable BeginScope<TState>(TState)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger.BeginScope``1(``0)
    /**
    */
    open /* method final */ func BeginScope<UTState : SGBridgeGenericValue>(state : UTState) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLogger_IDisposable__BeginScope_1__1__UTState(UTState.get_type_handle(), &__thrown, self.get_handle(), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // bool IsEnabled(Microsoft.Extensions.Logging.LogLevel)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
    /**
    */
    open /* method final */ func IsEnabled(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLogger_bool__IsEnabled_0__1__LogLevel(&__thrown, self.get_handle(), logLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState,System.Exception,System.String>)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    /**
    */
    open /* method final */ func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Abstractions_NullLogger_void__Log_1__5__LogLevel_EventId_UTState_Exception_System_Func_UTState_System_Exception_string_(UTState.get_type_handle(), &__thrown, self.get_handle(), logLevel.get_value(), eventId.get_handle(), state.to_gval(), exception?.get_handle() ?? nil, formatter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : @escaping (UTState, Optional<dotnet.System.Exception>) throws -> dotnet.System.String) throws {
        let del_formatter = try dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>(formatter);
        return try Log(logLevel: logLevel, eventId: eventId, state: state, exception: exception, formatter: del_formatter);
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.Abstractions.NullLogger get_Instance()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger.get_Instance
    open class func get_Instance() throws -> aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLogger_NullLogger__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLogger(hndl : __return);
        }
    }
    /**
    
            Returns the shared instance of .
            

    */
    public static var Instance : aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLogger {
        get {
            return try! get_Instance();
        }
    }
} // NullLogger


// type: Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory
    /**
    
            An  used to create instance of
             that logs nothing.
            

    */
open class NullLoggerFactory
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILoggerFactory,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory Instance
    /**
    
            Returns the shared instance of .
            

    */
    open class var Instance : aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory(hndl: Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_get_Instance());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
    /**
    */
    open /* method final */ func AddProvider(provider : aspnetcore.Microsoft.Extensions.Logging.ILoggerProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_void__AddProvider_0__1__ILoggerProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.CreateLogger(System.String)
    /**
    */
    open /* method final */ func CreateLogger(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Abstractions_NullLoggerFactory_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // NullLoggerFactory


// type: Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider
    /**
    
            Provider for the .
            

    */
open class NullLoggerProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILoggerProvider,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Abstractions_NullLoggerProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.CreateLogger(System.String)
    /**
    */
    open /* method final */ func CreateLogger(categoryName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLoggerProvider_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), categoryName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Abstractions_NullLoggerProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider get_Instance()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider.get_Instance
    open class func get_Instance() throws -> aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLoggerProvider_NullLoggerProvider__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider(hndl : __return);
        }
    }
    /**
    
            Returns an instance of .
            

    */
    public static var Instance : aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider {
        get {
            return try! get_Instance();
        }
    }
} // NullLoggerProvider


// type: Microsoft.Extensions.Logging.Abstractions.NullLogger`1
    /**
    
            Minimalistic logger that does nothing.
            

    */
open class NullLogger_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILogger
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Abstractions_NullLogger_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field:  Instance
    /**
    
            Returns an instance of .
            

    */
    open class var Instance : aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLogger_1<T> {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Abstractions.NullLogger_1<T>(hndl: Microsoft_Extensions_Logging_Abstractions_NullLogger_1_get_Instance());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Abstractions_NullLogger_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IDisposable BeginScope<TState>(TState)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.BeginScope``1(``0)
    /**
    */
    open /* method final */ func BeginScope<UTState : SGBridgeGenericValue>(state : UTState) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLogger_1_IDisposable__BeginScope_1__1__UTState(T.get_type_handle(), UTState.get_type_handle(), &__thrown, self.get_handle(), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // bool IsEnabled(Microsoft.Extensions.Logging.LogLevel)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
    /**
    */
    open /* method final */ func IsEnabled(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Abstractions_NullLogger_1_bool__IsEnabled_0__1__LogLevel(T.get_type_handle(), &__thrown, self.get_handle(), logLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState,System.Exception,System.String>)
// docid: M:Microsoft.Extensions.Logging.Abstractions.NullLogger`1.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    /**
    */
    open /* method final */ func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Abstractions_NullLogger_1_void__Log_1__5__LogLevel_EventId_UTState_Exception_System_Func_UTState_System_Exception_string_(T.get_type_handle(), UTState.get_type_handle(), &__thrown, self.get_handle(), logLevel.get_value(), eventId.get_handle(), state.to_gval(), exception?.get_handle() ?? nil, formatter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func Log<UTState : SGBridgeGenericValue>(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, state : UTState, exception : Optional<dotnet.System.Exception>, formatter : @escaping (UTState, Optional<dotnet.System.Exception>) throws -> dotnet.System.String) throws {
        let del_formatter = try dotnet.System.Func_3<UTState,dotnet.System.Exception,dotnet.System.String>(formatter);
        return try Log(logLevel: logLevel, eventId: eventId, state: state, exception: exception, formatter: del_formatter);
    }
} // NullLogger_1


}




public protocol Microsoft_Extensions_Logging_IExternalScopeProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Logging_ILogger
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Logging_ILoggerFactory
    :
    System_IDisposable
{
}

public protocol Microsoft_Extensions_Logging_ILoggerProvider
    :
    System_IDisposable
{
}

public protocol Microsoft_Extensions_Logging_ILogger_1
    :
    Microsoft_Extensions_Logging_ILogger
{
    associatedtype TCategoryName_ILogger_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Logging_ISupportExternalScope
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.IDisposable BeginScope(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func BeginScope(messageFormat : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System.IDisposable {
        return try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.BeginScope(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), messageFormat: messageFormat, args: args);
    }
}

// EXTENSION METHOD void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func Log(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.Log(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), logLevel: logLevel, eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func Log(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.Log(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), logLevel: logLevel, eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func Log(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.Log(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), logLevel: logLevel, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void Log(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func Log(logLevel : aspnetcore.Microsoft.Extensions.Logging.LogLevel, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.Log(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), logLevel: logLevel, message: message, args: args);
    }
}

// EXTENSION METHOD void LogCritical(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogCritical(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogCritical(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogCritical(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogCritical(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogCritical(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogCritical(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogCritical(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD void LogDebug(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogDebug(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogDebug(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogDebug(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogDebug(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogDebug(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogDebug(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogDebug(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD void LogError(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogError(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogError(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogError(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogError(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogError(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogError(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogError(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogError(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogError(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogError(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogError(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD void LogInformation(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogInformation(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogInformation(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogInformation(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogInformation(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogInformation(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogInformation(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogInformation(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD void LogTrace(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogTrace(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogTrace(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogTrace(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogTrace(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogTrace(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogTrace(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogTrace(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD void LogWarning(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogWarning(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogWarning(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.EventId, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogWarning(eventId : aspnetcore.Microsoft.Extensions.Logging.EventId, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), eventId: eventId, message: message, args: args);
    }
}

// EXTENSION METHOD void LogWarning(Microsoft.Extensions.Logging.ILogger, System.Exception, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogWarning(exception : Optional<dotnet.System.Exception>, message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), exception: exception, message: message, args: args);
    }
}

// EXTENSION METHOD void LogWarning(Microsoft.Extensions.Logging.ILogger, System.String, System.Object[])
extension Microsoft_Extensions_Logging_ILogger {
    public func LogWarning(message : Optional<dotnet.System.String>, args : dotnet.System_Arr<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(logger: aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl: __copy_handle(self.get_handle())), message: message, args: args);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILogger CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory, System.Type)
extension Microsoft_Extensions_Logging_ILoggerFactory {
    public func CreateLogger(type : dotnet.System.Type_) throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        return try aspnetcore.Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger(factory: aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory(hndl: __copy_handle(self.get_handle())), type: type);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILogger<T> CreateLogger<T>(Microsoft.Extensions.Logging.ILoggerFactory)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Logging.ILogger<T> CreateLogger<T>(Microsoft.Extensions.Logging.ILoggerFactory)

