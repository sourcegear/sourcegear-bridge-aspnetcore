// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.HostFilteringBuilderExtensions
public struct HostFilteringBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHostFiltering(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HostFilteringBuilderExtensions.UseHostFiltering(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds middleware for filtering requests by allowed host headers. Invalid requests will be rejected with a
            400 status code.
            

    - Parameter app: The  instance this method extends.
    - Returns: The original .

    */
    public static func UseHostFiltering(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HostFilteringBuilderExtensions_IApplicationBuilder__UseHostFiltering_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // HostFilteringBuilderExtensions


// type: Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions
public struct HostFilteringServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostFiltering(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>)
// docid: M:Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions.AddHostFiltering(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HostFiltering.HostFilteringOptions})
    /**
    
            Adds services and options for the host filtering middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddHostFiltering(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HostFilteringServicesExtensions_IServiceCollection__AddHostFiltering_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddHostFiltering(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>(configureOptions);
        return try AddHostFiltering(services: services, configureOptions: del_configureOptions);
    }
} // HostFilteringServicesExtensions


}

// Microsoft.AspNetCore.HostFiltering
extension Microsoft.AspNetCore.HostFiltering {
// type: Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware
    /**
    
            A middleware used to filter requests by their Host header.
            

    */
open class HostFilteringMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HostFiltering_HostFilteringMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware>, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>)
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware},Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.HostFiltering.HostFilteringOptions})
    /**
    
            A middleware used to filter requests by their Host header.
            

    - Parameter next: 
    - Parameter logger: 
    - Parameter optionsMonitor: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware>, optionsMonitor : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HostFiltering_HostFilteringMiddleware_ctor_0__3__RequestDelegate_Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_HostFiltering_HostFilteringMiddleware__Microsoft_Extensions_Options_IOptionsMonitor_Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_(&__thrown, next.get_handle(), logger.get_handle(), optionsMonitor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Processes requests
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HostFiltering_HostFilteringMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // HostFilteringMiddleware


// type: Microsoft.AspNetCore.HostFiltering.HostFilteringOptions
    /**
    
            Options for the HostFiltering middleware
            

    */
open class HostFilteringOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedHosts()
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.get_AllowedHosts
    open func get_AllowedHosts() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_System_Collections_Generic_IList_string___get_AllowedHosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AllowedHosts(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.set_AllowedHosts(System.Collections.Generic.IList{System.String})
    open func set_AllowedHosts(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_void__set_AllowedHosts_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowEmptyHosts()
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.get_AllowEmptyHosts
    open func get_AllowEmptyHosts() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_bool__get_AllowEmptyHosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowEmptyHosts(bool)
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.set_AllowEmptyHosts(System.Boolean)
    open func set_AllowEmptyHosts(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_void__set_AllowEmptyHosts_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludeFailureMessage()
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.get_IncludeFailureMessage
    open func get_IncludeFailureMessage() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_bool__get_IncludeFailureMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeFailureMessage(bool)
// docid: M:Microsoft.AspNetCore.HostFiltering.HostFilteringOptions.set_IncludeFailureMessage(System.Boolean)
    open func set_IncludeFailureMessage(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HostFiltering_HostFilteringOptions_void__set_IncludeFailureMessage_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Indicates if requests without hosts are allowed. The default is true.
            

    */
    open var AllowEmptyHosts : Bool {
        get {
            return try! get_AllowEmptyHosts();
        }
        set(v) {
            return try! set_AllowEmptyHosts(value: v);
        }
    }
    /**
    
            The hosts headers that are allowed to access this site. At least one value is required.
            

    */
    open var AllowedHosts : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedHosts();
        }
        set(v) {
            return try! set_AllowedHosts(value: v);
        }
    }
    /**
    
            Indicates if the 400 response should include a default message or be empty. This is enabled by default.
            

    */
    open var IncludeFailureMessage : Bool {
        get {
            return try! get_IncludeFailureMessage();
        }
        set(v) {
            return try! set_IncludeFailureMessage(value: v);
        }
    }
} // HostFilteringOptions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHostFiltering(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHostFiltering() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HostFilteringBuilderExtensions.UseHostFiltering(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostFiltering(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHostFiltering(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions.AddHostFiltering(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddHostFiltering(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HostFiltering.HostFilteringOptions>(configureOptions);
        return try aspnetcore.Microsoft.AspNetCore.Builder.HostFilteringServicesExtensions.AddHostFiltering(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

