// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Logging
extension Microsoft.Extensions.Logging {
// type: Microsoft.Extensions.Logging.TraceSourceFactoryExtensions
public struct TraceSourceFactoryExtensions {
    // Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.Diagnostics.SourceSwitch)
// docid: M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch)
    /**
    
            Adds a TraceSource logger named 'TraceSource' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter sourceSwitch: The  to use.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddTraceSource(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, sourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_TraceSourceFactoryExtensions_ILoggingBuilder__AddTraceSource_0__2__ILoggingBuilder_SourceSwitch(&__thrown, builder?.get_handle() ?? nil, sourceSwitch?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.Diagnostics.SourceSwitch, System.Diagnostics.TraceListener)
// docid: M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)
    /**
    
            Adds a TraceSource logger named 'TraceSource' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter sourceSwitch: The  to use.
    - Parameter listener: The  to use.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddTraceSource(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, sourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>, listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_TraceSourceFactoryExtensions_ILoggingBuilder__AddTraceSource_0__3__ILoggingBuilder_SourceSwitch_TraceListener(&__thrown, builder?.get_handle() ?? nil, sourceSwitch?.get_handle() ?? nil, listener?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.String)
// docid: M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
    /**
    
            Adds a TraceSource logger named 'TraceSource' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter switchName: The name of the  to use.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddTraceSource(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, switchName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_TraceSourceFactoryExtensions_ILoggingBuilder__AddTraceSource_0__2__ILoggingBuilder_String(&__thrown, builder?.get_handle() ?? nil, switchName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.String, System.Diagnostics.TraceListener)
// docid: M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Diagnostics.TraceListener)
    /**
    
            Adds a TraceSource logger named 'TraceSource' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter switchName: The name of the  to use.
    - Parameter listener: The  to use.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddTraceSource(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, switchName : Optional<dotnet.System.String>, listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_TraceSourceFactoryExtensions_ILoggingBuilder__AddTraceSource_0__3__ILoggingBuilder_String_TraceListener(&__thrown, builder?.get_handle() ?? nil, switchName?.get_handle() ?? nil, listener?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TraceSourceFactoryExtensions


}
// Microsoft.Extensions.Logging.TraceSource
extension Microsoft.Extensions.Logging.TraceSource {
// type: Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider
    /**
    
            Provides an ILoggerFactory based on System.Diagnostics.TraceSource.
            

    */
open class TraceSourceLoggerProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILoggerProvider,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_TraceSource_TraceSourceLoggerProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.SourceSwitch)
// docid: M:Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider.#ctor(System.Diagnostics.SourceSwitch)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter rootSourceSwitch: The  to use.
    */
    public init(rootSourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_TraceSource_TraceSourceLoggerProvider_ctor_0__1__SourceSwitch(&__thrown, rootSourceSwitch?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.SourceSwitch, System.Diagnostics.TraceListener)
// docid: M:Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider.#ctor(System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter rootSourceSwitch: The  to use.
    - Parameter rootTraceListener: The  to use.
    */
    public init(rootSourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>, rootTraceListener : Optional<dotnet.System.Diagnostics.TraceListener>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_TraceSource_TraceSourceLoggerProvider_ctor_0__2__SourceSwitch_TraceListener(&__thrown, rootSourceSwitch?.get_handle() ?? nil, rootTraceListener?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider.CreateLogger(System.String)
    /**
    
            Creates a new   for the given component name.
            

    - Parameter name: The name of the  to add.
    - Returns: The  that was created.

    */
    open /* method final */ func CreateLogger(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_TraceSource_TraceSourceLoggerProvider_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Logging.TraceSource.TraceSourceLoggerProvider.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_TraceSource_TraceSourceLoggerProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TraceSourceLoggerProvider


}




// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.Diagnostics.SourceSwitch)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddTraceSource(sourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), sourceSwitch: sourceSwitch);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.Diagnostics.SourceSwitch, System.Diagnostics.TraceListener)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddTraceSource(sourceSwitch : Optional<dotnet.System.Diagnostics.SourceSwitch>, listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), sourceSwitch: sourceSwitch, listener: listener);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.String)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddTraceSource(switchName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), switchName: switchName);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder, System.String, System.Diagnostics.TraceListener)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddTraceSource(switchName : Optional<dotnet.System.String>, listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), switchName: switchName, listener: listener);
    }
}

