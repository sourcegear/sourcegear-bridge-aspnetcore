// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.IniConfigurationExtensions
public struct IniConfigurationExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool, bool)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)
    /**
    
            Adds a INI configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter provider: The  to use to access the file.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The .

    */
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, provider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniFile_0__5__IConfigurationBuilder_IFileProvider_String_bool_bool(&__thrown, builder?.get_handle() ?? nil, provider?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0), Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Ini.IniConfigurationSource})
    /**
    
            Adds a INI configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter configureSource: Configures the source.
    - Returns: The .

    */
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniFile_0__2__IConfigurationBuilder_System_Action_Microsoft_Extensions_Configuration_Ini_IniConfigurationSource_(&__thrown, builder?.get_handle() ?? nil, (configureSource?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>(configureSource);
        return try AddIniFile(builder: builder, configureSource: del_configureSource);
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)
    /**
    
            Adds the INI configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Returns: The .

    */
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniFile_0__2__IConfigurationBuilder_String(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)
    /**
    
            Adds the INI configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Returns: The .

    */
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniFile_0__3__IConfigurationBuilder_String_bool(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool, bool)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)
    /**
    
            Adds the INI configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The .

    */
    public static func AddIniFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniFile_0__4__IConfigurationBuilder_String_bool_bool(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0), Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniStream(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniStream(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.IO.Stream)
    /**
    
            Adds a INI configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter stream: The  to read the ini configuration data from.
    - Returns: The .

    */
    public static func AddIniStream(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, stream : Optional<dotnet.System.IO.Stream>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IniConfigurationExtensions_IConfigurationBuilder__AddIniStream_0__2__IConfigurationBuilder_Stream(&__thrown, builder?.get_handle() ?? nil, stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IniConfigurationExtensions


}
// Microsoft.Extensions.Configuration.Ini
extension Microsoft.Extensions.Configuration.Ini {
// type: Microsoft.Extensions.Configuration.Ini.IniConfigurationProvider
    /**
    
            An INI file based .
            Files are simple line structures (INI Files on Wikipedia)
            

    */
open class IniConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.FileConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Ini_IniConfigurationProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.Ini.IniConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Ini.IniConfigurationSource)
    /**
    
            Initializes a new instance with the specified source.
            

    - Parameter source: The source settings.
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Ini_IniConfigurationProvider_ctor_0__1__IniConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniConfigurationProvider.Load(System.IO.Stream)
    /**
    
            Loads the INI data from a stream.
            

    - Parameter stream: The stream to read.
    */
    open override func Load(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Ini_IniConfigurationProvider_void__Load_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IniConfigurationProvider


// type: Microsoft.Extensions.Configuration.Ini.IniConfigurationSource
    /**
    
            Represents an INI file as an .
            Files are simple line structures (INI Files on Wikipedia)
            

    */
open class IniConfigurationSource
    :
    aspnetcore.Microsoft.Extensions.Configuration.FileConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Ini_IniConfigurationSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.Ini.IniConfigurationSource.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Ini_IniConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: An 

    */
    open override func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Ini_IniConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IniConfigurationSource


// type: Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationProvider
    /**
    
            An INI file based .
            

    */
open class IniStreamConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource)
    /**
    
            Constructor.
            

    - Parameter source: The .
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationProvider_ctor_0__1__IniStreamConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationProvider.Load(System.IO.Stream)
    /**
    
            Loads INI configuration key/values from a stream into a provider.
            

    - Parameter stream: The  to load ini configuration data from.
    */
    open override func Load(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationProvider_void__Load_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> Read(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationProvider.Read(System.IO.Stream)
    /**
    
            Read a stream of INI values into a key/value dictionary.
            

    - Parameter stream: The stream of INI data.
    - Returns: The  which was read from the stream.

    */
    open class func Read(stream : Optional<dotnet.System.IO.Stream>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationProvider_System_Collections_Generic_IDictionary_string_string___Read_0__1__Stream(&__thrown, stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IniStreamConfigurationProvider


// type: Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource
    /**
    
            Represents an INI file as an .
            Files are simple line structures (INI Files on Wikipedia)
            

    */
open class IniStreamConfigurationSource
    :
    aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.Ini.IniStreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: An 

    */
    open override func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Ini_IniStreamConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IniStreamConfigurationSource


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniFile(provider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), provider: provider, path: path, optional: optional, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniFile(configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: configureSource);
    }
    // delegate closure overload
    public func AddIniFile(configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Ini.IniConfigurationSource>(configureSource);
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: del_configureSource);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniFile(path : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniFile(path : Optional<dotnet.System.String>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path, optional: optional);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniFile(path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path, optional: optional, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniStream(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.IO.Stream)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddIniStream(stream : Optional<dotnet.System.IO.Stream>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniStream(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), stream: stream);
    }
}

