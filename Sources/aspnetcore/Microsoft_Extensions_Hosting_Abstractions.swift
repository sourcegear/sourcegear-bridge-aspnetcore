// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions
public struct ServiceCollectionHostedServiceExtensions {
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<THostedService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<THostedService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider,THostedService>)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions.AddHostedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
    /**
    
            Add an  registration for the given type.
            

    - Parameter services: The  to register with.
    - Parameter implementationFactory: A factory to create new instances of the service implementation.
    - Returns: The original .

    */
    public static func AddHostedService<UTHostedService : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, implementationFactory : dotnet.System.Func_2<dotnet.System.IServiceProvider,UTHostedService>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceCollectionHostedServiceExtensions_IServiceCollection__AddHostedService_1__2__IServiceCollection_System_Func_System_IServiceProvider_UTHostedService_(UTHostedService.get_type_handle(), &__thrown, services?.get_handle() ?? nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddHostedService<UTHostedService : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, implementationFactory : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> UTHostedService) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_implementationFactory = try dotnet.System.Func_2<dotnet.System.IServiceProvider,UTHostedService>(implementationFactory);
        return try AddHostedService(services: services, implementationFactory: del_implementationFactory);
    }
} // ServiceCollectionHostedServiceExtensions


}

// Microsoft.Extensions.Hosting
extension Microsoft.Extensions.Hosting {
// type: Microsoft.Extensions.Hosting.BackgroundService
    /**
    
            Base class for implementing a long running .
            

    */
open class BackgroundService
    :
    dotnet.System.Object,
    Microsoft_Extensions_Hosting_IHostedService,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_BackgroundService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:Microsoft.Extensions.Hosting.BackgroundService.Dispose
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_BackgroundService_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
    /**
    
            Triggered when the application host is ready to start the service.
            

    - Parameter cancellationToken: Indicates that the start process has been aborted.
    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_BackgroundService_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
    /**
    
            Triggered when the application host is performing a graceful shutdown.
            

    - Parameter cancellationToken: Indicates that the shutdown process should no longer be graceful.
    */
    open func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_BackgroundService_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_ExecuteTask()
// docid: M:Microsoft.Extensions.Hosting.BackgroundService.get_ExecuteTask
    open func get_ExecuteTask() throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_BackgroundService_Task__get_ExecuteTask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the Task that executes the background operation.
            

    */
    open var ExecuteTask : Optional<dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_ExecuteTask();
        }
    }
} // BackgroundService


// type: Microsoft.Extensions.Hosting.EnvironmentName
public struct EnvironmentName {
    // static field: System.String Development
    public static var Development : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_EnvironmentName_get_Development();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String Production
    public static var Production : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_EnvironmentName_get_Production();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String Staging
    public static var Staging : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_EnvironmentName_get_Staging();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
} // EnvironmentName


// type: Microsoft.Extensions.Hosting.Environments
public struct Environments {
    // static field: System.String Development
    public static var Development : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_Environments_get_Development();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String Production
    public static var Production : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_Environments_get_Production();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String Staging
    public static var Staging : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_Environments_get_Staging();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
} // Environments


// type: Microsoft.Extensions.Hosting.HostBuilderContext
    /**
    
            Context containing the common services on the . Some properties may be null until set by the .
            

    */
open class HostBuilderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_HostBuilderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})
    public init(properties : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Hosting_HostBuilderContext_ctor_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, (properties?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.IConfiguration get_Configuration()
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.get_Configuration
    open func get_Configuration() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostBuilderContext_IConfiguration__get_Configuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
    open func set_Configuration(value : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_HostBuilderContext_void__set_Configuration_0__1__IConfiguration(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Hosting.IHostEnvironment get_HostingEnvironment()
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.get_HostingEnvironment
    open func get_HostingEnvironment() throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostBuilderContext_IHostEnvironment__get_HostingEnvironment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HostingEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.set_HostingEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment)
    open func set_HostingEnvironment(value : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_HostBuilderContext_void__set_HostingEnvironment_0__1__IHostEnvironment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.Extensions.Hosting.HostBuilderContext.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostBuilderContext_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The  containing the merged configuration of the application and the .
            

    */
    open var Configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        get {
            return try! get_Configuration();
        }
        set(v) {
            return try! set_Configuration(value: v!);
        }
    }
    /**
    
            The  initialized by the .
            

    */
    open var HostingEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment> {
        get {
            return try! get_HostingEnvironment();
        }
        set(v) {
            return try! set_HostingEnvironment(value: v!);
        }
    }
    /**
    
            A central location for sharing state between components during the host building process.
            

    */
    open var Properties : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_Properties();
        }
    }
} // HostBuilderContext


// type: Microsoft.Extensions.Hosting.HostDefaults
public struct HostDefaults {
    // static field: System.String ApplicationKey
    /**
    
            The configuration key used to set .
            

    */
    public static var ApplicationKey : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_HostDefaults_get_ApplicationKey();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ContentRootKey
    /**
    
            The configuration key used to set 
            and .
            

    */
    public static var ContentRootKey : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_HostDefaults_get_ContentRootKey();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String EnvironmentKey
    /**
    
            The configuration key used to set .
            

    */
    public static var EnvironmentKey : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Hosting_HostDefaults_get_EnvironmentKey();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
} // HostDefaults


// type: Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions
public struct HostEnvironmentEnvExtensions {
    // bool IsDevelopment(Microsoft.Extensions.Hosting.IHostEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsDevelopment(Microsoft.Extensions.Hosting.IHostEnvironment)
    /**
    
            Checks if the current host environment name is .
            

    - Parameter hostEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsDevelopment(hostEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostEnvironmentEnvExtensions_bool__IsDevelopment_0__1__IHostEnvironment(&__thrown, hostEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment, System.String)
// docid: M:Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment,System.String)
    /**
    
            Compares the current host environment name against the specified value.
            

    - Parameter hostEnvironment: An instance of .
    - Parameter environmentName: Environment name to validate against.
    - Returns: True if the specified name is the same as the current environment, otherwise false.

    */
    public static func IsEnvironment(hostEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment>, environmentName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostEnvironmentEnvExtensions_bool__IsEnvironment_0__2__IHostEnvironment_String(&__thrown, hostEnvironment?.get_handle() ?? nil, environmentName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProduction(Microsoft.Extensions.Hosting.IHostEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsProduction(Microsoft.Extensions.Hosting.IHostEnvironment)
    /**
    
            Checks if the current host environment name is .
            

    - Parameter hostEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsProduction(hostEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostEnvironmentEnvExtensions_bool__IsProduction_0__1__IHostEnvironment(&__thrown, hostEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStaging(Microsoft.Extensions.Hosting.IHostEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsStaging(Microsoft.Extensions.Hosting.IHostEnvironment)
    /**
    
            Checks if the current host environment name is .
            

    - Parameter hostEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsStaging(hostEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostEnvironmentEnvExtensions_bool__IsStaging_0__1__IHostEnvironment(&__thrown, hostEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // HostEnvironmentEnvExtensions


// type: Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions
public struct HostingAbstractionsHostBuilderExtensions {
    // Microsoft.Extensions.Hosting.IHost Start(Microsoft.Extensions.Hosting.IHostBuilder)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.Start(Microsoft.Extensions.Hosting.IHostBuilder)
    /**
    
            Builds and starts the host.
            

    - Parameter hostBuilder: The  to start.
    - Returns: The started .

    */
    public static func Start(hostBuilder : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingAbstractionsHostBuilderExtensions_IHost__Start_0__1__IHostBuilder(&__thrown, hostBuilder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.Extensions.Hosting.IHost> StartAsync(Microsoft.Extensions.Hosting.IHostBuilder, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.StartAsync(Microsoft.Extensions.Hosting.IHostBuilder,System.Threading.CancellationToken)
    /**
    
            Builds and starts the host.
            

    - Parameter hostBuilder: The  to start.
    - Parameter cancellationToken: A  that can be used to cancel the start.
    - Returns: The started .

    */
    public static func StartAsync(hostBuilder : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Hosting.IHost>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingAbstractionsHostBuilderExtensions_System_Threading_Tasks_Task_Microsoft_Extensions_Hosting_IHost___StartAsync_0__2__IHostBuilder_CancellationToken(&__thrown, hostBuilder?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HostingAbstractionsHostBuilderExtensions


// type: Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions
public struct HostingAbstractionsHostExtensions {
    // void Run(Microsoft.Extensions.Hosting.IHost)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(Microsoft.Extensions.Hosting.IHost)
    /**
    
            Runs an application and block the calling thread until host shutdown.
            

    - Parameter host: The  to run.
    */
    public static func Run(host : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_HostingAbstractionsHostExtensions_void__Run_0__1__IHost(&__thrown, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task RunAsync(Microsoft.Extensions.Hosting.IHost, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(Microsoft.Extensions.Hosting.IHost,System.Threading.CancellationToken)
    /**
    
            Runs an application and returns a  that only completes when the token is triggered or shutdown is triggered.
            The  instance is disposed of after running.
            

    - Parameter host: The  to run.
    - Parameter token: The token to trigger shutdown.
    - Returns: The  that represents the asynchronous operation.

    */
    public static func RunAsync(host : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost>, token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingAbstractionsHostExtensions_Task__RunAsync_0__2__IHost_CancellationToken(&__thrown, host?.get_handle() ?? nil, token.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Start(Microsoft.Extensions.Hosting.IHost)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Start(Microsoft.Extensions.Hosting.IHost)
    /**
    
            Starts the host synchronously.
            

    - Parameter host: The  to start.
    */
    public static func Start(host : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_HostingAbstractionsHostExtensions_void__Start_0__1__IHost(&__thrown, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task StopAsync(Microsoft.Extensions.Hosting.IHost, System.TimeSpan)
    // void WaitForShutdown(Microsoft.Extensions.Hosting.IHost)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.WaitForShutdown(Microsoft.Extensions.Hosting.IHost)
    /**
    
            Block the calling thread until shutdown is triggered via Ctrl+C or SIGTERM.
            

    - Parameter host: The running .
    */
    public static func WaitForShutdown(host : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_HostingAbstractionsHostExtensions_void__WaitForShutdown_0__1__IHost(&__thrown, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WaitForShutdownAsync(Microsoft.Extensions.Hosting.IHost, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.WaitForShutdownAsync(Microsoft.Extensions.Hosting.IHost,System.Threading.CancellationToken)
    /**
    
            Returns a Task that completes when shutdown is triggered via the given token.
            

    - Parameter host: The running .
    - Parameter token: The token to trigger shutdown.
    - Returns: The  that represents the asynchronous operation.

    */
    public static func WaitForShutdownAsync(host : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost>, token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingAbstractionsHostExtensions_Task__WaitForShutdownAsync_0__2__IHost_CancellationToken(&__thrown, host?.get_handle() ?? nil, token.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HostingAbstractionsHostExtensions


// type: Microsoft.Extensions.Hosting.HostingEnvironmentExtensions
public struct HostingEnvironmentExtensions {
    // bool IsDevelopment(Microsoft.Extensions.Hosting.IHostingEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.Extensions.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsDevelopment(hostingEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingEnvironmentExtensions_bool__IsDevelopment_0__1__IHostingEnvironment(&__thrown, hostingEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnvironment(Microsoft.Extensions.Hosting.IHostingEnvironment, System.String)
// docid: M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.Extensions.Hosting.IHostingEnvironment,System.String)
    /**
    
            Compares the current hosting environment name against the specified value.
            

    - Parameter hostingEnvironment: An instance of .
    - Parameter environmentName: Environment name to validate against.
    - Returns: True if the specified name is the same as the current environment, otherwise false.

    */
    public static func IsEnvironment(hostingEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment>, environmentName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingEnvironmentExtensions_bool__IsEnvironment_0__2__IHostingEnvironment_String(&__thrown, hostingEnvironment?.get_handle() ?? nil, environmentName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProduction(Microsoft.Extensions.Hosting.IHostingEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.Extensions.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsProduction(hostingEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingEnvironmentExtensions_bool__IsProduction_0__1__IHostingEnvironment(&__thrown, hostingEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStaging(Microsoft.Extensions.Hosting.IHostingEnvironment)
// docid: M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.Extensions.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsStaging(hostingEnvironment : Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_HostingEnvironmentExtensions_bool__IsStaging_0__1__IHostingEnvironment(&__thrown, hostingEnvironment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // HostingEnvironmentExtensions


// type: Microsoft.Extensions.Hosting.IApplicationLifetime
    /**
    
            Allows consumers to perform cleanup during a graceful shutdown.
            
             This type is obsolete and will be removed in a future version.
             The recommended alternative is Microsoft.Extensions.Hosting.IHostApplicationLifetime.
            
            

    */
open class IApplicationLifetime
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IApplicationLifetime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IApplicationLifetime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void StopApplication()
// docid: M:Microsoft.Extensions.Hosting.IApplicationLifetime.StopApplication
    /**
    
            Requests termination of the current application.
            

    */
    open func StopApplication() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IApplicationLifetime_void__StopApplication_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStarted()
// docid: M:Microsoft.Extensions.Hosting.IApplicationLifetime.get_ApplicationStarted
    open func get_ApplicationStarted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopped()
// docid: M:Microsoft.Extensions.Hosting.IApplicationLifetime.get_ApplicationStopped
    open func get_ApplicationStopped() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStopped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopping()
// docid: M:Microsoft.Extensions.Hosting.IApplicationLifetime.get_ApplicationStopping
    open func get_ApplicationStopping() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStopping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
} // IApplicationLifetime


// type: Microsoft.Extensions.Hosting.IHost
    /**
    
            A program abstraction.
            

    */
open class IHost
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHost,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHost_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)
    /**
    
            Start the program.
            

    - Parameter cancellationToken: Used to abort program start.
    - Returns: A  that will be completed when the  starts.

    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHost_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)
    /**
    
            Attempts to gracefully stop the program.
            

    - Parameter cancellationToken: Used to indicate when stop should no longer be graceful.
    - Returns: A  that will be completed when the  stops.

    */
    open func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHost_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.IServiceProvider get_Services()
// docid: M:Microsoft.Extensions.Hosting.IHost.get_Services
    open func get_Services() throws -> Optional<dotnet.System.IServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHost_IServiceProvider__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHost


// type: Microsoft.Extensions.Hosting.IHostApplicationLifetime
    /**
    
            Allows consumers to be notified of application lifetime events. This interface is not intended to be user-replaceable.
            

    */
open class IHostApplicationLifetime
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostApplicationLifetime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostApplicationLifetime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void StopApplication()
// docid: M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.StopApplication
    /**
    
            Requests termination of the current application.
            

    */
    open func StopApplication() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostApplicationLifetime_void__StopApplication_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStarted()
// docid: M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.get_ApplicationStarted
    open func get_ApplicationStarted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostApplicationLifetime_CancellationToken__get_ApplicationStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopped()
// docid: M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.get_ApplicationStopped
    open func get_ApplicationStopped() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostApplicationLifetime_CancellationToken__get_ApplicationStopped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopping()
// docid: M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.get_ApplicationStopping
    open func get_ApplicationStopping() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostApplicationLifetime_CancellationToken__get_ApplicationStopping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
} // IHostApplicationLifetime


// type: Microsoft.Extensions.Hosting.IHostBuilder
    /**
    
            A program initialization abstraction.
            

    */
open class IHostBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Hosting.IHost Build()
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.Build
    /**
    
            Run the given actions to initialize the host. This can only be called once.
            

    - Returns: An initialized .

    */
    open func Build() throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHost__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    
            Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at  for
            subsequent operations, as well as in .
            

    - Parameter configureDelegate: The delegate for configuring the  that will be used
            to construct the  for the application.
    - Returns: The same instance of the  for chaining.

    */
    open func ConfigureAppConfiguration(configureDelegate : Optional<dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__ConfigureAppConfiguration_0__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), (configureDelegate?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func ConfigureAppConfiguration(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer<TContainerBuilder>(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,TContainerBuilder>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureContainer``1(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,``0})
    /**
    
            Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.
            

    - Parameter configureDelegate: The delegate which configures the builder.
    - Returns: The same instance of the  for chaining.

    */
    open func ConfigureContainer<UTContainerBuilder : SGBridgeGenericValue>(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,UTContainerBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__ConfigureContainer_1__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_UTContainerBuilder_(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func ConfigureContainer<UTContainerBuilder : SGBridgeGenericValue>(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, UTContainerBuilder) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,UTContainerBuilder>(configureDelegate);
        return try ConfigureContainer(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureHostConfiguration(System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    
            Set up the configuration for the builder itself. This will be used to initialize the 
            for use later in the build process. This can be called multiple times and the results will be additive.
            

    - Parameter configureDelegate: The delegate for configuring the  that will be used
            to construct the  for the host.
    - Returns: The same instance of the  for chaining.

    */
    open func ConfigureHostConfiguration(configureDelegate : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__ConfigureHostConfiguration_0__1__System_Action_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), (configureDelegate?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func ConfigureHostConfiguration(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        let del_configureDelegate = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureHostConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Adds services to the container. This can be called multiple times and the results will be additive.
            

    - Parameter configureDelegate: The delegate for configuring the  that will be used
            to construct the .
    - Returns: The same instance of the  for chaining.

    */
    open func ConfigureServices(configureDelegate : Optional<dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), (configureDelegate?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func ConfigureServices(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureDelegate);
        return try ConfigureServices(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory<TContainerBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})
    /**
    
            Overrides the factory used to create the service provider.
            

    - Parameter factory: The factory to register.
    - Returns: The same instance of the  for chaining.

    */
    open func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__UseServiceProviderFactory_1__1__Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_UTContainerBuilder_(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory<TContainerBuilder>(System.Func<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder>>)
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})
    /**
    
            Overrides the factory used to create the service provider.
            

    - Returns: The same instance of the  for chaining.

    */
    open func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_IHostBuilder__UseServiceProviderFactory_1__1__System_Func_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_DependencyInjection_Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_UTContainerBuilder__(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), (factory?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder> {
        let del_factory = try dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>>(factory);
        return try UseServiceProviderFactory(factory: del_factory);
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.Extensions.Hosting.IHostBuilder.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostBuilder_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHostBuilder


// type: Microsoft.Extensions.Hosting.IHostEnvironment
    /**
    
            Provides information about the hosting environment an application is running in.
            

    */
open class IHostEnvironment
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostEnvironment
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostEnvironment_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_ApplicationName()
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.get_ApplicationName
    open func get_ApplicationName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostEnvironment_String__get_ApplicationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ApplicationName(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.set_ApplicationName(System.String)
    open func set_ApplicationName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostEnvironment_void__set_ApplicationName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_ContentRootFileProvider()
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.get_ContentRootFileProvider
    open func get_ContentRootFileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostEnvironment_IFileProvider__get_ContentRootFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_ContentRootFileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostEnvironment_void__set_ContentRootFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentRootPath()
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.get_ContentRootPath
    open func get_ContentRootPath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostEnvironment_String__get_ContentRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRootPath(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.set_ContentRootPath(System.String)
    open func set_ContentRootPath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostEnvironment_void__set_ContentRootPath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EnvironmentName()
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.get_EnvironmentName
    open func get_EnvironmentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostEnvironment_String__get_EnvironmentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EnvironmentName(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostEnvironment.set_EnvironmentName(System.String)
    open func set_EnvironmentName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostEnvironment_void__set_EnvironmentName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostEnvironment


// type: Microsoft.Extensions.Hosting.IHostLifetime
open class IHostLifetime
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostLifetime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostLifetime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
    /**
    
            Called from  to indicate that the host is stopping and it's time to shut down.
            

    - Parameter cancellationToken: Used to indicate when stop should no longer be graceful.
    - Returns: A .

    */
    open func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostLifetime_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task WaitForStartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
    /**
    
            Called at the start of  which will wait until it's complete before
            continuing. This can be used to delay startup until signaled by an external event.
            

    - Parameter cancellationToken: Used to abort program start.
    - Returns: A .

    */
    open func WaitForStartAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostLifetime_Task__WaitForStartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHostLifetime


// type: Microsoft.Extensions.Hosting.IHostedService
    /**
    
            Defines methods for objects that are managed by the host.
            

    */
open class IHostedService
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostedService
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostedService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    /**
    
            Triggered when the application host is ready to start the service.
            

    - Parameter cancellationToken: Indicates that the start process has been aborted.
    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostedService_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    /**
    
            Triggered when the application host is performing a graceful shutdown.
            

    - Parameter cancellationToken: Indicates that the shutdown process should no longer be graceful.
    */
    open func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostedService_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHostedService


// type: Microsoft.Extensions.Hosting.IHostingEnvironment
    /**
    
            Provides information about the hosting environment an application is running in.
            
             This type is obsolete and will be removed in a future version.
             The recommended alternative is Microsoft.Extensions.Hosting.IHostEnvironment.
            
            

    */
open class IHostingEnvironment
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Hosting_IHostingEnvironment
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_IHostingEnvironment_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_ApplicationName()
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.get_ApplicationName
    open func get_ApplicationName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostingEnvironment_String__get_ApplicationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ApplicationName(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.set_ApplicationName(System.String)
    open func set_ApplicationName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostingEnvironment_void__set_ApplicationName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_ContentRootFileProvider()
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.get_ContentRootFileProvider
    open func get_ContentRootFileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostingEnvironment_IFileProvider__get_ContentRootFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_ContentRootFileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostingEnvironment_void__set_ContentRootFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentRootPath()
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.get_ContentRootPath
    open func get_ContentRootPath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostingEnvironment_String__get_ContentRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRootPath(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.set_ContentRootPath(System.String)
    open func set_ContentRootPath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostingEnvironment_void__set_ContentRootPath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EnvironmentName()
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.get_EnvironmentName
    open func get_EnvironmentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_IHostingEnvironment_String__get_EnvironmentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EnvironmentName(System.String)
// docid: M:Microsoft.Extensions.Hosting.IHostingEnvironment.set_EnvironmentName(System.String)
    open func set_EnvironmentName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_IHostingEnvironment_void__set_EnvironmentName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostingEnvironment


}



public protocol Microsoft_Extensions_Hosting_IApplicationLifetime
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHost
    :
    System_IDisposable
{
}

public protocol Microsoft_Extensions_Hosting_IHostApplicationLifetime
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHostBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHostEnvironment
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHostLifetime
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHostedService
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Hosting_IHostingEnvironment
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<THostedService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<THostedService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<THostedService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider,THostedService>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHostedService<UTHostedService : SGBridgeGenericValue>(implementationFactory : dotnet.System.Func_2<dotnet.System.IServiceProvider,UTHostedService>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions.AddHostedService(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), implementationFactory: implementationFactory);
    }
    // delegate closure overload
    public func AddHostedService<UTHostedService : SGBridgeGenericValue>(implementationFactory : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> UTHostedService) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_implementationFactory = try dotnet.System.Func_2<dotnet.System.IServiceProvider,UTHostedService>(implementationFactory);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions.AddHostedService(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), implementationFactory: del_implementationFactory);
    }
}

// EXTENSION METHOD bool IsDevelopment(Microsoft.Extensions.Hosting.IHostEnvironment)
extension Microsoft_Extensions_Hosting_IHostEnvironment {
    public func IsDevelopment() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsDevelopment(hostEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsEnvironment(Microsoft.Extensions.Hosting.IHostEnvironment, System.String)
extension Microsoft_Extensions_Hosting_IHostEnvironment {
    public func IsEnvironment(environmentName : Optional<dotnet.System.String>) throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsEnvironment(hostEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment(hndl: __copy_handle(self.get_handle())), environmentName: environmentName);
    }
}

// EXTENSION METHOD bool IsProduction(Microsoft.Extensions.Hosting.IHostEnvironment)
extension Microsoft_Extensions_Hosting_IHostEnvironment {
    public func IsProduction() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsProduction(hostEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsStaging(Microsoft.Extensions.Hosting.IHostEnvironment)
extension Microsoft_Extensions_Hosting_IHostEnvironment {
    public func IsStaging() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.IsStaging(hostEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Hosting.IHost Start(Microsoft.Extensions.Hosting.IHostBuilder)
extension Microsoft_Extensions_Hosting_IHostBuilder {
    public func Start() throws -> Optional<aspnetcore.Microsoft.Extensions.Hosting.IHost> {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.Start(hostBuilder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.Extensions.Hosting.IHost> StartAsync(Microsoft.Extensions.Hosting.IHostBuilder, System.Threading.CancellationToken)
extension Microsoft_Extensions_Hosting_IHostBuilder {
    public func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Hosting.IHost>> {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions.StartAsync(hostBuilder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD void Run(Microsoft.Extensions.Hosting.IHost)
extension Microsoft_Extensions_Hosting_IHost {
    public func Run() throws {
        try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(host: aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task RunAsync(Microsoft.Extensions.Hosting.IHost, System.Threading.CancellationToken)
extension Microsoft_Extensions_Hosting_IHost {
    public func RunAsync(token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(host: aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl: __copy_handle(self.get_handle())), token: token);
    }
}

// EXTENSION METHOD void Start(Microsoft.Extensions.Hosting.IHost)
extension Microsoft_Extensions_Hosting_IHost {
    public func Start() throws {
        try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Start(host: aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task StopAsync(Microsoft.Extensions.Hosting.IHost, System.TimeSpan)
// TODO COPE extension method (span) System.Threading.Tasks.Task StopAsync(Microsoft.Extensions.Hosting.IHost, System.TimeSpan)

// EXTENSION METHOD void WaitForShutdown(Microsoft.Extensions.Hosting.IHost)
extension Microsoft_Extensions_Hosting_IHost {
    public func WaitForShutdown() throws {
        try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.WaitForShutdown(host: aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WaitForShutdownAsync(Microsoft.Extensions.Hosting.IHost, System.Threading.CancellationToken)
extension Microsoft_Extensions_Hosting_IHost {
    public func WaitForShutdownAsync(token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.WaitForShutdownAsync(host: aspnetcore.Microsoft.Extensions.Hosting.IHost(hndl: __copy_handle(self.get_handle())), token: token);
    }
}

// EXTENSION METHOD bool IsDevelopment(Microsoft.Extensions.Hosting.IHostingEnvironment)
extension Microsoft_Extensions_Hosting_IHostingEnvironment {
    public func IsDevelopment() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsDevelopment(hostingEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsEnvironment(Microsoft.Extensions.Hosting.IHostingEnvironment, System.String)
extension Microsoft_Extensions_Hosting_IHostingEnvironment {
    public func IsEnvironment(environmentName : Optional<dotnet.System.String>) throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsEnvironment(hostingEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())), environmentName: environmentName);
    }
}

// EXTENSION METHOD bool IsProduction(Microsoft.Extensions.Hosting.IHostingEnvironment)
extension Microsoft_Extensions_Hosting_IHostingEnvironment {
    public func IsProduction() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsProduction(hostingEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsStaging(Microsoft.Extensions.Hosting.IHostingEnvironment)
extension Microsoft_Extensions_Hosting_IHostingEnvironment {
    public func IsStaging() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsStaging(hostingEnvironment: aspnetcore.Microsoft.Extensions.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

