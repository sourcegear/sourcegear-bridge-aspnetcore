// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.ApiExplorer
extension Microsoft.AspNetCore.Mvc.ApiExplorer {
// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions
public struct ApiDescriptionExtensions {
// TODO COPE (write_all_methods) (unused generic param) T GetProperty<T>(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)
    // void SetProperty<T>(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription, T)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,``0)
    /**
    
            Sets the value of an property in the  collection using
            the provided value of  as the key.
            

    - Parameter apiDescription: The .
    - Parameter value: The value of the property.
    */
    public static func SetProperty<UT : SGBridgeGenericValue>(apiDescription : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription, value : UT) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionExtensions_void__SetProperty_1__2__ApiDescription_UT(UT.get_type_handle(), &__thrown, apiDescription.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ApiDescriptionExtensions


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup
    /**
    
            Represents a group of related apis.
            

    */
open class ApiDescriptionGroup
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription})
    /**
    
            Creates a new .
            

    - Parameter groupName: The group name.
    - Parameter items: A collection of  items for this group.
    */
    public init(groupName : Optional<dotnet.System.String>, items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup_ctor_0__2__String_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_(&__thrown, groupName?.get_handle() ?? nil, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup.get_GroupName
    open func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            The group name.
            

    */
    open var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
    }
    /**
    
            A collection of  items for this group.
            

    */
    open var Items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> {
        get {
            return try! get_Items();
        }
    }
} // ApiDescriptionGroup


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection
    /**
    
            A cached collection of .
            

    */
open class ApiDescriptionGroupCollection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollection_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup>, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup},System.Int32)
    /**
    
            Initializes a new instance of the .
            

    - Parameter items: The list of .
    - Parameter version: The unique version of discovered groups.
    */
    public init(items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup>, version : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollection_ctor_0__2__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup__i32(&__thrown, items.get_handle(), version);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup> get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollection_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroup___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Version()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection.get_Version
    open func get_Version() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollection_i32__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Returns the list of .
            

    */
    open var Items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Returns the unique version of the current items.
            

    */
    open var Version : Swift.Int32 {
        get {
            return try! get_Version();
        }
    }
} // ApiDescriptionGroupCollection


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider
    /**
    */
open class ApiDescriptionGroupCollectionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollectionProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollectionProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider})
    /**
    
            Creates a new instance of .
            

    - Parameter actionDescriptorCollectionProvider: 
            The .
            
    - Parameter apiDescriptionProviders: 
            The .
            
    */
    public init(actionDescriptorCollectionProvider : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider, apiDescriptionProviders : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollectionProvider_ctor_0__2__IActionDescriptorCollectionProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider_(&__thrown, actionDescriptorCollectionProvider.get_handle(), apiDescriptionProviders.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection get_ApiDescriptionGroups()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider.get_ApiDescriptionGroups
    open /* method final */ func get_ApiDescriptionGroups() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionGroupCollectionProvider_ApiDescriptionGroupCollection__get_ApiDescriptionGroups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection(hndl : __return);
        }
    }
    /**
    */
    public var ApiDescriptionGroups : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection {
        get {
            return try! get_ApiDescriptionGroups();
        }
    }
} // ApiDescriptionGroupCollectionProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider
    /**
    
            Implements a provider of  for actions represented
            by .
            

    */
open class DefaultApiDescriptionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.AspNetCore.Routing.IInlineConstraintResolver, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Routing.RouteOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.AspNetCore.Routing.IInlineConstraintResolver,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Routing.RouteOptions})
    /**
    
            Creates a new instance of .
            

    - Parameter optionsAccessor: The accessor for .
    - Parameter constraintResolver: The  used for resolving inline
            constraints.
    - Parameter modelMetadataProvider: The .
    - Parameter mapper: The .
    - Parameter routeOptions: The accessor for .
    */
    public init(optionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, constraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver, modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, mapper : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper, routeOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_ctor_0__5__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__IInlineConstraintResolver_IModelMetadataProvider_IActionResultTypeMapper_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Routing_RouteOptions_(&__thrown, optionsAccessor.get_handle(), constraintResolver.get_handle(), modelMetadataProvider.get_handle(), mapper.get_handle(), routeOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
    /**
    */
    open /* method final */ func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_void__OnProvidersExecuting_0__1__ApiDescriptionProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
    /**
    */
    open /* method final */ func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_void__OnProvidersExecuted_0__1__ApiDescriptionProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_DefaultApiDescriptionProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // DefaultApiDescriptionProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupCollectionProvider
    /**
    
            Provides access to a collection of .
            

    */
open class IApiDescriptionGroupCollectionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection get_ApiDescriptionGroups()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupCollectionProvider.get_ApiDescriptionGroups
    open func get_ApiDescriptionGroups() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider_ApiDescriptionGroupCollection__get_ApiDescriptionGroups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection(hndl : __return);
        }
    }
} // IApiDescriptionGroupCollectionProvider


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.EndpointMetadataApiExplorerServiceCollectionExtensions
public struct EndpointMetadataApiExplorerServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddEndpointsApiExplorer(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.EndpointMetadataApiExplorerServiceCollectionExtensions.AddEndpointsApiExplorer(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Configures ApiExplorer using .
            

    - Parameter services: The .
    */
    public static func AddEndpointsApiExplorer(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_EndpointMetadataApiExplorerServiceCollectionExtensions_IServiceCollection__AddEndpointsApiExplorer_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
} // EndpointMetadataApiExplorerServiceCollectionExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions
public struct MvcApiExplorerMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApiExplorer(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions.AddApiExplorer(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Configures  to use ApiExplorer.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddApiExplorer(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcApiExplorerMvcCoreBuilderExtensions_IMvcCoreBuilder__AddApiExplorer_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
} // MvcApiExplorerMvcCoreBuilderExtensions


}



public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupCollectionProvider
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD T GetProperty<T>(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)
// TODO COPE extension method (unused generic param) T GetProperty<T>(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)

// EXTENSION METHOD void SetProperty<T>(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription, T)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription {
    public func SetProperty<UT : SGBridgeGenericValue>(value : UT) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.SetProperty(apiDescription: self, value: value);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddEndpointsApiExplorer(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddEndpointsApiExplorer() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.EndpointMetadataApiExplorerServiceCollectionExtensions.AddEndpointsApiExplorer(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApiExplorer(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddApiExplorer() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions.AddApiExplorer(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

