// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions
public struct UserSecretsConfigurationExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly)
// docid: M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)
    /**
    
            
            Adds the user secrets configuration source. This searches  for an instance
            of , which specifies a user secrets ID.
            
            
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            
            

    - Parameter configuration: The configuration builder.
    - Parameter assembly: The assembly with the .
    - Returns: The configuration builder.

    */
    public static func AddUserSecrets(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, assembly : Optional<dotnet.System.Reflection.Assembly>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecretsConfigurationExtensions_IConfigurationBuilder__AddUserSecrets_0__2__IConfigurationBuilder_Assembly(&__thrown, configuration?.get_handle() ?? nil, assembly?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly, bool)
// docid: M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean)
    /**
    
            
            Adds the user secrets configuration source. This searches  for an instance
            of , which specifies a user secrets ID.
            
            
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            
            

    - Parameter configuration: The configuration builder.
    - Parameter assembly: The assembly with the .
    - Parameter optional: Whether loading secrets is optional. When false, this method may throw.
    - Returns: The configuration builder.

    */
    public static func AddUserSecrets(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, assembly : Optional<dotnet.System.Reflection.Assembly>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecretsConfigurationExtensions_IConfigurationBuilder__AddUserSecrets_0__3__IConfigurationBuilder_Assembly_bool(&__thrown, configuration?.get_handle() ?? nil, assembly?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly, bool, bool)
// docid: M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean,System.Boolean)
    /**
    
            
            Adds the user secrets configuration source. This searches  for an instance
            of , which specifies a user secrets ID.
            
            
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            
            

    - Parameter configuration: The configuration builder.
    - Parameter assembly: The assembly with the .
    - Parameter optional: Whether loading secrets is optional. When false, this method may throw.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The configuration builder.

    */
    public static func AddUserSecrets(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, assembly : Optional<dotnet.System.Reflection.Assembly>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecretsConfigurationExtensions_IConfigurationBuilder__AddUserSecrets_0__4__IConfigurationBuilder_Assembly_bool_bool(&__thrown, configuration?.get_handle() ?? nil, assembly?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0), Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
// docid: M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)
    /**
    
            
            Adds the user secrets configuration source with specified user secrets ID.
            
            
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            
            

    - Parameter configuration: The configuration builder.
    - Parameter userSecretsId: The user secrets ID.
    - Returns: The configuration builder.

    */
    public static func AddUserSecrets(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, userSecretsId : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecretsConfigurationExtensions_IConfigurationBuilder__AddUserSecrets_0__2__IConfigurationBuilder_String(&__thrown, configuration?.get_handle() ?? nil, userSecretsId?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
// docid: M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)
    /**
    
            
            Adds the user secrets configuration source with specified user secrets ID.
            
            
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            
            

    - Parameter configuration: The configuration builder.
    - Parameter userSecretsId: The user secrets ID.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The configuration builder.

    */
    public static func AddUserSecrets(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, userSecretsId : Optional<dotnet.System.String>, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecretsConfigurationExtensions_IConfigurationBuilder__AddUserSecrets_0__3__IConfigurationBuilder_String_bool(&__thrown, configuration?.get_handle() ?? nil, userSecretsId?.get_handle() ?? nil, Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool, bool)
} // UserSecretsConfigurationExtensions


}
// Microsoft.Extensions.Configuration.UserSecrets
extension Microsoft.Extensions.Configuration.UserSecrets {
// type: Microsoft.Extensions.Configuration.UserSecrets.PathHelper
    /**
    
            Provides paths for user secrets configuration files.
            

    */
open class PathHelper
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_UserSecrets_PathHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.UserSecrets.PathHelper.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_UserSecrets_PathHelper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetSecretsPathFromSecretsId(System.String)
// docid: M:Microsoft.Extensions.Configuration.UserSecrets.PathHelper.GetSecretsPathFromSecretsId(System.String)
    /**
    
            
            Returns the path to the JSON file that stores user secrets.
            
            
            This uses the current user profile to locate the secrets file on disk in a location outside of source control.
            
            

    - Parameter userSecretsId: The user secret ID.
    - Returns: The full path to the secret file.

    */
    open class func GetSecretsPathFromSecretsId(userSecretsId : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecrets_PathHelper_String__GetSecretsPathFromSecretsId_0__1__String(&__thrown, userSecretsId?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // PathHelper


// type: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute
    /**
    
            
            Represents the user secrets ID.
            
            
            In most cases, this attribute is automatically generated during compilation by MSBuild targets
            included in the UserSecrets NuGet package. These targets use the MSBuild property 'UserSecretsId'
            to set the value for .
            
            

    */
open class UserSecretsIdAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_UserSecrets_UserSecretsIdAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute.#ctor(System.String)
    /**
    
            Initializes an instance of .
            

    - Parameter userSecretId: The user secrets ID.
    */
    public init(userSecretId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_UserSecrets_UserSecretsIdAttribute_ctor_0__1__String(&__thrown, userSecretId?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_UserSecretsId()
// docid: M:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute.get_UserSecretsId
    open func get_UserSecretsId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_UserSecrets_UserSecretsIdAttribute_String__get_UserSecretsId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The user secrets ID.
            

    */
    open var UserSecretsId : Optional<dotnet.System.String> {
        get {
            return try! get_UserSecretsId();
        }
    }
} // UserSecretsIdAttribute


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddUserSecrets(assembly : Optional<dotnet.System.Reflection.Assembly>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), assembly: assembly);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddUserSecrets(assembly : Optional<dotnet.System.Reflection.Assembly>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), assembly: assembly, optional: optional);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Reflection.Assembly, bool, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddUserSecrets(assembly : Optional<dotnet.System.Reflection.Assembly>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), assembly: assembly, optional: optional, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddUserSecrets(userSecretsId : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), userSecretsId: userSecretsId);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddUserSecrets(userSecretsId : Optional<dotnet.System.String>, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), userSecretsId: userSecretsId, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder)

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool)

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool, bool)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets<T>(Microsoft.Extensions.Configuration.IConfigurationBuilder, bool, bool)

