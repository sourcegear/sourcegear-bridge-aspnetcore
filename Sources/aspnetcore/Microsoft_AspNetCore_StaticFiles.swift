// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.DefaultFilesExtensions
public struct DefaultFilesExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Enables default file mapping on the current path
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseDefaultFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DefaultFilesExtensions_IApplicationBuilder__UseDefaultFiles_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Enables default file mapping for the given request path
            

    - Parameter app: 
    - Parameter requestPath: The relative request path.
    - Returns: 

    */
    public static func UseDefaultFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DefaultFilesExtensions_IApplicationBuilder__UseDefaultFiles_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), requestPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DefaultFilesOptions)
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DefaultFilesOptions)
    /**
    
            Enables default file mapping with the given options
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseDefaultFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DefaultFilesExtensions_IApplicationBuilder__UseDefaultFiles_0__2__IApplicationBuilder_DefaultFilesOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // DefaultFilesExtensions


// type: Microsoft.AspNetCore.Builder.DefaultFilesOptions
    /**
    
            Options for selecting default file names.
            

    */
open class DefaultFilesOptions
    :
    aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_DefaultFilesOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesOptions.#ctor
    /**
    
            Configuration for the DefaultFilesMiddleware.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_DefaultFilesOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesOptions.#ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
    /**
    
            Configuration for the DefaultFilesMiddleware.
            

    - Parameter sharedOptions: 
    */
    public init(sharedOptions : aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_DefaultFilesOptions_ctor_0__1__SharedOptions(&__thrown, sharedOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_DefaultFileNames()
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesOptions.get_DefaultFileNames
    open func get_DefaultFileNames() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DefaultFilesOptions_System_Collections_Generic_IList_string___get_DefaultFileNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultFileNames(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Builder.DefaultFilesOptions.set_DefaultFileNames(System.Collections.Generic.IList{System.String})
    open func set_DefaultFileNames(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_DefaultFilesOptions_void__set_DefaultFileNames_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            An ordered list of file names to select by default. List length and ordering may affect performance.
            

    */
    open var DefaultFileNames : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_DefaultFileNames();
        }
        set(v) {
            return try! set_DefaultFileNames(value: v);
        }
    }
} // DefaultFilesOptions


// type: Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions
public struct DirectoryBrowserExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Enable directory browsing on the current path
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseDirectoryBrowser(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DirectoryBrowserExtensions_IApplicationBuilder__UseDirectoryBrowser_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Enables directory browsing for the given request path
            

    - Parameter app: 
    - Parameter requestPath: The relative request path.
    - Returns: 

    */
    public static func UseDirectoryBrowser(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DirectoryBrowserExtensions_IApplicationBuilder__UseDirectoryBrowser_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), requestPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DirectoryBrowserOptions)
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DirectoryBrowserOptions)
    /**
    
            Enable directory browsing with the given options
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseDirectoryBrowser(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DirectoryBrowserExtensions_IApplicationBuilder__UseDirectoryBrowser_0__2__IApplicationBuilder_DirectoryBrowserOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // DirectoryBrowserExtensions


// type: Microsoft.AspNetCore.Builder.DirectoryBrowserOptions
    /**
    
            Directory browsing options
            

    */
open class DirectoryBrowserOptions
    :
    aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserOptions.#ctor
    /**
    
            Enabled directory browsing for all request paths
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserOptions.#ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
    /**
    
            Enabled directory browsing all request paths
            

    - Parameter sharedOptions: 
    */
    public init(sharedOptions : aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_ctor_0__1__SharedOptions(&__thrown, sharedOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter get_Formatter()
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserOptions.get_Formatter
    open func get_Formatter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_IDirectoryFormatter__get_Formatter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Formatter(Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter)
// docid: M:Microsoft.AspNetCore.Builder.DirectoryBrowserOptions.set_Formatter(Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter)
    open func set_Formatter(value : Optional<aspnetcore.Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_void__set_Formatter_0__1__IDirectoryFormatter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The component that generates the view.
            

    */
    open var Formatter : Optional<aspnetcore.Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter> {
        get {
            return try! get_Formatter();
        }
        set(v) {
            return try! set_Formatter(value: v!);
        }
    }
} // DirectoryBrowserOptions


// type: Microsoft.AspNetCore.Builder.FileServerExtensions
public struct FileServerExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Enable all static file middleware (except directory browsing) for the current request path in the current directory.
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseFileServer(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerExtensions_IApplicationBuilder__UseFileServer_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, bool)
// docid: M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Boolean)
    /**
    
            Enable all static file middleware on for the current request path in the current directory.
            

    - Parameter app: 
    - Parameter enableDirectoryBrowsing: Should directory browsing be enabled?
    - Returns: 

    */
    public static func UseFileServer(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, enableDirectoryBrowsing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerExtensions_IApplicationBuilder__UseFileServer_0__2__IApplicationBuilder_bool(&__thrown, app.get_handle(), Swift.Int32(enableDirectoryBrowsing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Enables all static file middleware (except directory browsing) for the given request path from the directory of the same name
            

    - Parameter app: 
    - Parameter requestPath: The relative request path.
    - Returns: 

    */
    public static func UseFileServer(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerExtensions_IApplicationBuilder__UseFileServer_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), requestPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.FileServerOptions)
// docid: M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.FileServerOptions)
    /**
    
            Enable all static file middleware with the given options
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseFileServer(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.FileServerOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerExtensions_IApplicationBuilder__UseFileServer_0__2__IApplicationBuilder_FileServerOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // FileServerExtensions


// type: Microsoft.AspNetCore.Builder.FileServerOptions
    /**
    
            Options for all of the static file middleware components
            

    */
open class FileServerOptions
    :
    aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_FileServerOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.#ctor
    /**
    
            Creates a combined options class for all of the static file middleware components.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_FileServerOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.StaticFileOptions get_StaticFileOptions()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.get_StaticFileOptions
    open func get_StaticFileOptions() throws -> aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerOptions_StaticFileOptions__get_StaticFileOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.DirectoryBrowserOptions get_DirectoryBrowserOptions()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.get_DirectoryBrowserOptions
    open func get_DirectoryBrowserOptions() throws -> aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerOptions_DirectoryBrowserOptions__get_DirectoryBrowserOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.DefaultFilesOptions get_DefaultFilesOptions()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.get_DefaultFilesOptions
    open func get_DefaultFilesOptions() throws -> aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerOptions_DefaultFilesOptions__get_DefaultFilesOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EnableDirectoryBrowsing()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.get_EnableDirectoryBrowsing
    open func get_EnableDirectoryBrowsing() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerOptions_bool__get_EnableDirectoryBrowsing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableDirectoryBrowsing(bool)
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.set_EnableDirectoryBrowsing(System.Boolean)
    open func set_EnableDirectoryBrowsing(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_FileServerOptions_void__set_EnableDirectoryBrowsing_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableDefaultFiles()
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.get_EnableDefaultFiles
    open func get_EnableDefaultFiles() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FileServerOptions_bool__get_EnableDefaultFiles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableDefaultFiles(bool)
// docid: M:Microsoft.AspNetCore.Builder.FileServerOptions.set_EnableDefaultFiles(System.Boolean)
    open func set_EnableDefaultFiles(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_FileServerOptions_void__set_EnableDefaultFiles_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Options for configuring the DefaultFilesMiddleware.
            

    */
    open var DefaultFilesOptions : aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions {
        get {
            return try! get_DefaultFilesOptions();
        }
    }
    /**
    
            Options for configuring the DirectoryBrowserMiddleware.
            

    */
    open var DirectoryBrowserOptions : aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions {
        get {
            return try! get_DirectoryBrowserOptions();
        }
    }
    /**
    
            Default files are enabled by default.
            

    */
    open var EnableDefaultFiles : Bool {
        get {
            return try! get_EnableDefaultFiles();
        }
        set(v) {
            return try! set_EnableDefaultFiles(value: v);
        }
    }
    /**
    
            Directory browsing is disabled by default.
            

    */
    open var EnableDirectoryBrowsing : Bool {
        get {
            return try! get_EnableDirectoryBrowsing();
        }
        set(v) {
            return try! set_EnableDirectoryBrowsing(value: v);
        }
    }
    /**
    
            Options for configuring the StaticFileMiddleware.
            

    */
    open var StaticFileOptions : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions {
        get {
            return try! get_StaticFileOptions();
        }
    }
} // FileServerOptions


// type: Microsoft.AspNetCore.Builder.StaticFileExtensions
public struct StaticFileExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Enables static file serving for the current request path
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseStaticFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileExtensions_IApplicationBuilder__UseStaticFiles_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Enables static file serving for the given request path
            

    - Parameter app: 
    - Parameter requestPath: The relative request path.
    - Returns: 

    */
    public static func UseStaticFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileExtensions_IApplicationBuilder__UseStaticFiles_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), requestPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.StaticFileOptions)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StaticFileOptions)
    /**
    
            Enables static file serving with the given options
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseStaticFiles(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileExtensions_IApplicationBuilder__UseStaticFiles_0__2__IApplicationBuilder_StaticFileOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // StaticFileExtensions


// type: Microsoft.AspNetCore.Builder.StaticFileOptions
    /**
    
            Options for serving static files
            

    */
open class StaticFileOptions
    :
    aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_StaticFileOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.#ctor
    /**
    
            Defaults to all request paths
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_StaticFileOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.#ctor(Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions)
    /**
    
            Defaults to all request paths
            

    - Parameter sharedOptions: 
    */
    public init(sharedOptions : aspnetcore.Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_StaticFileOptions_ctor_0__1__SharedOptions(&__thrown, sharedOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.StaticFiles.IContentTypeProvider get_ContentTypeProvider()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.get_ContentTypeProvider
    open func get_ContentTypeProvider() throws -> aspnetcore.Microsoft.AspNetCore.StaticFiles.IContentTypeProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileOptions_IContentTypeProvider__get_ContentTypeProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.StaticFiles.IContentTypeProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentTypeProvider(Microsoft.AspNetCore.StaticFiles.IContentTypeProvider)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.set_ContentTypeProvider(Microsoft.AspNetCore.StaticFiles.IContentTypeProvider)
    open func set_ContentTypeProvider(value : aspnetcore.Microsoft.AspNetCore.StaticFiles.IContentTypeProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StaticFileOptions_void__set_ContentTypeProvider_0__1__IContentTypeProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultContentType()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.get_DefaultContentType
    open func get_DefaultContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileOptions_String__get_DefaultContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultContentType(System.String)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.set_DefaultContentType(System.String)
    open func set_DefaultContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StaticFileOptions_void__set_DefaultContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ServeUnknownFileTypes()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.get_ServeUnknownFileTypes
    open func get_ServeUnknownFileTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileOptions_bool__get_ServeUnknownFileTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ServeUnknownFileTypes(bool)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.set_ServeUnknownFileTypes(System.Boolean)
    open func set_ServeUnknownFileTypes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StaticFileOptions_void__set_ServeUnknownFileTypes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.HttpsCompressionMode get_HttpsCompression()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.get_HttpsCompression
    open func get_HttpsCompression() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileOptions_HttpsCompressionMode__get_HttpsCompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode(val: __return);
        }
    }
    // [IsSpecialName] void set_HttpsCompression(Microsoft.AspNetCore.Http.Features.HttpsCompressionMode)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.set_HttpsCompression(Microsoft.AspNetCore.Http.Features.HttpsCompressionMode)
    open func set_HttpsCompression(value : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StaticFileOptions_void__set_HttpsCompression_0__1__HttpsCompressionMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext> get_OnPrepareResponse()
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.get_OnPrepareResponse
    open func get_OnPrepareResponse() throws -> dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFileOptions_System_Action_Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext___get_OnPrepareResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnPrepareResponse(System.Action<Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext>)
// docid: M:Microsoft.AspNetCore.Builder.StaticFileOptions.set_OnPrepareResponse(System.Action{Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext})
    open func set_OnPrepareResponse(value : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StaticFileOptions_void__set_OnPrepareResponse_0__1__System_Action_Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnPrepareResponse(value : @escaping (aspnetcore.Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext) throws -> Void) throws {
        let del_value = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext>(value);
        return try set_OnPrepareResponse(value: del_value);
    }
    /**
    
            Used to map files to content-types.
            

    */
    open var ContentTypeProvider : aspnetcore.Microsoft.AspNetCore.StaticFiles.IContentTypeProvider {
        get {
            return try! get_ContentTypeProvider();
        }
        set(v) {
            return try! set_ContentTypeProvider(value: v);
        }
    }
    /**
    
            The default content type for a request if the ContentTypeProvider cannot determine one.
            None is provided by default, so the client must determine the format themselves.
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7
            

    */
    open var DefaultContentType : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultContentType();
        }
        set(v) {
            return try! set_DefaultContentType(value: v!);
        }
    }
    /**
    
            Indicates if files should be compressed for HTTPS requests when the Response Compression middleware is available.
            The default value is .
            

    */
    open var HttpsCompression : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        get {
            return try! get_HttpsCompression();
        }
        set(v) {
            return try! set_HttpsCompression(value: v);
        }
    }
    /**
    
            Called after the status code and headers have been set, but before the body has been written.
            This can be used to add or change the response headers.
            

    */
    open var OnPrepareResponse : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext> {
        get {
            return try! get_OnPrepareResponse();
        }
        set(v) {
            return try! set_OnPrepareResponse(value: v);
        }
    }
    /**
    
            If the file is not a recognized content-type should it be served?
            Default: false.
            

    */
    open var ServeUnknownFileTypes : Bool {
        get {
            return try! get_ServeUnknownFileTypes();
        }
        set(v) {
            return try! set_ServeUnknownFileTypes(value: v);
        }
    }
} // StaticFileOptions


// type: Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions
public struct StaticFilesEndpointRouteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-filenames with the lowest possible priority. The request will be routed to a
             that attempts to serve the file specified by .
            

    - Parameter endpoints: The .
    - Parameter filePath: The file path of the file to serve.
    - Returns: The 

    */
    public static func MapFallbackToFile(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFilesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToFile_0__2__IEndpointRouteBuilder_String(&__thrown, endpoints.get_handle(), filePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Builder.StaticFileOptions)
// docid: M:Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Builder.StaticFileOptions)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-filenames with the lowest possible priority. The request will be routed to a
             that attempts to serve the file specified by .
            

    - Parameter endpoints: The .
    - Parameter filePath: The file path of the file to serve.
    - Parameter options:  for the .
    - Returns: The 

    */
    public static func MapFallbackToFile(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, filePath : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFilesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToFile_0__3__IEndpointRouteBuilder_String_StaticFileOptions(&__thrown, endpoints.get_handle(), filePath.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-filenames with the lowest possible priority. The request will be routed to a
             that attempts to serve the file specified by .
            

    - Parameter endpoints: The .
    - Parameter pattern: The route pattern.
    - Parameter filePath: The file path of the file to serve.
    - Returns: The 

    */
    public static func MapFallbackToFile(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFilesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToFile_0__3__IEndpointRouteBuilder_String_String(&__thrown, endpoints.get_handle(), pattern.get_handle(), filePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, Microsoft.AspNetCore.Builder.StaticFileOptions)
// docid: M:Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,Microsoft.AspNetCore.Builder.StaticFileOptions)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-filenames with the lowest possible priority. The request will be routed to a
             that attempts to serve the file specified by .
            

    - Parameter endpoints: The .
    - Parameter pattern: The route pattern.
    - Parameter filePath: The file path of the file to serve.
    - Parameter options:  for the .
    - Returns: The 

    */
    public static func MapFallbackToFile(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, filePath : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StaticFilesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToFile_0__4__IEndpointRouteBuilder_String_String_StaticFileOptions(&__thrown, endpoints.get_handle(), pattern.get_handle(), filePath.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
} // StaticFilesEndpointRouteBuilderExtensions


}

// Microsoft.AspNetCore.StaticFiles
extension Microsoft.AspNetCore.StaticFiles {
// type: Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware
    /**
    
            This examines a directory path and determines if there is a default file present.
            If so the file name is appended to the path and execution continues.
            Note we don't just serve the file because it may require interpretation.
            

    */
open class DefaultFilesMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_DefaultFilesMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.DefaultFilesOptions>)
// docid: M:Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.DefaultFilesOptions})
    /**
    
            Creates a new instance of the DefaultFilesMiddleware.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter hostingEnv: The  used by this middleware.
    - Parameter options: The configuration options for this middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, hostingEnv : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_DefaultFilesMiddleware_ctor_0__3__RequestDelegate_IWebHostEnvironment_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_DefaultFilesOptions_(&__thrown, next.get_handle(), hostingEnv.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            This examines the request to see if it matches a configured directory, and if there are any files with the
            configured default names in that directory.  If so this will append the corresponding file name to the request
            path for a later middleware to handle.
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_DefaultFilesMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // DefaultFilesMiddleware


// type: Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware
    /**
    
            Enables directory browsing
            

    */
open class DirectoryBrowserMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_DirectoryBrowserMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.DirectoryBrowserOptions>)
// docid: M:Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.DirectoryBrowserOptions})
    /**
    
            Creates a new instance of the SendFileMiddleware. Using  instance.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter hostingEnv: The  used by this middleware.
    - Parameter options: The configuration for this middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, hostingEnv : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_DirectoryBrowserMiddleware_ctor_0__3__RequestDelegate_IWebHostEnvironment_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_(&__thrown, next.get_handle(), hostingEnv.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, System.Text.Encodings.Web.HtmlEncoder, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.DirectoryBrowserOptions>)
// docid: M:Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Text.Encodings.Web.HtmlEncoder,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.DirectoryBrowserOptions})
    /**
    
            Creates a new instance of the SendFileMiddleware.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter hostingEnv: The  used by this middleware.
    - Parameter encoder: The  used by the default .
    - Parameter options: The configuration for this middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, hostingEnv : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_DirectoryBrowserMiddleware_ctor_0__4__RequestDelegate_IWebHostEnvironment_HtmlEncoder_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_DirectoryBrowserOptions_(&__thrown, next.get_handle(), hostingEnv.get_handle(), encoder.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Examines the request to see if it matches a configured directory.  If so, a view of the directory contents is returned.
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_DirectoryBrowserMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // DirectoryBrowserMiddleware


// type: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
    /**
    
            Provides a mapping between file extensions and MIME types.
            

    */
open class FileExtensionContentTypeProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_StaticFiles_IContentTypeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_FileExtensionContentTypeProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor
    /**
    
            Creates a new provider with a set of default mappings.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_FileExtensionContentTypeProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Creates a lookup engine using the provided mapping.
            It is recommended that the IDictionary instance use StringComparer.OrdinalIgnoreCase.
            

    - Parameter mapping: 
    */
    public init(mapping : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_FileExtensionContentTypeProvider_ctor_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, mapping.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool TryGetContentType(System.String, ref System.String)
// docid: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)
    /**
    
            Given a file path, determine the MIME type
            

    - Parameter subpath: A file path
    - Parameter contentType: The resulting MIME type
    - Returns: True if MIME type could be determined

    */
    open /* method final */ func TryGetContentType(subpath : dotnet.System.String, contentType : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_contentType = (contentType != nil) ? (contentType!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_StaticFiles_FileExtensionContentTypeProvider_bool__TryGetContentType_0__2__String_outString(&__thrown, self.get_handle(), subpath.get_handle(), &_tmp_out_contentType);
        let __h__tmp2_contentType = _tmp_out_contentType;
        let _tmp2_contentType = (__h__tmp2_contentType != nil) ? dotnet.System.String(hndl: __h__tmp2_contentType!) : nil;
            contentType = _tmp2_contentType;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Mappings()
// docid: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.get_Mappings
    open func get_Mappings() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_FileExtensionContentTypeProvider_System_Collections_Generic_IDictionary_string_string___get_Mappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            The cross reference table of file extensions and content-types.
            

    */
    open var Mappings : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Mappings();
        }
    }
} // FileExtensionContentTypeProvider


// type: Microsoft.AspNetCore.StaticFiles.HtmlDirectoryFormatter
    /**
    
            Generates an HTML view for a directory.
            

    */
open class HtmlDirectoryFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_StaticFiles_IDirectoryFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_HtmlDirectoryFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.StaticFiles.HtmlDirectoryFormatter.#ctor(System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Constructs the .
            

    - Parameter encoder: The character encoding representation to use.
    */
    public init(encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_HtmlDirectoryFormatter_ctor_0__1__HtmlEncoder(&__thrown, encoder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task GenerateContentAsync(Microsoft.AspNetCore.Http.HttpContext, System.Collections.Generic.IEnumerable<Microsoft.Extensions.FileProviders.IFileInfo>)
// docid: M:Microsoft.AspNetCore.StaticFiles.HtmlDirectoryFormatter.GenerateContentAsync(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo})
    /**
    
            Generates an HTML view for a directory.
            

    */
    open func GenerateContentAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, contents : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_HtmlDirectoryFormatter_Task__GenerateContentAsync_0__2__HttpContext_System_Collections_Generic_IEnumerable_Microsoft_Extensions_FileProviders_IFileInfo_(&__thrown, self.get_handle(), context.get_handle(), contents.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // HtmlDirectoryFormatter


// type: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
    /**
    
            Used to look up MIME types given a file path
            

    */
open class IContentTypeProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_StaticFiles_IContentTypeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_IContentTypeProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool TryGetContentType(System.String, ref System.String)
// docid: M:Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
    /**
    
            Given a file path, determine the MIME type
            

    - Parameter subpath: A file path
    - Parameter contentType: The resulting MIME type
    - Returns: True if MIME type could be determined

    */
    open func TryGetContentType(subpath : dotnet.System.String, contentType : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_contentType = (contentType != nil) ? (contentType!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_StaticFiles_IContentTypeProvider_bool__TryGetContentType_0__2__String_outString(&__thrown, self.get_handle(), subpath.get_handle(), &_tmp_out_contentType);
        let __h__tmp2_contentType = _tmp_out_contentType;
        let _tmp2_contentType = (__h__tmp2_contentType != nil) ? dotnet.System.String(hndl: __h__tmp2_contentType!) : nil;
            contentType = _tmp2_contentType;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IContentTypeProvider


// type: Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter
    /**
    
            Generates the view for a directory
            

    */
open class IDirectoryFormatter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_StaticFiles_IDirectoryFormatter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_IDirectoryFormatter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task GenerateContentAsync(Microsoft.AspNetCore.Http.HttpContext, System.Collections.Generic.IEnumerable<Microsoft.Extensions.FileProviders.IFileInfo>)
// docid: M:Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter.GenerateContentAsync(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo})
    /**
    
            Generates the view for a directory.
            Implementers should properly handle HEAD requests.
            Implementers should set all necessary response headers (e.g. Content-Type, Content-Length, etc.).
            

    */
    open func GenerateContentAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, contents : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_IDirectoryFormatter_Task__GenerateContentAsync_0__2__HttpContext_System_Collections_Generic_IEnumerable_Microsoft_Extensions_FileProviders_IFileInfo_(&__thrown, self.get_handle(), context.get_handle(), contents.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IDirectoryFormatter


// type: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware
    /**
    
            Enables serving static files for a given request path
            

    */
open class StaticFileMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_StaticFileMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.StaticFileOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.StaticFileOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new instance of the StaticFileMiddleware.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter hostingEnv: The  used by this middleware.
    - Parameter options: The configuration options.
    - Parameter loggerFactory: An  instance used to create loggers.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, hostingEnv : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_StaticFileMiddleware_ctor_0__4__RequestDelegate_IWebHostEnvironment_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_StaticFileOptions__ILoggerFactory(&__thrown, next.get_handle(), hostingEnv.get_handle(), options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Processes a request to determine if it matches a known file, and if so, serves it.
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_StaticFileMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // StaticFileMiddleware


// type: Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext
    /**
    
            Contains information about the request and the file that will be served in response.
            

    */
open class StaticFileResponseContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.Extensions.FileProviders.IFileInfo)
// docid: M:Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.FileProviders.IFileInfo)
    /**
    
            Constructs the .
            

    - Parameter context: The request and response information.
    - Parameter file: The file to be served.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, file : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext_ctor_0__2__HttpContext_IFileInfo(&__thrown, context.get_handle(), file.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_Context()
// docid: M:Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext_HttpContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileInfo get_File()
// docid: M:Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext.get_File
    open func get_File() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_StaticFileResponseContext_IFileInfo__get_File_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo(hndl : __return);
        }
    }
    /**
    
            The request and response information.
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_Context();
        }
    }
    /**
    
            The file to be served.
            

    */
    open var File : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo {
        get {
            return try! get_File();
        }
    }
} // StaticFileResponseContext


}
// Microsoft.AspNetCore.StaticFiles.Infrastructure
extension Microsoft.AspNetCore.StaticFiles.Infrastructure {
// type: Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions
    /**
    
            Options common to several middleware components
            

    */
open class SharedOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.#ctor
    /**
    
            Defaults to all request paths.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_RequestPath()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.get_RequestPath
    open func get_RequestPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_PathString__get_RequestPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.set_RequestPath(Microsoft.AspNetCore.Http.PathString)
    open func set_RequestPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_void__set_RequestPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_FileProvider()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.get_FileProvider
    open func get_FileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_IFileProvider__get_FileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_FileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_void__set_FileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RedirectToAppendTrailingSlash()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.get_RedirectToAppendTrailingSlash
    open func get_RedirectToAppendTrailingSlash() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_bool__get_RedirectToAppendTrailingSlash_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RedirectToAppendTrailingSlash(bool)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions.set_RedirectToAppendTrailingSlash(System.Boolean)
    open func set_RedirectToAppendTrailingSlash(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptions_void__set_RedirectToAppendTrailingSlash_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The file system used to locate resources
            

    */
    open var FileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        get {
            return try! get_FileProvider();
        }
        set(v) {
            return try! set_FileProvider(value: v!);
        }
    }
    /**
    
            Indicates whether to redirect to add a trailing slash at the end of path. Relative resource links may require this.
            

    */
    open var RedirectToAppendTrailingSlash : Bool {
        get {
            return try! get_RedirectToAppendTrailingSlash();
        }
        set(v) {
            return try! set_RedirectToAppendTrailingSlash(value: v);
        }
    }
    /**
    
            The request path that maps to static resources
            

    */
    open var RequestPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_RequestPath();
        }
        set(v) {
            return try! set_RequestPath(value: v);
        }
    }
} // SharedOptions


// type: Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase
    /**
    
            Options common to several middleware components
            

    */
open class SharedOptionsBase
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_RequestPath()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.get_RequestPath
    open func get_RequestPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_PathString__get_RequestPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.set_RequestPath(Microsoft.AspNetCore.Http.PathString)
    open func set_RequestPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_void__set_RequestPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_FileProvider()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.get_FileProvider
    open func get_FileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_IFileProvider__get_FileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_FileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_void__set_FileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RedirectToAppendTrailingSlash()
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.get_RedirectToAppendTrailingSlash
    open func get_RedirectToAppendTrailingSlash() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_bool__get_RedirectToAppendTrailingSlash_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RedirectToAppendTrailingSlash(bool)
// docid: M:Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase.set_RedirectToAppendTrailingSlash(System.Boolean)
    open func set_RedirectToAppendTrailingSlash(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_StaticFiles_Infrastructure_SharedOptionsBase_void__set_RedirectToAppendTrailingSlash_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The file system used to locate resources
            

    */
    open var FileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        get {
            return try! get_FileProvider();
        }
        set(v) {
            return try! set_FileProvider(value: v!);
        }
    }
    /**
    
            Indicates whether to redirect to add a trailing slash at the end of path. Relative resource links may require this.
            

    */
    open var RedirectToAppendTrailingSlash : Bool {
        get {
            return try! get_RedirectToAppendTrailingSlash();
        }
        set(v) {
            return try! set_RedirectToAppendTrailingSlash(value: v);
        }
    }
    /**
    
            The relative request path that maps to static resources.
            

    */
    open var RequestPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_RequestPath();
        }
        set(v) {
            return try! set_RequestPath(value: v);
        }
    }
} // SharedOptionsBase


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions
public struct DirectoryBrowserServiceExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddDirectoryBrowser(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions.AddDirectoryBrowser(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds directory browser middleware services.
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddDirectoryBrowser(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_DirectoryBrowserServiceExtensions_IServiceCollection__AddDirectoryBrowser_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
} // DirectoryBrowserServiceExtensions


}



public protocol Microsoft_AspNetCore_StaticFiles_IContentTypeProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_StaticFiles_IDirectoryFormatter
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDefaultFiles() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDefaultFiles(requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), requestPath: requestPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DefaultFilesOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDefaultFiles(options : aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDirectoryBrowser() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDirectoryBrowser(requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), requestPath: requestPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DirectoryBrowserOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDirectoryBrowser(options : aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseFileServer() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, bool)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseFileServer(enableDirectoryBrowsing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), enableDirectoryBrowsing: enableDirectoryBrowsing);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseFileServer(requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), requestPath: requestPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.FileServerOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseFileServer(options : aspnetcore.Microsoft.AspNetCore.Builder.FileServerOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStaticFiles() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStaticFiles(requestPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), requestPath: requestPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.StaticFileOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStaticFiles(options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToFile(filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), filePath: filePath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Builder.StaticFileOptions)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToFile(filePath : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), filePath: filePath, options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToFile(pattern : dotnet.System.String, filePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, filePath: filePath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToFile(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, Microsoft.AspNetCore.Builder.StaticFileOptions)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToFile(pattern : dotnet.System.String, filePath : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Builder.StaticFileOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, filePath: filePath, options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddDirectoryBrowser(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddDirectoryBrowser() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions.AddDirectoryBrowser(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

