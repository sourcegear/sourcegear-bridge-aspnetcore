// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Razor
// Microsoft.AspNetCore.Razor.Hosting
extension Microsoft.AspNetCore.Razor.Hosting {
// type: Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata
    /**
    
            A metadata object containing the checksum of a source file that contributed to a compiled item.
            

    */
open class IRazorSourceChecksumMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Checksum()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata.get_Checksum
    open func get_Checksum() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata_String__get_Checksum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ChecksumAlgorithm()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata.get_ChecksumAlgorithm
    open func get_ChecksumAlgorithm() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata_String__get_ChecksumAlgorithm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata.get_Identifier
    open func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRazorSourceChecksumMetadata


// type: Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem
    /**
    
            Identifies a compiled item that can be identified and loaded.
            

    */
open class RazorCompiledItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem.get_Identifier
    open func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Kind()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem.get_Kind
    open func get_Kind() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem_String__get_Kind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Metadata()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem.get_Metadata
    open func get_Metadata() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem_System_Collections_Generic_IReadOnlyList_object___get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the identifier associated with the compiled item. The identifier is used programmatically to locate
            a specific item of a specific kind and should be uniqure within the assembly.
            

    */
    open var Identifier : Optional<dotnet.System.String> {
        get {
            return try! get_Identifier();
        }
    }
    /**
    
            Gets the kind of compiled item. The kind is used programmatically to associate behaviors and semantics
            with the item.
            

    */
    open var Kind : Optional<dotnet.System.String> {
        get {
            return try! get_Kind();
        }
    }
    /**
    
            Gets a collection of arbitrary metadata associated with the item.
            

    */
    open var Metadata : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the  of the compiled item.
            

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
    }
} // RazorCompiledItem


// type: Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute
    /**
    
            Specifies that an assembly contains a compiled Razor asset.
            

    */
public final class RazorCompiledItemAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute.#ctor(System.Type,System.String,System.String)
    /**
    
            Creates a new .
            

    - Parameter type: The  of the compiled item.
    - Parameter kind: 
            The kind of the compiled item. The kind is used programmatically to associate behaviors with the item.
            
    - Parameter identifier: 
            The identifier associated with the item. The identifier is used programmatically to locate
            a specific item of a specific kind, and should be unique within the assembly.
            
    */
    public init(type : Optional<dotnet.System.Type_>, kind : Optional<dotnet.System.String>, identifier : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemAttribute_ctor_0__3__Type_String_String(&__thrown, type?.get_handle() ?? nil, kind?.get_handle() ?? nil, identifier?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Kind()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute.get_Kind
    public func get_Kind() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemAttribute_String__get_Kind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute.get_Identifier
    public func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemAttribute_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute.get_Type
    public func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the identifier associated with the compiled item. The identifier is used programmatically to locate
            a specific item of a specific kind and should be unique within the assembly.
            

    */
    public var Identifier : Optional<dotnet.System.String> {
        get {
            return try! get_Identifier();
        }
    }
    /**
    
            Gets the kind of compiled item. The kind is used programmatically to associate behaviors and semantics
            with the item.
            

    */
    public var Kind : Optional<dotnet.System.String> {
        get {
            return try! get_Kind();
        }
    }
    /**
    
            Gets the  of the compiled item. The type should be contained in the assembly associated
            with this instance of .
            

    */
    public var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
    }
} // RazorCompiledItemAttribute


// type: Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemExtensions
public struct RazorCompiledItemExtensions {
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata> GetChecksumMetadata(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemExtensions.GetChecksumMetadata(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
    /**
    
            Gets the list of  associated with .
            

    - Parameter item: The .
    - Returns: A list of .

    */
    public static func GetChecksumMetadata(item : Optional<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem>) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemExtensions_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata___GetChecksumMetadata_0__1__RazorCompiledItem(&__thrown, item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RazorCompiledItemExtensions


// type: Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemLoader
    /**
    
            A loader implementation that can load  objects from an
             using reflection.
            

    */
open class RazorCompiledItemLoader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemLoader_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemLoader.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemLoader_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem> LoadItems(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemLoader.LoadItems(System.Reflection.Assembly)
    /**
    
            Loads a list of  objects from the provided .
            

    - Parameter assembly: The assembly to search.
    - Returns: A list of  objects.

    */
    open func LoadItems(assembly : Optional<dotnet.System.Reflection.Assembly>) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemLoader_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem___LoadItems_0__1__Assembly(&__thrown, self.get_handle(), assembly?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RazorCompiledItemLoader


// type: Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute
    /**
    
            Defines a key/value metadata pair for the decorated Razor type.
            

    */
public final class RazorCompiledItemMetadataAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemMetadataAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute.#ctor(System.String,System.String)
    /**
    
            Creates a new .
            

    - Parameter key: The key.
    - Parameter value: The value.
    */
    public init(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemMetadataAttribute_ctor_0__2__String_String(&__thrown, key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute.get_Key
    public func get_Key() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemMetadataAttribute_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItemMetadataAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the key.
            

    */
    public var Key : Optional<dotnet.System.String> {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets the value.
            

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
    }
} // RazorCompiledItemMetadataAttribute


// type: Microsoft.AspNetCore.Razor.Hosting.RazorConfigurationNameAttribute
    /**
    
            Specifies the name of a Razor configuration as defined by the Razor SDK.
            

    */
public final class RazorConfigurationNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorConfigurationNameAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorConfigurationNameAttribute.#ctor(System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter configurationName: The name of the Razor configuration.
    */
    public init(configurationName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorConfigurationNameAttribute_ctor_0__1__String(&__thrown, configurationName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ConfigurationName()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorConfigurationNameAttribute.get_ConfigurationName
    public func get_ConfigurationName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorConfigurationNameAttribute_String__get_ConfigurationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the name of the Razor configuration.
            

    */
    public var ConfigurationName : Optional<dotnet.System.String> {
        get {
            return try! get_ConfigurationName();
        }
    }
} // RazorConfigurationNameAttribute


// type: Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute
    /**
    
            Specifies the name of a Razor extension as defined by the Razor SDK.
            

    */
public final class RazorExtensionAssemblyNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorExtensionAssemblyNameAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute.#ctor(System.String,System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter extensionName: The name of the extension.
    - Parameter assemblyName: The assembly name of the extension.
    */
    public init(extensionName : Optional<dotnet.System.String>, assemblyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorExtensionAssemblyNameAttribute_ctor_0__2__String_String(&__thrown, extensionName?.get_handle() ?? nil, assemblyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AssemblyName()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute.get_AssemblyName
    public func get_AssemblyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorExtensionAssemblyNameAttribute_String__get_AssemblyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ExtensionName()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute.get_ExtensionName
    public func get_ExtensionName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorExtensionAssemblyNameAttribute_String__get_ExtensionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the assembly name of the extension.
            

    */
    public var AssemblyName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyName();
        }
    }
    /**
    
            Gets the name of the extension.
            

    */
    public var ExtensionName : Optional<dotnet.System.String> {
        get {
            return try! get_ExtensionName();
        }
    }
} // RazorExtensionAssemblyNameAttribute


// type: Microsoft.AspNetCore.Razor.Hosting.RazorLanguageVersionAttribute
    /**
    
            Specifies the name of a Razor configuration as defined by the Razor SDK.
            

    */
public final class RazorLanguageVersionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorLanguageVersionAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorLanguageVersionAttribute.#ctor(System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter languageVersion: The language version of Razor
    */
    public init(languageVersion : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorLanguageVersionAttribute_ctor_0__1__String(&__thrown, languageVersion?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_LanguageVersion()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorLanguageVersionAttribute.get_LanguageVersion
    public func get_LanguageVersion() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorLanguageVersionAttribute_String__get_LanguageVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the Razor language version.
            

    */
    public var LanguageVersion : Optional<dotnet.System.String> {
        get {
            return try! get_LanguageVersion();
        }
    }
} // RazorLanguageVersionAttribute


// type: Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute
    /**
    
            Specifies the checksum of a source file that contributed to a compiled item.
            

    */
public final class RazorSourceChecksumAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Hosting_RazorSourceChecksumAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute.#ctor(System.String,System.String,System.String)
    /**
    
            Creates a new .
            

    - Parameter checksumAlgorithm: The algorithm used to create this checksum.
    - Parameter checksum: The checksum as a string of hex-encoded bytes.
    - Parameter identifier: The identifier associated with this thumbprint.
    */
    public init(checksumAlgorithm : Optional<dotnet.System.String>, checksum : Optional<dotnet.System.String>, identifier : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Hosting_RazorSourceChecksumAttribute_ctor_0__3__String_String_String(&__thrown, checksumAlgorithm?.get_handle() ?? nil, checksum?.get_handle() ?? nil, identifier?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Checksum()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute.get_Checksum
    public func get_Checksum() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorSourceChecksumAttribute_String__get_Checksum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ChecksumAlgorithm()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute.get_ChecksumAlgorithm
    public func get_ChecksumAlgorithm() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorSourceChecksumAttribute_String__get_ChecksumAlgorithm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute.get_Identifier
    public func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Hosting_RazorSourceChecksumAttribute_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the checksum as string of hex-encoded bytes.
            

    */
    public var Checksum : Optional<dotnet.System.String> {
        get {
            return try! get_Checksum();
        }
    }
    /**
    
            Gets the name of the algorithm used to create this checksum.
            

    */
    public var ChecksumAlgorithm : Optional<dotnet.System.String> {
        get {
            return try! get_ChecksumAlgorithm();
        }
    }
    /**
    
            Gets the identifier of the source file associated with this checksum.
            

    */
    public var Identifier : Optional<dotnet.System.String> {
        get {
            return try! get_Identifier();
        }
    }
} // RazorSourceChecksumAttribute


}

// Microsoft.AspNetCore.Razor.Runtime
// Microsoft.AspNetCore.Razor.Runtime.TagHelpers
extension Microsoft.AspNetCore.Razor.Runtime.TagHelpers {
// type: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    /**
    
            Class used to store information about a 's execution lifetime.
            

    */
open class TagHelperExecutionContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagMode, System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String, System.Func<System.Threading.Tasks.Task>, System.Action<System.Text.Encodings.Web.HtmlEncoder>, System.Func<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.#ctor(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagMode,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String,System.Func{System.Threading.Tasks.Task},System.Action{System.Text.Encodings.Web.HtmlEncoder},System.Func{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent})
    /**
    
            Instantiates a new .
            

    - Parameter tagName: The HTML tag name in the Razor source.
    - Parameter tagMode: HTML syntax of the element in the Razor source.
    - Parameter items: The collection of items used to communicate with other
            s
    - Parameter uniqueId: An identifier unique to the HTML element this context is for.
    - Parameter executeChildContentAsync: A delegate used to execute the child content asynchronously.
    - Parameter startTagHelperWritingScope: 
            A delegate used to start a writing scope in a Razor page and optionally override the page's
             within that scope.
            
    - Parameter endTagHelperWritingScope: A delegate used to end a writing scope in a Razor page.
    */
    public init(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>, executeChildContentAsync : Optional<dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>>, startTagHelperWritingScope : Optional<dotnet.System.Action_1<dotnet.System.Text.Encodings.Web.HtmlEncoder>>, endTagHelperWritingScope : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_ctor_0__7__String_TagMode_System_Collections_Generic_IDictionary_object_object__String_System_Func_Task__System_Action_System_Text_Encodings_Web_HtmlEncoder__System_Func_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_(&__thrown, tagName?.get_handle() ?? nil, tagMode.get_value(), (items?.get_handle()), uniqueId?.get_handle() ?? nil, (executeChildContentAsync?.get_handle()), (startTagHelperWritingScope?.get_handle()), (endTagHelperWritingScope?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.Add(Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper)
    /**
    
            Tracks the given .
            

    - Parameter tagHelper: The tag helper to track.
    */
    open func Add(tagHelper : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__Add_0__1__ITagHelper(&__thrown, self.get_handle(), tagHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHtmlAttribute(System.String, System.Object, Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.AddHtmlAttribute(System.String,System.Object,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    /**
    
            Tracks the HTML attribute.
            

    - Parameter name: The HTML attribute name.
    - Parameter value: The HTML attribute value.
    - Parameter valueStyle: The value style of the attribute.
    */
    open func AddHtmlAttribute(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, valueStyle : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__AddHtmlAttribute_0__3__String_Object_HtmlAttributeValueStyle(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil, valueStyle.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.AddHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    
            Tracks the HTML attribute.
            

    - Parameter attribute: The  to track.
    */
    open func AddHtmlAttribute(attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__AddHtmlAttribute_0__1__TagHelperAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddTagHelperAttribute(System.String, System.Object, Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.AddTagHelperAttribute(System.String,System.Object,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    /**
    
            Tracks the  bound attribute.
            

    - Parameter name: The bound attribute name.
    - Parameter value: The attribute value.
    - Parameter valueStyle: The value style of the attribute.
    */
    open func AddTagHelperAttribute(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, valueStyle : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__AddTagHelperAttribute_0__3__String_Object_HtmlAttributeValueStyle(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil, valueStyle.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddTagHelperAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.AddTagHelperAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    
            Tracks the  bound attribute.
            

    - Parameter attribute: The bound attribute.
    */
    open func AddTagHelperAttribute(attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__AddTagHelperAttribute_0__1__TagHelperAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reinitialize(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagMode, System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String, System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.Reinitialize(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagMode,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String,System.Func{System.Threading.Tasks.Task})
    /**
    
            Clears the  and updates its state with the provided values.
            

    - Parameter tagName: The tag name to use.
    - Parameter tagMode: The  to use.
    - Parameter items: The  to use.
    - Parameter uniqueId: The unique id to use.
    - Parameter executeChildContentAsync: The  to use.
    */
    open func Reinitialize(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>, executeChildContentAsync : Optional<dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__Reinitialize_0__5__String_TagMode_System_Collections_Generic_IDictionary_object_object__String_System_Func_Task_(&__thrown, self.get_handle(), tagName?.get_handle() ?? nil, tagMode.get_value(), (items?.get_handle()), uniqueId?.get_handle() ?? nil, (executeChildContentAsync?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Reinitialize(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>, executeChildContentAsync : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_executeChildContentAsync = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(executeChildContentAsync);
        return try Reinitialize(tagName: tagName, tagMode: tagMode, items: items, uniqueId: uniqueId, executeChildContentAsync: del_executeChildContentAsync);
    }
    // System.Threading.Tasks.Task SetOutputContentAsync()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.SetOutputContentAsync
    /**
    
            Executes children asynchronously with the page's  in scope and
            sets 's  to the rendered results.
            

    - Returns: A  that on completion sets 's
             to the children's rendered content.

    */
    open func SetOutputContentAsync() throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_Task__SetOutputContentAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ChildContentRetrieved()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.get_ChildContentRetrieved
    open func get_ChildContentRetrieved() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_bool__get_ChildContentRetrieved_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.get_Items
    open func get_Items() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper> get_TagHelpers()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.get_TagHelpers
    open func get_TagHelpers() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper___get_TagHelpers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput get_Output()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.get_Output
    open func get_Output() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_TagHelperOutput__get_Output_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Output(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.set_Output(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    open func set_Output(value : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_void__set_Output_0__1__TagHelperOutput(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext get_Context()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.get_Context
    open func get_Context() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperExecutionContext_TagHelperContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Indicates if  has been called.
            

    */
    open var ChildContentRetrieved : Bool {
        get {
            return try! get_ChildContentRetrieved();
        }
    }
    /**
    
            The 's context.
            

    */
    open var Context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext> {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets the collection of items used to communicate with other s.
            

    */
    open var Items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            The 's output.
            

    */
    open var Output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput> {
        get {
            return try! get_Output();
        }
        set(v) {
            return try! set_Output(value: v!);
        }
    }
    /**
    
            s that should be run.
            

    */
    open var TagHelpers : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper>> {
        get {
            return try! get_TagHelpers();
        }
    }
} // TagHelperExecutionContext


// type: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner
    /**
    
            A class used to run s.
            

    */
open class TagHelperRunner
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperRunner_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperRunner_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task RunAsync(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner.RunAsync(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
    /**
    
            Calls the  method on s.
            

    - Parameter executionContext: Contains information associated with running s.
            
    - Returns: Resulting  from processing all of the
            's s.

    */
    open func RunAsync(executionContext : Optional<aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperRunner_Task__RunAsync_0__1__TagHelperExecutionContext(&__thrown, self.get_handle(), executionContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TagHelperRunner


// type: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager
    /**
    
            Class that manages  scopes.
            

    */
open class TagHelperScopeManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperScopeManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Action<System.Text.Encodings.Web.HtmlEncoder>, System.Func<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager.#ctor(System.Action{System.Text.Encodings.Web.HtmlEncoder},System.Func{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent})
    /**
    
            Instantiates a new .
            

    - Parameter startTagHelperWritingScope: 
            A delegate used to start a writing scope in a Razor page and optionally override the page's
             within that scope.
            
    - Parameter endTagHelperWritingScope: A delegate used to end a writing scope in a Razor page.
    */
    public init(startTagHelperWritingScope : Optional<dotnet.System.Action_1<dotnet.System.Text.Encodings.Web.HtmlEncoder>>, endTagHelperWritingScope : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperScopeManager_ctor_0__2__System_Action_System_Text_Encodings_Web_HtmlEncoder__System_Func_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_(&__thrown, (startTagHelperWritingScope?.get_handle()), (endTagHelperWritingScope?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext Begin(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagMode, System.String, System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager.Begin(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagMode,System.String,System.Func{System.Threading.Tasks.Task})
    /**
    
            Starts a  scope.
            

    - Parameter tagName: The HTML tag name that the scope is associated with.
    - Parameter tagMode: HTML syntax of the element in the Razor source.
    - Parameter uniqueId: An identifier unique to the HTML element this scope is for.
    - Parameter executeChildContentAsync: A delegate used to execute the child content asynchronously.
    - Returns: A  to use.

    */
    open func Begin(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode, uniqueId : Optional<dotnet.System.String>, executeChildContentAsync : Optional<dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperScopeManager_TagHelperExecutionContext__Begin_0__4__String_TagMode_String_System_Func_Task_(&__thrown, self.get_handle(), tagName?.get_handle() ?? nil, tagMode.get_value(), uniqueId?.get_handle() ?? nil, (executeChildContentAsync?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Begin(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode, uniqueId : Optional<dotnet.System.String>, executeChildContentAsync : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext> {
        let del_executeChildContentAsync = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(executeChildContentAsync);
        return try Begin(tagName: tagName, tagMode: tagMode, uniqueId: uniqueId, executeChildContentAsync: del_executeChildContentAsync);
    }
    // Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext End()
// docid: M:Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager.End
    /**
    
            Ends a  scope.
            

    - Returns: If the current scope is nested, the parent .
            null otherwise.

    */
    open func End() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_Runtime_TagHelpers_TagHelperScopeManager_TagHelperExecutionContext__End_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TagHelperScopeManager


}





public protocol Microsoft_AspNetCore_Razor_Hosting_IRazorSourceChecksumMetadata
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata> GetChecksumMetadata(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
extension aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem {
    public func GetChecksumMetadata() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.IRazorSourceChecksumMetadata>> {
        return try aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemExtensions.GetChecksumMetadata(item: self);
    }
}

