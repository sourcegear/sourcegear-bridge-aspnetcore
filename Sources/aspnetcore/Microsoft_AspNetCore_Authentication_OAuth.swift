// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authentication
extension Microsoft.AspNetCore.Authentication {
// type: Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions
public struct ClaimActionCollectionMapExtensions {
    // void MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String)
    /**
    
            Select a top level value from the json user data with the given key name and add it as a Claim.
            This no-ops if the key is not found or the value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    */
    public static func MapJsonKey(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, jsonKey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapJsonKey_0__3__ClaimActionCollection_String_String(&__thrown, collection.get_handle(), claimType.get_handle(), jsonKey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)
    /**
    
            Select a top level value from the json user data with the given key name and add it as a Claim.
            This no-ops if the key is not found or the value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    */
    public static func MapJsonKey(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, jsonKey : dotnet.System.String, valueType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapJsonKey_0__4__ClaimActionCollection_String_String_String(&__thrown, collection.get_handle(), claimType.get_handle(), jsonKey.get_handle(), valueType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)
    /**
    
            Select a second level value from the json user data with the given top level key name and second level sub key name and add it as a Claim.
            This no-ops if the keys are not found or the value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    - Parameter subKey: The second level key to look for in the json user data.
    */
    public static func MapJsonSubKey(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, jsonKey : dotnet.System.String, subKey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapJsonSubKey_0__4__ClaimActionCollection_String_String_String(&__thrown, collection.get_handle(), claimType.get_handle(), jsonKey.get_handle(), subKey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String,System.String)
    /**
    
            Select a second level value from the json user data with the given top level key name and second level sub key name and add it as a Claim.
            This no-ops if the keys are not found or the value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    - Parameter subKey: The second level key to look for in the json user data.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    */
    public static func MapJsonSubKey(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, jsonKey : dotnet.System.String, subKey : dotnet.System.String, valueType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapJsonSubKey_0__5__ClaimActionCollection_String_String_String_String(&__thrown, collection.get_handle(), claimType.get_handle(), jsonKey.get_handle(), subKey.get_handle(), valueType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.Func<System.Text.Json.JsonElement,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.Func{System.Text.Json.JsonElement,System.String})
    /**
    
            Run the given resolver to select a value from the json user data to add as a claim.
            This no-ops if the returned value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter resolver: The Func that will be called to select value from the given json user data.
    */
    public static func MapCustomJson(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapCustomJson_0__3__ClaimActionCollection_String_System_Func_System_Text_Json_JsonElement_string_(&__thrown, collection.get_handle(), claimType.get_handle(), resolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func MapCustomJson(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, resolver : @escaping (dotnet.System.Text.Json.JsonElement) throws -> dotnet.System.String) throws {
        let del_resolver = try dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>(resolver);
        return try MapCustomJson(collection: collection, claimType: claimType, resolver: del_resolver);
    }
    // void MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.Func<System.Text.Json.JsonElement,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.Func{System.Text.Json.JsonElement,System.String})
    /**
    
            Run the given resolver to select a value from the json user data to add as a claim.
            This no-ops if the returned value is empty.
            

    - Parameter collection: The .
    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    - Parameter resolver: The Func that will be called to select value from the given json user data.
    */
    public static func MapCustomJson(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, valueType : dotnet.System.String, resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapCustomJson_0__4__ClaimActionCollection_String_String_System_Func_System_Text_Json_JsonElement_string_(&__thrown, collection.get_handle(), claimType.get_handle(), valueType.get_handle(), resolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func MapCustomJson(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String, valueType : dotnet.System.String, resolver : @escaping (dotnet.System.Text.Json.JsonElement) throws -> dotnet.System.String) throws {
        let del_resolver = try dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>(resolver);
        return try MapCustomJson(collection: collection, claimType: claimType, valueType: valueType, resolver: del_resolver);
    }
    // void MapAll(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapAll(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection)
    /**
    
            Clears any current ClaimsActions and maps all values from the json user data as claims, excluding duplicates.
            

    - Parameter collection: The .
    */
    public static func MapAll(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapAll_0__1__ClaimActionCollection(&__thrown, collection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MapAllExcept(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String[])
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapAllExcept(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String[])
    /**
    
            Clears any current ClaimsActions and maps all values from the json user data as claims, excluding the specified types.
            

    - Parameter collection: The .
    - Parameter exclusions: The types to exclude.
    */
    public static func MapAllExcept(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, exclusions : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__MapAllExcept_0__2__ClaimActionCollection_StringArray(&__thrown, collection.get_handle(), exclusions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteClaim(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaim(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String)
    /**
    
            Delete all claims from the given ClaimsIdentity with the given ClaimType.
            

    - Parameter collection: The .
    - Parameter claimType: The claim type to delete
    */
    public static func DeleteClaim(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__DeleteClaim_0__2__ClaimActionCollection_String(&__thrown, collection.get_handle(), claimType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteClaims(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String[])
// docid: M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaims(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String[])
    /**
    
            Delete all claims from the ClaimsIdentity with the given claimTypes.
            

    - Parameter collection: The .
    - Parameter claimTypes: The claim types to delete.
    */
    public static func DeleteClaims(collection : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, claimTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ClaimActionCollectionMapExtensions_void__DeleteClaims_0__2__ClaimActionCollection_StringArray(&__thrown, collection.get_handle(), claimTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ClaimActionCollectionMapExtensions


}
// Microsoft.AspNetCore.Authentication.OAuth
extension Microsoft.AspNetCore.Authentication.OAuth {
// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties
    /**
    
             for an OAuth challenge.
            

    */
open class OAuthChallengeProperties
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String ScopeKey
    /**
    
            The parameter key for the "scope" argument being used for a challenge request.
            

    */
    open class var ScopeKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_get_ScopeKey());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Initializes a new instance of .
            

    */
    public override init(items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_ctor_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String>, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Initializes a new instance of .
            

    */
    public override init(items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>, parameters : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_ctor_0__2__System_Collections_Generic_IDictionary_string_string__System_Collections_Generic_IDictionary_string_object_(&__thrown, (items?.get_handle()), (parameters?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetScope(System.String[])
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.SetScope(System.String[])
    /**
    
            Set the "scope" parameter value.
            

    - Parameter scopes: List of scopes.
    */
    open func SetScope(scopes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_void__SetScope_0__1__StringArray(&__thrown, self.get_handle(), scopes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Scope()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.get_Scope
    open func get_Scope() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_System_Collections_Generic_ICollection_string___get_Scope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Scope(System.Collections.Generic.ICollection<System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthChallengeProperties.set_Scope(System.Collections.Generic.ICollection{System.String})
    open func set_Scope(value : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthChallengeProperties_void__set_Scope_0__1__System_Collections_Generic_ICollection_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The "scope" parameter value being used for a challenge request.
            

    */
    open var Scope : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Scope();
        }
        set(v) {
            return try! set_Scope(value: v);
        }
    }
} // OAuthChallengeProperties


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext
    /**
    
            Contains information used to perform the code exchange.
            

    */
open class OAuthCodeExchangeContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthCodeExchangeContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext.#ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String,System.String)
    /**
    
            Initializes a new .
            

    - Parameter properties: The .
    - Parameter code: The code returned from the authorization endpoint.
    - Parameter redirectUri: The redirect uri used in the authorization request.
    */
    public init(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, code : dotnet.System.String, redirectUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthCodeExchangeContext_ctor_0__3__AuthenticationProperties_String_String(&__thrown, properties.get_handle(), code.get_handle(), redirectUri.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext.get_Properties
    open func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCodeExchangeContext_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Code()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext.get_Code
    open func get_Code() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCodeExchangeContext_String__get_Code_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RedirectUri()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCodeExchangeContext.get_RedirectUri
    open func get_RedirectUri() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCodeExchangeContext_String__get_RedirectUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The code returned from the authorization endpoint.
            

    */
    open var Code : dotnet.System.String {
        get {
            return try! get_Code();
        }
    }
    /**
    
            State for the authentication flow.
            

    */
    open var Properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            The redirect uri used in the authorization request.
            

    */
    open var RedirectUri : dotnet.System.String {
        get {
            return try! get_RedirectUri();
        }
    }
} // OAuthCodeExchangeContext


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthConstants
public struct OAuthConstants {
    // static field: System.String CodeVerifierKey
    /**
    
            code_verifier defined in https://tools.ietf.org/html/rfc7636
            

    */
    public static var CodeVerifierKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthConstants_get_CodeVerifierKey());
            return __return;
        }
    }
    // static field: System.String CodeChallengeKey
    /**
    
            code_challenge defined in https://tools.ietf.org/html/rfc7636
            

    */
    public static var CodeChallengeKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthConstants_get_CodeChallengeKey());
            return __return;
        }
    }
    // static field: System.String CodeChallengeMethodKey
    /**
    
            code_challenge_method defined in https://tools.ietf.org/html/rfc7636
            

    */
    public static var CodeChallengeMethodKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthConstants_get_CodeChallengeMethodKey());
            return __return;
        }
    }
    // static field: System.String CodeChallengeMethodS256
    /**
    
            S256 defined in https://tools.ietf.org/html/rfc7636
            

    */
    public static var CodeChallengeMethodS256 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthConstants_get_CodeChallengeMethodS256());
            return __return;
        }
    }
} // OAuthConstants


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext
    /**
    
            Contains information about the login session as well as the user .
            

    */
open class OAuthCreatingTicketContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.ResultContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions, System.Net.Http.HttpClient, Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse, System.Text.Json.JsonElement)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.#ctor(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions,System.Net.Http.HttpClient,Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse,System.Text.Json.JsonElement)
    /**
    
            Initializes a new .
            

    - Parameter principal: The .
    - Parameter properties: The .
    - Parameter context: The HTTP environment.
    - Parameter scheme: The authentication scheme.
    - Parameter options: The options used by the authentication middleware.
    - Parameter backchannel: The HTTP client used by the authentication middleware
    - Parameter tokens: The tokens returned from the token endpoint.
    - Parameter user: The JSON-serialized user.
    */
    public init(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions, backchannel : dotnet.System.Net.Http.HttpClient, tokens : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse, user : dotnet.System.Text.Json.JsonElement) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_ctor_0__8__ClaimsPrincipal_AuthenticationProperties_HttpContext_AuthenticationScheme_OAuthOptions_HttpClient_OAuthTokenResponse_JsonElement(&__thrown, principal.get_handle(), properties.get_handle(), context.get_handle(), scheme.get_handle(), options.get_handle(), backchannel.get_handle(), tokens.get_handle(), user.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void RunClaimActions()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.RunClaimActions
    /**
    
            Examines , determine if the requisite data is present, and optionally add it
            to .
            

    */
    open func RunClaimActions() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_void__RunClaimActions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RunClaimActions(System.Text.Json.JsonElement)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.RunClaimActions(System.Text.Json.JsonElement)
    /**
    
            Examines the specified , determine if the requisite data is present, and optionally add it
            to .
            

    */
    open func RunClaimActions(userData : dotnet.System.Text.Json.JsonElement) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_void__RunClaimActions_0__1__JsonElement(&__thrown, self.get_handle(), userData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonElement get_User()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_User
    open func get_User() throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_JsonElement__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse get_TokenResponse()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_TokenResponse
    open func get_TokenResponse() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_OAuthTokenResponse__get_TokenResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AccessToken()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_AccessToken
    open func get_AccessToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_String__get_AccessToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TokenType()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_TokenType
    open func get_TokenType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_String__get_TokenType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_RefreshToken()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_RefreshToken
    open func get_RefreshToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_String__get_RefreshToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_ExpiresIn()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_ExpiresIn
    open func get_ExpiresIn() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_System_Nullable_System_TimeSpan___get_ExpiresIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpClient get_Backchannel()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_Backchannel
    open func get_Backchannel() throws -> dotnet.System.Net.Http.HttpClient {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_HttpClient__get_Backchannel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpClient(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsIdentity get_Identity()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext.get_Identity
    open func get_Identity() throws -> Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_ClaimsIdentity__get_Identity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the access token provided by the authentication service.
            

    */
    open var AccessToken : Optional<dotnet.System.String> {
        get {
            return try! get_AccessToken();
        }
    }
    /**
    
            Gets the backchannel used to communicate with the provider.
            

    */
    open var Backchannel : dotnet.System.Net.Http.HttpClient {
        get {
            return try! get_Backchannel();
        }
    }
    /**
    
            Gets the access token expiration time.
            

    */
    open var ExpiresIn : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_ExpiresIn();
        }
    }
    /**
    
            Gets the main identity exposed by the authentication ticket.
            This property returns null when the ticket is null.
            

    */
    open var Identity : Optional<dotnet.System.Security.Claims.ClaimsIdentity> {
        get {
            return try! get_Identity();
        }
    }
    /**
    
            Gets the refresh token provided by the authentication service.
            

    */
    open var RefreshToken : Optional<dotnet.System.String> {
        get {
            return try! get_RefreshToken();
        }
    }
    /**
    
            Gets the token response returned by the authentication service.
            

    */
    open var TokenResponse : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse {
        get {
            return try! get_TokenResponse();
        }
    }
    /**
    
            Gets the access token type provided by the authentication service.
            

    */
    open var TokenType : Optional<dotnet.System.String> {
        get {
            return try! get_TokenType();
        }
    }
    /**
    
            Gets the JSON-serialized user or an empty
             if it is not available.
            

    */
    open var User : dotnet.System.Text.Json.JsonElement {
        get {
            return try! get_User();
        }
    }
} // OAuthCreatingTicketContext


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthDefaults
public struct OAuthDefaults {
    // static field: System.String DisplayName
    /**
    
            The default display name for OAuth authentication.
            

    */
    public static var DisplayName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_OAuth_OAuthDefaults_get_DisplayName());
            return __return;
        }
    }
} // OAuthDefaults


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents
    /**
    
            Default implementation.
            

    */
open class OAuthEvents
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreatingTicket(Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.CreatingTicket(Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext)
    /**
    
            Invoked after the provider successfully authenticates a user.
            

    - Parameter context: Contains information about the login session as well as the user .
    - Returns: A  representing the completed operation.

    */
    open func CreatingTicket(context : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_Task__CreatingTicket_0__1__OAuthCreatingTicketContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RedirectToAuthorizationEndpoint(Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.RedirectToAuthorizationEndpoint(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})
    /**
    
            Called when a Challenge causes a redirect to authorize endpoint in the OAuth handler.
            

    - Parameter context: Contains redirect URI and  of the challenge.
    */
    open func RedirectToAuthorizationEndpoint(context : aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_Task__RedirectToAuthorizationEndpoint_0__1__Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,System.Threading.Tasks.Task> get_OnCreatingTicket()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.get_OnCreatingTicket
    open func get_OnCreatingTicket() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_System_Func_Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_Task___get_OnCreatingTicket_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnCreatingTicket(System.Func<Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.set_OnCreatingTicket(System.Func{Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,System.Threading.Tasks.Task})
    open func set_OnCreatingTicket(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_void__set_OnCreatingTicket_0__1__System_Func_Microsoft_AspNetCore_Authentication_OAuth_OAuthCreatingTicketContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnCreatingTicket(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnCreatingTicket(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,System.Threading.Tasks.Task> get_OnRedirectToAuthorizationEndpoint()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.get_OnRedirectToAuthorizationEndpoint
    open func get_OnRedirectToAuthorizationEndpoint() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions__Task___get_OnRedirectToAuthorizationEndpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRedirectToAuthorizationEndpoint(System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents.set_OnRedirectToAuthorizationEndpoint(System.Func{Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions},System.Threading.Tasks.Task})
    open func set_OnRedirectToAuthorizationEndpoint(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthEvents_void__set_OnRedirectToAuthorizationEndpoint_0__1__System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions__Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRedirectToAuthorizationEndpoint(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRedirectToAuthorizationEndpoint(value: del_value);
    }
    /**
    
            Gets or sets the function that is invoked when the CreatingTicket method is invoked.
            

    */
    open var OnCreatingTicket : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthCreatingTicketContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnCreatingTicket();
        }
        set(v) {
            return try! set_OnCreatingTicket(value: v);
        }
    }
    /**
    
            Gets or sets the delegate that is invoked when the RedirectToAuthorizationEndpoint method is invoked.
            

    */
    open var OnRedirectToAuthorizationEndpoint : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRedirectToAuthorizationEndpoint();
        }
        set(v) {
            return try! set_OnRedirectToAuthorizationEndpoint(value: v);
        }
    }
} // OAuthEvents


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1
    /**
    
            An authentication handler that supports OAuth.
            

    */
open class OAuthHandler_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthHandler_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<TOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Authentication.ISystemClock)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{`0},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)
    /**
    
            Initializes a new instance of .
            

    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<TOptions>, logger : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, encoder : dotnet.System.Text.Encodings.Web.UrlEncoder, clock : aspnetcore.Microsoft.AspNetCore.Authentication.ISystemClock) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthHandler_1_ctor_0__4__Microsoft_Extensions_Options_IOptionsMonitor_TOptions__ILoggerFactory_UrlEncoder_ISystemClock(TOptions.get_type_handle(), &__thrown, options.get_handle(), logger.get_handle(), encoder.get_handle(), clock.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // OAuthHandler_1


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions
    /**
    
            Configuration options OAuth.
            

    */
open class OAuthOptions
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Validate()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.Validate
    /**
    
            Check that the options are valid. Should throw an exception if things are not ok.
            

    */
    open override func Validate() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__Validate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ClientId()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_ClientId
    open func get_ClientId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_String__get_ClientId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClientId(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_ClientId(System.String)
    open func set_ClientId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_ClientId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ClientSecret()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_ClientSecret
    open func get_ClientSecret() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_String__get_ClientSecret_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClientSecret(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_ClientSecret(System.String)
    open func set_ClientSecret(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_ClientSecret_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AuthorizationEndpoint()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_AuthorizationEndpoint
    open func get_AuthorizationEndpoint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_String__get_AuthorizationEndpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AuthorizationEndpoint(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_AuthorizationEndpoint(System.String)
    open func set_AuthorizationEndpoint(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_AuthorizationEndpoint_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TokenEndpoint()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_TokenEndpoint
    open func get_TokenEndpoint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_String__get_TokenEndpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TokenEndpoint(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_TokenEndpoint(System.String)
    open func set_TokenEndpoint(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_TokenEndpoint_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UserInformationEndpoint()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_UserInformationEndpoint
    open func get_UserInformationEndpoint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_String__get_UserInformationEndpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UserInformationEndpoint(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_UserInformationEndpoint(System.String)
    open func set_UserInformationEndpoint(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_UserInformationEndpoint_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents get_Events()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_Events
    open override func get_Events() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_OAuthEvents__get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Events(Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_Events(Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents)
    open func set_Events(value : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_Events_0__1__OAuthEvents(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection get_ClaimActions()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_ClaimActions
    open func get_ClaimActions() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_ClaimActionCollection__get_ClaimActions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Scope()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_Scope
    open func get_Scope() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_System_Collections_Generic_ICollection_string___get_Scope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.ISecureDataFormat<Microsoft.AspNetCore.Authentication.AuthenticationProperties> get_StateDataFormat()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_StateDataFormat
    open func get_StateDataFormat() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_Microsoft_AspNetCore_Authentication_ISecureDataFormat_Microsoft_AspNetCore_Authentication_AuthenticationProperties___get_StateDataFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StateDataFormat(Microsoft.AspNetCore.Authentication.ISecureDataFormat<Microsoft.AspNetCore.Authentication.AuthenticationProperties>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_StateDataFormat(Microsoft.AspNetCore.Authentication.ISecureDataFormat{Microsoft.AspNetCore.Authentication.AuthenticationProperties})
    open func set_StateDataFormat(value : aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_StateDataFormat_0__1__Microsoft_AspNetCore_Authentication_ISecureDataFormat_Microsoft_AspNetCore_Authentication_AuthenticationProperties_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UsePkce()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.get_UsePkce
    open func get_UsePkce() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_bool__get_UsePkce_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UsePkce(bool)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions.set_UsePkce(System.Boolean)
    open func set_UsePkce(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_void__set_UsePkce_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the URI where the client will be redirected to authenticate.
            

    */
    open var AuthorizationEndpoint : dotnet.System.String {
        get {
            return try! get_AuthorizationEndpoint();
        }
        set(v) {
            return try! set_AuthorizationEndpoint(value: v);
        }
    }
    /**
    
            A collection of claim actions used to select values from the json user data and create Claims.
            

    */
    open var ClaimActions : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
        get {
            return try! get_ClaimActions();
        }
    }
    /**
    
            Gets or sets the provider-assigned client id.
            

    */
    open var ClientId : dotnet.System.String {
        get {
            return try! get_ClientId();
        }
        set(v) {
            return try! set_ClientId(value: v);
        }
    }
    /**
    
            Gets or sets the provider-assigned client secret.
            

    */
    open var ClientSecret : dotnet.System.String {
        get {
            return try! get_ClientSecret();
        }
        set(v) {
            return try! set_ClientSecret(value: v);
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] Microsoft.AspNetCore.Authentication.OAuth.OAuthEvents get_Events()
    /**
    
            Gets the list of permissions to request.
            

    */
    open var Scope : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Scope();
        }
    }
    /**
    
            Gets or sets the type used to secure data handled by the middleware.
            

    */
    open var StateDataFormat : aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_StateDataFormat();
        }
        set(v) {
            return try! set_StateDataFormat(value: v);
        }
    }
    /**
    
            Gets or sets the URI the middleware will access to exchange the OAuth token.
            

    */
    open var TokenEndpoint : dotnet.System.String {
        get {
            return try! get_TokenEndpoint();
        }
        set(v) {
            return try! set_TokenEndpoint(value: v);
        }
    }
    /**
    
            Enables or disables the use of the Proof Key for Code Exchange (PKCE) standard. See https://tools.ietf.org/html/rfc7636.
            The default value is `false` but derived handlers should enable this if their provider supports it.
            

    */
    open var UsePkce : Bool {
        get {
            return try! get_UsePkce();
        }
        set(v) {
            return try! set_UsePkce(value: v);
        }
    }
    /**
    
            Gets or sets the URI the middleware will access to obtain the user information.
            This value is not used in the default implementation, it is for use in custom implementations of
            .
            

    */
    open var UserInformationEndpoint : dotnet.System.String {
        get {
            return try! get_UserInformationEndpoint();
        }
        set(v) {
            return try! set_UserInformationEndpoint(value: v);
        }
    }
} // OAuthOptions


// type: Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse
    /**
    
            Response from an provider for an OAuth token request.
            

    */
open class OAuthTokenResponse
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse Success(System.Text.Json.JsonDocument)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.Success(System.Text.Json.JsonDocument)
    /**
    
            Creates a successful .
            

    - Parameter response: The received JSON payload.
    - Returns: A  instance.

    */
    open class func Success(response : dotnet.System.Text.Json.JsonDocument) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_OAuthTokenResponse__Success_0__1__JsonDocument(&__thrown, response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse Failed(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.Failed(System.Exception)
    /**
    
            Creates a failed .
            

    - Parameter error: The error associated with the failure.
    - Returns: A  instance.

    */
    open class func Failed(error : dotnet.System.Exception) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_OAuthTokenResponse__Failed_0__1__Exception(&__thrown, error.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonDocument get_Response()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_Response
    open func get_Response() throws -> Optional<dotnet.System.Text.Json.JsonDocument> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_JsonDocument__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.JsonDocument(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Response(System.Text.Json.JsonDocument)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_Response(System.Text.Json.JsonDocument)
    open func set_Response(value : Optional<dotnet.System.Text.Json.JsonDocument>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_Response_0__1__JsonDocument(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AccessToken()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_AccessToken
    open func get_AccessToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_String__get_AccessToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AccessToken(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_AccessToken(System.String)
    open func set_AccessToken(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_AccessToken_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TokenType()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_TokenType
    open func get_TokenType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_String__get_TokenType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TokenType(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_TokenType(System.String)
    open func set_TokenType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_TokenType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RefreshToken()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_RefreshToken
    open func get_RefreshToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_String__get_RefreshToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RefreshToken(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_RefreshToken(System.String)
    open func set_RefreshToken(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_RefreshToken_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ExpiresIn()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_ExpiresIn
    open func get_ExpiresIn() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_String__get_ExpiresIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExpiresIn(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_ExpiresIn(System.String)
    open func set_ExpiresIn(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_ExpiresIn_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Exception get_Error()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.get_Error
    open func get_Error() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_Exception__get_Error_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Error(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.OAuthTokenResponse.set_Error(System.Exception)
    open func set_Error(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_OAuthTokenResponse_void__set_Error_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the access token issued by the OAuth provider.
            

    */
    open var AccessToken : Optional<dotnet.System.String> {
        get {
            return try! get_AccessToken();
        }
        set(v) {
            return try! set_AccessToken(value: v!);
        }
    }
    /**
    
            The exception in the event the response was a failure.
            

    */
    open var Error : Optional<dotnet.System.Exception> {
        get {
            return try! get_Error();
        }
        set(v) {
            return try! set_Error(value: v!);
        }
    }
    /**
    
            Gets or sets the validatity lifetime of the token in seconds.
            

    */
    open var ExpiresIn : Optional<dotnet.System.String> {
        get {
            return try! get_ExpiresIn();
        }
        set(v) {
            return try! set_ExpiresIn(value: v!);
        }
    }
    /**
    
            Gets or sets a refresh token that applications can use to obtain another access token if tokens can expire.
            

    */
    open var RefreshToken : Optional<dotnet.System.String> {
        get {
            return try! get_RefreshToken();
        }
        set(v) {
            return try! set_RefreshToken(value: v!);
        }
    }
    /**
    
            Gets or sets the received JSON payload.
            

    */
    open var Response : Optional<dotnet.System.Text.Json.JsonDocument> {
        get {
            return try! get_Response();
        }
        set(v) {
            return try! set_Response(value: v!);
        }
    }
    /**
    
            Gets or sets the token type.
            

    */
    open var TokenType : Optional<dotnet.System.String> {
        get {
            return try! get_TokenType();
        }
        set(v) {
            return try! set_TokenType(value: v!);
        }
    }
} // OAuthTokenResponse


}
// Microsoft.AspNetCore.Authentication.OAuth.Claims
extension Microsoft.AspNetCore.Authentication.OAuth.Claims {
// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction
    /**
    
            Infrastructure for mapping user data from a json structure to claims on the ClaimsIdentity.
            

    */
open class ClaimAction
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction.#ctor(System.String,System.String)
    /**
    
            Create a new claim manipulation action.
            

    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    */
    public init(claimType : dotnet.System.String, valueType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction_ctor_0__2__String_String(&__thrown, claimType.get_handle(), valueType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    
            Examine the given userData JSON, determine if the requisite data is present, and optionally add it
            as a new Claim on the ClaimsIdentity.
            

    - Parameter userData: The source data to examine. This value may be null.
    - Parameter identity: The identity to add Claims to.
    - Parameter issuer: The value to use for Claim.Issuer when creating a Claim.
    */
    open func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ClaimType()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction.get_ClaimType
    open func get_ClaimType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction_String__get_ClaimType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ValueType()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction.get_ValueType
    open func get_ValueType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction_String__get_ValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the value to use for when creating a Claim.
            

    */
    open var ClaimType : dotnet.System.String {
        get {
            return try! get_ClaimType();
        }
    }
    /**
    
            Gets the value to use for  when creating a Claim.
            

    */
    open var ValueType : dotnet.System.String {
        get {
            return try! get_ValueType();
        }
    }
} // ClaimAction


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection
    /**
    
            A collection of ClaimActions used when mapping user data to Claims.
            

    */
open class ClaimActionCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection.Clear
    /**
    
            Remove all claim actions.
            

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection.Remove(System.String)
    /**
    
            Remove all claim actions for the given ClaimType.
            

    - Parameter claimType: The ClaimType of maps to remove.
    */
    open func Remove(claimType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), claimType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection.Add(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction)
    /**
    
            Add a claim action to the collection.
            

    - Parameter action: The claim action to add.
    */
    open func Add(action : aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_void__Add_0__1__ClaimAction(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection.GetEnumerator
    /**
    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimActionCollection_System_Collections_Generic_IEnumerator_Microsoft_AspNetCore_Authentication_OAuth_Claims_ClaimAction___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // ClaimActionCollection


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.CustomJsonClaimAction
    /**
    
            A ClaimAction that selects the value from the JSON user data by running the given Func resolver.
            

    */
open class CustomJsonClaimAction
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_CustomJsonClaimAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.Func<System.Text.Json.JsonElement,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.CustomJsonClaimAction.#ctor(System.String,System.String,System.Func{System.Text.Json.JsonElement,System.String})
    /**
    
            Creates a new CustomJsonClaimAction.
            

    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    - Parameter resolver: The Func that will be called to select value from the given JSON user data.
    */
    public init(claimType : dotnet.System.String, valueType : dotnet.System.String, resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_CustomJsonClaimAction_ctor_0__3__String_String_System_Func_System_Text_Json_JsonElement_string_(&__thrown, claimType.get_handle(), valueType.get_handle(), resolver.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.CustomJsonClaimAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    */
    open override func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_CustomJsonClaimAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Text.Json.JsonElement,System.String> get_Resolver()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.CustomJsonClaimAction.get_Resolver
    open func get_Resolver() throws -> dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_CustomJsonClaimAction_System_Func_System_Text_Json_JsonElement_string___get_Resolver_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    /**
    
            The Func that will be called to select value from the given JSON user data.
            

    */
    open var Resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String> {
        get {
            return try! get_Resolver();
        }
    }
} // CustomJsonClaimAction


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.DeleteClaimAction
    /**
    
            A ClaimAction that deletes all claims from the given ClaimsIdentity with the given ClaimType.
            

    */
open class DeleteClaimAction
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_DeleteClaimAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.DeleteClaimAction.#ctor(System.String)
    /**
    
            Creates a new DeleteClaimAction.
            

    - Parameter claimType: The ClaimType of Claims to delete.
    */
    public init(claimType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_DeleteClaimAction_ctor_0__1__String(&__thrown, claimType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.DeleteClaimAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    */
    open override func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_DeleteClaimAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DeleteClaimAction


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction
    /**
    
            A ClaimAction that selects a top level value from the json user data with the given key name and adds it as a Claim.
            This no-ops if the key is not found or the value is empty.
            

    */
open class JsonKeyClaimAction
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonKeyClaimAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction.#ctor(System.String,System.String,System.String)
    /**
    
            Creates a new JsonKeyClaimAction.
            

    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    */
    public init(claimType : dotnet.System.String, valueType : dotnet.System.String, jsonKey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonKeyClaimAction_ctor_0__3__String_String_String(&__thrown, claimType.get_handle(), valueType.get_handle(), jsonKey.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    */
    open override func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonKeyClaimAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_JsonKey()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction.get_JsonKey
    open func get_JsonKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonKeyClaimAction_String__get_JsonKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The top level key to look for in the json user data.
            

    */
    open var JsonKey : dotnet.System.String {
        get {
            return try! get_JsonKey();
        }
    }
} // JsonKeyClaimAction


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonSubKeyClaimAction
    /**
    
            A ClaimAction that selects a second level value from the json user data with the given top level key
            name and second level sub key name and add it as a Claim.
            This no-ops if the keys are not found or the value is empty.
            

    */
open class JsonSubKeyClaimAction
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonKeyClaimAction
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonSubKeyClaimAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonSubKeyClaimAction.#ctor(System.String,System.String,System.String,System.String)
    /**
    
            Creates a new JsonSubKeyClaimAction.
            

    - Parameter claimType: The value to use for Claim.Type when creating a Claim.
    - Parameter valueType: The value to use for Claim.ValueType when creating a Claim.
    - Parameter jsonKey: The top level key to look for in the json user data.
    - Parameter subKey: The second level key to look for in the json user data.
    */
    public init(claimType : dotnet.System.String, valueType : dotnet.System.String, jsonKey : dotnet.System.String, subKey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonSubKeyClaimAction_ctor_0__4__String_String_String_String(&__thrown, claimType.get_handle(), valueType.get_handle(), jsonKey.get_handle(), subKey.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonSubKeyClaimAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    */
    open override func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonSubKeyClaimAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SubKey()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.JsonSubKeyClaimAction.get_SubKey
    open func get_SubKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_OAuth_Claims_JsonSubKeyClaimAction_String__get_SubKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The second level key to look for in the json user data.
            

    */
    open var SubKey : dotnet.System.String {
        get {
            return try! get_SubKey();
        }
    }
} // JsonSubKeyClaimAction


// type: Microsoft.AspNetCore.Authentication.OAuth.Claims.MapAllClaimsAction
    /**
    
            A ClaimAction that selects all top level values from the json user data and adds them as Claims.
            This excludes duplicate sets of names and values.
            

    */
open class MapAllClaimsAction
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_OAuth_Claims_MapAllClaimsAction_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.MapAllClaimsAction.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_OAuth_Claims_MapAllClaimsAction_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Run(System.Text.Json.JsonElement, System.Security.Claims.ClaimsIdentity, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.OAuth.Claims.MapAllClaimsAction.Run(System.Text.Json.JsonElement,System.Security.Claims.ClaimsIdentity,System.String)
    /**
    */
    open override func Run(userData : dotnet.System.Text.Json.JsonElement, identity : dotnet.System.Security.Claims.ClaimsIdentity, issuer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_OAuth_Claims_MapAllClaimsAction_void__Run_0__3__JsonElement_ClaimsIdentity_String(&__thrown, self.get_handle(), userData.get_handle(), identity.get_handle(), issuer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MapAllClaimsAction


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.OAuthExtensions
public struct OAuthExtensions {
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})
    /**
    
            Adds OAuth 2.0 based authentication to  using the specified authentication scheme.
            

    - Parameter builder: The .
    - Parameter authenticationScheme: The authentication scheme.
    - Parameter configureOptions: A delegate to configure .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddOAuth(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OAuthExtensions_AuthenticationBuilder__AddOAuth_0__3__AuthenticationBuilder_String_System_Action_Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_(&__thrown, builder.get_handle(), authenticationScheme.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddOAuth(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>(configureOptions);
        return try AddOAuth(builder: builder, authenticationScheme: authenticationScheme, configureOptions: del_configureOptions);
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})
    /**
    
            Adds OAuth 2.0 based authentication to  using the specified authentication scheme.
            

    - Parameter builder: The .
    - Parameter authenticationScheme: The authentication scheme.
    - Parameter displayName: A display name for the authentication handler.
    - Parameter configureOptions: A delegate to configure .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddOAuth(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, displayName : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OAuthExtensions_AuthenticationBuilder__AddOAuth_0__4__AuthenticationBuilder_String_String_System_Action_Microsoft_AspNetCore_Authentication_OAuth_OAuthOptions_(&__thrown, builder.get_handle(), authenticationScheme.get_handle(), displayName.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddOAuth(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, displayName : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>(configureOptions);
        return try AddOAuth(builder: builder, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: del_configureOptions);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<TOptions>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<TOptions>)
} // OAuthExtensions


// type: Microsoft.Extensions.DependencyInjection.OAuthPostConfigureOptions`2
    /**
    
            Used to setup defaults for the OAuthOptions.
            

    */
open class OAuthPostConfigureOptions_2<TOptions : SGBridgeGenericValue,THandler : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_OAuthPostConfigureOptions_2_get_type_handle(TOptions.get_type_handle(),THandler.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
// docid: M:Microsoft.Extensions.DependencyInjection.OAuthPostConfigureOptions`2.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
    /**
    
            Initializes the .
            

    - Parameter dataProtection: The .
    */
    public init(dataProtection : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_DependencyInjection_OAuthPostConfigureOptions_2_ctor_0__1__IDataProtectionProvider(TOptions.get_type_handle(), THandler.get_type_handle(), &__thrown, dataProtection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.DependencyInjection.OAuthPostConfigureOptions`2.PostConfigure(System.String,`0)
    /**
    */
    open /* method final */ func PostConfigure(name : dotnet.System.String, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_OAuthPostConfigureOptions_2_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), THandler.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // OAuthPostConfigureOptions_2


}



// EXTENSION METHOD void MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapJsonKey(claimType : dotnet.System.String, jsonKey : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(collection: self, claimType: claimType, jsonKey: jsonKey);
    }
}

// EXTENSION METHOD void MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapJsonKey(claimType : dotnet.System.String, jsonKey : dotnet.System.String, valueType : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(collection: self, claimType: claimType, jsonKey: jsonKey, valueType: valueType);
    }
}

// EXTENSION METHOD void MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapJsonSubKey(claimType : dotnet.System.String, jsonKey : dotnet.System.String, subKey : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(collection: self, claimType: claimType, jsonKey: jsonKey, subKey: subKey);
    }
}

// EXTENSION METHOD void MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapJsonSubKey(claimType : dotnet.System.String, jsonKey : dotnet.System.String, subKey : dotnet.System.String, valueType : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(collection: self, claimType: claimType, jsonKey: jsonKey, subKey: subKey, valueType: valueType);
    }
}

// EXTENSION METHOD void MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.Func<System.Text.Json.JsonElement,System.String>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapCustomJson(claimType : dotnet.System.String, resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(collection: self, claimType: claimType, resolver: resolver);
    }
    // delegate closure overload
    public func MapCustomJson(claimType : dotnet.System.String, resolver : @escaping (dotnet.System.Text.Json.JsonElement) throws -> dotnet.System.String) throws {
        let del_resolver = try dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>(resolver);
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(collection: self, claimType: claimType, resolver: del_resolver);
    }
}

// EXTENSION METHOD void MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String, System.String, System.Func<System.Text.Json.JsonElement,System.String>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapCustomJson(claimType : dotnet.System.String, valueType : dotnet.System.String, resolver : dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(collection: self, claimType: claimType, valueType: valueType, resolver: resolver);
    }
    // delegate closure overload
    public func MapCustomJson(claimType : dotnet.System.String, valueType : dotnet.System.String, resolver : @escaping (dotnet.System.Text.Json.JsonElement) throws -> dotnet.System.String) throws {
        let del_resolver = try dotnet.System.Func_2<dotnet.System.Text.Json.JsonElement,dotnet.System.String>(resolver);
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(collection: self, claimType: claimType, valueType: valueType, resolver: del_resolver);
    }
}

// EXTENSION METHOD void MapAll(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapAll() throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapAll(collection: self);
    }
}

// EXTENSION METHOD void MapAllExcept(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func MapAllExcept(exclusions : dotnet.System_Arr<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapAllExcept(collection: self, exclusions: exclusions);
    }
}

// EXTENSION METHOD void DeleteClaim(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func DeleteClaim(claimType : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaim(collection: self, claimType: claimType);
    }
}

// EXTENSION METHOD void DeleteClaims(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection, System.String[])
extension aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection {
    public func DeleteClaims(claimTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaims(collection: self, claimTypes: claimTypes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddOAuth(authenticationScheme : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(builder: self, authenticationScheme: authenticationScheme, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddOAuth(authenticationScheme : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(builder: self, authenticationScheme: authenticationScheme, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddOAuth(authenticationScheme : dotnet.System.String, displayName : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(builder: self, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddOAuth(authenticationScheme : dotnet.System.String, displayName : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(builder: self, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<TOptions>)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<TOptions>)

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<TOptions>)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth<TOptions, THandler>(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<TOptions>)

