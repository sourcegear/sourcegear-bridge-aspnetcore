// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.CorsEndpointConventionBuilderExtensions
public struct CorsEndpointConventionBuilderExtensions {
    // TBuilder RequireCors<TBuilder>(TBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.CorsEndpointConventionBuilderExtensions.RequireCors``1(``0,System.String)
    /**
    
            Adds a CORS policy with the specified name to the endpoint(s).
            

    - Parameter builder: The endpoint convention builder.
    - Parameter policyName: The CORS policy name.
    - Returns: The original convention builder parameter.

    */
    public static func RequireCors<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, policyName : dotnet.System.String) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CorsEndpointConventionBuilderExtensions_UTBuilder__RequireCors_1__2__UTBuilder_String(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder RequireCors<TBuilder>(TBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.CorsEndpointConventionBuilderExtensions.RequireCors``1(``0,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})
    /**
    
            Adds the specified CORS policy to the endpoint(s).
            

    - Parameter builder: The endpoint convention builder.
    - Parameter configurePolicy: A delegate which can use a policy builder to build a policy.
    - Returns: The original convention builder parameter.

    */
    public static func RequireCors<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CorsEndpointConventionBuilderExtensions_UTBuilder__RequireCors_1__2__UTBuilder_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), configurePolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // delegate closure overload
    public static func RequireCors<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder) throws -> Void) throws -> UTBuilder {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>(configurePolicy);
        return try RequireCors(builder: builder, configurePolicy: del_configurePolicy);
    }
} // CorsEndpointConventionBuilderExtensions


// type: Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions
public struct CorsMiddlewareExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a CORS middleware to your web application pipeline to allow cross domain requests.
            

    - Parameter app: The IApplicationBuilder passed to your Configure method
    - Returns: The original app parameter

    */
    public static func UseCors(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CorsMiddlewareExtensions_IApplicationBuilder__UseCors_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Adds a CORS middleware to your web application pipeline to allow cross domain requests.
            

    - Parameter app: The IApplicationBuilder passed to your Configure method
    - Parameter policyName: The policy name of a configured policy.
    - Returns: The original app parameter

    */
    public static func UseCors(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, policyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CorsMiddlewareExtensions_IApplicationBuilder__UseCors_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})
    /**
    
            Adds a CORS middleware to your web application pipeline to allow cross domain requests.
            

    - Parameter app: The IApplicationBuilder passed to your Configure method.
    - Parameter configurePolicy: A delegate which can use a policy builder to build a policy.
    - Returns: The original app parameter

    */
    public static func UseCors(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CorsMiddlewareExtensions_IApplicationBuilder__UseCors_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_(&__thrown, app.get_handle(), configurePolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseCors(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>(configurePolicy);
        return try UseCors(app: app, configurePolicy: del_configurePolicy);
    }
} // CorsMiddlewareExtensions


}

// Microsoft.AspNetCore.Cors
extension Microsoft.AspNetCore.Cors {
// type: Microsoft.AspNetCore.Cors.CorsPolicyMetadata
    /**
    
            Metadata that provides a CORS policy.
            

    */
open class CorsPolicyMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_CorsPolicyMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_CorsPolicyMetadata_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.CorsPolicyMetadata.#ctor(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    
            Creates a new instance of  using the specified policy.
            

    - Parameter policy: The policy which needs to be applied.
    */
    public init(policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_CorsPolicyMetadata_ctor_0__1__CorsPolicy(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy get_Policy()
// docid: M:Microsoft.AspNetCore.Cors.CorsPolicyMetadata.get_Policy
    open /* method final */ func get_Policy() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_CorsPolicyMetadata_CorsPolicy__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy(hndl : __return);
        }
    }
    /**
    
            The policy which needs to be applied.
            

    */
    public var Policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        get {
            return try! get_Policy();
        }
    }
} // CorsPolicyMetadata


// type: Microsoft.AspNetCore.Cors.DisableCorsAttribute
    /**
    */
open class DisableCorsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Cors_Infrastructure_IDisableCorsAttribute,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_DisableCorsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_DisableCorsAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Cors.DisableCorsAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_DisableCorsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DisableCorsAttribute


// type: Microsoft.AspNetCore.Cors.EnableCorsAttribute
    /**
    */
open class EnableCorsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_EnableCorsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_EnableCorsAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Cors.EnableCorsAttribute.#ctor
    /**
    
            Creates a new instance of the  with the default policy
            name defined by .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_EnableCorsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Cors.EnableCorsAttribute.#ctor(System.String)
    /**
    
            Creates a new instance of the  with the supplied policy name.
            

    - Parameter policyName: The name of the policy to be applied.
    */
    public init(policyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_EnableCorsAttribute_ctor_0__1__String(&__thrown, policyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PolicyName()
// docid: M:Microsoft.AspNetCore.Cors.EnableCorsAttribute.get_PolicyName
    open /* method final */ func get_PolicyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_EnableCorsAttribute_String__get_PolicyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PolicyName(System.String)
// docid: M:Microsoft.AspNetCore.Cors.EnableCorsAttribute.set_PolicyName(System.String)
    open /* method final */ func set_PolicyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_EnableCorsAttribute_void__set_PolicyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var PolicyName : Optional<dotnet.System.String> {
        get {
            return try! get_PolicyName();
        }
        set(v) {
            return try! set_PolicyName(value: v!);
        }
    }
} // EnableCorsAttribute


}
// Microsoft.AspNetCore.Cors.Infrastructure
extension Microsoft.AspNetCore.Cors.Infrastructure {
// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsConstants
public struct CorsConstants {
    // static field: System.String PreflightHttpMethod
    /**
    
            The HTTP method for the CORS preflight request.
            

    */
    public static var PreflightHttpMethod : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_PreflightHttpMethod());
            return __return;
        }
    }
    // static field: System.String Origin
    /**
    
            The Origin request header.
            

    */
    public static var Origin : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_Origin());
            return __return;
        }
    }
    // static field: System.String AnyOrigin
    /**
    
            The value for the Access-Control-Allow-Origin response header to allow all origins.
            

    */
    public static var AnyOrigin : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AnyOrigin());
            return __return;
        }
    }
    // static field: System.String AccessControlRequestMethod
    /**
    
            The Access-Control-Request-Method request header.
            

    */
    public static var AccessControlRequestMethod : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlRequestMethod());
            return __return;
        }
    }
    // static field: System.String AccessControlRequestHeaders
    /**
    
            The Access-Control-Request-Headers request header.
            

    */
    public static var AccessControlRequestHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlRequestHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowOrigin
    /**
    
            The Access-Control-Allow-Origin response header.
            

    */
    public static var AccessControlAllowOrigin : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlAllowOrigin());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowHeaders
    /**
    
            The Access-Control-Allow-Headers response header.
            

    */
    public static var AccessControlAllowHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlAllowHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlExposeHeaders
    /**
    
            The Access-Control-Expose-Headers response header.
            

    */
    public static var AccessControlExposeHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlExposeHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowMethods
    /**
    
            The Access-Control-Allow-Methods response header.
            

    */
    public static var AccessControlAllowMethods : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlAllowMethods());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowCredentials
    /**
    
            The Access-Control-Allow-Credentials response header.
            

    */
    public static var AccessControlAllowCredentials : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlAllowCredentials());
            return __return;
        }
    }
    // static field: System.String AccessControlMaxAge
    /**
    
            The Access-Control-Max-Age response header.
            

    */
    public static var AccessControlMaxAge : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Cors_Infrastructure_CorsConstants_get_AccessControlMaxAge());
            return __return;
        }
    }
} // CorsConstants


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware
    /**
    
            A middleware for handling CORS.
            

    */
open class CorsMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Cors.Infrastructure.ICorsService,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Instantiates a new .
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter corsService: An instance of .
    - Parameter loggerFactory: An instance of .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, corsService : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_ctor_0__3__RequestDelegate_ICorsService_ILoggerFactory(&__thrown, next.get_handle(), corsService.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, Microsoft.Extensions.Logging.ILoggerFactory, System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Cors.Infrastructure.ICorsService,Microsoft.Extensions.Logging.ILoggerFactory,System.String)
    /**
    
            Instantiates a new .
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter corsService: An instance of .
    - Parameter loggerFactory: An instance of .
    - Parameter policyName: An optional name of the policy to be fetched.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, corsService : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, policyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_ctor_0__4__RequestDelegate_ICorsService_ILoggerFactory_String(&__thrown, next.get_handle(), corsService.get_handle(), loggerFactory.get_handle(), policyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Cors.Infrastructure.ICorsService,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Instantiates a new .
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter corsService: An instance of .
    - Parameter policy: An instance of the  which can be applied.
    - Parameter loggerFactory: An instance of .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, corsService : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_ctor_0__4__RequestDelegate_ICorsService_CorsPolicy_ILoggerFactory(&__thrown, next.get_handle(), corsService.get_handle(), policy.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider)
    /**
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, corsPolicyProvider : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsMiddleware_Task__Invoke_0__2__HttpContext_ICorsPolicyProvider(&__thrown, self.get_handle(), context.get_handle(), corsPolicyProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // CorsMiddleware


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions
    /**
    
            Provides programmatic configuration for Cors.
            

    */
open class CorsOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddDefaultPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.AddDefaultPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    
            Adds a new policy and sets it as the default.
            

    - Parameter policy: The  policy to be added.
    */
    open func AddDefaultPolicy(policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_void__AddDefaultPolicy_0__1__CorsPolicy(&__thrown, self.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddDefaultPolicy(System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.AddDefaultPolicy(System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})
    /**
    
            Adds a new policy and sets it as the default.
            

    - Parameter configurePolicy: A delegate which can use a policy builder to build a policy.
    */
    open func AddDefaultPolicy(configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_void__AddDefaultPolicy_0__1__System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_(&__thrown, self.get_handle(), configurePolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddDefaultPolicy(configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder) throws -> Void) throws {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>(configurePolicy);
        return try AddDefaultPolicy(configurePolicy: del_configurePolicy);
    }
    // void AddPolicy(System.String, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.AddPolicy(System.String,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    
            Adds a new policy.
            

    - Parameter name: The name of the policy.
    - Parameter policy: The  policy to be added.
    */
    open func AddPolicy(name : dotnet.System.String, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_void__AddPolicy_0__2__String_CorsPolicy(&__thrown, self.get_handle(), name.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddPolicy(System.String, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.AddPolicy(System.String,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})
    /**
    
            Adds a new policy.
            

    - Parameter name: The name of the policy.
    - Parameter configurePolicy: A delegate which can use a policy builder to build a policy.
    */
    open func AddPolicy(name : dotnet.System.String, configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_void__AddPolicy_0__2__String_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_(&__thrown, self.get_handle(), name.get_handle(), configurePolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddPolicy(name : dotnet.System.String, configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder) throws -> Void) throws {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>(configurePolicy);
        return try AddPolicy(name: name, configurePolicy: del_configurePolicy);
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy GetPolicy(System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.GetPolicy(System.String)
    /**
    
            Gets the policy based on the 
            

    - Parameter name: The name of the policy to lookup.
    - Returns: The  if the policy was added.null otherwise.

    */
    open func GetPolicy(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_CorsPolicy__GetPolicy_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DefaultPolicyName()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.get_DefaultPolicyName
    open func get_DefaultPolicyName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_String__get_DefaultPolicyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultPolicyName(System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions.set_DefaultPolicyName(System.String)
    open func set_DefaultPolicyName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_void__set_DefaultPolicyName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the default policy name.
            

    */
    open var DefaultPolicyName : dotnet.System.String {
        get {
            return try! get_DefaultPolicyName();
        }
        set(v) {
            return try! set_DefaultPolicyName(value: v);
        }
    }
} // CorsOptions


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy
    /**
    
            Defines the policy for Cross-Origin requests based on the CORS specifications.
            

    */
open class CorsPolicy
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.#ctor
    /**
    
            Default constructor for a CorsPolicy.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.ToString
    /**
    
            Returns a  that represents this instance.
            

    - Returns: 
            A  that represents this instance.
            

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AllowAnyHeader()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_AllowAnyHeader
    open func get_AllowAnyHeader() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_bool__get_AllowAnyHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowAnyMethod()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_AllowAnyMethod
    open func get_AllowAnyMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_bool__get_AllowAnyMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowAnyOrigin()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_AllowAnyOrigin
    open func get_AllowAnyOrigin() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_bool__get_AllowAnyOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Func<System.String,bool> get_IsOriginAllowed()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_IsOriginAllowed
    open func get_IsOriginAllowed() throws -> dotnet.System.Func_2<dotnet.System.String,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Func_string_bool___get_IsOriginAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IsOriginAllowed(System.Func<System.String,bool>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.set_IsOriginAllowed(System.Func{System.String,System.Boolean})
    open func set_IsOriginAllowed(value : dotnet.System.Func_2<dotnet.System.String,Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_void__set_IsOriginAllowed_0__1__System_Func_string_bool_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_IsOriginAllowed(value : @escaping (dotnet.System.String) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.String,Swift.Bool>(value);
        return try set_IsOriginAllowed(value: del_value);
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_ExposedHeaders()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_ExposedHeaders
    open func get_ExposedHeaders() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Collections_Generic_IList_string___get_ExposedHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_Headers()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_Headers
    open func get_Headers() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Collections_Generic_IList_string___get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_Methods()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_Methods
    open func get_Methods() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Collections_Generic_IList_string___get_Methods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_Origins()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_Origins
    open func get_Origins() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Collections_Generic_IList_string___get_Origins_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_PreflightMaxAge()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_PreflightMaxAge
    open func get_PreflightMaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_System_Nullable_System_TimeSpan___get_PreflightMaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_PreflightMaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.set_PreflightMaxAge(System.Nullable{System.TimeSpan})
    open func set_PreflightMaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_void__set_PreflightMaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SupportsCredentials()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.get_SupportsCredentials
    open func get_SupportsCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_bool__get_SupportsCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SupportsCredentials(bool)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy.set_SupportsCredentials(System.Boolean)
    open func set_SupportsCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy_void__set_SupportsCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a value indicating if all headers are allowed.
            

    */
    open var AllowAnyHeader : Bool {
        get {
            return try! get_AllowAnyHeader();
        }
    }
    /**
    
            Gets a value indicating if all methods are allowed.
            

    */
    open var AllowAnyMethod : Bool {
        get {
            return try! get_AllowAnyMethod();
        }
    }
    /**
    
            Gets a value indicating if all origins are allowed.
            

    */
    open var AllowAnyOrigin : Bool {
        get {
            return try! get_AllowAnyOrigin();
        }
    }
    /**
    
            Gets the headers that the resource might use and can be exposed.
            

    */
    open var ExposedHeaders : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_ExposedHeaders();
        }
    }
    /**
    
            Gets the headers that are supported by the resource.
            

    */
    open var Headers : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_Headers();
        }
    }
    /**
    
            Gets or sets a function which evaluates whether an origin is allowed.
            

    */
    open var IsOriginAllowed : dotnet.System.Func_2<dotnet.System.String,Bool> {
        get {
            return try! get_IsOriginAllowed();
        }
        set(v) {
            return try! set_IsOriginAllowed(value: v);
        }
    }
    /**
    
            Gets the methods that are supported by the resource.
            

    */
    open var Methods : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_Methods();
        }
    }
    /**
    
            Gets the origins that are allowed to access the resource.
            

    */
    open var Origins : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_Origins();
        }
    }
    /**
    
            Gets or sets the  for which the results of a preflight request can be cached.
            

    */
    open var PreflightMaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_PreflightMaxAge();
        }
        set(v) {
            return try! set_PreflightMaxAge(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether the resource supports user credentials in the request.
            

    */
    open var SupportsCredentials : Bool {
        get {
            return try! get_SupportsCredentials();
        }
        set(v) {
            return try! set_SupportsCredentials(value: v);
        }
    }
} // CorsPolicy


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder
    /**
    
            Exposes methods to build a policy.
            

    */
open class CorsPolicyBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.#ctor(System.String[])
    /**
    
            Creates a new instance of the .
            

    - Parameter origins: list of origins which can be added.
    */
    public init(origins : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_ctor_0__1__StringArray(&__thrown, origins.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.#ctor(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    
            Creates a new instance of the .
            

    - Parameter policy: The policy which will be used to intialize the builder.
    */
    public init(policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_ctor_0__1__CorsPolicy(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder WithOrigins(System.String[])
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.WithOrigins(System.String[])
    /**
    
            Adds the specified  to the policy.
            

    - Parameter origins: The origins that are allowed.
    - Returns: The current policy builder.

    */
    open func WithOrigins(origins : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__WithOrigins_0__1__StringArray(&__thrown, self.get_handle(), origins.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder WithHeaders(System.String[])
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.WithHeaders(System.String[])
    /**
    
            Adds the specified  to the policy.
            

    - Parameter headers: The headers which need to be allowed in the request.
    - Returns: The current policy builder.

    */
    open func WithHeaders(headers : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__WithHeaders_0__1__StringArray(&__thrown, self.get_handle(), headers.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder WithExposedHeaders(System.String[])
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.WithExposedHeaders(System.String[])
    /**
    
            Adds the specified  to the policy.
            

    - Parameter exposedHeaders: The headers which need to be exposed to the client.
    - Returns: The current policy builder.

    */
    open func WithExposedHeaders(exposedHeaders : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__WithExposedHeaders_0__1__StringArray(&__thrown, self.get_handle(), exposedHeaders.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder WithMethods(System.String[])
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.WithMethods(System.String[])
    /**
    
            Adds the specified  to the policy.
            

    - Parameter methods: The methods which need to be added to the policy.
    - Returns: The current policy builder.

    */
    open func WithMethods(methods : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__WithMethods_0__1__StringArray(&__thrown, self.get_handle(), methods.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder AllowCredentials()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.AllowCredentials
    /**
    
            Sets the policy to allow credentials.
            

    - Returns: The current policy builder.

    */
    open func AllowCredentials() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__AllowCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder DisallowCredentials()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.DisallowCredentials
    /**
    
            Sets the policy to not allow credentials.
            

    - Returns: The current policy builder.

    */
    open func DisallowCredentials() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__DisallowCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder AllowAnyOrigin()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.AllowAnyOrigin
    /**
    
            Ensures that the policy allows any origin.
            

    - Returns: The current policy builder.

    */
    open func AllowAnyOrigin() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__AllowAnyOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder AllowAnyMethod()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.AllowAnyMethod
    /**
    
            Ensures that the policy allows any method.
            

    - Returns: The current policy builder.

    */
    open func AllowAnyMethod() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__AllowAnyMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder AllowAnyHeader()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.AllowAnyHeader
    /**
    
            Ensures that the policy allows any header.
            

    - Returns: The current policy builder.

    */
    open func AllowAnyHeader() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__AllowAnyHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder SetPreflightMaxAge(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.SetPreflightMaxAge(System.TimeSpan)
    /**
    
            Sets the preflightMaxAge for the underlying policy.
            

    - Parameter preflightMaxAge: A positive  indicating the time a preflight
            request can be cached.
    - Returns: The current policy builder.

    */
    open func SetPreflightMaxAge(preflightMaxAge : dotnet.System.TimeSpan) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__SetPreflightMaxAge_0__1__TimeSpan(&__thrown, self.get_handle(), preflightMaxAge.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder SetIsOriginAllowed(System.Func<System.String,bool>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.SetIsOriginAllowed(System.Func{System.String,System.Boolean})
    /**
    
            Sets the specified  for the underlying policy.
            

    - Parameter isOriginAllowed: The function used by the policy to evaluate if an origin is allowed.
    - Returns: The current policy builder.

    */
    open func SetIsOriginAllowed(isOriginAllowed : dotnet.System.Func_2<dotnet.System.String,Bool>) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__SetIsOriginAllowed_0__1__System_Func_string_bool_(&__thrown, self.get_handle(), isOriginAllowed.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func SetIsOriginAllowed(isOriginAllowed : @escaping (dotnet.System.String) throws -> Bool) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        let del_isOriginAllowed = try dotnet.System.Func_2<dotnet.System.String,Swift.Bool>(isOriginAllowed);
        return try SetIsOriginAllowed(isOriginAllowed: del_isOriginAllowed);
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder SetIsOriginAllowedToAllowWildcardSubdomains()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.SetIsOriginAllowedToAllowWildcardSubdomains
    /**
    
            Sets the  property of the policy to be a function
            that allows origins to match a configured wildcarded domain when evaluating if the
            origin is allowed.
            

    - Returns: The current policy builder.

    */
    open func SetIsOriginAllowedToAllowWildcardSubdomains() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicyBuilder__SetIsOriginAllowedToAllowWildcardSubdomains_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy Build()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.Build
    /**
    
            Builds a new  using the entries added.
            

    - Returns: The constructed .

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicyBuilder_CorsPolicy__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy(hndl : __return);
        }
    }
} // CorsPolicyBuilder


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsResult
    /**
    
            Results returned by .
            

    */
open class CorsResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.ToString
    /**
    
            Returns a  that represents this instance.
            

    - Returns: 
            A  that represents this instance.
            

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsPreflightRequest()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_IsPreflightRequest
    open func get_IsPreflightRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_bool__get_IsPreflightRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsPreflightRequest(bool)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_IsPreflightRequest(System.Boolean)
    open func set_IsPreflightRequest(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_IsPreflightRequest_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AllowedOrigin()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_AllowedOrigin
    open func get_AllowedOrigin() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_String__get_AllowedOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AllowedOrigin(System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_AllowedOrigin(System.String)
    open func set_AllowedOrigin(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_AllowedOrigin_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsOriginAllowed()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_IsOriginAllowed
    open func get_IsOriginAllowed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_bool__get_IsOriginAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsOriginAllowed(bool)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_IsOriginAllowed(System.Boolean)
    open func set_IsOriginAllowed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_IsOriginAllowed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SupportsCredentials()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_SupportsCredentials
    open func get_SupportsCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_bool__get_SupportsCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SupportsCredentials(bool)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_SupportsCredentials(System.Boolean)
    open func set_SupportsCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_SupportsCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedMethods()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_AllowedMethods
    open func get_AllowedMethods() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_System_Collections_Generic_IList_string___get_AllowedMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedHeaders()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_AllowedHeaders
    open func get_AllowedHeaders() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_System_Collections_Generic_IList_string___get_AllowedHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedExposedHeaders()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_AllowedExposedHeaders
    open func get_AllowedExposedHeaders() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_System_Collections_Generic_IList_string___get_AllowedExposedHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_VaryByOrigin()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_VaryByOrigin
    open func get_VaryByOrigin() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_bool__get_VaryByOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_VaryByOrigin(bool)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_VaryByOrigin(System.Boolean)
    open func set_VaryByOrigin(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_VaryByOrigin_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_PreflightMaxAge()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.get_PreflightMaxAge
    open func get_PreflightMaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_System_Nullable_System_TimeSpan___get_PreflightMaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_PreflightMaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsResult.set_PreflightMaxAge(System.Nullable{System.TimeSpan})
    open func set_PreflightMaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsResult_void__set_PreflightMaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the allowed headers that can be exposed on the response.
            

    */
    open var AllowedExposedHeaders : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedExposedHeaders();
        }
    }
    /**
    
            Gets the allowed headers.
            

    */
    open var AllowedHeaders : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedHeaders();
        }
    }
    /**
    
            Gets the allowed methods.
            

    */
    open var AllowedMethods : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedMethods();
        }
    }
    /**
    
            Gets or sets the allowed origin.
            

    */
    open var AllowedOrigin : Optional<dotnet.System.String> {
        get {
            return try! get_AllowedOrigin();
        }
        set(v) {
            return try! set_AllowedOrigin(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the origin is allowed.
            When false, no CORS headers should be sent.
            

    */
    open var IsOriginAllowed : Bool {
        get {
            return try! get_IsOriginAllowed();
        }
        set(v) {
            return try! set_IsOriginAllowed(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the current request is a CORS-preflight request.
            

    */
    open var IsPreflightRequest : Bool {
        get {
            return try! get_IsPreflightRequest();
        }
        set(v) {
            return try! set_IsPreflightRequest(value: v);
        }
    }
    /**
    
            Gets or sets the  for which the results of a preflight request can be cached.
            

    */
    open var PreflightMaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_PreflightMaxAge();
        }
        set(v) {
            return try! set_PreflightMaxAge(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether the resource supports user credentials.
            

    */
    open var SupportsCredentials : Bool {
        get {
            return try! get_SupportsCredentials();
        }
        set(v) {
            return try! set_SupportsCredentials(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating if a 'Vary' header with the value 'Origin' is required.
            

    */
    open var VaryByOrigin : Bool {
        get {
            return try! get_VaryByOrigin();
        }
        set(v) {
            return try! set_VaryByOrigin(value: v);
        }
    }
} // CorsResult


// type: Microsoft.AspNetCore.Cors.Infrastructure.CorsService
    /**
    
            Default implementation of .
            

    */
open class CorsService
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsService
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_CorsService_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_CorsService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new instance of the .
            

    - Parameter options: The option model representing .
    - Parameter loggerFactory: The .
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_CorsService_ctor_0__2__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions__ILoggerFactory(&__thrown, options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsResult EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Looks up a policy using the  and then evaluates the policy using the passed in
            .
            

    - Parameter context: 
    - Parameter policyName: 
    - Returns: A  which contains the result of policy evaluation and can be
            used by the caller to set appropriate response headers.

    */
    open func EvaluatePolicy(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsService_CorsResult__EvaluatePolicy_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsResult EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    */
    open /* method final */ func EvaluatePolicy(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_CorsService_CorsResult__EvaluatePolicy_0__2__HttpContext_CorsPolicy(&__thrown, self.get_handle(), context.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult(hndl : __return);
        }
    }
    // void EvaluateRequest(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, Microsoft.AspNetCore.Cors.Infrastructure.CorsResult)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.EvaluateRequest(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy,Microsoft.AspNetCore.Cors.Infrastructure.CorsResult)
    /**
    
            Evaluate a request using the specified policy. The result is set on the specified  instance.
            

    - Parameter context: The current HTTP context.
    - Parameter policy: The  to evaluate.
    - Parameter result: The  to set the result on.
    */
    open func EvaluateRequest(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, result : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsService_void__EvaluateRequest_0__3__HttpContext_CorsPolicy_CorsResult(&__thrown, self.get_handle(), context.get_handle(), policy.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EvaluatePreflightRequest(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, Microsoft.AspNetCore.Cors.Infrastructure.CorsResult)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.EvaluatePreflightRequest(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy,Microsoft.AspNetCore.Cors.Infrastructure.CorsResult)
    /**
    
            Evaluate a preflight request using the specified policy. The result is set on the specified  instance.
            

    - Parameter context: The current HTTP context.
    - Parameter policy: The  to evaluate.
    - Parameter result: The  to set the result on.
    */
    open func EvaluatePreflightRequest(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy, result : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsService_void__EvaluatePreflightRequest_0__3__HttpContext_CorsPolicy_CorsResult(&__thrown, self.get_handle(), context.get_handle(), policy.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ApplyResult(Microsoft.AspNetCore.Cors.Infrastructure.CorsResult, Microsoft.AspNetCore.Http.HttpResponse)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.CorsService.ApplyResult(Microsoft.AspNetCore.Cors.Infrastructure.CorsResult,Microsoft.AspNetCore.Http.HttpResponse)
    /**
    */
    open func ApplyResult(result : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult, response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_CorsService_void__ApplyResult_0__2__CorsResult_HttpResponse(&__thrown, self.get_handle(), result.get_handle(), response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CorsService


// type: Microsoft.AspNetCore.Cors.Infrastructure.DefaultCorsPolicyProvider
    /**
    */
open class DefaultCorsPolicyProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_DefaultCorsPolicyProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_DefaultCorsPolicyProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.DefaultCorsPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})
    /**
    
            Creates a new instance of .
            

    - Parameter options: The options configured for the application.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Cors_Infrastructure_DefaultCorsPolicyProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy> GetPolicyAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.DefaultCorsPolicyProvider.GetPolicyAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    */
    open /* method final */ func GetPolicyAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policyName : Optional<dotnet.System.String>) async throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_DefaultCorsPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy___GetPolicyAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), policyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // DefaultCorsPolicyProvider


// type: Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyMetadata
    /**
    
            An interface which can be used to identify a type which provides metadata needed for enabling CORS support.
            

    */
open class ICorsPolicyMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy get_Policy()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyMetadata.get_Policy
    open func get_Policy() throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata_CorsPolicy__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy(hndl : __return);
        }
    }
} // ICorsPolicyMetadata


// type: Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider
    /**
    
            A type which can provide a  for a particular .
            

    */
open class ICorsPolicyProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy> GetPolicyAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider.GetPolicyAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Gets a  from the given 
            

    - Parameter context: The  associated with this call.
    - Parameter policyName: An optional policy name to look for.
    - Returns: A 

    */
    open func GetPolicyAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policyName : Optional<dotnet.System.String>) async throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Cors_Infrastructure_CorsPolicy___GetPolicyAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), policyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // ICorsPolicyProvider


// type: Microsoft.AspNetCore.Cors.Infrastructure.ICorsService
    /**
    
            A type which can evaluate a policy for a particular .
            

    */
open class ICorsService
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsService
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_ICorsService_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_ICorsService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Cors.Infrastructure.CorsResult EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.ICorsService.EvaluatePolicy(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy)
    /**
    
            Evaluates the given  using the passed in .
            

    - Parameter context: The  associated with the call.
    - Parameter policy: The  which needs to be evaluated.
    - Returns: A  which contains the result of policy evaluation and can be
            used by the caller to set appropriate response headers.

    */
    open func EvaluatePolicy(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy) throws -> aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_ICorsService_CorsResult__EvaluatePolicy_0__2__HttpContext_CorsPolicy(&__thrown, self.get_handle(), context.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult(hndl : __return);
        }
    }
    // void ApplyResult(Microsoft.AspNetCore.Cors.Infrastructure.CorsResult, Microsoft.AspNetCore.Http.HttpResponse)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.ICorsService.ApplyResult(Microsoft.AspNetCore.Cors.Infrastructure.CorsResult,Microsoft.AspNetCore.Http.HttpResponse)
    /**
    
            Adds CORS-specific response headers to the given .
            

    - Parameter result: The  used to read the allowed values.
    - Parameter response: The  associated with the current call.
    */
    open func ApplyResult(result : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsResult, response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_ICorsService_void__ApplyResult_0__2__CorsResult_HttpResponse(&__thrown, self.get_handle(), result.get_handle(), response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ICorsService


// type: Microsoft.AspNetCore.Cors.Infrastructure.IDisableCorsAttribute
    /**
    
            An interface which can be used to identify a type which provides metdata to disable cors for a resource.
            

    */
open class IDisableCorsAttribute
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_IDisableCorsAttribute,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_IDisableCorsAttribute_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_IDisableCorsAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // IDisableCorsAttribute


// type: Microsoft.AspNetCore.Cors.Infrastructure.IEnableCorsAttribute
    /**
    
            An interface which can be used to identify a type which provides metadata needed for enabling CORS support.
            

    */
open class IEnableCorsAttribute
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] System.String get_PolicyName()
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.IEnableCorsAttribute.get_PolicyName
    open func get_PolicyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute_String__get_PolicyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PolicyName(System.String)
// docid: M:Microsoft.AspNetCore.Cors.Infrastructure.IEnableCorsAttribute.set_PolicyName(System.String)
    open func set_PolicyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute_void__set_PolicyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IEnableCorsAttribute


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions
public struct CorsServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds cross-origin resource sharing services to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddCors(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CorsServiceCollectionExtensions_IServiceCollection__AddCors_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})
    /**
    
            Adds cross-origin resource sharing services to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter setupAction: An  to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddCors(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CorsServiceCollectionExtensions_IServiceCollection__AddCors_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCors(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try AddCors(services: services, setupAction: del_setupAction);
    }
} // CorsServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyMetadata
    :
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
}

public protocol Microsoft_AspNetCore_Cors_Infrastructure_ICorsPolicyProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Cors_Infrastructure_ICorsService
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Cors_Infrastructure_IDisableCorsAttribute
    :
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
}

public protocol Microsoft_AspNetCore_Cors_Infrastructure_IEnableCorsAttribute
    :
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
}

// EXTENSION METHOD TBuilder RequireCors<TBuilder>(TBuilder, System.String)
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder RequireCors<TBuilder>(TBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
// TODO COPE extension method on generic param type

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCors() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCors(policyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), policyName: policyName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCors(configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configurePolicy: configurePolicy);
    }
    // delegate closure overload
    public func UseCors(configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder>(configurePolicy);
        return try aspnetcore.Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configurePolicy: del_configurePolicy);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddCors() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddCors(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddCors(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

