// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.HstsBuilderExtensions
public struct HstsBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHsts(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HstsBuilderExtensions.UseHsts(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds middleware for using HSTS, which adds the Strict-Transport-Security header.
            

    - Parameter app: The  instance this method extends.
    */
    public static func UseHsts(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HstsBuilderExtensions_IApplicationBuilder__UseHsts_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // HstsBuilderExtensions


// type: Microsoft.AspNetCore.Builder.HstsServicesExtensions
public struct HstsServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHsts(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpsPolicy.HstsOptions>)
// docid: M:Microsoft.AspNetCore.Builder.HstsServicesExtensions.AddHsts(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HttpsPolicy.HstsOptions})
    /**
    
            Adds HSTS services.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddHsts(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HstsServicesExtensions_IServiceCollection__AddHsts_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HttpsPolicy_HstsOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddHsts(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>(configureOptions);
        return try AddHsts(services: services, configureOptions: del_configureOptions);
    }
} // HstsServicesExtensions


// type: Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions
public struct HttpsPolicyBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpsRedirection(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions.UseHttpsRedirection(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds middleware for redirecting HTTP Requests to HTTPS.
            

    - Parameter app: The  instance this method extends.
    - Returns: The  for HttpsRedirection.

    */
    public static func UseHttpsRedirection(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpsPolicyBuilderExtensions_IApplicationBuilder__UseHttpsRedirection_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // HttpsPolicyBuilderExtensions


// type: Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions
public struct HttpsRedirectionServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpsRedirection(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>)
// docid: M:Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions.AddHttpsRedirection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions})
    /**
    
            Adds HTTPS redirection services.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddHttpsRedirection(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpsRedirectionServicesExtensions_IServiceCollection__AddHttpsRedirection_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddHttpsRedirection(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>(configureOptions);
        return try AddHttpsRedirection(services: services, configureOptions: del_configureOptions);
    }
} // HttpsRedirectionServicesExtensions


}

// Microsoft.AspNetCore.HttpsPolicy
extension Microsoft.AspNetCore.HttpsPolicy {
// type: Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware
    /**
    
            Enables HTTP Strict Transport Security (HSTS)
            See https://tools.ietf.org/html/rfc6797.
            

    */
open class HstsMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpsPolicy_HstsMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.HttpsPolicy.HstsOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.HttpsPolicy.HstsOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initialize the HSTS middleware.
            

    - Parameter next: 
    - Parameter options: 
    - Parameter loggerFactory: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HstsMiddleware_ctor_0__3__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_HttpsPolicy_HstsOptions__ILoggerFactory(&__thrown, next.get_handle(), options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.HttpsPolicy.HstsOptions>)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.HttpsPolicy.HstsOptions})
    /**
    
            Initialize the HSTS middleware.
            

    - Parameter next: 
    - Parameter options: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HstsMiddleware_ctor_0__2__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_HttpsPolicy_HstsOptions_(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invoke the middleware.
            

    - Parameter context: The .
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HstsMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // HstsMiddleware


// type: Microsoft.AspNetCore.HttpsPolicy.HstsOptions
    /**
    
            Options for the Hsts Middleware
            

    */
open class HstsOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpsPolicy_HstsOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HstsOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_MaxAge()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.get_MaxAge
    open func get_MaxAge() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HstsOptions_TimeSpan__get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_MaxAge(System.TimeSpan)
    // [IsSpecialName] bool get_IncludeSubDomains()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.get_IncludeSubDomains
    open func get_IncludeSubDomains() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HstsOptions_bool__get_IncludeSubDomains_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeSubDomains(bool)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.set_IncludeSubDomains(System.Boolean)
    open func set_IncludeSubDomains(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpsPolicy_HstsOptions_void__set_IncludeSubDomains_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Preload()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.get_Preload
    open func get_Preload() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HstsOptions_bool__get_Preload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Preload(bool)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.set_Preload(System.Boolean)
    open func set_Preload(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpsPolicy_HstsOptions_void__set_Preload_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_ExcludedHosts()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HstsOptions.get_ExcludedHosts
    open func get_ExcludedHosts() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HstsOptions_System_Collections_Generic_IList_string___get_ExcludedHosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            A list of host names that will not add the HSTS header.
            

    */
    open var ExcludedHosts : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_ExcludedHosts();
        }
    }
    /**
    
            Enables includeSubDomain parameter of the Strict-Transport-Security header.
            

    */
    open var IncludeSubDomains : Bool {
        get {
            return try! get_IncludeSubDomains();
        }
        set(v) {
            return try! set_IncludeSubDomains(value: v);
        }
    }
    /**
    
            Sets the max-age parameter of the Strict-Transport-Security header.
            

    */
    open var MaxAge : dotnet.System.TimeSpan {
        get {
            return try! get_MaxAge();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_MaxAge(System.TimeSpan)
    }
    /**
    
            Sets the preload parameter of the Strict-Transport-Security header.
            

    */
    open var Preload : Bool {
        get {
            return try! get_Preload();
        }
        set(v) {
            return try! set_Preload(value: v);
        }
    }
} // HstsOptions


// type: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware
    /**
    
            Middleware that redirects non-HTTPS requests to an HTTPS URL.
            

    */
open class HttpsRedirectionMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes .
            

    - Parameter next: 
    - Parameter options: 
    - Parameter config: 
    - Parameter loggerFactory: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>, config : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionMiddleware_ctor_0__4__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions__IConfiguration_ILoggerFactory(&__thrown, next.get_handle(), options.get_handle(), config.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature)
    /**
    
            Initializes .
            

    - Parameter next: 
    - Parameter options: 
    - Parameter config: 
    - Parameter loggerFactory: 
    - Parameter serverAddressesFeature: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>, config : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, serverAddressesFeature : aspnetcore.Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionMiddleware_ctor_0__5__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions__IConfiguration_ILoggerFactory_IServerAddressesFeature(&__thrown, next.get_handle(), options.get_handle(), config.get_handle(), loggerFactory.get_handle(), serverAddressesFeature.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the HttpsRedirectionMiddleware.
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // HttpsRedirectionMiddleware


// type: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions
    /**
    
            Options for the HTTPS Redirection Middleware.
            

    */
open class HttpsRedirectionOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_RedirectStatusCode()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions.get_RedirectStatusCode
    open func get_RedirectStatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_i32__get_RedirectStatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_RedirectStatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions.set_RedirectStatusCode(System.Int32)
    open func set_RedirectStatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_void__set_RedirectStatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_HttpsPort()
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions.get_HttpsPort
    open func get_HttpsPort() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_System_Nullable_i32___get_HttpsPort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_HttpsPort(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions.set_HttpsPort(System.Nullable{System.Int32})
    open func set_HttpsPort(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpsPolicy_HttpsRedirectionOptions_void__set_HttpsPort_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The HTTPS port to be added to the redirected URL.
            

    */
    open var HttpsPort : Optional<Swift.Int32> {
        get {
            return try! get_HttpsPort();
        }
        set(v) {
            return try! set_HttpsPort(value: v!);
        }
    }
    /**
    
            The status code used for the redirect response. The default is 307.
            

    */
    open var RedirectStatusCode : Swift.Int32 {
        get {
            return try! get_RedirectStatusCode();
        }
        set(v) {
            return try! set_RedirectStatusCode(value: v);
        }
    }
} // HttpsRedirectionOptions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHsts(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHsts() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HstsBuilderExtensions.UseHsts(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHsts(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpsPolicy.HstsOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHsts(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HstsServicesExtensions.AddHsts(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddHsts(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HstsOptions>(configureOptions);
        return try aspnetcore.Microsoft.AspNetCore.Builder.HstsServicesExtensions.AddHsts(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpsRedirection(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHttpsRedirection() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions.UseHttpsRedirection(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpsRedirection(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpsRedirection(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions.AddHttpsRedirection(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddHttpsRedirection(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>(configureOptions);
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpsRedirectionServicesExtensions.AddHttpsRedirection(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

