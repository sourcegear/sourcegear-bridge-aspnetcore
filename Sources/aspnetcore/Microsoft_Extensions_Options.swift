// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
public struct OptionsServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services required for using options.
            

    - Parameter services: The  to add the services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddOptions(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__AddOptions_0__1__IServiceCollection(&__thrown, services?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
    // Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureAll<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})
    /**
    
            Registers an action used to configure all instances of a particular type of options.
            

    - Parameter services: The  to add the services to.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func ConfigureAll<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__ConfigureAll_1__2__IServiceCollection_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigureAll<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try ConfigureAll(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
    /**
    
            Registers an object that will have all of its ,
            , and 
            registered.
            

    - Parameter services: The  to add the services to.
    - Parameter configureInstance: The instance that will configure options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func ConfigureOptions(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureInstance : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__ConfigureOptions_0__2__IServiceCollection_Object(&__thrown, services?.get_handle() ?? nil, configureInstance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
    /**
    
            Registers a type that will have all of its ,
            , and 
            registered.
            

    - Parameter services: The  to add the services to.
    - Parameter configureType: The type that will configure options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func ConfigureOptions(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureType : Optional<dotnet.System.Type_>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__ConfigureOptions_0__2__IServiceCollection_Type(&__thrown, services?.get_handle() ?? nil, configureType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions<TConfigureOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    // Microsoft.Extensions.DependencyInjection.IServiceCollection Configure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter services: The  to add the services to.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func Configure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__Configure_1__2__IServiceCollection_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func Configure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try Configure(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection Configure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter services: The  to add the services to.
    - Parameter name: The name of the options instance.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func Configure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__Configure_1__3__IServiceCollection_String_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func Configure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try Configure(services: services, name: name, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigureAll<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})
    /**
    
            Registers an action used to post configure all instances of a particular type of options.
            Note: These are run after all .
            

    - Parameter services: The  to add the services to.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func PostConfigureAll<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__PostConfigureAll_1__2__IServiceCollection_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func PostConfigureAll<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try PostConfigureAll(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})
    /**
    
            Registers an action used to initialize a particular type of options.
            Note: These are run after all .
            

    - Parameter services: The  to add the services to.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func PostConfigure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__PostConfigure_1__2__IServiceCollection_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func PostConfigure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try PostConfigure(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run after all .
            

    - Parameter services: The  to add the services to.
    - Parameter name: The name of the options instance.
    - Parameter configureOptions: The action used to configure the options.
    - Returns: The  so that additional calls can be chained.

    */
    public static func PostConfigure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsServiceCollectionExtensions_IServiceCollection__PostConfigure_1__3__IServiceCollection_String_System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func PostConfigure<UTOptions : SGBridgeGenericValue>(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try PostConfigure(services: services, name: name, configureOptions: del_configureOptions);
    }
} // OptionsServiceCollectionExtensions


}

// Microsoft.Extensions.Options
extension Microsoft.Extensions.Options {
// type: Microsoft.Extensions.Options.ConfigureNamedOptions`1
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`1.#ctor(System.String,System.Action{`0})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, action : Optional<dotnet.System.Action_1<TOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_1_ctor_0__2__String_System_Action_TOptions_(TOptions.get_type_handle(), &__thrown, name?.get_handle() ?? nil, (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`1.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_1_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`1.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_1_void__Configure_0__1__TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`1.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_1_System_Action_TOptions___get_Action_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_1<TOptions>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_1


// type: Microsoft.Extensions.Options.ConfigureNamedOptions`2
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_2<TOptions : SGBridgeGenericValue,TDep : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_2_get_type_handle(TOptions.get_type_handle(),TDep.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_2_cast(TOptions.get_type_handle(),TDep.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep, System.Action<TOptions,TDep>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.#ctor(System.String,`1,System.Action{`0,`1})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep, action : Optional<dotnet.System.Action_2<TOptions,TDep>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_2_ctor_0__3__String_TDep_System_Action_TOptions_TDep_(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_2_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_2_void__Configure_0__1__TOptions(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_2<TOptions,TDep>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_2_System_Action_TOptions_TDep___get_Action_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep get_Dependency()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.get_Dependency
    open func get_Dependency() throws -> TDep {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_2_TDep__get_Dependency_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`2.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_2_String__get_Name_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_2<TOptions,TDep>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The dependency.
            

    */
    open var Dependency : TDep {
        get {
            return try! get_Dependency();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_2


// type: Microsoft.Extensions.Options.ConfigureNamedOptions`3
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_3<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_3_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_3_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, System.Action<TOptions,TDep1,TDep2>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.#ctor(System.String,`1,`2,System.Action{`0,`1,`2})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep1, dependency2 : TDep2, action : Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_3_ctor_0__4__String_TDep1_TDep2_System_Action_TOptions_TDep1_TDep2_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), dependency2.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_3_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_3_void__Configure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_3_System_Action_TOptions_TDep1_TDep2___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_3_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_3_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`3.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_3_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_3


// type: Microsoft.Extensions.Options.ConfigureNamedOptions`4
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_4<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_4_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_4_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, System.Action<TOptions,TDep1,TDep2,TDep3>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.#ctor(System.String,`1,`2,`3,System.Action{`0,`1,`2,`3})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep1, dependency2 : TDep2, dependency3 : TDep3, action : Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_4_ctor_0__5__String_TDep1_TDep2_TDep3_System_Action_TOptions_TDep1_TDep2_TDep3_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), dependency2.to_gval(), dependency3.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_4_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_4_void__Configure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_4_System_Action_TOptions_TDep1_TDep2_TDep3___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_4(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_4_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_4_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_4_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`4.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_4_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_4


// type: Microsoft.Extensions.Options.ConfigureNamedOptions`5
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_5<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_5_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_5_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, System.Action<TOptions,TDep1,TDep2,TDep3,TDep4>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.#ctor(System.String,`1,`2,`3,`4,System.Action{`0,`1,`2,`3,`4})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency1: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter dependency4: A fourth dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, action : Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_5_ctor_0__6__String_TDep1_TDep2_TDep3_TDep4_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_5_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_5_void__Configure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3,TDep4> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_5(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`5.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_5_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_5


// type: Microsoft.Extensions.Options.ConfigureNamedOptions`6
    /**
    
            Implementation of .
            

    */
open class ConfigureNamedOptions_6<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue,TDep5 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureNamedOptions_6_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureNamedOptions_6_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, TDep5, System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.#ctor(System.String,`1,`2,`3,`4,`5,System.Action{`0,`1,`2,`3,`4,`5})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency1: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter dependency4: A fourth dependency.
    - Parameter dependency5: A fifth dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, dependency5 : TDep5, action : Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureNamedOptions_6_ctor_0__7__String_TDep1_TDep2_TDep3_TDep4_TDep5_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), dependency5.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.Configure(System.String,`0)
    /**
    
            Invokes the registered configure  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_6_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.Configure(`0)
    /**
    
            Invoked to configure a  instance with the .
            

    - Parameter options: The options instance to configure.
    */
    open /* method final */ func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureNamedOptions_6_void__Configure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_6(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] TDep5 get_Dependency5()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Dependency5
    open func get_Dependency5() throws -> TDep5 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_TDep5__get_Dependency5_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep5(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ConfigureNamedOptions`6.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureNamedOptions_6_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The fifth dependency.
            

    */
    open var Dependency5 : TDep5 {
        get {
            return try! get_Dependency5();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigureNamedOptions_6


// type: Microsoft.Extensions.Options.ConfigureOptions`1
    /**
    
            Implementation of .
            

    */
open class ConfigureOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ConfigureOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ConfigureOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.ConfigureOptions`1.#ctor(System.Action{`0})
    /**
    
            Constructor.
            

    - Parameter action: The action to register.
    */
    public init(action : Optional<dotnet.System.Action_1<TOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ConfigureOptions_1_ctor_0__1__System_Action_TOptions_(TOptions.get_type_handle(), &__thrown, (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.ConfigureOptions`1.Configure(`0)
    /**
    
            Invokes the registered configure .
            

    - Parameter options: The options instance to configure.
    */
    open func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ConfigureOptions_1_void__Configure_0__1__TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions> get_Action()
// docid: M:Microsoft.Extensions.Options.ConfigureOptions`1.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ConfigureOptions_1_System_Action_TOptions___get_Action_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_1<TOptions>> {
        get {
            return try! get_Action();
        }
    }
} // ConfigureOptions_1


// type: Microsoft.Extensions.Options.IConfigureNamedOptions`1
    /**
    
            Represents something that configures the  type.
            

    */
open class IConfigureNamedOptions_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IConfigureNamedOptions_1
{
    public typealias TOptions_IConfigureNamedOptions_1 = TOptions;
    public typealias TOptions_IConfigureOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IConfigureNamedOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IConfigureNamedOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Configure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.IConfigureNamedOptions`1.Configure(System.String,`0)
    /**
    
            Invoked to configure a  instance.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open func Configure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_IConfigureNamedOptions_1_void__Configure_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConfigureNamedOptions_1


// type: Microsoft.Extensions.Options.IConfigureOptions`1
    /**
    
            Represents something that configures the  type.
            Note: These are run before all .
            

    */
open class IConfigureOptions_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IConfigureOptions_1
{
    public typealias TOptions_IConfigureOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IConfigureOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IConfigureOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Configure(TOptions)
// docid: M:Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
    /**
    
            Invoked to configure a  instance.
            

    - Parameter options: The options instance to configure.
    */
    open func Configure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_IConfigureOptions_1_void__Configure_0__1__TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConfigureOptions_1


// type: Microsoft.Extensions.Options.IOptionsChangeTokenSource`1
    /**
    
            Used to fetch  used for tracking options changes.
            

    */
open class IOptionsChangeTokenSource_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptionsChangeTokenSource_1
{
    public typealias TOptions_IOptionsChangeTokenSource_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptionsChangeTokenSource_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptionsChangeTokenSource_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.Extensions.Options.IOptionsChangeTokenSource`1.GetChangeToken
    /**
    
            Returns a  which can be used to register a change notification callback.
            

    - Returns: Change token.

    */
    open func GetChangeToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsChangeTokenSource_1_IChangeToken__GetChangeToken_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.IOptionsChangeTokenSource`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsChangeTokenSource_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IOptionsChangeTokenSource_1


// type: Microsoft.Extensions.Options.IOptionsFactory`1
    /**
    
            Used to create  instances.
            

    */
open class IOptionsFactory_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptionsFactory_1
{
    public typealias TOptions_IOptionsFactory_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptionsFactory_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptionsFactory_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // TOptions Create(System.String)
// docid: M:Microsoft.Extensions.Options.IOptionsFactory`1.Create(System.String)
    /**
    
            Returns a configured  instance with the given name.
            

    */
    open func Create(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsFactory_1_TOptions__Create_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
} // IOptionsFactory_1


// type: Microsoft.Extensions.Options.IOptionsMonitorCache`1
    /**
    
            Used by  to cache  instances.
            

    */
open class IOptionsMonitorCache_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptionsMonitorCache_1
{
    public typealias TOptions_IOptionsMonitorCache_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptionsMonitorCache_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptionsMonitorCache_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Clear()
// docid: M:Microsoft.Extensions.Options.IOptionsMonitorCache`1.Clear
    /**
    
            Clears all options instances from the cache.
            

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_IOptionsMonitorCache_1_void__Clear_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TOptions GetOrAdd(System.String, System.Func<TOptions>)
// docid: M:Microsoft.Extensions.Options.IOptionsMonitorCache`1.GetOrAdd(System.String,System.Func{`0})
    /**
    
            Gets a named options instance, or adds a new instance created with .
            

    - Parameter name: The name of the options instance.
    - Parameter createOptions: The func used to create the new instance.
    - Returns: The options instance.

    */
    open func GetOrAdd(name : Optional<dotnet.System.String>, createOptions : Optional<dotnet.System.Func_1<TOptions>>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitorCache_1_TOptions__GetOrAdd_0__2__String_System_Func_TOptions_(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, (createOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // delegate closure overload
    open func GetOrAdd(name : Optional<dotnet.System.String>, createOptions : @escaping () throws -> TOptions) throws -> TOptions {
        let del_createOptions = try dotnet.System.Func_1<TOptions>(createOptions);
        return try GetOrAdd(name: name, createOptions: del_createOptions);
    }
    // bool TryAdd(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.IOptionsMonitorCache`1.TryAdd(System.String,`0)
    /**
    
            Tries to adds a new option to the cache, will return false if the name already exists.
            

    - Parameter name: The name of the options instance.
    - Parameter options: The options instance.
    - Returns: Whether anything was added.

    */
    open func TryAdd(name : Optional<dotnet.System.String>, options : TOptions) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitorCache_1_bool__TryAdd_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryRemove(System.String)
// docid: M:Microsoft.Extensions.Options.IOptionsMonitorCache`1.TryRemove(System.String)
    /**
    
            Try to remove an options instance.
            

    - Parameter name: The name of the options instance.
    - Returns: Whether anything was removed.

    */
    open func TryRemove(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitorCache_1_bool__TryRemove_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IOptionsMonitorCache_1


// type: Microsoft.Extensions.Options.IOptionsMonitor`1
    /**
    
            Used for notifications when  instances change.
            

    */
open class IOptionsMonitor_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptionsMonitor_1
{
    public typealias TOptions_IOptionsMonitor_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptionsMonitor_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptionsMonitor_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // TOptions Get(System.String)
// docid: M:Microsoft.Extensions.Options.IOptionsMonitor`1.Get(System.String)
    /**
    
            Returns a configured  instance with the given name.
            

    */
    open func Get(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitor_1_TOptions__Get_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // System.IDisposable OnChange(System.Action<TOptions,System.String>)
// docid: M:Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange(System.Action{`0,System.String})
    /**
    
            Registers a listener to be called whenever a named  changes.
            

    - Parameter listener: The action to be invoked when  has changed.
    - Returns: An  which should be disposed to stop listening for changes.

    */
    open func OnChange(listener : Optional<dotnet.System.Action_2<TOptions,dotnet.System.String>>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitor_1_IDisposable__OnChange_0__1__System_Action_TOptions_string_(TOptions.get_type_handle(), &__thrown, self.get_handle(), (listener?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func OnChange(listener : @escaping (TOptions, Optional<dotnet.System.String>) throws -> Void) throws -> Optional<dotnet.System.IDisposable> {
        let del_listener = try dotnet.System.Action_2<TOptions,dotnet.System.String>(listener);
        return try OnChange(listener: del_listener);
    }
    // [IsSpecialName] TOptions get_CurrentValue()
// docid: M:Microsoft.Extensions.Options.IOptionsMonitor`1.get_CurrentValue
    open func get_CurrentValue() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsMonitor_1_TOptions__get_CurrentValue_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
} // IOptionsMonitor_1


// type: Microsoft.Extensions.Options.IOptionsSnapshot`1
    /**
    
            Used to access the value of  for the lifetime of a request.
            

    */
open class IOptionsSnapshot_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptionsSnapshot_1
{
    public typealias TOptions_IOptionsSnapshot_1 = TOptions;
    public typealias TOptions_IOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptionsSnapshot_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptionsSnapshot_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // TOptions Get(System.String)
// docid: M:Microsoft.Extensions.Options.IOptionsSnapshot`1.Get(System.String)
    /**
    
            Returns a configured  instance with the given name.
            

    */
    open func Get(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptionsSnapshot_1_TOptions__Get_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
} // IOptionsSnapshot_1


// type: Microsoft.Extensions.Options.IOptions`1
    /**
    
            Used to retrieve configured  instances.
            

    */
open class IOptions_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IOptions_1
{
    public typealias TOptions_IOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] TOptions get_Value()
// docid: M:Microsoft.Extensions.Options.IOptions`1.get_Value
    open func get_Value() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IOptions_1_TOptions__get_Value_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
} // IOptions_1


// type: Microsoft.Extensions.Options.IPostConfigureOptions`1
    /**
    
            Represents something that configures the  type.
            Note: These are run after all .
            

    */
open class IPostConfigureOptions_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IPostConfigureOptions_1
{
    public typealias TOptions_IPostConfigureOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IPostConfigureOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IPostConfigureOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.IPostConfigureOptions`1.PostConfigure(System.String,`0)
    /**
    
            Invoked to configure a  instance.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_IPostConfigureOptions_1_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPostConfigureOptions_1


// type: Microsoft.Extensions.Options.IValidateOptions`1
    /**
    
            Interface used to validate options.
            

    */
open class IValidateOptions_1<TOptions : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Options_IValidateOptions_1
{
    public typealias TOptions_IValidateOptions_1 = TOptions;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_IValidateOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_IValidateOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.IValidateOptions`1.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when name is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_IValidateOptions_1_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IValidateOptions_1


// type: Microsoft.Extensions.Options.Options
public struct Options {
    // static field: System.String DefaultName
    /**
    
            The default name used for options instances: "".
            

    */
    public static var DefaultName : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_Extensions_Options_Options_get_DefaultName();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // Microsoft.Extensions.Options.IOptions<TOptions> Create<TOptions>(TOptions)
// docid: M:Microsoft.Extensions.Options.Options.Create``1(``0)
    /**
    
            Creates a wrapper around an instance of  to return itself as an .
            

    - Parameter options: Options object.
    - Returns: Wrapped options object.

    */
    public static func Create<UTOptions : SGBridgeGenericValue>(options : UTOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<UTOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_Options_Microsoft_Extensions_Options_IOptions_UTOptions___Create_1__1__UTOptions(UTOptions.get_type_handle(), &__thrown, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.IOptions_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // Options


// type: Microsoft.Extensions.Options.OptionsBuilder`1
    /**
    
            Used to configure  instances.
            

    */
open class OptionsBuilder_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsBuilder_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsBuilder_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)
    /**
    
            Constructor.
            

    - Parameter services: The  for the options being configured.
    - Parameter name: The default name of the  instance, if null  is used.
    */
    public init(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsBuilder_1_ctor_0__2__IServiceCollection_String(TOptions.get_type_handle(), &__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure(System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure(System.Action{`0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure(configureOptions : Optional<dotnet.System.Action_1<TOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_0__1__System_Action_TOptions_(TOptions.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure(configureOptions : @escaping (TOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_1<TOptions>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure<TDep>(System.Action<TOptions,TDep>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure``1(System.Action{`0,``0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure<UTDep : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_2<TOptions,UTDep>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_1__1__System_Action_TOptions_UTDep_(TOptions.get_type_handle(), UTDep.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure<UTDep : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_2<TOptions,UTDep>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure<TDep1, TDep2>(System.Action<TOptions,TDep1,TDep2>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure``2(System.Action{`0,``0,``1})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_3<TOptions,UTDep1,UTDep2>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_2__1__System_Action_TOptions_UTDep1_UTDep2_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_3<TOptions,UTDep1,UTDep2>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure<TDep1, TDep2, TDep3>(System.Action<TOptions,TDep1,TDep2,TDep3>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure``3(System.Action{`0,``0,``1,``2})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_4<TOptions,UTDep1,UTDep2,UTDep3>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_3__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_4<TOptions,UTDep1,UTDep2,UTDep3>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure<TDep1, TDep2, TDep3, TDep4>(System.Action<TOptions,TDep1,TDep2,TDep3,TDep4>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure``4(System.Action{`0,``0,``1,``2,``3})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_5<TOptions,UTDep1,UTDep2,UTDep3,UTDep4>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_4__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_5<TOptions,UTDep1,UTDep2,UTDep3,UTDep4>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Configure<TDep1, TDep2, TDep3, TDep4, TDep5>(System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Configure``5(System.Action{`0,``0,``1,``2,``3,``4})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run before all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Configure_5__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_UTDep5_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), UTDep5.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4, UTDep5) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5>(configureOptions);
        return try Configure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure(System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure(System.Action{`0})
    /**
    
            Registers an action used to configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    */
    open func PostConfigure(configureOptions : Optional<dotnet.System.Action_1<TOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_0__1__System_Action_TOptions_(TOptions.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure(configureOptions : @escaping (TOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_1<TOptions>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure<TDep>(System.Action<TOptions,TDep>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure``1(System.Action{`0,``0})
    /**
    
            Registers an action used to post configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func PostConfigure<UTDep : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_2<TOptions,UTDep>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_1__1__System_Action_TOptions_UTDep_(TOptions.get_type_handle(), UTDep.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure<UTDep : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_2<TOptions,UTDep>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure<TDep1, TDep2>(System.Action<TOptions,TDep1,TDep2>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure``2(System.Action{`0,``0,``1})
    /**
    
            Registers an action used to post configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_3<TOptions,UTDep1,UTDep2>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_2__1__System_Action_TOptions_UTDep1_UTDep2_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_3<TOptions,UTDep1,UTDep2>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure<TDep1, TDep2, TDep3>(System.Action<TOptions,TDep1,TDep2,TDep3>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure``3(System.Action{`0,``0,``1,``2})
    /**
    
            Registers an action used to post configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_4<TOptions,UTDep1,UTDep2,UTDep3>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_3__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_4<TOptions,UTDep1,UTDep2,UTDep3>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure<TDep1, TDep2, TDep3, TDep4>(System.Action<TOptions,TDep1,TDep2,TDep3,TDep4>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure``4(System.Action{`0,``0,``1,``2,``3})
    /**
    
            Registers an action used to post configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_5<TOptions,UTDep1,UTDep2,UTDep3,UTDep4>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_4__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_5<TOptions,UTDep1,UTDep2,UTDep3,UTDep4>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> PostConfigure<TDep1, TDep2, TDep3, TDep4, TDep5>(System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.PostConfigure``5(System.Action{`0,``0,``1,``2,``3,``4})
    /**
    
            Registers an action used to post configure a particular type of options.
            Note: These are run after all .
            

    - Parameter configureOptions: The action used to configure the options.
    - Returns: The current .

    */
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___PostConfigure_5__1__System_Action_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_UTDep5_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), UTDep5.get_type_handle(), &__thrown, self.get_handle(), (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func PostConfigure<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(configureOptions : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4, UTDep5) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_configureOptions = try dotnet.System.Action_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5>(configureOptions);
        return try PostConfigure(configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate(System.Func<TOptions,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate(System.Func{`0,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate(validation : Optional<dotnet.System.Func_2<TOptions,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_0__1__System_Func_TOptions_bool_(TOptions.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate(validation : @escaping (TOptions) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_2<TOptions,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate(System.Func<TOptions,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate(System.Func{`0,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate(validation : Optional<dotnet.System.Func_2<TOptions,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_0__2__System_Func_TOptions_bool__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate(validation : @escaping (TOptions) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_2<TOptions,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep>(System.Func<TOptions,TDep,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``1(System.Func{`0,``0,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate<UTDep : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_3<TOptions,UTDep,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_1__1__System_Func_TOptions_UTDep_bool_(TOptions.get_type_handle(), UTDep.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_3<TOptions,UTDep,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep>(System.Func<TOptions,TDep,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``1(System.Func{`0,``0,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate<UTDep : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_3<TOptions,UTDep,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_1__2__System_Func_TOptions_UTDep_bool__String(TOptions.get_type_handle(), UTDep.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_3<TOptions,UTDep,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2>(System.Func<TOptions,TDep1,TDep2,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``2(System.Func{`0,``0,``1,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_4<TOptions,UTDep1,UTDep2,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_2__1__System_Func_TOptions_UTDep1_UTDep2_bool_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_4<TOptions,UTDep1,UTDep2,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2>(System.Func<TOptions,TDep1,TDep2,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``2(System.Func{`0,``0,``1,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_4<TOptions,UTDep1,UTDep2,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_2__2__System_Func_TOptions_UTDep1_UTDep2_bool__String(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_4<TOptions,UTDep1,UTDep2,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3>(System.Func<TOptions,TDep1,TDep2,TDep3,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``3(System.Func{`0,``0,``1,``2,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_5<TOptions,UTDep1,UTDep2,UTDep3,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_3__1__System_Func_TOptions_UTDep1_UTDep2_UTDep3_bool_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_5<TOptions,UTDep1,UTDep2,UTDep3,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3>(System.Func<TOptions,TDep1,TDep2,TDep3,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``3(System.Func{`0,``0,``1,``2,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_5<TOptions,UTDep1,UTDep2,UTDep3,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_3__2__System_Func_TOptions_UTDep1_UTDep2_UTDep3_bool__String(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_5<TOptions,UTDep1,UTDep2,UTDep3,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3, TDep4>(System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``4(System.Func{`0,``0,``1,``2,``3,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_4__1__System_Func_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_bool_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3, TDep4>(System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``4(System.Func{`0,``0,``1,``2,``3,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_4__2__System_Func_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_bool__String(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_6<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3, TDep4, TDep5>(System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,bool>)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``5(System.Func{`0,``0,``1,``2,``3,``4,System.Boolean})
    /**
    
            Register a validation action for an options type using a default failure message.
            

    - Parameter validation: The validation function.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_7<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_5__1__System_Func_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_UTDep5_bool_(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), UTDep5.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4, UTDep5) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_7<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5,Swift.Bool>(validation);
        return try Validate(validation: del_validation);
    }
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> Validate<TDep1, TDep2, TDep3, TDep4, TDep5>(System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.Validate``5(System.Func{`0,``0,``1,``2,``3,``4,System.Boolean},System.String)
    /**
    
            Register a validation action for an options type.
            

    - Parameter validation: The validation function.
    - Parameter failureMessage: The failure message to use when validation fails.
    - Returns: The current .

    */
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(validation : Optional<dotnet.System.Func_7<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5,Bool>>, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_Microsoft_Extensions_Options_OptionsBuilder_TOptions___Validate_5__2__System_Func_TOptions_UTDep1_UTDep2_UTDep3_UTDep4_UTDep5_bool__String(TOptions.get_type_handle(), UTDep1.get_type_handle(), UTDep2.get_type_handle(), UTDep3.get_type_handle(), UTDep4.get_type_handle(), UTDep5.get_type_handle(), &__thrown, self.get_handle(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Validate<UTDep1 : SGBridgeGenericValue,UTDep2 : SGBridgeGenericValue,UTDep3 : SGBridgeGenericValue,UTDep4 : SGBridgeGenericValue,UTDep5 : SGBridgeGenericValue>(validation : @escaping (TOptions, UTDep1, UTDep2, UTDep3, UTDep4, UTDep5) throws -> Bool, failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        let del_validation = try dotnet.System.Func_7<TOptions,UTDep1,UTDep2,UTDep3,UTDep4,UTDep5,Swift.Bool>(validation);
        return try Validate(validation: del_validation, failureMessage: failureMessage);
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.Extensions.Options.OptionsBuilder`1.get_Services
    open func get_Services() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsBuilder_1_IServiceCollection__get_Services_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The default name of the  instance.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The  for the options being configured.
            

    */
    open var Services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        get {
            return try! get_Services();
        }
    }
} // OptionsBuilder_1


// type: Microsoft.Extensions.Options.OptionsCache`1
    /**
    
            Used to cache  instances.
            

    */
open class OptionsCache_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsCache_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsCache_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Options.OptionsCache`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsCache_1_ctor_0__0(TOptions.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:Microsoft.Extensions.Options.OptionsCache`1.Clear
    /**
    
            Clears all options instances from the cache.
            

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_OptionsCache_1_void__Clear_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TOptions GetOrAdd(System.String, System.Func<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(System.String,System.Func{`0})
    /**
    
            Gets a named options instance, or adds a new instance created with .
            

    - Parameter name: The name of the options instance.
    - Parameter createOptions: The func used to create the new instance.
    - Returns: The options instance.

    */
    open func GetOrAdd(name : Optional<dotnet.System.String>, createOptions : Optional<dotnet.System.Func_1<TOptions>>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsCache_1_TOptions__GetOrAdd_0__2__String_System_Func_TOptions_(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, (createOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // delegate closure overload
    open func GetOrAdd(name : Optional<dotnet.System.String>, createOptions : @escaping () throws -> TOptions) throws -> TOptions {
        let del_createOptions = try dotnet.System.Func_1<TOptions>(createOptions);
        return try GetOrAdd(name: name, createOptions: del_createOptions);
    }
    // bool TryAdd(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.OptionsCache`1.TryAdd(System.String,`0)
    /**
    
            Tries to adds a new option to the cache, will return false if the name already exists.
            

    - Parameter name: The name of the options instance.
    - Parameter options: The options instance.
    - Returns: Whether anything was added.

    */
    open func TryAdd(name : Optional<dotnet.System.String>, options : TOptions) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsCache_1_bool__TryAdd_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryRemove(System.String)
// docid: M:Microsoft.Extensions.Options.OptionsCache`1.TryRemove(System.String)
    /**
    
            Try to remove an options instance.
            

    - Parameter name: The name of the options instance.
    - Returns: Whether anything was removed.

    */
    open func TryRemove(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsCache_1_bool__TryRemove_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // OptionsCache_1


// type: Microsoft.Extensions.Options.OptionsFactory`1
    /**
    
            Implementation of .
            

    */
open class OptionsFactory_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsFactory_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsFactory_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IConfigureOptions<TOptions>>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IPostConfigureOptions<TOptions>>)
// docid: M:Microsoft.Extensions.Options.OptionsFactory`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IPostConfigureOptions{`0}})
    /**
    
            Initializes a new instance with the specified options configurations.
            

    - Parameter setups: The configuration actions to run.
    - Parameter postConfigures: The initialization actions to run.
    */
    public init(setups : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IConfigureOptions_1<TOptions>>>, postConfigures : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IPostConfigureOptions_1<TOptions>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsFactory_1_ctor_0__2__System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IConfigureOptions_TOptions___System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IPostConfigureOptions_TOptions__(TOptions.get_type_handle(), &__thrown, (setups?.get_handle()), (postConfigures?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IConfigureOptions<TOptions>>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IPostConfigureOptions<TOptions>>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IValidateOptions<TOptions>>)
// docid: M:Microsoft.Extensions.Options.OptionsFactory`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IPostConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IValidateOptions{`0}})
    /**
    
            Initializes a new instance with the specified options configurations.
            

    - Parameter setups: The configuration actions to run.
    - Parameter postConfigures: The initialization actions to run.
    - Parameter validations: The validations to run.
    */
    public init(setups : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IConfigureOptions_1<TOptions>>>, postConfigures : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IPostConfigureOptions_1<TOptions>>>, validations : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IValidateOptions_1<TOptions>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsFactory_1_ctor_0__3__System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IConfigureOptions_TOptions___System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IPostConfigureOptions_TOptions___System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IValidateOptions_TOptions__(TOptions.get_type_handle(), &__thrown, (setups?.get_handle()), (postConfigures?.get_handle()), (validations?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // TOptions Create(System.String)
// docid: M:Microsoft.Extensions.Options.OptionsFactory`1.Create(System.String)
    /**
    
            Returns a configured  instance with the given .
            

    */
    open /* method final */ func Create(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsFactory_1_TOptions__Create_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
} // OptionsFactory_1


// type: Microsoft.Extensions.Options.OptionsManager`1
    /**
    
            Implementation of  and .
            

    */
open class OptionsManager_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsManager_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsManager_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptionsFactory<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsManager`1.#ctor(Microsoft.Extensions.Options.IOptionsFactory{`0})
    /**
    
            Initializes a new instance with the specified options configurations.
            

    - Parameter factory: The factory to use to create options.
    */
    public init(factory : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsFactory_1<TOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsManager_1_ctor_0__1__Microsoft_Extensions_Options_IOptionsFactory_TOptions_(TOptions.get_type_handle(), &__thrown, (factory?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // TOptions Get(System.String)
// docid: M:Microsoft.Extensions.Options.OptionsManager`1.Get(System.String)
    /**
    
            Returns a configured  instance with the given .
            

    */
    open func Get(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsManager_1_TOptions__Get_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // [IsSpecialName] TOptions get_Value()
// docid: M:Microsoft.Extensions.Options.OptionsManager`1.get_Value
    open /* method final */ func get_Value() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsManager_1_TOptions__get_Value_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    /**
    
            The default configured  instance, equivalent to Get(Options.DefaultName).
            

    */
    public var Value : TOptions {
        get {
            return try! get_Value();
        }
    }
} // OptionsManager_1


// type: Microsoft.Extensions.Options.OptionsMonitorExtensions
public struct OptionsMonitorExtensions {
    // System.IDisposable OnChange<TOptions>(Microsoft.Extensions.Options.IOptionsMonitor<TOptions>, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsMonitorExtensions.OnChange``1(Microsoft.Extensions.Options.IOptionsMonitor{``0},System.Action{``0})
    /**
    
            Registers a listener to be called whenever  changes.
            

    - Parameter monitor: The IOptionsMonitor.
    - Parameter listener: The action to be invoked when  has changed.
    - Returns: An  which should be disposed to stop listening for changes.

    */
    public static func OnChange<UTOptions : SGBridgeGenericValue>(monitor : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<UTOptions>>, listener : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsMonitorExtensions_IDisposable__OnChange_1__2__Microsoft_Extensions_Options_IOptionsMonitor_UTOptions__System_Action_UTOptions_(UTOptions.get_type_handle(), &__thrown, (monitor?.get_handle()), (listener?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func OnChange<UTOptions : SGBridgeGenericValue>(monitor : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<UTOptions>>, listener : @escaping (UTOptions) throws -> Void) throws -> Optional<dotnet.System.IDisposable> {
        let del_listener = try dotnet.System.Action_1<UTOptions>(listener);
        return try OnChange(monitor: monitor, listener: del_listener);
    }
} // OptionsMonitorExtensions


// type: Microsoft.Extensions.Options.OptionsMonitor`1
    /**
    
            Implementation of .
            

    */
open class OptionsMonitor_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsMonitor_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsMonitor_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptionsFactory<TOptions>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.Options.IOptionsChangeTokenSource<TOptions>>, Microsoft.Extensions.Options.IOptionsMonitorCache<TOptions>)
// docid: M:Microsoft.Extensions.Options.OptionsMonitor`1.#ctor(Microsoft.Extensions.Options.IOptionsFactory{`0},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IOptionsChangeTokenSource{`0}},Microsoft.Extensions.Options.IOptionsMonitorCache{`0})
    /**
    
            Constructor.
            

    - Parameter factory: The factory to use to create options.
    - Parameter sources: The sources used to listen for changes to the options instance.
    - Parameter cache: The cache used to store options.
    */
    public init(factory : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsFactory_1<TOptions>>, sources : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Options.IOptionsChangeTokenSource_1<TOptions>>>, cache : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsMonitorCache_1<TOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsMonitor_1_ctor_0__3__Microsoft_Extensions_Options_IOptionsFactory_TOptions__System_Collections_Generic_IEnumerable_Microsoft_Extensions_Options_Microsoft_Extensions_Options_IOptionsChangeTokenSource_TOptions___Microsoft_Extensions_Options_IOptionsMonitorCache_TOptions_(TOptions.get_type_handle(), &__thrown, (factory?.get_handle()), (sources?.get_handle()), (cache?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Options.OptionsMonitor`1.Dispose
    /**
    
            Removes all change registration subscriptions.
            

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_OptionsMonitor_1_void__Dispose_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TOptions Get(System.String)
// docid: M:Microsoft.Extensions.Options.OptionsMonitor`1.Get(System.String)
    /**
    
            Returns a configured  instance with the given .
            

    */
    open func Get(name : Optional<dotnet.System.String>) throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsMonitor_1_TOptions__Get_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // System.IDisposable OnChange(System.Action<TOptions,System.String>)
// docid: M:Microsoft.Extensions.Options.OptionsMonitor`1.OnChange(System.Action{`0,System.String})
    /**
    
            Registers a listener to be called whenever  changes.
            

    - Parameter listener: The action to be invoked when  has changed.
    - Returns: An  which should be disposed to stop listening for changes.

    */
    open /* method final */ func OnChange(listener : Optional<dotnet.System.Action_2<TOptions,dotnet.System.String>>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsMonitor_1_IDisposable__OnChange_0__1__System_Action_TOptions_string_(TOptions.get_type_handle(), &__thrown, self.get_handle(), (listener?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open /* method final */ func OnChange(listener : @escaping (TOptions, Optional<dotnet.System.String>) throws -> Void) throws -> Optional<dotnet.System.IDisposable> {
        let del_listener = try dotnet.System.Action_2<TOptions,dotnet.System.String>(listener);
        return try OnChange(listener: del_listener);
    }
    // [IsSpecialName] TOptions get_CurrentValue()
// docid: M:Microsoft.Extensions.Options.OptionsMonitor`1.get_CurrentValue
    open /* method final */ func get_CurrentValue() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsMonitor_1_TOptions__get_CurrentValue_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    /**
    
            The present value of the options.
            

    */
    public var CurrentValue : TOptions {
        get {
            return try! get_CurrentValue();
        }
    }
} // OptionsMonitor_1


// type: Microsoft.Extensions.Options.OptionsValidationException
    /**
    
            Thrown when options validation fails.
            

    */
open class OptionsValidationException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsValidationException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsValidationException_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Type, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Options.OptionsValidationException.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Constructor.
            

    - Parameter optionsName: The name of the options instance that failed.
    - Parameter optionsType: The options type that failed.
    - Parameter failureMessages: The validation failure messages.
    */
    public init(optionsName : Optional<dotnet.System.String>, optionsType : Optional<dotnet.System.Type_>, failureMessages : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsValidationException_ctor_0__3__String_Type_System_Collections_Generic_IEnumerable_string_(&__thrown, optionsName?.get_handle() ?? nil, optionsType?.get_handle() ?? nil, (failureMessages?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Failures()
// docid: M:Microsoft.Extensions.Options.OptionsValidationException.get_Failures
    open func get_Failures() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsValidationException_System_Collections_Generic_IEnumerable_string___get_Failures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:Microsoft.Extensions.Options.OptionsValidationException.get_Message
    open func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsValidationException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_OptionsName()
// docid: M:Microsoft.Extensions.Options.OptionsValidationException.get_OptionsName
    open func get_OptionsName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsValidationException_String__get_OptionsName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_OptionsType()
// docid: M:Microsoft.Extensions.Options.OptionsValidationException.get_OptionsType
    open func get_OptionsType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsValidationException_Type__get_OptionsType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The validation failures.
            

    */
    open var Failures : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_Failures();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.String get_Message()
    /**
    
            The name of the options instance that failed.
            

    */
    open var OptionsName : Optional<dotnet.System.String> {
        get {
            return try! get_OptionsName();
        }
    }
    /**
    
            The type of the options that failed.
            

    */
    open var OptionsType : Optional<dotnet.System.Type_> {
        get {
            return try! get_OptionsType();
        }
    }
} // OptionsValidationException


// type: Microsoft.Extensions.Options.OptionsWrapper`1
    /**
    
             wrapper that returns the options instance.
            

    */
open class OptionsWrapper_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_OptionsWrapper_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_OptionsWrapper_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(TOptions)
// docid: M:Microsoft.Extensions.Options.OptionsWrapper`1.#ctor(`0)
    /**
    
            Intializes the wrapper with the options instance to return.
            

    - Parameter options: The options instance to return.
    */
    public init(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_OptionsWrapper_1_ctor_0__1__TOptions(TOptions.get_type_handle(), &__thrown, options.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] TOptions get_Value()
// docid: M:Microsoft.Extensions.Options.OptionsWrapper`1.get_Value
    open /* method final */ func get_Value() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_OptionsWrapper_1_TOptions__get_Value_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    /**
    
            The options instance.
            

    */
    public var Value : TOptions {
        get {
            return try! get_Value();
        }
    }
} // OptionsWrapper_1


// type: Microsoft.Extensions.Options.PostConfigureOptions`1
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Action<TOptions>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`1.#ctor(System.String,System.Action{`0})
    /**
    
            Creates a new instance of .
            

    - Parameter name: The name of the options.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, action : Optional<dotnet.System.Action_1<TOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_1_ctor_0__2__String_System_Action_TOptions_(TOptions.get_type_handle(), &__thrown, name?.get_handle() ?? nil, (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`1.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the action to invoke.
    - Parameter options: The options to use in initialization.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_1_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`1.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_1<TOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_1_System_Action_TOptions___get_Action_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The initialization action.
            

    */
    open var Action : Optional<dotnet.System.Action_1<TOptions>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_1


// type: Microsoft.Extensions.Options.PostConfigureOptions`2
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_2<TOptions : SGBridgeGenericValue,TDep : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_2_get_type_handle(TOptions.get_type_handle(),TDep.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_2_cast(TOptions.get_type_handle(),TDep.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep, System.Action<TOptions,TDep>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.#ctor(System.String,`1,System.Action{`0,`1})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep, action : Optional<dotnet.System.Action_2<TOptions,TDep>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_2_ctor_0__3__String_TDep_System_Action_TOptions_TDep_(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_2_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostConfigure(TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.PostConfigure(`0)
    /**
    
            Invoked to configure a  instance using the .
            

    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_2_void__PostConfigure_0__1__TOptions(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_2<TOptions,TDep>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_2_System_Action_TOptions_TDep___get_Action_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep get_Dependency()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.get_Dependency
    open func get_Dependency() throws -> TDep {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_2_TDep__get_Dependency_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`2.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_2_String__get_Name_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_2<TOptions,TDep>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The dependency.
            

    */
    open var Dependency : TDep {
        get {
            return try! get_Dependency();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_2


// type: Microsoft.Extensions.Options.PostConfigureOptions`3
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_3<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_3_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_3_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, System.Action<TOptions,TDep1,TDep2>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.#ctor(System.String,`1,`2,System.Action{`0,`1,`2})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep1, dependency2 : TDep2, action : Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_3_ctor_0__4__String_TDep1_TDep2_System_Action_TOptions_TDep1_TDep2_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), dependency2.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_3_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostConfigure(TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.PostConfigure(`0)
    /**
    
            Invoked to configure a  instance using the .
            

    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_3_void__PostConfigure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_3_System_Action_TOptions_TDep1_TDep2___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_3_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_3_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`3.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_3_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_3<TOptions,TDep1,TDep2>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_3


// type: Microsoft.Extensions.Options.PostConfigureOptions`4
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_4<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_4_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_4_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, System.Action<TOptions,TDep1,TDep2,TDep3>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.#ctor(System.String,`1,`2,`3,System.Action{`0,`1,`2,`3})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep1, dependency2 : TDep2, dependency3 : TDep3, action : Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_4_ctor_0__5__String_TDep1_TDep2_TDep3_System_Action_TOptions_TDep1_TDep2_TDep3_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), dependency2.to_gval(), dependency3.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_4_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostConfigure(TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.PostConfigure(`0)
    /**
    
            Invoked to configure a  instance using the .
            

    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_4_void__PostConfigure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_4_System_Action_TOptions_TDep1_TDep2_TDep3___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_4(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_4_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_4_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_4_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`4.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_4_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_4<TOptions,TDep1,TDep2,TDep3>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_4


// type: Microsoft.Extensions.Options.PostConfigureOptions`5
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_5<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_5_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_5_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, System.Action<TOptions,TDep1,TDep2,TDep3,TDep4>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.#ctor(System.String,`1,`2,`3,`4,System.Action{`0,`1,`2,`3,`4})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency1: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter dependency4: A fourth dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, action : Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_5_ctor_0__6__String_TDep1_TDep2_TDep3_TDep4_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_5_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostConfigure(TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.PostConfigure(`0)
    /**
    
            Invoked to configure a  instance using the .
            

    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_5_void__PostConfigure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3,TDep4> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_5(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`5.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_5_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_5<TOptions,TDep1,TDep2,TDep3,TDep4>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_5


// type: Microsoft.Extensions.Options.PostConfigureOptions`6
    /**
    
            Implementation of .
            

    */
open class PostConfigureOptions_6<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue,TDep5 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_PostConfigureOptions_6_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_PostConfigureOptions_6_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, TDep5, System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.#ctor(System.String,`1,`2,`3,`4,`5,System.Action{`0,`1,`2,`3,`4,`5})
    /**
    
            Constructor.
            

    - Parameter name: The name of the options.
    - Parameter dependency1: A dependency.
    - Parameter dependency2: A second dependency.
    - Parameter dependency3: A third dependency.
    - Parameter dependency4: A fourth dependency.
    - Parameter dependency5: A fifth dependency.
    - Parameter action: The action to register.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, dependency5 : TDep5, action : Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_PostConfigureOptions_6_ctor_0__7__String_TDep1_TDep2_TDep3_TDep4_TDep5_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5_(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), dependency5.to_gval(), (action?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.PostConfigure(System.String,`0)
    /**
    
            Invokes the registered initialization  if the  matches.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(name : Optional<dotnet.System.String>, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_6_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostConfigure(TOptions)
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.PostConfigure(`0)
    /**
    
            Invoked to configure a  instance using the .
            

    - Parameter options: The options instance to configured.
    */
    open func PostConfigure(options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_PostConfigureOptions_6_void__PostConfigure_0__1__TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5> get_Action()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Action
    open func get_Action() throws -> Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_System_Action_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5___get_Action_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_6(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] TDep5 get_Dependency5()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Dependency5
    open func get_Dependency5() throws -> TDep5 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_TDep5__get_Dependency5_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep5(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.PostConfigureOptions`6.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_PostConfigureOptions_6_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The configuration action.
            

    */
    open var Action : Optional<dotnet.System.Action_6<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5>> {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The fifth dependency.
            

    */
    open var Dependency5 : TDep5 {
        get {
            return try! get_Dependency5();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // PostConfigureOptions_6


// type: Microsoft.Extensions.Options.ValidateOptionsResult
    /**
    
            Represents the result of an options validation.
            

    */
open class ValidateOptionsResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptionsResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptionsResult_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: Microsoft.Extensions.Options.ValidateOptionsResult Skip
    /**
    
            Result when validation was skipped due to name not matching.
            

    */
    open class var Skip : Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        get {
        let __h___return = Microsoft_Extensions_Options_ValidateOptionsResult_get_Skip();
        let __return = (__h___return != nil) ? aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Options.ValidateOptionsResult Success
    /**
    
            Validation was successful.
            

    */
    open class var Success : Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        get {
        let __h___return = Microsoft_Extensions_Options_ValidateOptionsResult_get_Success();
        let __return = (__h___return != nil) ? aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptionsResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Fail(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.Fail(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Returns a failure result.
            

    - Parameter failures: The reasons for the failure.
    - Returns: The failure result.

    */
    open class func Fail(failures : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_ValidateOptionsResult__Fail_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, (failures?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Fail(System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.Fail(System.String)
    /**
    
            Returns a failure result.
            

    - Parameter failureMessage: The reason for the failure.
    - Returns: The failure result.

    */
    open class func Fail(failureMessage : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_ValidateOptionsResult__Fail_0__1__String(&__thrown, failureMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Failed()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.get_Failed
    open func get_Failed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_bool__get_Failed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Failed(bool)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.set_Failed(System.Boolean)
    open func set_Failed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ValidateOptionsResult_void__set_Failed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_String__get_FailureMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FailureMessage(System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.set_FailureMessage(System.String)
    open func set_FailureMessage(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ValidateOptionsResult_void__set_FailureMessage_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Failures()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.get_Failures
    open func get_Failures() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_System_Collections_Generic_IEnumerable_string___get_Failures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Failures(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.set_Failures(System.Collections.Generic.IEnumerable{System.String})
    open func set_Failures(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ValidateOptionsResult_void__set_Failures_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Skipped()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.get_Skipped
    open func get_Skipped() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_bool__get_Skipped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Skipped(bool)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.set_Skipped(System.Boolean)
    open func set_Skipped(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ValidateOptionsResult_void__set_Skipped_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Succeeded()
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.get_Succeeded
    open func get_Succeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptionsResult_bool__get_Succeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Succeeded(bool)
// docid: M:Microsoft.Extensions.Options.ValidateOptionsResult.set_Succeeded(System.Boolean)
    open func set_Succeeded(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Options_ValidateOptionsResult_void__set_Succeeded_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            True if validation failed.
            

    */
    open var Failed : Bool {
        get {
            return try! get_Failed();
        }
        set(v) {
            return try! set_Failed(value: v);
        }
    }
    /**
    
            Used to describe why validation failed.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
        set(v) {
            return try! set_FailureMessage(value: v!);
        }
    }
    /**
    
            Full list of failures (can be multiple).
            

    */
    open var Failures : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_Failures();
        }
        set(v) {
            return try! set_Failures(value: v!);
        }
    }
    /**
    
            True if validation was not run.
            

    */
    open var Skipped : Bool {
        get {
            return try! get_Skipped();
        }
        set(v) {
            return try! set_Skipped(value: v);
        }
    }
    /**
    
            True if validation was successful.
            

    */
    open var Succeeded : Bool {
        get {
            return try! get_Succeeded();
        }
        set(v) {
            return try! set_Succeeded(value: v);
        }
    }
} // ValidateOptionsResult


// type: Microsoft.Extensions.Options.ValidateOptions`1
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_1_cast(TOptions.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.Func<TOptions,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`1.#ctor(System.String,System.Func{`0,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, validation : Optional<dotnet.System.Func_2<TOptions,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_1_ctor_0__3__String_System_Func_TOptions_bool__String(TOptions.get_type_handle(), &__thrown, name?.get_handle() ?? nil, (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`1.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_1_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`1.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_1_String__get_FailureMessage_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`1.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_2<TOptions,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_1_System_Func_TOptions_bool___get_Validation_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_2<TOptions,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_1


// type: Microsoft.Extensions.Options.ValidateOptions`2
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_2<TOptions : SGBridgeGenericValue,TDep : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_2_get_type_handle(TOptions.get_type_handle(),TDep.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_2_cast(TOptions.get_type_handle(),TDep.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep, System.Func<TOptions,TDep,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.#ctor(System.String,`1,System.Func{`0,`1,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter dependency: The dependency.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, dependency : TDep, validation : Optional<dotnet.System.Func_3<TOptions,TDep,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_2_ctor_0__4__String_TDep_System_Func_TOptions_TDep_bool__String(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency.to_gval(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_2_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep get_Dependency()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.get_Dependency
    open func get_Dependency() throws -> TDep {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_2_TDep__get_Dependency_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_2_String__get_FailureMessage_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_2_String__get_Name_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,TDep,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`2.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_3<TOptions,TDep,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_2_System_Func_TOptions_TDep_bool___get_Validation_0__0(TOptions.get_type_handle(), TDep.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The dependency.
            

    */
    open var Dependency : TDep {
        get {
            return try! get_Dependency();
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_3<TOptions,TDep,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_2


// type: Microsoft.Extensions.Options.ValidateOptions`3
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_3<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_3_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_3_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, System.Func<TOptions,TDep1,TDep2,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.#ctor(System.String,`1,`2,System.Func{`0,`1,`2,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter dependency1: The first dependency.
    - Parameter dependency2: The second dependency.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, validation : Optional<dotnet.System.Func_4<TOptions,TDep1,TDep2,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_3_ctor_0__5__String_TDep1_TDep2_System_Func_TOptions_TDep1_TDep2_bool__String(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_String__get_FailureMessage_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,TDep1,TDep2,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`3.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_4<TOptions,TDep1,TDep2,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_3_System_Func_TOptions_TDep1_TDep2_bool___get_Validation_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_4(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_4<TOptions,TDep1,TDep2,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_3


// type: Microsoft.Extensions.Options.ValidateOptions`4
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_4<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_4_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_4_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, System.Func<TOptions,TDep1,TDep2,TDep3,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.#ctor(System.String,`1,`2,`3,System.Func{`0,`1,`2,`3,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter dependency1: The first dependency.
    - Parameter dependency2: The second dependency.
    - Parameter dependency3: The third dependency.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, validation : Optional<dotnet.System.Func_5<TOptions,TDep1,TDep2,TDep3,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_4_ctor_0__6__String_TDep1_TDep2_TDep3_System_Func_TOptions_TDep1_TDep2_TDep3_bool__String(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_String__get_FailureMessage_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,TDep1,TDep2,TDep3,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`4.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_5<TOptions,TDep1,TDep2,TDep3,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_4_System_Func_TOptions_TDep1_TDep2_TDep3_bool___get_Validation_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_5(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_5<TOptions,TDep1,TDep2,TDep3,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_4


// type: Microsoft.Extensions.Options.ValidateOptions`5
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_5<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_5_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_5_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.#ctor(System.String,`1,`2,`3,`4,System.Func{`0,`1,`2,`3,`4,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter dependency1: The first dependency.
    - Parameter dependency2: The second dependency.
    - Parameter dependency3: The third dependency.
    - Parameter dependency4: The fourth dependency.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, validation : Optional<dotnet.System.Func_6<TOptions,TDep1,TDep2,TDep3,TDep4,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_5_ctor_0__7__String_TDep1_TDep2_TDep3_TDep4_System_Func_TOptions_TDep1_TDep2_TDep3_TDep4_bool__String(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_String__get_FailureMessage_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`5.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_6<TOptions,TDep1,TDep2,TDep3,TDep4,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_5_System_Func_TOptions_TDep1_TDep2_TDep3_TDep4_bool___get_Validation_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_6(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_6<TOptions,TDep1,TDep2,TDep3,TDep4,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_5


// type: Microsoft.Extensions.Options.ValidateOptions`6
    /**
    
            Implementation of 
            

    */
open class ValidateOptions_6<TOptions : SGBridgeGenericValue,TDep1 : SGBridgeGenericValue,TDep2 : SGBridgeGenericValue,TDep3 : SGBridgeGenericValue,TDep4 : SGBridgeGenericValue,TDep5 : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_ValidateOptions_6_get_type_handle(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Options_ValidateOptions_6_cast(TOptions.get_type_handle(),TDep1.get_type_handle(),TDep2.get_type_handle(),TDep3.get_type_handle(),TDep4.get_type_handle(),TDep5.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, TDep1, TDep2, TDep3, TDep4, TDep5, System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,bool>, System.String)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.#ctor(System.String,`1,`2,`3,`4,`5,System.Func{`0,`1,`2,`3,`4,`5,System.Boolean},System.String)
    /**
    
            Constructor.
            

    - Parameter name: Options name.
    - Parameter dependency1: The first dependency.
    - Parameter dependency2: The second dependency.
    - Parameter dependency3: The third dependency.
    - Parameter dependency4: The fourth dependency.
    - Parameter dependency5: The fifth dependency.
    - Parameter validation: Validation function.
    - Parameter failureMessage: Validation failure message.
    */
    public init(name : Optional<dotnet.System.String>, dependency1 : TDep1, dependency2 : TDep2, dependency3 : TDep3, dependency4 : TDep4, dependency5 : TDep5, validation : Optional<dotnet.System.Func_7<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,Bool>>, failureMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_ValidateOptions_6_ctor_0__8__String_TDep1_TDep2_TDep3_TDep4_TDep5_System_Func_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5_bool__String(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, name?.get_handle() ?? nil, dependency1.to_gval(), dependency2.to_gval(), dependency3.to_gval(), dependency4.to_gval(), dependency5.to_gval(), (validation?.get_handle()), failureMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TDep1 get_Dependency1()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Dependency1
    open func get_Dependency1() throws -> TDep1 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_TDep1__get_Dependency1_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep1(gval: __return);
        }
    }
    // [IsSpecialName] TDep2 get_Dependency2()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Dependency2
    open func get_Dependency2() throws -> TDep2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_TDep2__get_Dependency2_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep2(gval: __return);
        }
    }
    // [IsSpecialName] TDep3 get_Dependency3()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Dependency3
    open func get_Dependency3() throws -> TDep3 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_TDep3__get_Dependency3_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep3(gval: __return);
        }
    }
    // [IsSpecialName] TDep4 get_Dependency4()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Dependency4
    open func get_Dependency4() throws -> TDep4 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_TDep4__get_Dependency4_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep4(gval: __return);
        }
    }
    // [IsSpecialName] TDep5 get_Dependency5()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Dependency5
    open func get_Dependency5() throws -> TDep5 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_TDep5__get_Dependency5_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TDep5(gval: __return);
        }
    }
    // [IsSpecialName] System.String get_FailureMessage()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_FailureMessage
    open func get_FailureMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_String__get_FailureMessage_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_String__get_Name_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,bool> get_Validation()
// docid: M:Microsoft.Extensions.Options.ValidateOptions`6.get_Validation
    open func get_Validation() throws -> Optional<dotnet.System.Func_7<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_ValidateOptions_6_System_Func_TOptions_TDep1_TDep2_TDep3_TDep4_TDep5_bool___get_Validation_0__0(TOptions.get_type_handle(), TDep1.get_type_handle(), TDep2.get_type_handle(), TDep3.get_type_handle(), TDep4.get_type_handle(), TDep5.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_7(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The first dependency.
            

    */
    open var Dependency1 : TDep1 {
        get {
            return try! get_Dependency1();
        }
    }
    /**
    
            The second dependency.
            

    */
    open var Dependency2 : TDep2 {
        get {
            return try! get_Dependency2();
        }
    }
    /**
    
            The third dependency.
            

    */
    open var Dependency3 : TDep3 {
        get {
            return try! get_Dependency3();
        }
    }
    /**
    
            The fourth dependency.
            

    */
    open var Dependency4 : TDep4 {
        get {
            return try! get_Dependency4();
        }
    }
    /**
    
            The fifth dependency.
            

    */
    open var Dependency5 : TDep5 {
        get {
            return try! get_Dependency5();
        }
    }
    /**
    
            The error to return when validation fails.
            

    */
    open var FailureMessage : Optional<dotnet.System.String> {
        get {
            return try! get_FailureMessage();
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The validation function.
            

    */
    open var Validation : Optional<dotnet.System.Func_7<TOptions,TDep1,TDep2,TDep3,TDep4,TDep5,Bool>> {
        get {
            return try! get_Validation();
        }
    }
} // ValidateOptions_6


}



public protocol Microsoft_Extensions_Options_IConfigureNamedOptions_1
    :
    Microsoft_Extensions_Options_IConfigureOptions_1
    where
        TOptions_IConfigureOptions_1 == TOptions_IConfigureNamedOptions_1
{
    associatedtype TOptions_IConfigureNamedOptions_1;
}

public protocol Microsoft_Extensions_Options_IConfigureOptions_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IConfigureOptions_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IOptionsChangeTokenSource_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IOptionsChangeTokenSource_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IOptionsFactory_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IOptionsFactory_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IOptionsMonitorCache_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IOptionsMonitorCache_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IOptionsMonitor_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IOptionsMonitor_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IOptionsSnapshot_1
    :
    Microsoft_Extensions_Options_IOptions_1
    where
        TOptions_IOptions_1 == TOptions_IOptionsSnapshot_1
{
    associatedtype TOptions_IOptionsSnapshot_1;
}

public protocol Microsoft_Extensions_Options_IOptions_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IOptions_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IPostConfigureOptions_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IPostConfigureOptions_1 : SGBridgeGenericValue;
}

public protocol Microsoft_Extensions_Options_IValidateOptions_1
    :
    SGBridgeGetHandle
{
    associatedtype TOptions_IValidateOptions_1 : SGBridgeGenericValue;
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddOptions() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)

// EXTENSION METHOD Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Options.OptionsBuilder<TOptions> AddOptions<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureAll<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func ConfigureAll<UTOptions : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureAll(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func ConfigureAll<UTOptions : SGBridgeGenericValue>(configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureAll(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func ConfigureOptions(configureInstance : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureOptions(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureInstance: configureInstance);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func ConfigureOptions(configureType : Optional<dotnet.System.Type_>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureOptions(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureType: configureType);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions<TConfigureOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureOptions<TConfigureOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection Configure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func Configure<UTOptions : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func Configure<UTOptions : SGBridgeGenericValue>(configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection Configure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func Configure<UTOptions : SGBridgeGenericValue>(name : Optional<dotnet.System.String>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func Configure<UTOptions : SGBridgeGenericValue>(name : Optional<dotnet.System.String>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigureAll<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func PostConfigureAll<UTOptions : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigureAll(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func PostConfigureAll<UTOptions : SGBridgeGenericValue>(configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigureAll(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func PostConfigure<UTOptions : SGBridgeGenericValue>(configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func PostConfigure<UTOptions : SGBridgeGenericValue>(configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<TOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func PostConfigure<UTOptions : SGBridgeGenericValue>(name : Optional<dotnet.System.String>, configureOptions : Optional<dotnet.System.Action_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func PostConfigure<UTOptions : SGBridgeGenericValue>(name : Optional<dotnet.System.String>, configureOptions : @escaping (UTOptions) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_configureOptions = try dotnet.System.Action_1<UTOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD System.IDisposable OnChange<TOptions>(Microsoft.Extensions.Options.IOptionsMonitor<TOptions>, System.Action<TOptions>)
extension aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1 {
    public func OnChange(listener : Optional<dotnet.System.Action_1<TOptions>>) throws -> Optional<dotnet.System.IDisposable> {
        return try aspnetcore.Microsoft.Extensions.Options.OptionsMonitorExtensions.OnChange(monitor: self, listener: listener);
    }
    // delegate closure overload
    public func OnChange(listener : @escaping (TOptions) throws -> Void) throws -> Optional<dotnet.System.IDisposable> {
        let del_listener = try dotnet.System.Action_1<TOptions>(listener);
        return try aspnetcore.Microsoft.Extensions.Options.OptionsMonitorExtensions.OnChange(monitor: self, listener: del_listener);
    }
}

