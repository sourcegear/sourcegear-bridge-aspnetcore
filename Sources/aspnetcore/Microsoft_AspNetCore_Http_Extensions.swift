// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions
public struct HeaderDictionaryTypeExtensions {
    // Microsoft.AspNetCore.Http.Headers.RequestHeaders GetTypedHeaders(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Gets strongly typed HTTP request headers.
            

    - Parameter request: The .
    - Returns: The .

    */
    public static func GetTypedHeaders(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> aspnetcore.Microsoft.AspNetCore.Http.Headers.RequestHeaders {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionaryTypeExtensions_RequestHeaders__GetTypedHeaders_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Headers.RequestHeaders(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.Headers.ResponseHeaders GetTypedHeaders(Microsoft.AspNetCore.Http.HttpResponse)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpResponse)
    /**
    
            Gets strongly typed HTTP response headers.
            

    - Parameter response: The .
    - Returns: The .

    */
    public static func GetTypedHeaders(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse) throws -> aspnetcore.Microsoft.AspNetCore.Http.Headers.ResponseHeaders {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionaryTypeExtensions_ResponseHeaders__GetTypedHeaders_0__1__HttpResponse(&__thrown, response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Headers.ResponseHeaders(hndl : __return);
        }
    }
    // void AppendList<T>(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.Collections.Generic.IList<T>)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.AppendList``1(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.Collections.Generic.IList{``0})
    /**
    
            Appends a sequence of values to .
            

    - Parameter Headers: The .
    - Parameter name: The header name.
    - Parameter values: The values to append.
    */
    public static func AppendList<UT : SGBridgeGenericValue>(Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary, name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionaryTypeExtensions_void__AppendList_1__3__IHeaderDictionary_String_System_Collections_Generic_IList_UT_(UT.get_type_handle(), &__thrown, Headers.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HeaderDictionaryTypeExtensions


// type: Microsoft.AspNetCore.Http.HttpContextServerVariableExtensions
public struct HttpContextServerVariableExtensions {
    // System.String GetServerVariable(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpContextServerVariableExtensions.GetServerVariable(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Gets the value of a server variable for the current request.
            

    - Parameter context: The http context for the request.
    - Parameter variableName: The name of the variable.
    - Returns: 
            null if the server does not support the  feature.
            May return null or empty if the variable does not exist or is not set.
            

    */
    public static func GetServerVariable(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, variableName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContextServerVariableExtensions_String__GetServerVariable_0__2__HttpContext_String(&__thrown, context.get_handle(), variableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HttpContextServerVariableExtensions


// type: Microsoft.AspNetCore.Http.HttpRequestJsonExtensions
public struct HttpRequestJsonExtensions {
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Threading.CancellationToken)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
    // System.Threading.Tasks.ValueTask<System.Object> ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest, System.Type, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Type,System.Threading.CancellationToken)
    /**
    
            Read JSON from the request and deserialize to the specified type.
            If the request's content-type is not a known JSON type then an error will be thrown.
            

    - Parameter request: The request to read from.
    - Parameter type: The type of object to read.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func ReadFromJsonAsync(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequestJsonExtensions_System_Threading_Tasks_ValueTask_object___ReadFromJsonAsync_0__3__HttpRequest_Type_CancellationToken(&__thrown, request.get_handle(), type.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Object> ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    
            Read JSON from the request and deserialize to the specified type.
            If the request's content-type is not a known JSON type then an error will be thrown.
            

    - Parameter request: The request to read from.
    - Parameter type: The type of object to read.
    - Parameter options: The serializer options use when deserializing the content.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func ReadFromJsonAsync(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequestJsonExtensions_System_Threading_Tasks_ValueTask_object___ReadFromJsonAsync_0__4__HttpRequest_Type_JsonSerializerOptions_CancellationToken(&__thrown, request.get_handle(), type.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // bool HasJsonContentType(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.HasJsonContentType(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Checks the Content-Type header for JSON types.
            

    - Returns: true if the Content-Type header represents a JSON content type; otherwise, false.

    */
    public static func HasJsonContentType(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequestJsonExtensions_bool__HasJsonContentType_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // HttpRequestJsonExtensions


// type: Microsoft.AspNetCore.Http.HttpResponseJsonExtensions
public struct HttpResponseJsonExtensions {
    // System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync``1(Microsoft.AspNetCore.Http.HttpResponse,``0,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            application/json; charset=utf-8.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_1__3__HttpResponse_UTValue_CancellationToken(UTValue.get_type_handle(), &__thrown, response.get_handle(), value.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync``1(Microsoft.AspNetCore.Http.HttpResponse,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            application/json; charset=utf-8.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter options: The serializer options use when serializing the value.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_1__4__HttpResponse_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, response.get_handle(), value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Text.Json.JsonSerializerOptions, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync``1(Microsoft.AspNetCore.Http.HttpResponse,``0,System.Text.Json.JsonSerializerOptions,System.String,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            the specified content-type.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter options: The serializer options use when serializing the value.
    - Parameter contentType: The content-type to set on the response.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, contentType : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_1__5__HttpResponse_UTValue_JsonSerializerOptions_String_CancellationToken(UTValue.get_type_handle(), &__thrown, response.get_handle(), value.to_gval(), options?.get_handle() ?? nil, contentType?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Object,System.Type,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            application/json; charset=utf-8.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter type: The type of object to write.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_0__4__HttpResponse_Object_Type_CancellationToken(&__thrown, response.get_handle(), value?.get_handle() ?? nil, type.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            application/json; charset=utf-8.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter type: The type of object to write.
    - Parameter options: The serializer options use when serializing the value.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_0__5__HttpResponse_Object_Type_JsonSerializerOptions_CancellationToken(&__thrown, response.get_handle(), value?.get_handle() ?? nil, type.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Text.Json.JsonSerializerOptions, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.String,System.Threading.CancellationToken)
    /**
    
            Write the specified value as JSON to the response body. The response content-type will be set to
            the specified content-type.
            

    - Parameter response: The response to write JSON to.
    - Parameter value: The value to write as JSON.
    - Parameter type: The type of object to write.
    - Parameter options: The serializer options use when serializing the value.
    - Parameter contentType: The content-type to set on the response.
    - Parameter cancellationToken: A  used to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func WriteAsJsonAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, contentType : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseJsonExtensions_Task__WriteAsJsonAsync_0__6__HttpResponse_Object_Type_JsonSerializerOptions_String_CancellationToken(&__thrown, response.get_handle(), value?.get_handle() ?? nil, type.get_handle(), options?.get_handle() ?? nil, contentType?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // HttpResponseJsonExtensions


// type: Microsoft.AspNetCore.Http.HttpValidationProblemDetails
    /**
    
            A  for validation errors.
            

    */
open class HttpValidationProblemDetails
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ProblemDetails
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HttpValidationProblemDetails_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.HttpValidationProblemDetails.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HttpValidationProblemDetails_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String[]>)
// docid: M:Microsoft.AspNetCore.Http.HttpValidationProblemDetails.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter errors: The validation errors.
    */
    public init(errors : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HttpValidationProblemDetails_ctor_0__1__System_Collections_Generic_IDictionary_string_stringArray_(&__thrown, errors.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String[]> get_Errors()
// docid: M:Microsoft.AspNetCore.Http.HttpValidationProblemDetails.get_Errors
    open func get_Errors() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpValidationProblemDetails_System_Collections_Generic_IDictionary_string_stringArray___get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets the validation errors associated with this instance of .
            

    */
    open var Errors : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_Errors();
        }
    }
} // HttpValidationProblemDetails


// type: Microsoft.AspNetCore.Http.RequestDelegateFactory
public struct RequestDelegateFactory {
    // Microsoft.AspNetCore.Http.RequestDelegateResult Create(System.Delegate, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(System.Delegate,Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions)
    /**
    
            Creates a  implementation for .
            

    - Parameter handler: A request handler with any number of custom parameters that often produces a response with its return value.
    - Parameter options: The  used to configure the behavior of the handler.
    - Returns: The .

    */
    public static func Create(handler : dotnet.System.Delegate, options : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateFactory_RequestDelegateResult__Create_0__2__Delegate_RequestDelegateFactoryOptions(&__thrown, handler.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.RequestDelegateResult Create(System.Reflection.MethodInfo, System.Func<Microsoft.AspNetCore.Http.HttpContext,System.Object>, Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(System.Reflection.MethodInfo,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Object},Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions)
    /**
    
            Creates a  implementation for .
            

    - Parameter methodInfo: A request handler with any number of custom parameters that often produces a response with its return value.
    - Parameter targetFactory: Creates the  for the non-static method.
    - Parameter options: The  used to configure the behavior of the handler.
    - Returns: The .

    */
    public static func Create(methodInfo : dotnet.System.Reflection.MethodInfo, targetFactory : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Object>> = nil, options : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateFactory_RequestDelegateResult__Create_0__3__MethodInfo_System_Func_Microsoft_AspNetCore_Http_HttpContext_object__RequestDelegateFactoryOptions(&__thrown, methodInfo.get_handle(), (targetFactory?.get_handle()), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(methodInfo : dotnet.System.Reflection.MethodInfo, targetFactory : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> dotnet.System.Object, options : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegateResult {
        let del_targetFactory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Object>(targetFactory);
        return try Create(methodInfo: methodInfo, targetFactory: del_targetFactory, options: options);
    }
} // RequestDelegateFactory


// type: Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions
    /**
    
            Options for controlling the behavior of  when created using .
            

    */
public final class RequestDelegateFactoryOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions.get_ServiceProvider
    public func get_ServiceProvider() throws -> Optional<dotnet.System.IServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ServiceProvider(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions.set_ServiceProvider(System.IServiceProvider)
    public func set_ServiceProvider(value : Optional<dotnet.System.IServiceProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_void__set_ServiceProvider_0__1__IServiceProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_RouteParameterNames()
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions.get_RouteParameterNames
    public func get_RouteParameterNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_System_Collections_Generic_IEnumerable_string___get_RouteParameterNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteParameterNames(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateFactoryOptions.set_RouteParameterNames(System.Collections.Generic.IEnumerable{System.String})
    public func set_RouteParameterNames(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_RequestDelegateFactoryOptions_void__set_RouteParameterNames_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The list of route parameter names that are specified for this handler.
            

    */
    public var RouteParameterNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_RouteParameterNames();
        }
        set(v) {
            return try! set_RouteParameterNames(value: v!);
        }
    }
    /**
    
            The  instance used to detect if handler parameters are services.
            

    */
    public var ServiceProvider : Optional<dotnet.System.IServiceProvider> {
        get {
            return try! get_ServiceProvider();
        }
        set(v) {
            return try! set_ServiceProvider(value: v!);
        }
    }
} // RequestDelegateFactoryOptions


// type: Microsoft.AspNetCore.Http.ResponseExtensions
public struct ResponseExtensions {
    // void Clear(Microsoft.AspNetCore.Http.HttpResponse)
// docid: M:Microsoft.AspNetCore.Http.ResponseExtensions.Clear(Microsoft.AspNetCore.Http.HttpResponse)
    /**
    
            Clears the HTTP response.
            
            This invocation resets the response headers, response status code, and response body.
            
            

    - Parameter response: The  to clear.
    */
    public static func Clear(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ResponseExtensions_void__Clear_0__1__HttpResponse(&__thrown, response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Redirect(Microsoft.AspNetCore.Http.HttpResponse, System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Http.ResponseExtensions.Redirect(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Boolean,System.Boolean)
    /**
    
            Returns a redirect response (HTTP 301, HTTP 302, HTTP 307 or HTTP 308) to the client.
            

    - Parameter response: The  to redirect.
    - Parameter location: The URL to redirect the client to. This must be properly encoded for use in http headers where only ASCII characters are allowed.
    - Parameter permanent: True if the redirect is permanent (301 or 308), otherwise false (302 or 307).
    - Parameter preserveMethod: True if the redirect needs to reuse the method and body (308 or 307), otherwise false (301 or 302).
    */
    public static func Redirect(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, location : dotnet.System.String, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ResponseExtensions_void__Redirect_0__4__HttpResponse_String_bool_bool(&__thrown, response.get_handle(), location.get_handle(), Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ResponseExtensions


// type: Microsoft.AspNetCore.Http.SendFileResponseExtensions
public struct SendFileResponseExtensions {
    // System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, Microsoft.Extensions.FileProviders.IFileInfo, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Threading.CancellationToken)
    /**
    
            Sends the given file using the SendFile extension.
            

    - Parameter response: 
    - Parameter file: The file.
    - Parameter cancellationToken: The .
    */
    public static func SendFileAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, file : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SendFileResponseExtensions_Task__SendFileAsync_0__3__HttpResponse_IFileInfo_CancellationToken(&__thrown, response.get_handle(), file.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, Microsoft.Extensions.FileProviders.IFileInfo, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Sends the given file using the SendFile extension.
            

    - Parameter response: 
    - Parameter file: The file.
    - Parameter offset: The offset in the file.
    - Parameter count: The number of bytes to send, or null to send the remainder of the file.
    - Parameter cancellationToken: 
    - Returns: 

    */
    public static func SendFileAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, file : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SendFileResponseExtensions_Task__SendFileAsync_0__5__HttpResponse_IFileInfo_i64_System_Nullable_i64__CancellationToken(&__thrown, response.get_handle(), file.get_handle(), offset, (count != nil) ? System_Int64_box(count!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)
    /**
    
            Sends the given file using the SendFile extension.
            

    - Parameter response: 
    - Parameter fileName: The full path to the file.
    - Parameter cancellationToken: The .
    - Returns: 

    */
    public static func SendFileAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, fileName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SendFileResponseExtensions_Task__SendFileAsync_0__3__HttpResponse_String_CancellationToken(&__thrown, response.get_handle(), fileName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Sends the given file using the SendFile extension.
            

    - Parameter response: 
    - Parameter fileName: The full path to the file.
    - Parameter offset: The offset in the file.
    - Parameter count: The number of bytes to send, or null to send the remainder of the file.
    - Parameter cancellationToken: 
    - Returns: 

    */
    public static func SendFileAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, fileName : dotnet.System.String, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SendFileResponseExtensions_Task__SendFileAsync_0__5__HttpResponse_String_i64_System_Nullable_i64__CancellationToken(&__thrown, response.get_handle(), fileName.get_handle(), offset, (count != nil) ? System_Int64_box(count!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // SendFileResponseExtensions


// type: Microsoft.AspNetCore.Http.SessionExtensions
public struct SessionExtensions {
    // void SetInt32(Microsoft.AspNetCore.Http.ISession, System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Http.SessionExtensions.SetInt32(Microsoft.AspNetCore.Http.ISession,System.String,System.Int32)
    /**
    
            Sets an int value in the .
            

    - Parameter session: The .
    - Parameter key: The key to assign.
    - Parameter value: The value to assign.
    */
    public static func SetInt32(session : aspnetcore.Microsoft.AspNetCore.Http.ISession, key : dotnet.System.String, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_SessionExtensions_void__SetInt32_0__3__ISession_String_i32(&__thrown, session.get_handle(), key.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Nullable<System.Int32> GetInt32(Microsoft.AspNetCore.Http.ISession, System.String)
// docid: M:Microsoft.AspNetCore.Http.SessionExtensions.GetInt32(Microsoft.AspNetCore.Http.ISession,System.String)
    /**
    
            Gets an int value from .
            

    - Parameter session: The .
    - Parameter key: The key to read.
    */
    public static func GetInt32(session : aspnetcore.Microsoft.AspNetCore.Http.ISession, key : dotnet.System.String) throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SessionExtensions_System_Nullable_i32___GetInt32_0__2__ISession_String(&__thrown, session.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // void SetString(Microsoft.AspNetCore.Http.ISession, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.SessionExtensions.SetString(Microsoft.AspNetCore.Http.ISession,System.String,System.String)
    /**
    
            Sets a  value in the .
            

    - Parameter session: The .
    - Parameter key: The key to assign.
    - Parameter value: The value to assign.
    */
    public static func SetString(session : aspnetcore.Microsoft.AspNetCore.Http.ISession, key : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_SessionExtensions_void__SetString_0__3__ISession_String_String(&__thrown, session.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetString(Microsoft.AspNetCore.Http.ISession, System.String)
// docid: M:Microsoft.AspNetCore.Http.SessionExtensions.GetString(Microsoft.AspNetCore.Http.ISession,System.String)
    /**
    
            Gets a string value from .
            

    - Parameter session: The .
    - Parameter key: The key to read.
    */
    public static func GetString(session : aspnetcore.Microsoft.AspNetCore.Http.ISession, key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SessionExtensions_String__GetString_0__2__ISession_String(&__thrown, session.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] Get(Microsoft.AspNetCore.Http.ISession, System.String)
// docid: M:Microsoft.AspNetCore.Http.SessionExtensions.Get(Microsoft.AspNetCore.Http.ISession,System.String)
    /**
    
            Gets a byte-array value from .
            

    - Parameter session: The .
    - Parameter key: The key to read.
    */
    public static func Get(session : aspnetcore.Microsoft.AspNetCore.Http.ISession, key : dotnet.System.String) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_SessionExtensions_u8Array__Get_0__2__ISession_String(&__thrown, session.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // SessionExtensions


}
// Microsoft.AspNetCore.Http.Extensions
extension Microsoft.AspNetCore.Http.Extensions {
// type: Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions
public struct HttpRequestMultipartExtensions {
    // System.String GetMultipartBoundary(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions.GetMultipartBoundary(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Gets the mutipart boundary from the Content-Type header.
            

    - Parameter request: The .
    - Returns: The multipart boundary.

    */
    public static func GetMultipartBoundary(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_HttpRequestMultipartExtensions_String__GetMultipartBoundary_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // HttpRequestMultipartExtensions


// type: Microsoft.AspNetCore.Http.Extensions.QueryBuilder
    /**
    
            Allows constructing a query string.
            

    */
open class QueryBuilder
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Extensions_QueryBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    /**
    
            Initializes a new instance of .
            

    - Parameter parameters: The parameters to initialize the instance with.
    */
    public init(parameters : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, parameters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>)
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
    /**
    
            Initializes a new instance of .
            

    - Parameter parameters: The parameters to initialize the instance with.
    */
    public init(parameters : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues__(&__thrown, parameters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.Add(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a query string token to the instance.
            

    - Parameter key: The query key.
    - Parameter values: The sequence of query values.
    */
    open func Add(key : dotnet.System.String, values : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Extensions_QueryBuilder_void__Add_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), key.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.Add(System.String,System.String)
    /**
    
            Adds a query string token to the instance.
            

    - Parameter key: The query key.
    - Parameter value: The query value.
    */
    open func Add(key : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Extensions_QueryBuilder_void__Add_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString ToQueryString()
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.ToQueryString
    /**
    
            Constructs a  from this .
            

    - Returns: The .

    */
    open func ToQueryString() throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_QueryString__ToQueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.String>> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.Extensions.QueryBuilder.GetEnumerator
    /**
    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_QueryBuilder_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // QueryBuilder


// type: Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation
public struct StreamCopyOperation {
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.IO.Stream, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    Asynchronously reads the given number of bytes from the source stream and writes them to another stream.

    - Parameter source: The stream from which the contents will be copied.
    - Parameter destination: The stream to which the contents of the current stream will be copied.
    - Parameter count: The count of bytes to be copied.
    - Parameter cancel: The token to monitor for cancellation requests. The default value is .
    - Returns: A task that represents the asynchronous copy operation.

    */
    public static func CopyToAsync(source : dotnet.System.IO.Stream, destination : dotnet.System.IO.Stream, count : Optional<Swift.Int64>, cancel : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_StreamCopyOperation_Task__CopyToAsync_0__4__Stream_Stream_System_Nullable_i64__CancellationToken(&__thrown, source.get_handle(), destination.get_handle(), (count != nil) ? System_Int64_box(count!) : nil, cancel.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.IO.Stream, System.Nullable<System.Int64>, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)
    /**
    Asynchronously reads the given number of bytes from the source stream and writes them to another stream, using a specified buffer size.

    - Parameter source: The stream from which the contents will be copied.
    - Parameter destination: The stream to which the contents of the current stream will be copied.
    - Parameter count: The count of bytes to be copied.
    - Parameter bufferSize: The size, in bytes, of the buffer. This value must be greater than zero. The default size is 4096.
    - Parameter cancel: The token to monitor for cancellation requests. The default value is .
    - Returns: A task that represents the asynchronous copy operation.

    */
    public static func CopyToAsync(source : dotnet.System.IO.Stream, destination : dotnet.System.IO.Stream, count : Optional<Swift.Int64>, bufferSize : Swift.Int32, cancel : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_StreamCopyOperation_Task__CopyToAsync_0__5__Stream_Stream_System_Nullable_i64__i32_CancellationToken(&__thrown, source.get_handle(), destination.get_handle(), (count != nil) ? System_Int64_box(count!) : nil, bufferSize, cancel.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // StreamCopyOperation


// type: Microsoft.AspNetCore.Http.Extensions.UriHelper
public struct UriHelper {
    // System.String BuildRelative(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.BuildRelative(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.FragmentString)
    /**
    
            Combines the given URI components into a string that is properly encoded for use in HTTP headers.
            

    - Parameter pathBase: The first portion of the request path associated with application root.
    - Parameter path: The portion of the request path that identifies the requested resource.
    - Parameter query: The query, if any.
    - Parameter fragment: The fragment, if any.
    - Returns: The combined URI components, properly encoded for use in HTTP headers.

    */
    public static func BuildRelative(pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, path : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, query : aspnetcore.Microsoft.AspNetCore.Http.QueryString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__BuildRelative_0__4__PathString_PathString_QueryString_FragmentString(&__thrown, pathBase.get_handle(), path.get_handle(), query.get_handle(), fragment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String BuildAbsolute(System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.BuildAbsolute(System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.FragmentString)
    /**
    
            Combines the given URI components into a string that is properly encoded for use in HTTP headers.
            Note that unicode in the HostString will be encoded as punycode.
            

    - Parameter scheme: http, https, etc.
    - Parameter host: The host portion of the uri normally included in the Host header. This may include the port.
    - Parameter pathBase: The first portion of the request path associated with application root.
    - Parameter path: The portion of the request path that identifies the requested resource.
    - Parameter query: The query, if any.
    - Parameter fragment: The fragment, if any.
    - Returns: The combined URI components, properly encoded for use in HTTP headers.

    */
    public static func BuildAbsolute(scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, path : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, query : aspnetcore.Microsoft.AspNetCore.Http.QueryString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__BuildAbsolute_0__6__String_HostString_PathString_PathString_QueryString_FragmentString(&__thrown, scheme.get_handle(), host.get_handle(), pathBase.get_handle(), path.get_handle(), query.get_handle(), fragment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void FromAbsolute(System.String, ref System.String, ref Microsoft.AspNetCore.Http.HostString, ref Microsoft.AspNetCore.Http.PathString, ref Microsoft.AspNetCore.Http.QueryString, ref Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.FromAbsolute(System.String,System.String@,Microsoft.AspNetCore.Http.HostString@,Microsoft.AspNetCore.Http.PathString@,Microsoft.AspNetCore.Http.QueryString@,Microsoft.AspNetCore.Http.FragmentString@)
    /**
    
            Separates the given absolute URI string into components. Assumes no PathBase.
            

    - Parameter uri: A string representation of the uri.
    - Parameter scheme: http, https, etc.
    - Parameter host: The host portion of the uri normally included in the Host header. This may include the port.
    - Parameter path: The portion of the request path that identifies the requested resource.
    - Parameter query: The query, if any.
    - Parameter fragment: The fragment, if any.
    */
    public static func FromAbsolute(uri : dotnet.System.String, scheme : inout dotnet.System.String, host : inout aspnetcore.Microsoft.AspNetCore.Http.HostString, path : inout aspnetcore.Microsoft.AspNetCore.Http.PathString, query : inout aspnetcore.Microsoft.AspNetCore.Http.QueryString, fragment : inout aspnetcore.Microsoft.AspNetCore.Http.FragmentString) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_scheme = scheme.get_handle();
            var _tmp_out_host = host.get_handle();
            var _tmp_out_path = path.get_handle();
            var _tmp_out_query = query.get_handle();
            var _tmp_out_fragment = fragment.get_handle();
        Microsoft_AspNetCore_Http_Extensions_UriHelper_void__FromAbsolute_0__6__String_outString_outHostString_outPathString_outQueryString_outFragmentString(&__thrown, uri.get_handle(), &_tmp_out_scheme, &_tmp_out_host, &_tmp_out_path, &_tmp_out_query, &_tmp_out_fragment);
        let _tmp2_scheme = dotnet.System.String(hndl: _tmp_out_scheme);
            scheme = _tmp2_scheme;
        let _tmp2_host = aspnetcore.Microsoft.AspNetCore.Http.HostString(hndl: _tmp_out_host);
            host = _tmp2_host;
        let _tmp2_path = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_path);
            path = _tmp2_path;
        let _tmp2_query = aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl: _tmp_out_query);
            query = _tmp2_query;
        let _tmp2_fragment = aspnetcore.Microsoft.AspNetCore.Http.FragmentString(hndl: _tmp_out_fragment);
            fragment = _tmp2_fragment;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Encode(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.Encode(System.Uri)
    /**
    
            Generates a string from the given absolute or relative Uri that is appropriately encoded for use in
            HTTP headers. Note that a unicode host name will be encoded as punycode.
            

    - Parameter uri: The Uri to encode.
    - Returns: The encoded string version of .

    */
    public static func Encode(uri : dotnet.System.Uri) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__Encode_0__1__Uri(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetEncodedUrl(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedUrl(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Returns the combined components of the request URL in a fully escaped form suitable for use in HTTP headers
            and other HTTP operations.
            

    - Parameter request: The request to assemble the uri pieces from.
    - Returns: The encoded string version of the URL from .

    */
    public static func GetEncodedUrl(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__GetEncodedUrl_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetEncodedPathAndQuery(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedPathAndQuery(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Returns the relative URI.
            

    - Parameter request: The request to assemble the uri pieces from.
    - Returns: The path and query off of .

    */
    public static func GetEncodedPathAndQuery(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__GetEncodedPathAndQuery_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Returns the combined components of the request URL in a fully un-escaped form (except for the QueryString)
            suitable only for display. This format should not be used in HTTP headers or other HTTP operations.
            

    - Parameter request: The request to assemble the uri pieces from.
    - Returns: The combined components of the request URL in a fully un-escaped form (except for the QueryString)
            suitable only for display.

    */
    public static func GetDisplayUrl(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Extensions_UriHelper_String__GetDisplayUrl_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // UriHelper


}

// Microsoft.AspNetCore.Http.Headers
extension Microsoft.AspNetCore.Http.Headers {
// type: Microsoft.AspNetCore.Http.Headers.RequestHeaders
    /**
    
            Strongly typed HTTP request headers.
            

    */
open class RequestHeaders
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Headers_RequestHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.#ctor(Microsoft.AspNetCore.Http.IHeaderDictionary)
    /**
    
            Initializes a new instance of .
            

    - Parameter headers: The request headers.
    */
    public init(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Headers_RequestHeaders_ctor_0__1__IHeaderDictionary(&__thrown, headers.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T Get<T>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IList<T> GetList<T>(System.String)
    // void Set(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.Set(System.String,System.Object)
    /**
    
            Sets the header value.
            

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    open func Set(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__Set_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetList<T>(System.String, System.Collections.Generic.IList<T>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.SetList``1(System.String,System.Collections.Generic.IList{``0})
    /**
    
            Sets the specified header and it's values.
            

    - Parameter name: The header name.
    - Parameter values: The sequence of header values.
    */
    open func SetList<UT : SGBridgeGenericValue>(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__SetList_1__2__String_System_Collections_Generic_IList_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Append(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.Append(System.String,System.Object)
    /**
    
            Appends the header name and value.
            

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    open func Append(name : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__Append_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendList<T>(System.String, System.Collections.Generic.IList<T>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.AppendList``1(System.String,System.Collections.Generic.IList{``0})
    /**
    
            Appends the header name and it's values.
            

    - Parameter name: The header name.
    - Parameter values: The header values.
    */
    open func AppendList<UT : SGBridgeGenericValue>(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__AppendList_1__2__String_System_Collections_Generic_IList_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue> get_Accept()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Accept
    open func get_Accept() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue___get_Accept_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Accept(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Accept(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue})
    open func set_Accept(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Accept_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptCharset()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_AcceptCharset
    open func get_AcceptCharset() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptCharset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptCharset(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_AcceptCharset(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue})
    open func set_AcceptCharset(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_AcceptCharset_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptEncoding()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_AcceptEncoding
    open func get_AcceptEncoding() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptEncoding(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_AcceptEncoding(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue})
    open func set_AcceptEncoding(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_AcceptEncoding_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> get_AcceptLanguage()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_AcceptLanguage
    open func get_AcceptLanguage() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue___get_AcceptLanguage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptLanguage(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_AcceptLanguage(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue})
    open func set_AcceptLanguage(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_AcceptLanguage_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.CacheControlHeaderValue get_CacheControl()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_CacheControl
    open func get_CacheControl() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_CacheControlHeaderValue__get_CacheControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheControl(Microsoft.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_CacheControl(Microsoft.Net.Http.Headers.CacheControlHeaderValue)
    open func set_CacheControl(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_CacheControl_0__1__CacheControlHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.ContentDispositionHeaderValue get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_ContentDisposition
    open func get_ContentDisposition() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_ContentDispositionHeaderValue__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_ContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    open func set_ContentDisposition(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_ContentDisposition_0__1__ContentDispositionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_ContentLength
    open func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_ContentLength(System.Nullable{System.Int64})
    open func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.ContentRangeHeaderValue get_ContentRange()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_ContentRange
    open func get_ContentRange() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_ContentRangeHeaderValue__get_ContentRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRange(Microsoft.Net.Http.Headers.ContentRangeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_ContentRange(Microsoft.Net.Http.Headers.ContentRangeHeaderValue)
    open func set_ContentRange(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_ContentRange_0__1__ContentRangeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.MediaTypeHeaderValue get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_ContentType
    open func get_ContentType() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_MediaTypeHeaderValue__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_ContentType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    open func set_ContentType(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_ContentType_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue> get_Cookie()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Cookie
    open func get_Cookie() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue___get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookie(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Cookie(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.CookieHeaderValue})
    open func set_Cookie(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Cookie_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Date
    open func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Date(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Date(System.Nullable{System.DateTimeOffset})
    open func set_Date(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Date_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Expires()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Expires
    open func get_Expires() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_System_DateTimeOffset___get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expires(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Expires(System.Nullable{System.DateTimeOffset})
    open func set_Expires(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Expires_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HostString get_Host()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Host
    open func get_Host() throws -> aspnetcore.Microsoft.AspNetCore.Http.HostString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_HostString__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HostString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Host(Microsoft.AspNetCore.Http.HostString)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Host(Microsoft.AspNetCore.Http.HostString)
    open func set_Host(value : aspnetcore.Microsoft.AspNetCore.Http.HostString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Host_0__1__HostString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue> get_IfMatch()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_IfMatch
    open func get_IfMatch() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue___get_IfMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfMatch(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_IfMatch(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.EntityTagHeaderValue})
    open func set_IfMatch(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_IfMatch_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_IfModifiedSince()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_IfModifiedSince
    open func get_IfModifiedSince() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_System_DateTimeOffset___get_IfModifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_IfModifiedSince(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_IfModifiedSince(System.Nullable{System.DateTimeOffset})
    open func set_IfModifiedSince(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_IfModifiedSince_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue> get_IfNoneMatch()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_IfNoneMatch
    open func get_IfNoneMatch() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue___get_IfNoneMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfNoneMatch(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_IfNoneMatch(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.EntityTagHeaderValue})
    open func set_IfNoneMatch(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_IfNoneMatch_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.RangeConditionHeaderValue get_IfRange()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_IfRange
    open func get_IfRange() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_RangeConditionHeaderValue__get_IfRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_IfRange(Microsoft.Net.Http.Headers.RangeConditionHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_IfRange(Microsoft.Net.Http.Headers.RangeConditionHeaderValue)
    open func set_IfRange(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_IfRange_0__1__RangeConditionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_IfUnmodifiedSince()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_IfUnmodifiedSince
    open func get_IfUnmodifiedSince() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_System_DateTimeOffset___get_IfUnmodifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_IfUnmodifiedSince(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_IfUnmodifiedSince(System.Nullable{System.DateTimeOffset})
    open func set_IfUnmodifiedSince(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_IfUnmodifiedSince_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_LastModified()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_LastModified
    open func get_LastModified() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_System_Nullable_System_DateTimeOffset___get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_LastModified(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_LastModified(System.Nullable{System.DateTimeOffset})
    open func set_LastModified(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_LastModified_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.RangeHeaderValue get_Range()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Range
    open func get_Range() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_RangeHeaderValue__get_Range_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Range(Microsoft.Net.Http.Headers.RangeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Range(Microsoft.Net.Http.Headers.RangeHeaderValue)
    open func set_Range(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Range_0__1__RangeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Referer()
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.get_Referer
    open func get_Referer() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_RequestHeaders_Uri__get_Referer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Referer(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.Headers.RequestHeaders.set_Referer(System.Uri)
    open func set_Referer(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_RequestHeaders_void__set_Referer_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the Accept header for an HTTP request.
            

    */
    open var Accept : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        get {
            return try! get_Accept();
        }
        set(v) {
            return try! set_Accept(value: v);
        }
    }
    /**
    
            Gets or sets the Accept-Charset header for an HTTP request.
            

    */
    open var AcceptCharset : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptCharset();
        }
        set(v) {
            return try! set_AcceptCharset(value: v);
        }
    }
    /**
    
            Gets or sets the Accept-Encoding header for an HTTP request.
            

    */
    open var AcceptEncoding : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptEncoding();
        }
        set(v) {
            return try! set_AcceptEncoding(value: v);
        }
    }
    /**
    
            Gets or sets the Accept-Language header for an HTTP request.
            

    */
    open var AcceptLanguage : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        get {
            return try! get_AcceptLanguage();
        }
        set(v) {
            return try! set_AcceptLanguage(value: v);
        }
    }
    /**
    
            Gets or sets the Cache-Control header for an HTTP request.
            

    */
    open var CacheControl : Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue> {
        get {
            return try! get_CacheControl();
        }
        set(v) {
            return try! set_CacheControl(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Disposition header for an HTTP request.
            

    */
    open var ContentDisposition : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        get {
            return try! get_ContentDisposition();
        }
        set(v) {
            return try! set_ContentDisposition(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Length header for an HTTP request.
            

    */
    open var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Range header for an HTTP request.
            

    */
    open var ContentRange : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue> {
        get {
            return try! get_ContentRange();
        }
        set(v) {
            return try! set_ContentRange(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Type header for an HTTP request.
            

    */
    open var ContentType : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets or sets the Cookie header for an HTTP request.
            

    */
    open var Cookie : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue> {
        get {
            return try! get_Cookie();
        }
        set(v) {
            return try! set_Cookie(value: v);
        }
    }
    /**
    
            Gets or sets the Date header for an HTTP request.
            

    */
    open var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
        set(v) {
            return try! set_Date(value: v!);
        }
    }
    /**
    
            Gets or sets the Expires header for an HTTP request.
            

    */
    open var Expires : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Expires();
        }
        set(v) {
            return try! set_Expires(value: v!);
        }
    }
    /**
    
            Gets the backing request header dictionary.
            

    */
    open var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
    }
    /**
    
            Gets or sets the Host header for an HTTP request.
            

    */
    open var Host : aspnetcore.Microsoft.AspNetCore.Http.HostString {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v);
        }
    }
    /**
    
            Gets or sets the If-Match header for an HTTP request.
            

    */
    open var IfMatch : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_IfMatch();
        }
        set(v) {
            return try! set_IfMatch(value: v);
        }
    }
    /**
    
            Gets or sets the If-Modified-Since header for an HTTP request.
            

    */
    open var IfModifiedSince : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_IfModifiedSince();
        }
        set(v) {
            return try! set_IfModifiedSince(value: v!);
        }
    }
    /**
    
            Gets or sets the If-None-Match header for an HTTP request.
            

    */
    open var IfNoneMatch : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_IfNoneMatch();
        }
        set(v) {
            return try! set_IfNoneMatch(value: v);
        }
    }
    /**
    
            Gets or sets the If-Range header for an HTTP request.
            

    */
    open var IfRange : Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue> {
        get {
            return try! get_IfRange();
        }
        set(v) {
            return try! set_IfRange(value: v!);
        }
    }
    /**
    
            Gets or sets the If-Unmodified-Since header for an HTTP request.
            

    */
    open var IfUnmodifiedSince : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_IfUnmodifiedSince();
        }
        set(v) {
            return try! set_IfUnmodifiedSince(value: v!);
        }
    }
    /**
    
            Gets or sets the Last-Modified header for an HTTP request.
            

    */
    open var LastModified : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_LastModified();
        }
        set(v) {
            return try! set_LastModified(value: v!);
        }
    }
    /**
    
            Gets or sets the Range header for an HTTP request.
            

    */
    open var Range : Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue> {
        get {
            return try! get_Range();
        }
        set(v) {
            return try! set_Range(value: v!);
        }
    }
    /**
    
            Gets or sets the Referer header for an HTTP request.
            

    */
    open var Referer : Optional<dotnet.System.Uri> {
        get {
            return try! get_Referer();
        }
        set(v) {
            return try! set_Referer(value: v!);
        }
    }
} // RequestHeaders


// type: Microsoft.AspNetCore.Http.Headers.ResponseHeaders
    /**
    
            Strongly typed HTTP response headers.
            

    */
open class ResponseHeaders
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Headers_ResponseHeaders_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.#ctor(Microsoft.AspNetCore.Http.IHeaderDictionary)
    /**
    
            Initializes a new instance of .
            

    - Parameter headers: The request headers.
    */
    public init(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_ctor_0__1__IHeaderDictionary(&__thrown, headers.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T Get<T>(System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IList<T> GetList<T>(System.String)
    // void Set(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.Set(System.String,System.Object)
    /**
    
            Sets the header value.
            

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    open func Set(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__Set_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetList<T>(System.String, System.Collections.Generic.IList<T>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.SetList``1(System.String,System.Collections.Generic.IList{``0})
    /**
    
            Sets the specified header and it's values.
            

    - Parameter name: The header name.
    - Parameter values: The sequence of header values.
    */
    open func SetList<UT : SGBridgeGenericValue>(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__SetList_1__2__String_System_Collections_Generic_IList_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Append(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.Append(System.String,System.Object)
    /**
    
            Appends the header name and value.
            

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    open func Append(name : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__Append_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendList<T>(System.String, System.Collections.Generic.IList<T>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.AppendList``1(System.String,System.Collections.Generic.IList{``0})
    /**
    
            Appends the header name and it's values.
            

    - Parameter name: The header name.
    - Parameter values: The header values.
    */
    open func AppendList<UT : SGBridgeGenericValue>(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__AppendList_1__2__String_System_Collections_Generic_IList_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.CacheControlHeaderValue get_CacheControl()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_CacheControl
    open func get_CacheControl() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_CacheControlHeaderValue__get_CacheControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheControl(Microsoft.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_CacheControl(Microsoft.Net.Http.Headers.CacheControlHeaderValue)
    open func set_CacheControl(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_CacheControl_0__1__CacheControlHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.ContentDispositionHeaderValue get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_ContentDisposition
    open func get_ContentDisposition() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_ContentDispositionHeaderValue__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_ContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    open func set_ContentDisposition(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_ContentDisposition_0__1__ContentDispositionHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_ContentLength
    open func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_ContentLength(System.Nullable{System.Int64})
    open func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.ContentRangeHeaderValue get_ContentRange()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_ContentRange
    open func get_ContentRange() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_ContentRangeHeaderValue__get_ContentRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRange(Microsoft.Net.Http.Headers.ContentRangeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_ContentRange(Microsoft.Net.Http.Headers.ContentRangeHeaderValue)
    open func set_ContentRange(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_ContentRange_0__1__ContentRangeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.MediaTypeHeaderValue get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_ContentType
    open func get_ContentType() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_MediaTypeHeaderValue__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_ContentType(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    open func set_ContentType(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_ContentType_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Date()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_Date
    open func get_Date() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_System_Nullable_System_DateTimeOffset___get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Date(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_Date(System.Nullable{System.DateTimeOffset})
    open func set_Date(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_Date_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.EntityTagHeaderValue get_ETag()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_ETag
    open func get_ETag() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_EntityTagHeaderValue__get_ETag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ETag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_ETag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    open func set_ETag(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_ETag_0__1__EntityTagHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Expires()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_Expires
    open func get_Expires() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_System_Nullable_System_DateTimeOffset___get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expires(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_Expires(System.Nullable{System.DateTimeOffset})
    open func set_Expires(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_Expires_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_LastModified()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_LastModified
    open func get_LastModified() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_System_Nullable_System_DateTimeOffset___get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_LastModified(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_LastModified(System.Nullable{System.DateTimeOffset})
    open func set_LastModified(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_LastModified_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Location()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_Location
    open func get_Location() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_Uri__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Location(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_Location(System.Uri)
    open func set_Location(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_Location_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue> get_SetCookie()
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.get_SetCookie
    open func get_SetCookie() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Headers_ResponseHeaders_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue___get_SetCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SetCookie(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue>)
// docid: M:Microsoft.AspNetCore.Http.Headers.ResponseHeaders.set_SetCookie(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.SetCookieHeaderValue})
    open func set_SetCookie(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Headers_ResponseHeaders_void__set_SetCookie_0__1__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the Cache-Control header for an HTTP response.
            

    */
    open var CacheControl : Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue> {
        get {
            return try! get_CacheControl();
        }
        set(v) {
            return try! set_CacheControl(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Disposition header for an HTTP response.
            

    */
    open var ContentDisposition : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        get {
            return try! get_ContentDisposition();
        }
        set(v) {
            return try! set_ContentDisposition(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Length header for an HTTP response.
            

    */
    open var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Range header for an HTTP response.
            

    */
    open var ContentRange : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue> {
        get {
            return try! get_ContentRange();
        }
        set(v) {
            return try! set_ContentRange(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Type header for an HTTP response.
            

    */
    open var ContentType : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets or sets the Date header for an HTTP response.
            

    */
    open var Date : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Date();
        }
        set(v) {
            return try! set_Date(value: v!);
        }
    }
    /**
    
            Gets or sets the ETag header for an HTTP response.
            

    */
    open var ETag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_ETag();
        }
        set(v) {
            return try! set_ETag(value: v!);
        }
    }
    /**
    
            Gets or sets the Expires header for an HTTP response.
            

    */
    open var Expires : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Expires();
        }
        set(v) {
            return try! set_Expires(value: v!);
        }
    }
    /**
    
            Gets the backing response header dictionary.
            

    */
    open var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
    }
    /**
    
            Gets or sets the Last-Modified header for an HTTP response.
            

    */
    open var LastModified : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_LastModified();
        }
        set(v) {
            return try! set_LastModified(value: v!);
        }
    }
    /**
    
            Gets or sets the Location header for an HTTP response.
            

    */
    open var Location : Optional<dotnet.System.Uri> {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v!);
        }
    }
    /**
    
            Gets or sets the Set-Cookie header for an HTTP response.
            

    */
    open var SetCookie : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue> {
        get {
            return try! get_SetCookie();
        }
        set(v) {
            return try! set_SetCookie(value: v);
        }
    }
} // ResponseHeaders


}

// Microsoft.AspNetCore.Http.Json
extension Microsoft.AspNetCore.Http.Json {
// type: Microsoft.AspNetCore.Http.Json.JsonOptions
    /**
    
            Options to configure JSON serialization settings for 
            and .
            

    */
open class JsonOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Json_JsonOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Json.JsonOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Json_JsonOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Json.JsonSerializerOptions get_SerializerOptions()
// docid: M:Microsoft.AspNetCore.Http.Json.JsonOptions.get_SerializerOptions
    open func get_SerializerOptions() throws -> dotnet.System.Text.Json.JsonSerializerOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Json_JsonOptions_JsonSerializerOptions__get_SerializerOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonSerializerOptions(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var SerializerOptions : dotnet.System.Text.Json.JsonSerializerOptions {
        get {
            return try! get_SerializerOptions();
        }
    }
} // JsonOptions


}


// Microsoft.AspNetCore.Mvc
extension Microsoft.AspNetCore.Mvc {
// type: Microsoft.AspNetCore.Mvc.ProblemDetails
    /**
    
            A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
            

    */
open class ProblemDetails
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ProblemDetails_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProblemDetails_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProblemDetails_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Title()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Title
    open func get_Title() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_String__get_Title_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Title(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.set_Title(System.String)
    open func set_Title(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProblemDetails_void__set_Title_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Status()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Status
    open func get_Status() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_System_Nullable_i32___get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Status(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.set_Status(System.Nullable{System.Int32})
    open func set_Status(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProblemDetails_void__set_Status_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Detail()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Detail
    open func get_Detail() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_String__get_Detail_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Detail(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.set_Detail(System.String)
    open func set_Detail(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProblemDetails_void__set_Detail_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Instance()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Instance
    open func get_Instance() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_String__get_Instance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Instance(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.set_Instance(System.String)
    open func set_Instance(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProblemDetails_void__set_Instance_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Extensions()
// docid: M:Microsoft.AspNetCore.Mvc.ProblemDetails.get_Extensions
    open func get_Extensions() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProblemDetails_System_Collections_Generic_IDictionary_string_object___get_Extensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            A human-readable explanation specific to this occurrence of the problem.
            

    */
    open var Detail : Optional<dotnet.System.String> {
        get {
            return try! get_Detail();
        }
        set(v) {
            return try! set_Detail(value: v!);
        }
    }
    /**
    
            Gets the  for extension members.
            
            Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
            other members of a problem type.
            
            

    */
    open var Extensions : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Extensions();
        }
    }
    /**
    
            A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
            

    */
    open var Instance : Optional<dotnet.System.String> {
        get {
            return try! get_Instance();
        }
        set(v) {
            return try! set_Instance(value: v!);
        }
    }
    /**
    
            The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
            

    */
    open var Status : Optional<Swift.Int32> {
        get {
            return try! get_Status();
        }
        set(v) {
            return try! set_Status(value: v!);
        }
    }
    /**
    
            A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
            of the problem, except for purposes of localization(e.g., using proactive content negotiation;
            see[RFC7231], Section 3.4).
            

    */
    open var Title : Optional<dotnet.System.String> {
        get {
            return try! get_Title();
        }
        set(v) {
            return try! set_Title(value: v!);
        }
    }
    /**
    
            A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
            dereferenced, it provide human-readable documentation for the problem type
            (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
            "about:blank".
            

    */
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // ProblemDetails


}



// EXTENSION METHOD System.String GetMultipartBoundary(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetMultipartBoundary() throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions.GetMultipartBoundary(request: self);
    }
}

// EXTENSION METHOD System.String GetEncodedUrl(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetEncodedUrl() throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedUrl(request: self);
    }
}

// EXTENSION METHOD System.String GetEncodedPathAndQuery(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetEncodedPathAndQuery() throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedPathAndQuery(request: self);
    }
}

// EXTENSION METHOD System.String GetDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetDisplayUrl() throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(request: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Http.Headers.RequestHeaders GetTypedHeaders(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetTypedHeaders() throws -> aspnetcore.Microsoft.AspNetCore.Http.Headers.RequestHeaders {
        return try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(request: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Http.Headers.ResponseHeaders GetTypedHeaders(Microsoft.AspNetCore.Http.HttpResponse)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func GetTypedHeaders() throws -> aspnetcore.Microsoft.AspNetCore.Http.Headers.ResponseHeaders {
        return try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(response: self);
    }
}

// EXTENSION METHOD void AppendList<T>(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.Collections.Generic.IList<T>)
extension Microsoft_AspNetCore_Http_IHeaderDictionary {
    public func AppendList<UT : SGBridgeGenericValue>(name : dotnet.System.String, values : dotnet.System.Collections.Generic.IList_1<UT>) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.AppendList(Headers: aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl: __copy_handle(self.get_handle())), name: name, values: values);
    }
}

// EXTENSION METHOD System.String GetServerVariable(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetServerVariable(variableName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpContextServerVariableExtensions.GetServerVariable(context: self, variableName: variableName);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> ReadFromJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpRequest, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.ValueTask<System.Object> ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest, System.Type, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func ReadFromJsonAsync(type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(request: self, type: type, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<System.Object> ReadFromJsonAsync(Microsoft.AspNetCore.Http.HttpRequest, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func ReadFromJsonAsync(type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(request: self, type: type, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD bool HasJsonContentType(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func HasJsonContentType() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.HasJsonContentType(request: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync<TValue>(Microsoft.AspNetCore.Http.HttpResponse, TValue, System.Text.Json.JsonSerializerOptions, System.String, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, contentType : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, options: options, contentType: contentType, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync(value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, type: type, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync(value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, type: type, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsJsonAsync(Microsoft.AspNetCore.Http.HttpResponse, System.Object, System.Type, System.Text.Json.JsonSerializerOptions, System.String, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsJsonAsync(value : Optional<dotnet.System.Object>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, contentType : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.HttpResponseJsonExtensions.WriteAsJsonAsync(response: self, value: value, type: type, options: options, contentType: contentType, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD void Clear(Microsoft.AspNetCore.Http.HttpResponse)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func Clear() throws {
        try aspnetcore.Microsoft.AspNetCore.Http.ResponseExtensions.Clear(response: self);
    }
}

// EXTENSION METHOD void Redirect(Microsoft.AspNetCore.Http.HttpResponse, System.String, bool, bool)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func Redirect(location : dotnet.System.String, permanent : Bool, preserveMethod : Bool) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.ResponseExtensions.Redirect(response: self, location: location, permanent: permanent, preserveMethod: preserveMethod);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, Microsoft.Extensions.FileProviders.IFileInfo, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func SendFileAsync(file : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(response: self, file: file, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, Microsoft.Extensions.FileProviders.IFileInfo, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func SendFileAsync(file : aspnetcore.Microsoft.Extensions.FileProviders.IFileInfo, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(response: self, file: file, offset: offset, count: count, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func SendFileAsync(fileName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(response: self, fileName: fileName, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func SendFileAsync(fileName : dotnet.System.String, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(response: self, fileName: fileName, offset: offset, count: count, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD void SetInt32(Microsoft.AspNetCore.Http.ISession, System.String, System.Int32)
extension Microsoft_AspNetCore_Http_ISession {
    public func SetInt32(key : dotnet.System.String, value : Swift.Int32) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.SessionExtensions.SetInt32(session: aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl: __copy_handle(self.get_handle())), key: key, value: value);
    }
}

// EXTENSION METHOD System.Nullable<System.Int32> GetInt32(Microsoft.AspNetCore.Http.ISession, System.String)
extension Microsoft_AspNetCore_Http_ISession {
    public func GetInt32(key : dotnet.System.String) throws -> Optional<Swift.Int32> {
        return try aspnetcore.Microsoft.AspNetCore.Http.SessionExtensions.GetInt32(session: aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl: __copy_handle(self.get_handle())), key: key);
    }
}

// EXTENSION METHOD void SetString(Microsoft.AspNetCore.Http.ISession, System.String, System.String)
extension Microsoft_AspNetCore_Http_ISession {
    public func SetString(key : dotnet.System.String, value : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.SessionExtensions.SetString(session: aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl: __copy_handle(self.get_handle())), key: key, value: value);
    }
}

// EXTENSION METHOD System.String GetString(Microsoft.AspNetCore.Http.ISession, System.String)
extension Microsoft_AspNetCore_Http_ISession {
    public func GetString(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Http.SessionExtensions.GetString(session: aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl: __copy_handle(self.get_handle())), key: key);
    }
}

// EXTENSION METHOD System.Byte[] Get(Microsoft.AspNetCore.Http.ISession, System.String)
extension Microsoft_AspNetCore_Http_ISession {
    public func Get(key : dotnet.System.String) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        return try aspnetcore.Microsoft.AspNetCore.Http.SessionExtensions.Get(session: aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl: __copy_handle(self.get_handle())), key: key);
    }
}

