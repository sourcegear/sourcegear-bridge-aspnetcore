// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Logging
extension Microsoft.Extensions.Logging {
// type: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
public struct ConsoleLoggerExtensions {
    // Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Adds a console logger named 'Console' to the factory.
            

    - Parameter builder: The  to use.
    */
    public static func AddConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddConsole_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions})
    /**
    
            Adds a console logger named 'Console' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter configure: A delegate to configure the .
    */
    public static func AddConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddConsole_0__2__ILoggingBuilder_System_Action_Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>(configure);
        return try AddConsole(builder: builder, configure: del_configure);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<TOptions>)
    // Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Add a console log formatter named 'json' to the factory with default properties.
            

    - Parameter builder: The  to use.
    */
    public static func AddJsonConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddJsonConsole_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions})
    /**
    
            Add and configure a console log formatter named 'json' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter configure: A delegate to configure the  options for the built-in json log formatter.
    */
    public static func AddJsonConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddJsonConsole_0__2__ILoggingBuilder_System_Action_Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddJsonConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>(configure);
        return try AddJsonConsole(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Add the default console log formatter named 'simple' to the factory with default properties.
            

    - Parameter builder: The  to use.
    */
    public static func AddSimpleConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddSimpleConsole_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions})
    /**
    
            Add and configure a console log formatter named 'simple' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter configure: A delegate to configure the  options for the built-in default log formatter.
    */
    public static func AddSimpleConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddSimpleConsole_0__2__ILoggingBuilder_System_Action_Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddSimpleConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>(configure);
        return try AddSimpleConsole(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Add a console log formatter named 'systemd' to the factory with default properties.
            

    - Parameter builder: The  to use.
    */
    public static func AddSystemdConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddSystemdConsole_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>)
// docid: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions})
    /**
    
            Add and configure a console log formatter named 'systemd' to the factory.
            

    - Parameter builder: The  to use.
    - Parameter configure: A delegate to configure the  options for the built-in systemd log formatter.
    */
    public static func AddSystemdConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_ConsoleLoggerExtensions_ILoggingBuilder__AddSystemdConsole_0__2__ILoggingBuilder_System_Action_Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddSystemdConsole(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>(configure);
        return try AddSystemdConsole(builder: builder, configure: del_configure);
    }
} // ConsoleLoggerExtensions


}
// Microsoft.Extensions.Logging.Console
extension Microsoft.Extensions.Logging.Console {
// type: Microsoft.Extensions.Logging.Console.ConsoleFormatter
    /**
    
            Allows custom log messages formatting
            

    */
open class ConsoleFormatter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_ConsoleFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_ConsoleFormatter_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void Write<TState>(ref Microsoft.Extensions.Logging.Abstractions.LogEntry<TState>, Microsoft.Extensions.Logging.IExternalScopeProvider, System.IO.TextWriter)
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatter.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleFormatter_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the name associated with the console log formatter.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConsoleFormatter


// type: Microsoft.Extensions.Logging.Console.ConsoleFormatterNames
public struct ConsoleFormatterNames {
    // static field: System.String Json
    /**
    
            Reserved name for json console formatter
            

    */
    public static var Json : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_Extensions_Logging_Console_ConsoleFormatterNames_get_Json();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // static field: System.String Simple
    /**
    
            Reserved name for simple console formatter
            

    */
    public static var Simple : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_Extensions_Logging_Console_ConsoleFormatterNames_get_Simple();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // static field: System.String Systemd
    /**
    
            Reserved name for systemd console formatter
            

    */
    public static var Systemd : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_Extensions_Logging_Console_ConsoleFormatterNames_get_Systemd();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
} // ConsoleFormatterNames


// type: Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions
    /**
    
            Options for the built-in console log formatter.
            

    */
open class ConsoleFormatterOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IncludeScopes()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.get_IncludeScopes
    open func get_IncludeScopes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_bool__get_IncludeScopes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeScopes(bool)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.set_IncludeScopes(System.Boolean)
    open func set_IncludeScopes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_void__set_IncludeScopes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TimestampFormat()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.get_TimestampFormat
    open func get_TimestampFormat() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_String__get_TimestampFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TimestampFormat(System.String)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.set_TimestampFormat(System.String)
    open func set_TimestampFormat(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_void__set_TimestampFormat_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseUtcTimestamp()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.get_UseUtcTimestamp
    open func get_UseUtcTimestamp() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_bool__get_UseUtcTimestamp_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseUtcTimestamp(bool)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions.set_UseUtcTimestamp(System.Boolean)
    open func set_UseUtcTimestamp(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleFormatterOptions_void__set_UseUtcTimestamp_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Includes scopes when .
            

    */
    open var IncludeScopes : Bool {
        get {
            return try! get_IncludeScopes();
        }
        set(v) {
            return try! set_IncludeScopes(value: v);
        }
    }
    /**
    
            Gets or sets format string used to format timestamp in logging messages. Defaults to null.
            

    */
    open var TimestampFormat : Optional<dotnet.System.String> {
        get {
            return try! get_TimestampFormat();
        }
        set(v) {
            return try! set_TimestampFormat(value: v!);
        }
    }
    /**
    
            Gets or sets indication whether or not UTC timezone should be used to for timestamps in logging messages. Defaults to false.
            

    */
    open var UseUtcTimestamp : Bool {
        get {
            return try! get_UseUtcTimestamp();
        }
        set(v) {
            return try! set_UseUtcTimestamp(value: v);
        }
    }
} // ConsoleFormatterOptions


// type: Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat
    /**
    
            Format of  messages.
            

    */
public struct ConsoleLoggerFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_ConsoleLoggerFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat Default
    /**
    
            Produces messages in the default console format.
            

    */
    public static var Default : aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat(val: Microsoft_Extensions_Logging_Console_ConsoleLoggerFormat_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat Systemd
    /**
    
            Produces messages in a format suitable for console output to the systemd journal.
            

    */
    public static var Systemd : aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat(val: Microsoft_Extensions_Logging_Console_ConsoleLoggerFormat_get_Systemd());
            return __return;
        }
    }
} // ConsoleLoggerFormat


// type: Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions
    /**
    
            Options for a .
            

    */
open class ConsoleLoggerOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_DisableColors()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_DisableColors
    open func get_DisableColors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_bool__get_DisableColors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DisableColors(bool)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_DisableColors(System.Boolean)
    open func set_DisableColors(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_DisableColors_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat get_Format()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_Format
    open func get_Format() throws -> aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_ConsoleLoggerFormat__get_Format_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_Format(Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_Format(Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat)
    open func set_Format(value : aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_Format_0__1__ConsoleLoggerFormat(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FormatterName()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_FormatterName
    open func get_FormatterName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_String__get_FormatterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FormatterName(System.String)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_FormatterName(System.String)
    open func set_FormatterName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_FormatterName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludeScopes()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_IncludeScopes
    open func get_IncludeScopes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_bool__get_IncludeScopes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeScopes(bool)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_IncludeScopes(System.Boolean)
    open func set_IncludeScopes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_IncludeScopes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.LogLevel get_LogToStandardErrorThreshold()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_LogToStandardErrorThreshold
    open func get_LogToStandardErrorThreshold() throws -> aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_LogLevel__get_LogToStandardErrorThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.LogLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_LogToStandardErrorThreshold(Microsoft.Extensions.Logging.LogLevel)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_LogToStandardErrorThreshold(Microsoft.Extensions.Logging.LogLevel)
    open func set_LogToStandardErrorThreshold(value : aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_LogToStandardErrorThreshold_0__1__LogLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TimestampFormat()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_TimestampFormat
    open func get_TimestampFormat() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_String__get_TimestampFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TimestampFormat(System.String)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_TimestampFormat(System.String)
    open func set_TimestampFormat(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_TimestampFormat_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseUtcTimestamp()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.get_UseUtcTimestamp
    open func get_UseUtcTimestamp() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_bool__get_UseUtcTimestamp_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseUtcTimestamp(bool)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions.set_UseUtcTimestamp(System.Boolean)
    open func set_UseUtcTimestamp(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_void__set_UseUtcTimestamp_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Disables colors when .
            

    */
    open var DisableColors : Bool {
        get {
            return try! get_DisableColors();
        }
        set(v) {
            return try! set_DisableColors(value: v);
        }
    }
    /**
    
            Gets or sets log message format. Defaults to .
            

    */
    open var Format : aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat {
        get {
            return try! get_Format();
        }
        set(v) {
            return try! set_Format(value: v);
        }
    }
    /**
    
            Name of the log message formatter to use. Defaults to "simple" />.
            

    */
    open var FormatterName : Optional<dotnet.System.String> {
        get {
            return try! get_FormatterName();
        }
        set(v) {
            return try! set_FormatterName(value: v!);
        }
    }
    /**
    
            Includes scopes when .
            

    */
    open var IncludeScopes : Bool {
        get {
            return try! get_IncludeScopes();
        }
        set(v) {
            return try! set_IncludeScopes(value: v);
        }
    }
    /**
    
            Gets or sets value indicating the minimum level of messages that would get written to Console.Error.
            

    */
    open var LogToStandardErrorThreshold : aspnetcore.Microsoft.Extensions.Logging.LogLevel {
        get {
            return try! get_LogToStandardErrorThreshold();
        }
        set(v) {
            return try! set_LogToStandardErrorThreshold(value: v);
        }
    }
    /**
    
            Gets or sets format string used to format timestamp in logging messages. Defaults to null.
            

    */
    open var TimestampFormat : Optional<dotnet.System.String> {
        get {
            return try! get_TimestampFormat();
        }
        set(v) {
            return try! set_TimestampFormat(value: v!);
        }
    }
    /**
    
            Gets or sets indication whether or not UTC timezone should be used to for timestamps in logging messages. Defaults to false.
            

    */
    open var UseUtcTimestamp : Bool {
        get {
            return try! get_UseUtcTimestamp();
        }
        set(v) {
            return try! set_UseUtcTimestamp(value: v);
        }
    }
} // ConsoleLoggerOptions


// type: Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider
    /**
    
            A provider of  instances.
            

    */
open class ConsoleLoggerProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILoggerProvider,
    System_IDisposable,
    Microsoft_Extensions_Logging_ISupportExternalScope
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions})
    /**
    
            Creates an instance of .
            

    - Parameter options: The options to create  instances with.
    */
    public init(options : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_ctor_0__1__Microsoft_Extensions_Options_IOptionsMonitor_Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions_(&__thrown, (options?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.Logging.Console.ConsoleFormatter>)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.Console.ConsoleFormatter})
    /**
    
            Creates an instance of .
            

    - Parameter options: The options to create  instances with.
    - Parameter formatters: Log formatters added for  insteaces.
    */
    public init(options : Optional<aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>>, formatters : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatter>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_ctor_0__2__Microsoft_Extensions_Options_IOptionsMonitor_Microsoft_Extensions_Logging_Console_ConsoleLoggerOptions__System_Collections_Generic_IEnumerable_Microsoft_Extensions_Logging_Console_ConsoleFormatter_(&__thrown, (options?.get_handle()), (formatters?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider.CreateLogger(System.String)
    /**
    */
    open /* method final */ func CreateLogger(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
// docid: M:Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
    /**
    */
    open /* method final */ func SetScopeProvider(scopeProvider : Optional<aspnetcore.Microsoft.Extensions.Logging.IExternalScopeProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_ConsoleLoggerProvider_void__SetScopeProvider_0__1__IExternalScopeProvider(&__thrown, self.get_handle(), scopeProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConsoleLoggerProvider


// type: Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions
    /**
    
            Options for the built-in json console log formatter.
            

    */
open class JsonConsoleFormatterOptions
    :
    aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Json.JsonWriterOptions get_JsonWriterOptions()
// docid: M:Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions.get_JsonWriterOptions
    open func get_JsonWriterOptions() throws -> dotnet.System.Text.Json.JsonWriterOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_JsonWriterOptions__get_JsonWriterOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonWriterOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_JsonWriterOptions(System.Text.Json.JsonWriterOptions)
// docid: M:Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions.set_JsonWriterOptions(System.Text.Json.JsonWriterOptions)
    open func set_JsonWriterOptions(value : dotnet.System.Text.Json.JsonWriterOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_JsonConsoleFormatterOptions_void__set_JsonWriterOptions_0__1__JsonWriterOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets JsonWriterOptions.
            

    */
    open var JsonWriterOptions : dotnet.System.Text.Json.JsonWriterOptions {
        get {
            return try! get_JsonWriterOptions();
        }
        set(v) {
            return try! set_JsonWriterOptions(value: v);
        }
    }
} // JsonConsoleFormatterOptions


// type: Microsoft.Extensions.Logging.Console.LoggerColorBehavior
    /**
    
            Determines when to use color when logging messages.
            

    */
public struct LoggerColorBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_LoggerColorBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Extensions.Logging.Console.LoggerColorBehavior Default
    /**
    
            Use the default color behavior, enabling color except when the console output is redirected.
            

    */
    public static var Default : aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior(val: Microsoft_Extensions_Logging_Console_LoggerColorBehavior_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.Console.LoggerColorBehavior Enabled
    /**
    
            Enable color for logging
            

    */
    public static var Enabled : aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior(val: Microsoft_Extensions_Logging_Console_LoggerColorBehavior_get_Enabled());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Logging.Console.LoggerColorBehavior Disabled
    /**
    
            Disable color for logging
            

    */
    public static var Disabled : aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior(val: Microsoft_Extensions_Logging_Console_LoggerColorBehavior_get_Disabled());
            return __return;
        }
    }
} // LoggerColorBehavior


// type: Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions
    /**
    
            Options for the built-in default console log formatter.
            

    */
open class SimpleConsoleFormatterOptions
    :
    aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.Console.LoggerColorBehavior get_ColorBehavior()
// docid: M:Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions.get_ColorBehavior
    open func get_ColorBehavior() throws -> aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_LoggerColorBehavior__get_ColorBehavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior(val: __return);
        }
    }
    // [IsSpecialName] void set_ColorBehavior(Microsoft.Extensions.Logging.Console.LoggerColorBehavior)
// docid: M:Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions.set_ColorBehavior(Microsoft.Extensions.Logging.Console.LoggerColorBehavior)
    open func set_ColorBehavior(value : aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_void__set_ColorBehavior_0__1__LoggerColorBehavior(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SingleLine()
// docid: M:Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions.get_SingleLine
    open func get_SingleLine() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_bool__get_SingleLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SingleLine(bool)
// docid: M:Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions.set_SingleLine(System.Boolean)
    open func set_SingleLine(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Console_SimpleConsoleFormatterOptions_void__set_SingleLine_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Determines when to use color when logging messages.
            

    */
    open var ColorBehavior : aspnetcore.Microsoft.Extensions.Logging.Console.LoggerColorBehavior {
        get {
            return try! get_ColorBehavior();
        }
        set(v) {
            return try! set_ColorBehavior(value: v);
        }
    }
    /**
    
            When , the entire message gets logged in a single line.
            

    */
    open var SingleLine : Bool {
        get {
            return try! get_SingleLine();
        }
        set(v) {
            return try! set_SingleLine(value: v);
        }
    }
} // SimpleConsoleFormatterOptions


}




// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddConsole() throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddConsole(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddConsole(configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder)

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<TOptions>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter<TFormatter, TOptions>(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<TOptions>)

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddJsonConsole() throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddJsonConsole(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddJsonConsole(configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddSimpleConsole() throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddSimpleConsole(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddSimpleConsole(configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddSystemdConsole() throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddSystemdConsole(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddSystemdConsole(configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

