// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.Formatters
extension Microsoft.AspNetCore.Mvc.Formatters {
// type: Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter
    /**
    
            This class handles deserialization of input XML data
            to strongly-typed objects using .
            

    */
open class XmlDataContractSerializerInputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.#ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The .
    */
    public init(options : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_ctor_0__1__MvcOptions(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)
    /**
    */
    open override func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, encoding : dotnet.System.Text.Encoding) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__2__InputFormatterContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> get_WrapperProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.get_WrapperProviderFactories
    open func get_WrapperProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory___get_WrapperProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.get_MaxDepth
    open func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.set_MaxDepth(System.Int32)
    open func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.get_XmlDictionaryReaderQuotas
    open func get_XmlDictionaryReaderQuotas() throws -> dotnet.System.Xml.XmlDictionaryReaderQuotas {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_XmlDictionaryReaderQuotas__get_XmlDictionaryReaderQuotas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReaderQuotas(hndl : __return);
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DataContractSerializerSettings get_SerializerSettings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.get_SerializerSettings
    open func get_SerializerSettings() throws -> dotnet.System.Runtime.Serialization.DataContractSerializerSettings {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_DataContractSerializerSettings__get_SerializerSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.DataContractSerializerSettings(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SerializerSettings(System.Runtime.Serialization.DataContractSerializerSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.set_SerializerSettings(System.Runtime.Serialization.DataContractSerializerSettings)
    open func set_SerializerSettings(value : dotnet.System.Runtime.Serialization.DataContractSerializerSettings) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_void__set_SerializerSettings_0__1__DataContractSerializerSettings(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy get_ExceptionPolicy()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.get_ExceptionPolicy
    open func get_ExceptionPolicy() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerInputFormatter_InputFormatterExceptionPolicy__get_ExceptionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy(val: __return);
        }
    }
    /**
    */
    open var ExceptionPolicy : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        get {
            return try! get_ExceptionPolicy();
        }
    }
    /**
    
            Indicates the acceptable input XML depth.
            

    */
    open var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    /**
    
            Gets or sets the  used to configure the
            .
            

    */
    open var SerializerSettings : dotnet.System.Runtime.Serialization.DataContractSerializerSettings {
        get {
            return try! get_SerializerSettings();
        }
        set(v) {
            return try! set_SerializerSettings(value: v);
        }
    }
    /**
    
            Gets the list of  to
            provide the wrapping type for de-serialization.
            

    */
    open var WrapperProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        get {
            return try! get_WrapperProviderFactories();
        }
    }
    /**
    
            The quotas include - DefaultMaxDepth, DefaultMaxStringContentLength, DefaultMaxArrayLength,
            DefaultMaxBytesPerRead, DefaultMaxNameTableCharCount
            

    */
    open var XmlDictionaryReaderQuotas : dotnet.System.Xml.XmlDictionaryReaderQuotas {
        get {
            return try! get_XmlDictionaryReaderQuotas();
        }
    }
} // XmlDataContractSerializerInputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter
    /**
    
            This class handles serialization of objects
            to XML using 
            

    */
open class XmlDataContractSerializerOutputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.#ctor
    /**
    
            Initializes a new instance of 
            with default .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of 
            with default .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings)
    /**
    
            Initializes a new instance of .
            

    - Parameter writerSettings: The settings to be used by the .
    */
    public init(writerSettings : dotnet.System.Xml.XmlWriterSettings) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_ctor_0__1__XmlWriterSettings(&__thrown, writerSettings.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlWriterSettings, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter writerSettings: The settings to be used by the .
    - Parameter loggerFactory: The .
    */
    public init(writerSettings : dotnet.System.Xml.XmlWriterSettings, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_ctor_0__2__XmlWriterSettings_ILoggerFactory(&__thrown, writerSettings.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlWriter CreateXmlWriter(System.IO.TextWriter, System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CreateXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
    /**
    
            Creates a new instance of  using the given  and
            .
            

    - Parameter writer: 
            The underlying  which the  should write to.
            
    - Parameter xmlWriterSettings: 
            The .
            
    - Returns: A new instance of 

    */
    open func CreateXmlWriter(writer : dotnet.System.IO.TextWriter, xmlWriterSettings : dotnet.System.Xml.XmlWriterSettings) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_XmlWriter__CreateXmlWriter_0__2__TextWriter_XmlWriterSettings(&__thrown, self.get_handle(), writer.get_handle(), xmlWriterSettings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.IO.TextWriter, System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.IO.TextWriter,System.Xml.XmlWriterSettings)
    /**
    
            Creates a new instance of  using the given  and
            .
            

    - Parameter context: The formatter context associated with the call.
    - Parameter writer: 
            The underlying  which the  should write to.
            
    - Parameter xmlWriterSettings: 
            The .
            
    - Returns: A new instance of .

    */
    open func CreateXmlWriter(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, writer : dotnet.System.IO.TextWriter, xmlWriterSettings : dotnet.System.Xml.XmlWriterSettings) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_XmlWriter__CreateXmlWriter_0__3__OutputFormatterWriteContext_TextWriter_XmlWriterSettings(&__thrown, self.get_handle(), context.get_handle(), writer.get_handle(), xmlWriterSettings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)
    /**
    */
    open override func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, selectedEncoding : dotnet.System.Text.Encoding) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_Task__WriteResponseBodyAsync_0__2__OutputFormatterWriteContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), selectedEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> get_WrapperProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.get_WrapperProviderFactories
    open func get_WrapperProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory___get_WrapperProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlWriterSettings get_WriterSettings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.get_WriterSettings
    open func get_WriterSettings() throws -> dotnet.System.Xml.XmlWriterSettings {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_XmlWriterSettings__get_WriterSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriterSettings(hndl : __return);
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DataContractSerializerSettings get_SerializerSettings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.get_SerializerSettings
    open func get_SerializerSettings() throws -> dotnet.System.Runtime.Serialization.DataContractSerializerSettings {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_DataContractSerializerSettings__get_SerializerSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.DataContractSerializerSettings(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SerializerSettings(System.Runtime.Serialization.DataContractSerializerSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.set_SerializerSettings(System.Runtime.Serialization.DataContractSerializerSettings)
    open func set_SerializerSettings(value : dotnet.System.Runtime.Serialization.DataContractSerializerSettings) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_XmlDataContractSerializerOutputFormatter_void__set_SerializerSettings_0__1__DataContractSerializerSettings(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  used to configure the
            .
            

    */
    open var SerializerSettings : dotnet.System.Runtime.Serialization.DataContractSerializerSettings {
        get {
            return try! get_SerializerSettings();
        }
        set(v) {
            return try! set_SerializerSettings(value: v);
        }
    }
    /**
    
            Gets the list of  to
            provide the wrapping type for serialization.
            

    */
    open var WrapperProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        get {
            return try! get_WrapperProviderFactories();
        }
    }
    /**
    
            Gets the settings to be used by the XmlWriter.
            

    */
    open var WriterSettings : dotnet.System.Xml.XmlWriterSettings {
        get {
            return try! get_WriterSettings();
        }
    }
} // XmlDataContractSerializerOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter
    /**
    
            This class handles deserialization of input XML data
            to strongly-typed objects using 
            

    */
open class XmlSerializerInputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.#ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The .
    */
    public init(options : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_ctor_0__1__MvcOptions(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)
    /**
    */
    open override func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, encoding : dotnet.System.Text.Encoding) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__2__InputFormatterContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> get_WrapperProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.get_WrapperProviderFactories
    open func get_WrapperProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory___get_WrapperProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.get_MaxDepth
    open func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.set_MaxDepth(System.Int32)
    open func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.get_XmlDictionaryReaderQuotas
    open func get_XmlDictionaryReaderQuotas() throws -> dotnet.System.Xml.XmlDictionaryReaderQuotas {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_XmlDictionaryReaderQuotas__get_XmlDictionaryReaderQuotas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReaderQuotas(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy get_ExceptionPolicy()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.get_ExceptionPolicy
    open func get_ExceptionPolicy() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerInputFormatter_InputFormatterExceptionPolicy__get_ExceptionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy(val: __return);
        }
    }
    /**
    */
    open var ExceptionPolicy : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        get {
            return try! get_ExceptionPolicy();
        }
    }
    /**
    
            Indicates the acceptable input XML depth.
            

    */
    open var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    /**
    
            Gets the list of  to
            provide the wrapping type for de-serialization.
            

    */
    open var WrapperProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        get {
            return try! get_WrapperProviderFactories();
        }
    }
    /**
    
            The quotas include - DefaultMaxDepth, DefaultMaxStringContentLength, DefaultMaxArrayLength,
            DefaultMaxBytesPerRead, DefaultMaxNameTableCharCount
            

    */
    open var XmlDictionaryReaderQuotas : dotnet.System.Xml.XmlDictionaryReaderQuotas {
        get {
            return try! get_XmlDictionaryReaderQuotas();
        }
    }
} // XmlSerializerInputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter
    /**
    
            This class handles serialization of objects
            to XML using 
            

    */
open class XmlSerializerOutputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.#ctor
    /**
    
            Initializes a new instance of 
            with default .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of 
            with default .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings)
    /**
    
            Initializes a new instance of .
            

    - Parameter writerSettings: The settings to be used by the .
    */
    public init(writerSettings : dotnet.System.Xml.XmlWriterSettings) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_ctor_0__1__XmlWriterSettings(&__thrown, writerSettings.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlWriterSettings, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of 
            

    - Parameter writerSettings: The settings to be used by the .
    - Parameter loggerFactory: The .
    */
    public init(writerSettings : dotnet.System.Xml.XmlWriterSettings, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_ctor_0__2__XmlWriterSettings_ILoggerFactory(&__thrown, writerSettings.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlWriter CreateXmlWriter(System.IO.TextWriter, System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CreateXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
    /**
    
            Creates a new instance of  using the given  and
            .
            

    - Parameter writer: 
            The underlying  which the  should write to.
            
    - Parameter xmlWriterSettings: 
            The .
            
    - Returns: A new instance of .

    */
    open func CreateXmlWriter(writer : dotnet.System.IO.TextWriter, xmlWriterSettings : dotnet.System.Xml.XmlWriterSettings) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_XmlWriter__CreateXmlWriter_0__2__TextWriter_XmlWriterSettings(&__thrown, self.get_handle(), writer.get_handle(), xmlWriterSettings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Xml.XmlWriter CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.IO.TextWriter, System.Xml.XmlWriterSettings)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.IO.TextWriter,System.Xml.XmlWriterSettings)
    /**
    
            Creates a new instance of  using the given  and
            .
            

    - Parameter context: The formatter context associated with the call.
    - Parameter writer: 
            The underlying  which the  should write to.
            
    - Parameter xmlWriterSettings: 
            The .
            
    - Returns: A new instance of 

    */
    open func CreateXmlWriter(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, writer : dotnet.System.IO.TextWriter, xmlWriterSettings : dotnet.System.Xml.XmlWriterSettings) throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_XmlWriter__CreateXmlWriter_0__3__OutputFormatterWriteContext_TextWriter_XmlWriterSettings(&__thrown, self.get_handle(), context.get_handle(), writer.get_handle(), xmlWriterSettings.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)
    /**
    */
    open override func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, selectedEncoding : dotnet.System.Text.Encoding) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_Task__WriteResponseBodyAsync_0__2__OutputFormatterWriteContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), selectedEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> get_WrapperProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.get_WrapperProviderFactories
    open func get_WrapperProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory___get_WrapperProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlWriterSettings get_WriterSettings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.get_WriterSettings
    open func get_WriterSettings() throws -> dotnet.System.Xml.XmlWriterSettings {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_XmlSerializerOutputFormatter_XmlWriterSettings__get_WriterSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriterSettings(hndl : __return);
        }
    }
    /**
    
            Gets the list of  to
            provide the wrapping type for serialization.
            

    */
    open var WrapperProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory> {
        get {
            return try! get_WrapperProviderFactories();
        }
    }
    /**
    
            Gets the settings to be used by the XmlWriter.
            

    */
    open var WriterSettings : dotnet.System.Xml.XmlWriterSettings {
        get {
            return try! get_WriterSettings();
        }
    }
} // XmlSerializerOutputFormatter


}
// Microsoft.AspNetCore.Mvc.Formatters.Xml
extension Microsoft.AspNetCore.Mvc.Formatters.Xml {
// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
    /**
    
            Serializes  types by delegating them through a concrete implementation.
            

    */
open class DelegatingEnumerable_2<TWrapped : SGBridgeGenericValue,TDeclared : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerable_2_get_type_handle(TWrapped.get_type_handle(),TDeclared.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor
    /**
    
            Initializes a .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerable_2_ctor_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<TDeclared>, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
    /**
    
            Initializes a  with the original
              and the wrapper provider for wrapping individual elements.
            

    - Parameter source: The  instance to get the enumerator from.
    - Parameter elementWrapperProvider: The wrapper provider for wrapping individual elements.
    */
    public init(source : dotnet.System.Collections.Generic.IEnumerable_1<TDeclared>, elementWrapperProvider : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerable_2_ctor_0__2__System_Collections_Generic_IEnumerable_TDeclared__IWrapperProvider(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, source.get_handle(), elementWrapperProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerator<TWrapped> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.GetEnumerator
    /**
    
            Gets a delegating enumerator of the original  source which is being
            wrapped.
            

    - Returns: The delegating enumerator of the original  source.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TWrapped> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerable_2_System_Collections_Generic_IEnumerator_TWrapped___GetEnumerator_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // void Add(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.Add(System.Object)
    /**
    
            The serializer requires every type it encounters can be serialized and deserialized.
            This type will never be used for deserialization, but we are required to implement the add
            method so that the type can be serialized. This will never be called.
            

    - Parameter item: The item to add.
    */
    open func Add(item : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerable_2_void__Add_0__1__Object(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DelegatingEnumerable_2


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
    /**
    
            Delegates enumeration of elements to the original enumerator and wraps the items
            with the supplied .
            

    */
open class DelegatingEnumerator_2<TWrapped : SGBridgeGenericValue,TDeclared : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_get_type_handle(TWrapped.get_type_handle(),TDeclared.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerator<TDeclared>, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
    /**
    
            Initializes a  which enumerates
            over the elements of the original enumerator and wraps them using the supplied
            .
            

    - Parameter inner: The original enumerator.
    - Parameter wrapperProvider: The wrapper provider to wrap individual elements.
    */
    public init(inner : dotnet.System.Collections.Generic.IEnumerator_1<TDeclared>, wrapperProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_ctor_0__2__System_Collections_Generic_IEnumerator_TDeclared__IWrapperProvider(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, inner.get_handle(), wrapperProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_void__Dispose_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.MoveNext
    /**
    */
    open /* method final */ func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_bool__MoveNext_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Reset
    /**
    */
    open /* method final */ func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_void__Reset_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] TWrapped get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.get_Current
    open /* method final */ func get_Current() throws -> TWrapped {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_DelegatingEnumerator_2_TWrapped__get_Current_0__0(TWrapped.get_type_handle(), TDeclared.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TWrapped(gval: __return);
        }
    }
    /**
    */
    public var Current : TWrapped {
        get {
            return try! get_Current();
        }
    }
} // DelegatingEnumerator_2


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider
    /**
    
            Provides a  for interface types which implement
            .
            

    */
open class EnumerableWrapperProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.#ctor(System.Type,Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
    /**
    
            Initializes an instance of .
            

    - Parameter sourceEnumerableOfT: Type of the original 
            that is being wrapped.
    - Parameter elementWrapperProvider: The  for the element type.
            Can be null.
    */
    public init(sourceEnumerableOfT : dotnet.System.Type_, elementWrapperProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProvider_ctor_0__2__Type_IWrapperProvider(&__thrown, sourceEnumerableOfT.get_handle(), elementWrapperProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Wrap(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.Wrap(System.Object)
    /**
    */
    open /* method final */ func Wrap(original : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProvider_Object__Wrap_0__1__Object(&__thrown, self.get_handle(), original?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_WrappingType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.get_WrappingType
    open /* method final */ func get_WrappingType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProvider_Type__get_WrappingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    */
    public var WrappingType : dotnet.System.Type_ {
        get {
            return try! get_WrappingType();
        }
    }
} // EnumerableWrapperProvider


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory
    /**
    
            Creates an  for interface types implementing the
             type.
            

    */
open class EnumerableWrapperProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory})
    /**
    
            Initializes an  with a list
            .
            

    - Parameter wrapperProviderFactories: List of .
    */
    public init(wrapperProviderFactories : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProviderFactory_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory_(&__thrown, wrapperProviderFactories.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
    /**
    
            Gets an  for the provided context.
            

    - Parameter context: The .
    - Returns: An instance of  if the declared type is
            an interface and implements .

    */
    open /* method final */ func GetProvider(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_EnumerableWrapperProviderFactory_IWrapperProvider__GetProvider_0__1__WrapperProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EnumerableWrapperProviderFactory


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable
    /**
    
            Defines an interface for objects to be un-wrappable after deserialization.
            

    */
open class IUnwrappable
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Unwrap(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable.Unwrap(System.Type)
    /**
    
            Unwraps an object.
            

    - Parameter declaredType: The type to which the object should be un-wrapped to.
    - Returns: The un-wrapped object.

    */
    open func Unwrap(declaredType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable_Object__Unwrap_0__1__Type(&__thrown, self.get_handle(), declaredType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // IUnwrappable


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
    /**
    
            Defines an interface for wrapping objects for serialization or deserialization into xml.
            

    */
open class IWrapperProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Wrap(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider.Wrap(System.Object)
    /**
    
            Wraps the given object to the wrapping type provided by .
            

    - Parameter original: The original non-wrapped object.
    - Returns: Returns a wrapped object.

    */
    open func Wrap(original : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider_Object__Wrap_0__1__Object(&__thrown, self.get_handle(), original?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_WrappingType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider.get_WrappingType
    open func get_WrappingType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider_Type__get_WrappingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
} // IWrapperProvider


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory
    /**
    
            Create a  given a .
            

    */
open class IWrapperProviderFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
    /**
    
            Gets the  for the provided context.
            

    - Parameter context: The .
    - Returns: A wrapping provider if the factory decides to wrap the type, else null.

    */
    open func GetProvider(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory_IWrapperProvider__GetProvider_0__1__WrapperProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IWrapperProviderFactory


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions
    /**
    
            Provides configuration for XML formatters.
            

    */
open class MvcXmlOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // MvcXmlOptions


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper
    /**
    
            Wrapper class for  to enable it to be serialized by the xml formatters.
            

    */
open class ProblemDetailsWrapper
    :
    dotnet.System.Object,
    System_Xml_Serialization_IXmlSerializable,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ProblemDetails)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.#ctor(Microsoft.AspNetCore.Mvc.ProblemDetails)
    /**
    
            Initializes a new instance of .
            

    */
    public init(problemDetails : aspnetcore.Microsoft.AspNetCore.Mvc.ProblemDetails) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_ctor_0__1__ProblemDetails(&__thrown, problemDetails.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchema GetSchema()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.GetSchema
    /**
    */
    open /* method final */ func GetSchema() throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_XmlSchema__GetSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReadXml(System.Xml.XmlReader)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.ReadXml(System.Xml.XmlReader)
    /**
    */
    open func ReadXml(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_void__ReadXml_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.WriteXml(System.Xml.XmlWriter)
    /**
    */
    open func WriteXml(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_ProblemDetailsWrapper_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ProblemDetailsWrapper


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper
    /**
    
            Wrapper class for  to enable it to be serialized by the xml formatters.
            

    */
public final class SerializableErrorWrapper
    :
    dotnet.System.Object,
    System_Xml_Serialization_IXmlSerializable,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.#ctor
    /**
    
            Initializes a new 
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.SerializableError)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.#ctor(Microsoft.AspNetCore.Mvc.SerializableError)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter error: The  object that needs to be wrapped.
    */
    public init(error : aspnetcore.Microsoft.AspNetCore.Mvc.SerializableError) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_ctor_0__1__SerializableError(&__thrown, error.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Schema.XmlSchema GetSchema()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.GetSchema
    /**
    */
    public func GetSchema() throws -> Optional<dotnet.System.Xml.Schema.XmlSchema> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_XmlSchema__GetSchema_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchema(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReadXml(System.Xml.XmlReader)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.ReadXml(System.Xml.XmlReader)
    /**
    
            Generates a  object from its XML representation.
            

    - Parameter reader: The  stream from which the object is deserialized.
    */
    public func ReadXml(reader : dotnet.System.Xml.XmlReader) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_void__ReadXml_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.WriteXml(System.Xml.XmlWriter)
    /**
    
            Converts the wrapped  object into its XML representation.
            

    - Parameter writer: The  stream to which the object is serialized.
    */
    public func WriteXml(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Unwrap(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.Unwrap(System.Type)
    /**
    */
    public func Unwrap(declaredType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_Object__Unwrap_0__1__Type(&__thrown, self.get_handle(), declaredType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.SerializableError get_SerializableError()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.get_SerializableError
    public func get_SerializableError() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SerializableError {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapper_SerializableError__get_SerializableError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SerializableError(hndl : __return);
        }
    }
    /**
    
            Gets the wrapped object which is serialized/deserialized into XML
            representation.
            

    */
    public var SerializableError : aspnetcore.Microsoft.AspNetCore.Mvc.SerializableError {
        get {
            return try! get_SerializableError();
        }
    }
} // SerializableErrorWrapper


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider
    /**
    
            Wraps the object of type .
            

    */
open class SerializableErrorWrapperProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Wrap(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.Wrap(System.Object)
    /**
    */
    open /* method final */ func Wrap(original : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProvider_Object__Wrap_0__1__Object(&__thrown, self.get_handle(), original?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_WrappingType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.get_WrappingType
    open /* method final */ func get_WrappingType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProvider_Type__get_WrappingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    */
    public var WrappingType : dotnet.System.Type_ {
        get {
            return try! get_WrappingType();
        }
    }
} // SerializableErrorWrapperProvider


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory
    /**
    
            Creates an  for the type .
            

    */
open class SerializableErrorWrapperProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
    /**
    
            Creates an instance of  if the provided
            's  is
            .
            

    - Parameter context: The .
    - Returns: 
            An instance of  if the provided 's
             is
            ; otherwise null.
            

    */
    open /* method final */ func GetProvider(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_SerializableErrorWrapperProviderFactory_IWrapperProvider__GetProvider_0__1__WrapperProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // SerializableErrorWrapperProviderFactory


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper
    /**
    
            Wrapper class for  to enable it to be serialized by the xml formatters.
            

    */
open class ValidationProblemDetailsWrapper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_ValidationProblemDetailsWrapper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_ValidationProblemDetailsWrapper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ValidationProblemDetails)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.#ctor(Microsoft.AspNetCore.Mvc.ValidationProblemDetails)
    /**
    
            Initializes a new instance of  for the specified
            .
            

    - Parameter problemDetails: The .
    */
    public init(problemDetails : aspnetcore.Microsoft.AspNetCore.Mvc.ValidationProblemDetails) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_ValidationProblemDetailsWrapper_ctor_0__1__ValidationProblemDetails(&__thrown, problemDetails.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteXml(System.Xml.XmlWriter)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.WriteXml(System.Xml.XmlWriter)
    /**
    */
    open override func WriteXml(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_Xml_ValidationProblemDetailsWrapper_void__WriteXml_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ValidationProblemDetailsWrapper


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext
    /**
    
            The context used by an  to wrap or un-wrap types.
            

    */
open class WrapperProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_Xml_WrapperProviderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.#ctor(System.Type,System.Boolean)
    /**
    
            Initializes a .
            

    - Parameter declaredType: The declared type of the object that needs to be wrapped.
    - Parameter isSerialization:  if the wrapper provider is invoked during
            serialization, otherwise .
    */
    public init(declaredType : dotnet.System.Type_, isSerialization : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_Xml_WrapperProviderContext_ctor_0__2__Type_bool(&__thrown, declaredType.get_handle(), Swift.Int32(isSerialization ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_DeclaredType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.get_DeclaredType
    open func get_DeclaredType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_WrapperProviderContext_Type__get_DeclaredType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsSerialization()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.get_IsSerialization
    open func get_IsSerialization() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_WrapperProviderContext_bool__get_IsSerialization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            The declared type which could be wrapped/un-wrapped by a different type
            during serialization or deserialization.
            

    */
    open var DeclaredType : dotnet.System.Type_ {
        get {
            return try! get_DeclaredType();
        }
    }
    /**
    
             if a wrapper provider is invoked during serialization,
             otherwise.
            

    */
    open var IsSerialization : Bool {
        get {
            return try! get_IsSerialization();
        }
    }
} // WrapperProviderContext


// type: Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions
public struct WrapperProviderFactoriesExtensions {
    // Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetWrapperProvider(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory>, Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions.GetWrapperProvider(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory},Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
    /**
    
            Gets an instance of  for the supplied
            type.
            

    - Parameter wrapperProviderFactories: A list of .
    - Parameter wrapperProviderContext: The .
    - Returns: An instance of  if there is a wrapping provider for the
            supplied type, else null.

    */
    public static func GetWrapperProvider(wrapperProviderFactories : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory>, wrapperProviderContext : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_Xml_WrapperProviderFactoriesExtensions_IWrapperProvider__GetWrapperProvider_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory__WrapperProviderContext(&__thrown, wrapperProviderFactories.get_handle(), wrapperProviderContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // WrapperProviderFactoriesExtensions


}


// Microsoft.AspNetCore.Mvc.ModelBinding
// Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
extension Microsoft.AspNetCore.Mvc.ModelBinding.Metadata {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider
    /**
    
            An  for .
            

    */
open class DataMemberRequiredBindingMetadataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DataMemberRequiredBindingMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DataMemberRequiredBindingMetadataProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
    /**
    */
    open /* method final */ func CreateBindingMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DataMemberRequiredBindingMetadataProvider_void__CreateBindingMetadata_0__1__BindingMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataMemberRequiredBindingMetadataProvider


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions
public struct MvcXmlMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds configuration of  for the application.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    */
    public static func AddXmlOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcBuilderExtensions_IMvcBuilder__AddXmlOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Adds the XML DataContractSerializer formatters to MVC.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcBuilderExtensions_IMvcBuilder__AddXmlDataContractSerializerFormatters_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds the XML DataContractSerializer formatters to MVC.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    - Returns: The .

    */
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcBuilderExtensions_IMvcBuilder__AddXmlDataContractSerializerFormatters_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlDataContractSerializerFormatters(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Adds the XML Serializer formatters to MVC.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcBuilderExtensions_IMvcBuilder__AddXmlSerializerFormatters_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds the XML Serializer formatters to MVC.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    - Returns: The .

    */
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcBuilderExtensions_IMvcBuilder__AddXmlSerializerFormatters_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlSerializerFormatters(builder: builder, setupAction: del_setupAction);
    }
} // MvcXmlMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions
public struct MvcXmlMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds configuration of  for the application.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    - Returns: The .

    */
    public static func AddXmlOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcCoreBuilderExtensions_IMvcCoreBuilder__AddXmlOptions_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Adds the XML DataContractSerializer formatters to MVC.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcCoreBuilderExtensions_IMvcCoreBuilder__AddXmlDataContractSerializerFormatters_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds the XML DataContractSerializer formatters to MVC.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    - Returns: The .

    */
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcCoreBuilderExtensions_IMvcCoreBuilder__AddXmlDataContractSerializerFormatters_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlDataContractSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlDataContractSerializerFormatters(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Adds the XML Serializer formatters to MVC.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcCoreBuilderExtensions_IMvcCoreBuilder__AddXmlSerializerFormatters_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions})
    /**
    
            Adds the XML Serializer formatters to MVC.
            

    - Parameter builder: The .
    - Parameter setupAction: The  which need to be configured.
    - Returns: The .

    */
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcXmlMvcCoreBuilderExtensions_IMvcCoreBuilder__AddXmlSerializerFormatters_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_Xml_MvcXmlOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddXmlSerializerFormatters(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try AddXmlSerializerFormatters(builder: builder, setupAction: del_setupAction);
    }
} // MvcXmlMvcCoreBuilderExtensions


}



public protocol Microsoft_AspNetCore_Mvc_Formatters_Xml_IUnwrappable
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Formatters_Xml_IWrapperProviderFactory
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetWrapperProvider(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory>, Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func GetWrapperProvider(wrapperProviderContext : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider> where T == aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions.GetWrapperProvider(wrapperProviderFactories: self, wrapperProviderContext: wrapperProviderContext);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddXmlOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddXmlDataContractSerializerFormatters() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddXmlDataContractSerializerFormatters(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlDataContractSerializerFormatters(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddXmlSerializerFormatters() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddXmlSerializerFormatters(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlSerializerFormatters(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddXmlOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddXmlDataContractSerializerFormatters() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddXmlDataContractSerializerFormatters(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlDataContractSerializerFormatters(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddXmlSerializerFormatters() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddXmlSerializerFormatters(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddXmlSerializerFormatters(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

