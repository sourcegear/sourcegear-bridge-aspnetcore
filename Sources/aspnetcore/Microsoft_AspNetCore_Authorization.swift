// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authorization
extension Microsoft.AspNetCore.Authorization {
// type: Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute
    /**
    
            Specifies that the class or method that this attribute is applied to does not require authorization.
            

    */
open class AllowAnonymousAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Authorization_IAllowAnonymous
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AllowAnonymousAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AllowAnonymousAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AllowAnonymousAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AllowAnonymousAttribute


// type: Microsoft.AspNetCore.Authorization.AuthorizationFailure
    /**
    
            Encapsulates a failure result of .
            

    */
open class AuthorizationFailure
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationFailure_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationFailure_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationFailure ExplicitFail()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.ExplicitFail
    /**
    
            Return a failure due to  being called.
            

    - Returns: The failure.

    */
    open class func ExplicitFail() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_AuthorizationFailure__ExplicitFail_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationFailure Failed(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.AuthorizationFailureReason>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.Failed(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.AuthorizationFailureReason})
    /**
    
            Return a failure due to  being called.
            

    - Returns: The failure.

    */
    open class func Failed(reasons : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_AuthorizationFailure__Failed_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_(&__thrown, reasons.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationFailure Failed(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.Failed(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement})
    /**
    
            Return a failure due to some requirements not being met via .
            

    - Parameter failed: The requirements that were not met.
    - Returns: The failure.

    */
    open class func Failed(failed : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_AuthorizationFailure__Failed_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_(&__thrown, failed.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_FailCalled()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.get_FailCalled
    open func get_FailCalled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_bool__get_FailCalled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> get_FailedRequirements()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.get_FailedRequirements
    open func get_FailedRequirements() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement___get_FailedRequirements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> get_FailureReasons()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailure.get_FailureReasons
    open func get_FailureReasons() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailure_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_AuthorizationFailureReason___get_FailureReasons_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    
            Failure was due to  being called.
            

    */
    open var FailCalled : Bool {
        get {
            return try! get_FailCalled();
        }
    }
    /**
    
            Failure was due to these requirements not being met via .
            

    */
    open var FailedRequirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        get {
            return try! get_FailedRequirements();
        }
    }
    /**
    
            Allows  to flow more detailed reasons for why authorization failed.
            

    */
    open var FailureReasons : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> {
        get {
            return try! get_FailureReasons();
        }
    }
} // AuthorizationFailure


// type: Microsoft.AspNetCore.Authorization.AuthorizationFailureReason
    /**
    
            Encapsulates a reason why authorization failed.
            

    */
open class AuthorizationFailureReason
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authorization.IAuthorizationHandler, System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailureReason.#ctor(Microsoft.AspNetCore.Authorization.IAuthorizationHandler,System.String)
    /**
    
            Creates a new failure reason.
            

    - Parameter handler: The handler responsible for this failure reason.
    - Parameter message: The message describing the failure.
    */
    public init(handler : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_ctor_0__2__IAuthorizationHandler_String(&__thrown, handler.get_handle(), message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailureReason.get_Message
    open func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.IAuthorizationHandler get_Handler()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationFailureReason.get_Handler
    open func get_Handler() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationFailureReason_IAuthorizationHandler__get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler(hndl : __return);
        }
    }
    /**
    
            The  responsible for this failure reason.
            

    */
    open var Handler : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler {
        get {
            return try! get_Handler();
        }
    }
    /**
    
            A message describing the failure reason.
            

    */
    open var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
} // AuthorizationFailureReason


// type: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    /**
    
            Contains authorization information used by .
            

    */
open class AuthorizationHandlerContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, System.Security.Claims.ClaimsPrincipal, System.Object)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement},System.Security.Claims.ClaimsPrincipal,System.Object)
    /**
    
            Creates a new instance of .
            

    - Parameter requirements: A collection of all the  for the current authorization action.
    - Parameter user: A  representing the current user.
    - Parameter resource: An optional resource to evaluate the  against.
    */
    public init(requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_ctor_0__3__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement__ClaimsPrincipal_Object(&__thrown, requirements.get_handle(), user.get_handle(), resource?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Fail()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.Fail
    /**
    
            Called to indicate  will
            never return true, even if all requirements are met.
            

    */
    open func Fail() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_void__Fail_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(Microsoft.AspNetCore.Authorization.AuthorizationFailureReason)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.Fail(Microsoft.AspNetCore.Authorization.AuthorizationFailureReason)
    /**
    
            Called to indicate  will
            never return true, even if all requirements are met.
            

    - Parameter reason: Optional  for why authorization failed.
    */
    open func Fail(reason : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_void__Fail_0__1__AuthorizationFailureReason(&__thrown, self.get_handle(), reason.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Succeed(Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.Succeed(Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
    /**
    
            Called to mark the specified  as being
            successfully evaluated.
            

    - Parameter requirement: The requirement whose evaluation has succeeded.
    */
    open func Succeed(requirement : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_void__Succeed_0__1__IAuthorizationRequirement(&__thrown, self.get_handle(), requirement.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> get_Requirements()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_Requirements
    open func get_Requirements() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement___get_Requirements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Resource()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_Resource
    open func get_Resource() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_Object__get_Resource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> get_PendingRequirements()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_PendingRequirements
    open func get_PendingRequirements() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement___get_PendingRequirements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> get_FailureReasons()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_FailureReasons
    open func get_FailureReasons() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_AuthorizationFailureReason___get_FailureReasons_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasFailed()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_HasFailed
    open func get_HasFailed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_bool__get_HasFailed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasSucceeded()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext.get_HasSucceeded
    open func get_HasSucceeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_bool__get_HasSucceeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the reasons why authorization has failed.
            

    */
    open var FailureReasons : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailureReason> {
        get {
            return try! get_FailureReasons();
        }
    }
    /**
    
            Flag indicating whether the current authorization processing has failed.
            

    */
    open var HasFailed : Bool {
        get {
            return try! get_HasFailed();
        }
    }
    /**
    
            Flag indicating whether the current authorization processing has succeeded.
            

    */
    open var HasSucceeded : Bool {
        get {
            return try! get_HasSucceeded();
        }
    }
    /**
    
            Gets the requirements that have not yet been marked as succeeded.
            

    */
    open var PendingRequirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        get {
            return try! get_PendingRequirements();
        }
    }
    /**
    
            The collection of all the  for the current authorization action.
            

    */
    open var Requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        get {
            return try! get_Requirements();
        }
    }
    /**
    
            The optional resource to evaluate the  against.
            

    */
    open var Resource : Optional<dotnet.System.Object> {
        get {
            return try! get_Resource();
        }
    }
    /**
    
            The  representing the current user.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
} // AuthorizationHandlerContext


// type: Microsoft.AspNetCore.Authorization.AuthorizationHandler`1
    /**
    
            Base class for authorization handlers that need to be called for a specific requirement type.
            

    */
open class AuthorizationHandler_1<TRequirement : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationHandler_1_get_type_handle(TRequirement.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationHandler_1_cast(TRequirement.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandler`1.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Makes a decision if authorization is allowed.
            

    - Parameter context: The authorization context.
    */
    open func HandleAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandler_1_Task__HandleAsync_0__1__AuthorizationHandlerContext(TRequirement.get_type_handle(), &__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // AuthorizationHandler_1


// type: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2
    /**
    
            Base class for authorization handlers that need to be called for specific requirement and
            resource types.
            

    */
open class AuthorizationHandler_2<TRequirement : SGBridgeGenericValue,TResource : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationHandler_2_get_type_handle(TRequirement.get_type_handle(),TResource.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationHandler_2_cast(TRequirement.get_type_handle(),TResource.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Makes a decision if authorization is allowed.
            

    - Parameter context: The authorization context.
    */
    open func HandleAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationHandler_2_Task__HandleAsync_0__1__AuthorizationHandlerContext(TRequirement.get_type_handle(), TResource.get_type_handle(), &__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // AuthorizationHandler_2


// type: Microsoft.AspNetCore.Authorization.AuthorizationOptions
    /**
    
            Provides programmatic configuration used by  and .
            

    */
open class AuthorizationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddPolicy(System.String, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.AddPolicy(System.String,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Add an authorization policy with the provided name.
            

    - Parameter name: The name of the policy.
    - Parameter policy: The authorization policy.
    */
    open func AddPolicy(name : dotnet.System.String, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationOptions_void__AddPolicy_0__2__String_AuthorizationPolicy(&__thrown, self.get_handle(), name.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddPolicy(System.String, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.AddPolicy(System.String,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder})
    /**
    
            Add a policy that is built from a delegate with the provided name.
            

    - Parameter name: The name of the policy.
    - Parameter configurePolicy: The delegate that will be used to build the policy.
    */
    open func AddPolicy(name : dotnet.System.String, configurePolicy : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationOptions_void__AddPolicy_0__2__String_System_Action_Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_(&__thrown, self.get_handle(), name.get_handle(), configurePolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddPolicy(name : dotnet.System.String, configurePolicy : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder) throws -> Void) throws {
        let del_configurePolicy = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder>(configurePolicy);
        return try AddPolicy(name: name, configurePolicy: del_configurePolicy);
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicy GetPolicy(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.GetPolicy(System.String)
    /**
    
            Returns the policy for the specified name, or null if a policy with the name does not exist.
            

    - Parameter name: The name of the policy to return.
    - Returns: The policy for the specified name, or null if a policy with the name does not exist.

    */
    open func GetPolicy(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationOptions_AuthorizationPolicy__GetPolicy_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_InvokeHandlersAfterFailure()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.get_InvokeHandlersAfterFailure
    open func get_InvokeHandlersAfterFailure() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationOptions_bool__get_InvokeHandlersAfterFailure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_InvokeHandlersAfterFailure(bool)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.set_InvokeHandlersAfterFailure(System.Boolean)
    open func set_InvokeHandlersAfterFailure(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationOptions_void__set_InvokeHandlersAfterFailure_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.AuthorizationPolicy get_DefaultPolicy()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.get_DefaultPolicy
    open func get_DefaultPolicy() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationOptions_AuthorizationPolicy__get_DefaultPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultPolicy(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.set_DefaultPolicy(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    open func set_DefaultPolicy(value : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationOptions_void__set_DefaultPolicy_0__1__AuthorizationPolicy(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.AuthorizationPolicy get_FallbackPolicy()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.get_FallbackPolicy
    open func get_FallbackPolicy() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationOptions_AuthorizationPolicy__get_FallbackPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackPolicy(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationOptions.set_FallbackPolicy(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    open func set_FallbackPolicy(value : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationOptions_void__set_FallbackPolicy_0__1__AuthorizationPolicy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the default authorization policy. Defaults to require authenticated users.
            

    */
    open var DefaultPolicy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        get {
            return try! get_DefaultPolicy();
        }
        set(v) {
            return try! set_DefaultPolicy(value: v);
        }
    }
    /**
    
            Gets or sets the fallback authorization policy used by 
            when no IAuthorizeData have been provided. As a result, the AuthorizationMiddleware uses the fallback policy
            if there are no  instances for a resource. If a resource has any 
            then they are evaluated instead of the fallback policy. By default the fallback policy is null, and usually will have no
            effect unless you have the AuthorizationMiddleware in your pipeline. It is not used in any way by the
            default .
            

    */
    open var FallbackPolicy : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy> {
        get {
            return try! get_FallbackPolicy();
        }
        set(v) {
            return try! set_FallbackPolicy(value: v!);
        }
    }
    /**
    
            Determines whether authentication handlers should be invoked after a failure.
            Defaults to true.
            

    */
    open var InvokeHandlersAfterFailure : Bool {
        get {
            return try! get_InvokeHandlersAfterFailure();
        }
        set(v) {
            return try! set_InvokeHandlersAfterFailure(value: v);
        }
    }
} // AuthorizationOptions


// type: Microsoft.AspNetCore.Authorization.AuthorizationPolicy
    /**
    
            Represents a collection of authorization requirements and the scheme or
            schemes they are evaluated against, all of which must succeed
            for authorization to succeed.
            

    */
open class AuthorizationPolicy
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationPolicy_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Creates a new instance of .
            

    - Parameter requirements: 
            The list of s which must succeed for
            this policy to be successful.
            
    - Parameter authenticationSchemes: 
            The authentication schemes the  are evaluated against.
            
    */
    public init(requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, authenticationSchemes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_ctor_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement__System_Collections_Generic_IEnumerable_string_(&__thrown, requirements.get_handle(), authenticationSchemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicy Combine(Microsoft.AspNetCore.Authorization.AuthorizationPolicy[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.Combine(Microsoft.AspNetCore.Authorization.AuthorizationPolicy[])
    /**
    
            Combines the specified  into a single policy.
            

    - Parameter policies: The authorization policies to combine.
    - Returns: 
            A new  which represents the combination of the
            specified .
            

    */
    open class func Combine(policies : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_AuthorizationPolicy__Combine_0__1__AuthorizationPolicyArray(&__thrown, policies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicy Combine(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.AuthorizationPolicy>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.Combine(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.AuthorizationPolicy})
    /**
    
            Combines the specified  into a single policy.
            

    - Parameter policies: The authorization policies to combine.
    - Returns: 
            A new  which represents the combination of the
            specified .
            

    */
    open class func Combine(policies : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_AuthorizationPolicy__Combine_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_AuthorizationPolicy_(&__thrown, policies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> CombineAsync(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.CombineAsync(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizeData})
    /**
    
            Combines the  provided by the specified
            .
            

    - Parameter policyProvider: A  which provides the policies to combine.
    - Parameter authorizeData: A collection of authorization data used to apply authorization to a resource.
    - Returns: 
            A new  which represents the combination of the
            authorization policies provided by the specified .
            

    */
    open class func CombineAsync(policyProvider : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, authorizeData : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___CombineAsync_0__2__IAuthorizationPolicyProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizeData_(&__thrown, policyProvider.get_handle(), authorizeData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> get_Requirements()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.get_Requirements
    open func get_Requirements() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement___get_Requirements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicy_System_Collections_Generic_IReadOnlyList_string___get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Gets a readonly list of the authentication schemes the 
            are evaluated against.
            

    */
    open var AuthenticationSchemes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
    }
    /**
    
            Gets a readonly list of s which must succeed for
            this policy to be successful.
            

    */
    open var Requirements : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        get {
            return try! get_Requirements();
        }
    }
} // AuthorizationPolicy


// type: Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder
    /**
    
            Used for building policies.
            

    */
open class AuthorizationPolicyBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.#ctor(System.String[])
    /**
    
            Creates a new instance of 
            

    - Parameter authenticationSchemes: An array of authentication schemes the policy should be evaluated against.
    */
    public init(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_ctor_0__1__StringArray(&__thrown, authenticationSchemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.#ctor(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Creates a new instance of .
            

    - Parameter policy: The  to copy.
    */
    public init(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_ctor_0__1__AuthorizationPolicy(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder AddAuthenticationSchemes(System.String[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.AddAuthenticationSchemes(System.String[])
    /**
    
            Adds the specified authentication  to the
             for this instance.
            

    - Parameter schemes: The schemes to add.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func AddAuthenticationSchemes(schemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__AddAuthenticationSchemes_0__1__StringArray(&__thrown, self.get_handle(), schemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder AddRequirements(Microsoft.AspNetCore.Authorization.IAuthorizationRequirement[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.AddRequirements(Microsoft.AspNetCore.Authorization.IAuthorizationRequirement[])
    /**
    
            Adds the specified  to the
             for this instance.
            

    - Parameter requirements: The authorization requirements to add.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func AddRequirements(requirements : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__AddRequirements_0__1__IAuthorizationRequirementArray(&__thrown, self.get_handle(), requirements.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder Combine(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.Combine(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Combines the specified  into the current instance.
            

    - Parameter policy: The  to combine.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func Combine(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__Combine_0__1__AuthorizationPolicy(&__thrown, self.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireClaim(System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireClaim(System.String,System.String[])
    /**
    
            Adds a  to the current instance which requires
            that the current user has the specified claim and that the claim value must be one of the allowed values.
            

    - Parameter claimType: The claim type required.
    - Parameter allowedValues: Values the claim must process one or more of for evaluation to succeed.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireClaim(claimType : dotnet.System.String, allowedValues : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireClaim_0__2__String_StringArray(&__thrown, self.get_handle(), claimType.get_handle(), allowedValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireClaim(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireClaim(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a  to the current instance which requires
            that the current user has the specified claim and that the claim value must be one of the allowed values.
            

    - Parameter claimType: The claim type required.
    - Parameter allowedValues: Values the claim must process one or more of for evaluation to succeed.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireClaim(claimType : dotnet.System.String, allowedValues : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireClaim_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), claimType.get_handle(), allowedValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireClaim(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireClaim(System.String)
    /**
    
            Adds a  to the current instance which requires
            that the current user has the specified claim.
            

    - Parameter claimType: The claim type required, with no restrictions on claim value.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireClaim(claimType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireClaim_0__1__String(&__thrown, self.get_handle(), claimType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireRole(System.String[])
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireRole(System.String[])
    /**
    
            Adds a  to the current instance which enforces that the current user
            must have at least one of the specified roles.
            

    - Parameter roles: The allowed roles.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireRole(roles : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireRole_0__1__StringArray(&__thrown, self.get_handle(), roles.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireRole(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireRole(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds a  to the current instance which enforces that the current user
            must have at least one of the specified roles.
            

    - Parameter roles: The allowed roles.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireRole(roles : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireRole_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), roles.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireUserName(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireUserName(System.String)
    /**
    
            Adds a  to the current instance which enforces that the current user matches the specified name.
            

    - Parameter userName: The user name the current user must possess.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireUserName(userName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireUserName_0__1__String(&__thrown, self.get_handle(), userName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireAuthenticatedUser()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireAuthenticatedUser
    /**
    
            Adds  to the current instance which enforces that the current user is authenticated.
            

    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireAuthenticatedUser() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireAuthenticatedUser_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireAssertion(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,bool>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireAssertion(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})
    /**
    
            Adds an  to the current instance.
            

    - Parameter handler: The handler to evaluate during authorization.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireAssertion(handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Bool>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireAssertion_0__1__System_Func_Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_bool_(&__thrown, self.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func RequireAssertion(handler : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) throws -> Bool) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        let del_handler = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Swift.Bool>(handler);
        return try RequireAssertion(handler: del_handler);
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder RequireAssertion(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task<bool>>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.RequireAssertion(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})
    /**
    
            Adds an  to the current instance.
            

    - Parameter handler: The handler to evaluate during authorization.
    - Returns: A reference to this instance after the operation has completed.

    */
    open func RequireAssertion(handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,dotnet.System.Threading.Tasks.Task_1<Bool>>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicyBuilder__RequireAssertion_0__1__System_Func_Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Threading_Tasks_System_Threading_Tasks_Task_bool__(&__thrown, self.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func RequireAssertion(handler : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) throws -> dotnet.System.Threading.Tasks.Task_1<Bool>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder {
        let del_handler = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,dotnet.System.Threading.Tasks.Task_1<Swift.Bool>>(handler);
        return try RequireAssertion(handler: del_handler);
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationPolicy Build()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.Build
    /**
    
            Builds a new  from the requirements
            in this instance.
            

    - Returns: 
            A new  built from the requirements in this instance.
            

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_AuthorizationPolicy__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> get_Requirements()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.get_Requirements
    open func get_Requirements() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_System_Collections_Generic_IList_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement___get_Requirements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Requirements(System.Collections.Generic.IList<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.set_Requirements(System.Collections.Generic.IList{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement})
    open func set_Requirements(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_void__set_Requirements_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_System_Collections_Generic_IList_string___get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder.set_AuthenticationSchemes(System.Collections.Generic.IList{System.String})
    open func set_AuthenticationSchemes(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizationPolicyBuilder_void__set_AuthenticationSchemes_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a list authentication schemes the 
            are evaluated against.
            
            When not specified, the requirements are evaluated against default schemes.
            
            

    */
    open var AuthenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v);
        }
    }
    /**
    
            Gets or sets a list of s which must succeed for
            this policy to be successful.
            

    */
    open var Requirements : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement> {
        get {
            return try! get_Requirements();
        }
        set(v) {
            return try! set_Requirements(value: v);
        }
    }
} // AuthorizationPolicyBuilder


// type: Microsoft.AspNetCore.Authorization.AuthorizationResult
    /**
    
            Encapsulates the result of .
            

    */
open class AuthorizationResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizationResult_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationResult Success()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationResult.Success
    /**
    
            Returns a successful result.
            

    - Returns: A successful result.

    */
    open class func Success() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationResult_AuthorizationResult__Success_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationResult Failed(Microsoft.AspNetCore.Authorization.AuthorizationFailure)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationResult.Failed(Microsoft.AspNetCore.Authorization.AuthorizationFailure)
    /**
    
            Creates a failed authorization result.
            

    - Parameter failure: Contains information about why authorization failed.
    - Returns: The .

    */
    open class func Failed(failure : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationResult_AuthorizationResult__Failed_0__1__AuthorizationFailure(&__thrown, failure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationResult Failed()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationResult.Failed
    /**
    
            Creates a failed authorization result.
            

    - Returns: The .

    */
    open class func Failed() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationResult_AuthorizationResult__Failed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Succeeded()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationResult.get_Succeeded
    open func get_Succeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationResult_bool__get_Succeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.AuthorizationFailure get_Failure()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationResult.get_Failure
    open func get_Failure() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationResult_AuthorizationFailure__get_Failure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Contains information about why authorization failed.
            

    */
    open var Failure : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure> {
        get {
            return try! get_Failure();
        }
    }
    /**
    
            True if authorization was successful.
            

    */
    open var Succeeded : Bool {
        get {
            return try! get_Succeeded();
        }
    }
} // AuthorizationResult


// type: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
public struct AuthorizationServiceExtensions {
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
    /**
    
            Checks if a user meets a specific requirement for the specified resource
            

    - Parameter service: The  providing authorization.
    - Parameter user: The user to evaluate the policy against.
    - Parameter resource: The resource to evaluate the policy against.
    - Parameter requirement: The requirement to evaluate the policy against.
    - Returns: 
            A flag indicating whether requirement evaluation has succeeded or failed.
            This value is true when the user fulfills the policy, otherwise false.
            

    */
    public static func AuthorizeAsync(service : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService, user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, requirement : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationServiceExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__4__IAuthorizationService_ClaimsPrincipal_Object_IAuthorizationRequirement(&__thrown, service.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, requirement.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Checks if a user meets a specific authorization policy against the specified resource.
            

    - Parameter service: The  providing authorization.
    - Parameter user: The user to evaluate the policy against.
    - Parameter resource: The resource to evaluate the policy against.
    - Parameter policy: The policy to evaluate.
    - Returns: 
            A flag indicating whether policy evaluation has succeeded or failed.
            This value is true when the user fulfills the policy, otherwise false.
            

    */
    public static func AuthorizeAsync(service : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService, user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationServiceExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__4__IAuthorizationService_ClaimsPrincipal_Object_AuthorizationPolicy(&__thrown, service.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Checks if a user meets a specific authorization policy against the specified resource.
            

    - Parameter service: The  providing authorization.
    - Parameter user: The user to evaluate the policy against.
    - Parameter policy: The policy to evaluate.
    - Returns: 
            A flag indicating whether policy evaluation has succeeded or failed.
            This value is true when the user fulfills the policy, otherwise false.
            

    */
    public static func AuthorizeAsync(service : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService, user : dotnet.System.Security.Claims.ClaimsPrincipal, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationServiceExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__IAuthorizationService_ClaimsPrincipal_AuthorizationPolicy(&__thrown, service.get_handle(), user.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)
    /**
    
            Checks if a user meets a specific authorization policy against the specified resource.
            

    - Parameter service: The  providing authorization.
    - Parameter user: The user to evaluate the policy against.
    - Parameter policyName: The name of the policy to evaluate.
    - Returns: 
            A flag indicating whether policy evaluation has succeeded or failed.
            This value is true when the user fulfills the policy, otherwise false.
            

    */
    public static func AuthorizeAsync(service : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService, user : dotnet.System.Security.Claims.ClaimsPrincipal, policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationServiceExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__IAuthorizationService_ClaimsPrincipal_String(&__thrown, service.get_handle(), user.get_handle(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // AuthorizationServiceExtensions


// type: Microsoft.AspNetCore.Authorization.AuthorizeAttribute
    /**
    
            Specifies that the class or method that this attribute is applied to requires the specified authorization.
            

    */
open class AuthorizeAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Authorization_IAuthorizeData
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizeAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class with the specified policy.
            

    - Parameter policy: The name of the policy to require for authorization.
    */
    public init(policy : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_ctor_0__1__String(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Policy()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.get_Policy
    open /* method final */ func get_Policy() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_String__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Policy(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.set_Policy(System.String)
    open /* method final */ func set_Policy(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizeAttribute_void__set_Policy_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Roles()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.get_Roles
    open /* method final */ func get_Roles() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_String__get_Roles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Roles(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.set_Roles(System.String)
    open /* method final */ func set_Roles(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizeAttribute_void__set_Roles_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.get_AuthenticationSchemes
    open /* method final */ func get_AuthenticationSchemes() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizeAttribute_String__get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.set_AuthenticationSchemes(System.String)
    open /* method final */ func set_AuthenticationSchemes(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_AuthorizeAttribute_void__set_AuthenticationSchemes_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a comma delimited list of schemes from which user information is constructed.
            

    */
    public var AuthenticationSchemes : Optional<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v!);
        }
    }
    /**
    
            Gets or sets the policy name that determines access to the resource.
            

    */
    public var Policy : Optional<dotnet.System.String> {
        get {
            return try! get_Policy();
        }
        set(v) {
            return try! set_Policy(value: v!);
        }
    }
    /**
    
            Gets or sets a comma delimited list of roles that are allowed to access the resource.
            

    */
    public var Roles : Optional<dotnet.System.String> {
        get {
            return try! get_Roles();
        }
        set(v) {
            return try! set_Roles(value: v!);
        }
    }
} // AuthorizeAttribute


// type: Microsoft.AspNetCore.Authorization.DefaultAuthorizationEvaluator
    /**
    
            Determines whether an authorization request was successful or not.
            

    */
open class DefaultAuthorizationEvaluator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_DefaultAuthorizationEvaluator_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_DefaultAuthorizationEvaluator_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationEvaluator.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_DefaultAuthorizationEvaluator_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationResult Evaluate(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationEvaluator.Evaluate(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Determines whether the authorization result was successful or not.
            

    - Parameter context: The authorization information.
    - Returns: The .

    */
    open /* method final */ func Evaluate(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationEvaluator_AuthorizationResult__Evaluate_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult(hndl : __return);
        }
    }
} // DefaultAuthorizationEvaluator


// type: Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerContextFactory
    /**
    
            A type used to provide a  used for authorization.
            

    */
open class DefaultAuthorizationHandlerContextFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerContextFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerContextFactory_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerContextFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerContextFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext CreateContext(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, System.Security.Claims.ClaimsPrincipal, System.Object)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerContextFactory.CreateContext(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement},System.Security.Claims.ClaimsPrincipal,System.Object)
    /**
    
            Creates a  used for authorization.
            

    - Parameter requirements: The requirements to evaluate.
    - Parameter user: The user to evaluate the requirements against.
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Returns: The .

    */
    open func CreateContext(requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerContextFactory_AuthorizationHandlerContext__CreateContext_0__3__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement__ClaimsPrincipal_Object(&__thrown, self.get_handle(), requirements.get_handle(), user.get_handle(), resource?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext(hndl : __return);
        }
    }
} // DefaultAuthorizationHandlerContextFactory


// type: Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerProvider
    /**
    
            The default implementation of a handler provider,
            which provides the s for an authorization request.
            

    */
open class DefaultAuthorizationHandlerProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationHandler>)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationHandler})
    /**
    
            Creates a new instance of .
            

    - Parameter handlers: The s.
    */
    public init(handlers : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerProvider_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationHandler_(&__thrown, handlers.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationHandler>> GetHandlersAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerProvider.GetHandlersAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    */
    open /* method final */ func GetHandlersAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationHandlerProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationHandler____GetHandlersAsync_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // DefaultAuthorizationHandlerProvider


// type: Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider
    /**
    
            The default implementation of a policy provider,
            which provides a  for a particular name.
            

    */
open class DefaultAuthorizationPolicyProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})
    /**
    
            Creates a new instance of .
            

    - Parameter options: The options used to configure this instance.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Authorization_AuthorizationOptions_(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetDefaultPolicyAsync()
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider.GetDefaultPolicyAsync
    /**
    
            Gets the default authorization policy.
            

    - Returns: The default authorization policy.

    */
    open /* method final */ func GetDefaultPolicyAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetDefaultPolicyAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetFallbackPolicyAsync()
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider.GetFallbackPolicyAsync
    /**
    
            Gets the fallback authorization policy.
            

    - Returns: The fallback authorization policy.

    */
    open /* method final */ func GetFallbackPolicyAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetFallbackPolicyAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetPolicyAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider.GetPolicyAsync(System.String)
    /**
    
            Gets a  from the given 
            

    - Parameter policyName: The policy name to retrieve.
    - Returns: The named .

    */
    open func GetPolicyAsync(policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetPolicyAsync_0__1__String(&__thrown, self.get_handle(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // DefaultAuthorizationPolicyProvider


// type: Microsoft.AspNetCore.Authorization.DefaultAuthorizationService
    /**
    
            The default implementation of an .
            

    */
open class DefaultAuthorizationService
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationService
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_DefaultAuthorizationService_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_DefaultAuthorizationService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Authorization.DefaultAuthorizationService>, Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory, Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationService.#ctor(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider,Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Authorization.DefaultAuthorizationService},Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory,Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})
    /**
    
            Creates a new instance of .
            

    - Parameter policyProvider: The  used to provide policies.
    - Parameter handlers: The handlers used to fulfill s.
    - Parameter logger: The logger used to log messages, warnings and errors.
    - Parameter contextFactory: The  used to create the context to handle the authorization.
    - Parameter evaluator: The  used to determine if authorization was successful.
    - Parameter options: The  used.
    */
    public init(policyProvider : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, handlers : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.Authorization.DefaultAuthorizationService>, contextFactory : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory, evaluator : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_DefaultAuthorizationService_ctor_0__6__IAuthorizationPolicyProvider_IAuthorizationHandlerProvider_Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_Authorization_DefaultAuthorizationService__IAuthorizationHandlerContextFactory_IAuthorizationEvaluator_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Authorization_AuthorizationOptions_(&__thrown, policyProvider.get_handle(), handlers.get_handle(), logger.get_handle(), contextFactory.get_handle(), evaluator.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(System.Security.Claims.ClaimsPrincipal, System.Object, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationService.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal,System.Object,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement})
    /**
    
            Checks if a user meets a specific set of requirements for the specified resource.
            

    - Parameter user: The user to evaluate the requirements against.
    - Parameter resource: The resource to evaluate the requirements against.
    - Parameter requirements: The requirements to evaluate.
    - Returns: 
            A flag indicating whether authorization has succeeded.
            This value is true when the user fulfills the policy otherwise false.
            

    */
    open func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__ClaimsPrincipal_Object_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_(&__thrown, self.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, requirements.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(System.Security.Claims.ClaimsPrincipal, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Authorization.DefaultAuthorizationService.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal,System.Object,System.String)
    /**
    
            Checks if a user meets a specific authorization policy.
            

    - Parameter user: The user to check the policy against.
    - Parameter resource: The resource the policy should be checked with.
    - Parameter policyName: The name of the policy to check against a specific context.
    - Returns: 
            A flag indicating whether authorization has succeeded.
            This value is true when the user fulfills the policy otherwise false.
            

    */
    open func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_DefaultAuthorizationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__ClaimsPrincipal_Object_String(&__thrown, self.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // DefaultAuthorizationService


// type: Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator
    /**
    
            Determines whether an authorization request was successful or not.
            

    */
open class IAuthorizationEvaluator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationResult Evaluate(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator.Evaluate(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Determines whether the authorization result was successful or not.
            

    - Parameter context: The authorization information.
    - Returns: The .

    */
    open func Evaluate(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator_AuthorizationResult__Evaluate_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult(hndl : __return);
        }
    }
} // IAuthorizationEvaluator


// type: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
    /**
    
            Classes implementing this interface are able to make a decision if authorization is allowed.
            

    */
open class IAuthorizationHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationHandler_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationHandler_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Makes a decision if authorization is allowed.
            

    - Parameter context: The authorization information.
    */
    open func HandleAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationHandler_Task__HandleAsync_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // IAuthorizationHandler


// type: Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory
    /**
    
            A type used to provide a  used for authorization.
            

    */
open class IAuthorizationHandlerContextFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext CreateContext(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, System.Security.Claims.ClaimsPrincipal, System.Object)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory.CreateContext(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement},System.Security.Claims.ClaimsPrincipal,System.Object)
    /**
    
            Creates a  used for authorization.
            

    - Parameter requirements: The requirements to evaluate.
    - Parameter user: The user to evaluate the requirements against.
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Returns: The .

    */
    open func CreateContext(requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>, user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory_AuthorizationHandlerContext__CreateContext_0__3__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement__ClaimsPrincipal_Object(&__thrown, self.get_handle(), requirements.get_handle(), user.get_handle(), resource?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext(hndl : __return);
        }
    }
} // IAuthorizationHandlerContextFactory


// type: Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider
    /**
    
            A type which can provide the s for an authorization request.
            

    */
open class IAuthorizationHandlerProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationHandler>> GetHandlersAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider.GetHandlersAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Return the handlers that will be called for the authorization request.
            

    - Parameter context: The .
    - Returns: The list of handlers.

    */
    open func GetHandlersAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationHandler____GetHandlersAsync_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // IAuthorizationHandlerProvider


// type: Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider
    /**
    
            A type which can provide a  for a particular name.
            

    */
open class IAuthorizationPolicyProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetPolicyAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider.GetPolicyAsync(System.String)
    /**
    
            Gets a  from the given 
            

    - Parameter policyName: The policy name to retrieve.
    - Returns: The named .

    */
    open func GetPolicyAsync(policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetPolicyAsync_0__1__String(&__thrown, self.get_handle(), policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetDefaultPolicyAsync()
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider.GetDefaultPolicyAsync
    /**
    
            Gets the default authorization policy.
            

    - Returns: The default authorization policy.

    */
    open func GetDefaultPolicyAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetDefaultPolicyAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationPolicy> GetFallbackPolicyAsync()
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider.GetFallbackPolicyAsync
    /**
    
            Gets the fallback authorization policy.
            

    - Returns: The fallback authorization policy.

    */
    open func GetFallbackPolicyAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationPolicy___GetFallbackPolicyAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // IAuthorizationPolicyProvider


// type: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
    /**
    
            Represents an authorization requirement.
            

    */
open class IAuthorizationRequirement
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationRequirement
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // IAuthorizationRequirement


// type: Microsoft.AspNetCore.Authorization.IAuthorizationService
    /**
    
            Checks policy based permissions for a user
            

    */
open class IAuthorizationService
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationService
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationService_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizationService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(System.Security.Claims.ClaimsPrincipal, System.Object, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationService.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal,System.Object,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizationRequirement})
    /**
    
            Checks if a user meets a specific set of requirements for the specified resource
            

    - Parameter user: The user to evaluate the requirements against.
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Parameter requirements: The requirements to evaluate.
    - Returns: 
            A flag indicating whether authorization has succeeded.
            This value is true when the user fulfills the policy; otherwise false.
            

    */
    open func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, requirements : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement>) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__ClaimsPrincipal_Object_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizationRequirement_(&__thrown, self.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, requirements.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(System.Security.Claims.ClaimsPrincipal, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationService.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal,System.Object,System.String)
    /**
    
            Checks if a user meets a specific authorization policy
            

    - Parameter user: The user to check the policy against.
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Parameter policyName: The name of the policy to check against a specific context.
    - Returns: 
            A flag indicating whether authorization has succeeded.
            Returns a flag indicating whether the user, and optional resource has fulfilled the policy.
            true when the policy has been fulfilled; otherwise false.
            

    */
    open func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_AuthorizationResult___AuthorizeAsync_0__3__ClaimsPrincipal_Object_String(&__thrown, self.get_handle(), user.get_handle(), resource?.get_handle() ?? nil, policyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // IAuthorizationService


}
// Microsoft.AspNetCore.Authorization.Infrastructure
extension Microsoft.AspNetCore.Authorization.Infrastructure {
// type: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
    /**
    
            Implements an  and 
            that takes a user specified assertion.
            

    */
open class AssertionRequirement
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandler,
    Microsoft_AspNetCore_Authorization_IAuthorizationRequirement
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,bool>)
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})
    /**
    
            Creates a new instance of .
            

    - Parameter handler: Function that is called to handle this requirement.
    */
    public init(handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Bool>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_ctor_0__1__System_Func_Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_bool_(&__thrown, handler.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task<bool>>)
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})
    /**
    
            Creates a new instance of .
            

    - Parameter handler: Function that is called to handle this requirement.
    */
    public init(handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,dotnet.System.Threading.Tasks.Task_1<Bool>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_ctor_0__1__System_Func_Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Threading_Tasks_System_Threading_Tasks_Task_bool__(&__thrown, handler.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Calls  to see if authorization is allowed.
            

    - Parameter context: The authorization information.
    */
    open /* method final */ func HandleAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_Task__HandleAsync_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task<bool>> get_Handler()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.get_Handler
    open func get_Handler() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,dotnet.System.Threading.Tasks.Task_1<Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_AssertionRequirement_System_Func_Microsoft_AspNetCore_Authorization_AuthorizationHandlerContext_System_Threading_Tasks_System_Threading_Tasks_Task_bool____get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    /**
    
            Function that is called to handle this requirement.
            

    */
    open var Handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,dotnet.System.Threading.Tasks.Task_1<Bool>> {
        get {
            return try! get_Handler();
        }
    }
} // AssertionRequirement


// inherit from self? Microsoft.AspNetCore.Authorization.Infrastructure.ClaimsAuthorizationRequirement
// inherit from self? Microsoft.AspNetCore.Authorization.Infrastructure.DenyAnonymousAuthorizationRequirement
// inherit from self? Microsoft.AspNetCore.Authorization.Infrastructure.NameAuthorizationRequirement
// type: Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement
    /**
    
            A helper class to provide a useful  which
            contains a name.
            

    */
open class OperationAuthorizationRequirement
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationRequirement
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_Infrastructure_OperationAuthorizationRequirement_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of this instance of .
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
} // OperationAuthorizationRequirement


// type: Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler
    /**
    
            Infrastructure class which allows an  to
            be its own .
            

    */
open class PassThroughAuthorizationHandler
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Infrastructure_PassThroughAuthorizationHandler_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_Infrastructure_PassThroughAuthorizationHandler_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Infrastructure_PassThroughAuthorizationHandler_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
// docid: M:Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    /**
    
            Makes a decision if authorization is allowed.
            

    - Parameter context: The authorization context.
    */
    open /* method final */ func HandleAsync(context : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Infrastructure_PassThroughAuthorizationHandler_Task__HandleAsync_0__1__AuthorizationHandlerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // PassThroughAuthorizationHandler


// inherit from self? Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement
}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions
public struct AuthorizationServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds authorization services to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAuthorizationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthorizationServiceCollectionExtensions_IServiceCollection__AddAuthorizationCore_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})
    /**
    
            Adds authorization services to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter configure: An action delegate to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAuthorizationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthorizationServiceCollectionExtensions_IServiceCollection__AddAuthorizationCore_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Authorization_AuthorizationOptions_(&__thrown, services.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAuthorizationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(configure);
        return try AddAuthorizationCore(services: services, configure: del_configure);
    }
} // AuthorizationServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Authorization_IAuthorizationEvaluator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationHandler
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationHandlerContextFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationHandlerProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationPolicyProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationRequirement
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizationService
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
extension Microsoft_AspNetCore_Authorization_IAuthorizationService {
    public func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, requirement : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationRequirement) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        return try await aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(service: aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService(hndl: __copy_handle(self.get_handle())), user: user, resource: resource, requirement: requirement);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
extension Microsoft_AspNetCore_Authorization_IAuthorizationService {
    public func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, resource : Optional<dotnet.System.Object>, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        return try await aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(service: aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService(hndl: __copy_handle(self.get_handle())), user: user, resource: resource, policy: policy);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
extension Microsoft_AspNetCore_Authorization_IAuthorizationService {
    public func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        return try await aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(service: aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService(hndl: __copy_handle(self.get_handle())), user: user, policy: policy);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.AuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.String)
extension Microsoft_AspNetCore_Authorization_IAuthorizationService {
    public func AuthorizeAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, policyName : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationResult {
        return try await aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(service: aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService(hndl: __copy_handle(self.get_handle())), user: user, policyName: policyName);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthorizationCore() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorizationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthorizationCore(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorizationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddAuthorizationCore(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorizationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

