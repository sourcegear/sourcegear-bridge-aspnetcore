// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory
    /**
    
            Default implementation of .
            

    */
open class DefaultServiceProviderFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_DefaultServiceProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory.#ctor
    /**
    
            Initializes a new instance of the  class
            with default options.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_DependencyInjection_DefaultServiceProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
// docid: M:Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory.#ctor(Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
    /**
    
            Initializes a new instance of the  class
            with the specified .
            

    - Parameter options: The options to use for this instance.
    */
    public init(options : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_DependencyInjection_DefaultServiceProviderFactory_ctor_0__1__ServiceProviderOptions(&__thrown, options?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    */
    open /* method final */ func CreateBuilder(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_DefaultServiceProviderFactory_IServiceCollection__CreateBuilder_0__1__IServiceCollection(&__thrown, self.get_handle(), services?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IServiceProvider CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    */
    open /* method final */ func CreateServiceProvider(containerBuilder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Optional<dotnet.System.IServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_DefaultServiceProviderFactory_IServiceProvider__CreateServiceProvider_0__1__IServiceCollection(&__thrown, self.get_handle(), containerBuilder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultServiceProviderFactory


// type: Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions
public struct ServiceCollectionContainerBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Creates a  containing services from the provided .
            

    - Parameter services: The  containing service descriptors.
    - Returns: The .

    */
    public static func BuildServiceProvider(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceCollectionContainerBuilderExtensions_ServiceProvider__BuildServiceProvider_0__1__IServiceCollection(&__thrown, services?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
    /**
    
            Creates a  containing services from the provided 
            optionally enabling scope validation.
            

    - Parameter services: The  containing service descriptors.
    - Parameter options: 
            Configures various service provider behaviors.
            
    - Returns: The .

    */
    public static func BuildServiceProvider(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, options : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceCollectionContainerBuilderExtensions_ServiceProvider__BuildServiceProvider_0__2__IServiceCollection_ServiceProviderOptions(&__thrown, services?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, bool)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)
    /**
    
            Creates a  containing services from the provided 
            optionally enabling scope validation.
            

    - Parameter services: The  containing service descriptors.
    - Parameter validateScopes: 
            true to perform check verifying that scoped services never gets resolved from root provider; otherwise false.
            
    - Returns: The .

    */
    public static func BuildServiceProvider(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, validateScopes : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceCollectionContainerBuilderExtensions_ServiceProvider__BuildServiceProvider_0__2__IServiceCollection_bool(&__thrown, services?.get_handle() ?? nil, Swift.Int32(validateScopes ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ServiceCollectionContainerBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.ServiceProvider
    /**
    
            The default IServiceProvider.
            

    */
public final class ServiceProvider
    :
    dotnet.System.Object,
    System_IAsyncDisposable,
    System_IDisposable,
    System_IServiceProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_ServiceProvider_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProvider.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ServiceProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProvider.DisposeAsync
    /**
    */
    public func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceProvider_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // System.Object GetService(System.Type)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(System.Type)
    /**
    
            Gets the service object of the specified type.
            

    - Parameter serviceType: The type of the service to get.
    - Returns: The service that was produced.

    */
    public func GetService(serviceType : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceProvider_Object__GetService_0__1__Type(&__thrown, self.get_handle(), serviceType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ServiceProvider


// type: Microsoft.Extensions.DependencyInjection.ServiceProviderOptions
    /**
    
            Options for configuring various behaviors of the default  implementation.
            

    */
open class ServiceProviderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_ValidateOnBuild()
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.get_ValidateOnBuild
    open func get_ValidateOnBuild() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_bool__get_ValidateOnBuild_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ValidateOnBuild(bool)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.set_ValidateOnBuild(System.Boolean)
    open func set_ValidateOnBuild(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_void__set_ValidateOnBuild_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ValidateScopes()
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.get_ValidateScopes
    open func get_ValidateScopes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_bool__get_ValidateScopes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ValidateScopes(bool)
// docid: M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.set_ValidateScopes(System.Boolean)
    open func set_ValidateScopes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_void__set_ValidateScopes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            true to perform check verifying that all services can be created during BuildServiceProvider call; otherwise false. Defaults to false.
            NOTE: this check doesn't verify open generics services.
            

    */
    open var ValidateOnBuild : Bool {
        get {
            return try! get_ValidateOnBuild();
        }
        set(v) {
            return try! set_ValidateOnBuild(value: v);
        }
    }
    /**
    
            true to perform check verifying that scoped services never gets resolved from root provider; otherwise false. Defaults to false.
            

    */
    open var ValidateScopes : Bool {
        get {
            return try! get_ValidateScopes();
        }
        set(v) {
            return try! set_ValidateScopes(value: v);
        }
    }
} // ServiceProviderOptions


}



// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func BuildServiceProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func BuildServiceProvider(options : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, bool)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func BuildServiceProvider(validateScopes : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProvider> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), validateScopes: validateScopes);
    }
}

