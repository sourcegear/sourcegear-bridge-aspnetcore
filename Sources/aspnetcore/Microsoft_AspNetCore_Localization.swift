// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions
public struct ApplicationBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  to automatically set culture information for
            requests based on information provided by the client.
            

    - Parameter app: The .
    - Returns: The .

    */
    public static func UseRequestLocalization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_IApplicationBuilder__UseRequestLocalization_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.RequestLocalizationOptions)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.RequestLocalizationOptions)
    /**
    
            Adds the  to automatically set culture information for
            requests based on information provided by the client.
            

    - Parameter app: The .
    - Parameter options: The  to configure the middleware with.
    - Returns: The .

    */
    public static func UseRequestLocalization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_IApplicationBuilder__UseRequestLocalization_0__2__IApplicationBuilder_RequestLocalizationOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>)
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.RequestLocalizationOptions})
    /**
    
            Adds the  to automatically set culture information for
            requests based on information provided by the client.
            

    - Parameter app: The .
    - Parameter optionsAction: A callback that configures the .
    - Returns: The .

    */
    public static func UseRequestLocalization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, optionsAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_IApplicationBuilder__UseRequestLocalization_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Builder_RequestLocalizationOptions_(&__thrown, app.get_handle(), optionsAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseRequestLocalization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, optionsAction : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_optionsAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>(optionsAction);
        return try UseRequestLocalization(app: app, optionsAction: del_optionsAction);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String[])
// docid: M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String[])
    /**
    
            Adds the  to automatically set culture information for
            requests based on information provided by the client.
            

    - Parameter app: The .
    - Parameter cultures: The culture names to be added by the application, which is represents both supported cultures and UI cultures.
    - Returns: The .

    */
    public static func UseRequestLocalization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, cultures : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_IApplicationBuilder__UseRequestLocalization_0__2__IApplicationBuilder_StringArray(&__thrown, app.get_handle(), cultures.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // ApplicationBuilderExtensions


// type: Microsoft.AspNetCore.Builder.RequestLocalizationOptions
    /**
    
            Specifies options for the .
            

    */
open class RequestLocalizationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_RequestLocalizationOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.#ctor
    /**
    
            Creates a new  with default values.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Builder.RequestLocalizationOptions AddSupportedCultures(System.String[])
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.AddSupportedCultures(System.String[])
    /**
    
            Adds the set of the supported cultures by the application.
            

    - Parameter cultures: The cultures to be added.
    - Returns: The .

    */
    open func AddSupportedCultures(cultures : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_RequestLocalizationOptions__AddSupportedCultures_0__1__StringArray(&__thrown, self.get_handle(), cultures.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.RequestLocalizationOptions AddSupportedUICultures(System.String[])
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.AddSupportedUICultures(System.String[])
    /**
    
            Adds the set of the supported UI cultures by the application.
            

    - Parameter uiCultures: The UI cultures to be added.
    - Returns: The .

    */
    open func AddSupportedUICultures(uiCultures : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_RequestLocalizationOptions__AddSupportedUICultures_0__1__StringArray(&__thrown, self.get_handle(), uiCultures.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.RequestLocalizationOptions SetDefaultCulture(System.String)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.SetDefaultCulture(System.String)
    /**
    
            Set the default culture which is used by the application when a supported culture could not be determined by
            one of the configured s.
            

    - Parameter defaultCulture: The default culture to be set.
    - Returns: The .

    */
    open func SetDefaultCulture(defaultCulture : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_RequestLocalizationOptions__SetDefaultCulture_0__1__String(&__thrown, self.get_handle(), defaultCulture.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Localization.RequestCulture get_DefaultRequestCulture()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_DefaultRequestCulture
    open func get_DefaultRequestCulture() throws -> aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_RequestCulture__get_DefaultRequestCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultRequestCulture(Microsoft.AspNetCore.Localization.RequestCulture)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_DefaultRequestCulture(Microsoft.AspNetCore.Localization.RequestCulture)
    open func set_DefaultRequestCulture(value : aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_DefaultRequestCulture_0__1__RequestCulture(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_FallBackToParentCultures()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_FallBackToParentCultures
    open func get_FallBackToParentCultures() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_bool__get_FallBackToParentCultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_FallBackToParentCultures(bool)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_FallBackToParentCultures(System.Boolean)
    open func set_FallBackToParentCultures(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_FallBackToParentCultures_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_FallBackToParentUICultures()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_FallBackToParentUICultures
    open func get_FallBackToParentUICultures() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_bool__get_FallBackToParentUICultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_FallBackToParentUICultures(bool)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_FallBackToParentUICultures(System.Boolean)
    open func set_FallBackToParentUICultures(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_FallBackToParentUICultures_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ApplyCurrentCultureToResponseHeaders()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_ApplyCurrentCultureToResponseHeaders
    open func get_ApplyCurrentCultureToResponseHeaders() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_bool__get_ApplyCurrentCultureToResponseHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ApplyCurrentCultureToResponseHeaders(bool)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_ApplyCurrentCultureToResponseHeaders(System.Boolean)
    open func set_ApplyCurrentCultureToResponseHeaders(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_ApplyCurrentCultureToResponseHeaders_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Globalization.CultureInfo> get_SupportedCultures()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_SupportedCultures
    open func get_SupportedCultures() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_System_Collections_Generic_IList_System_Globalization_CultureInfo___get_SupportedCultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SupportedCultures(System.Collections.Generic.IList<System.Globalization.CultureInfo>)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_SupportedCultures(System.Collections.Generic.IList{System.Globalization.CultureInfo})
    open func set_SupportedCultures(value : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_SupportedCultures_0__1__System_Collections_Generic_IList_System_Globalization_CultureInfo_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Globalization.CultureInfo> get_SupportedUICultures()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_SupportedUICultures
    open func get_SupportedUICultures() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_System_Collections_Generic_IList_System_Globalization_CultureInfo___get_SupportedUICultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SupportedUICultures(System.Collections.Generic.IList<System.Globalization.CultureInfo>)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_SupportedUICultures(System.Collections.Generic.IList{System.Globalization.CultureInfo})
    open func set_SupportedUICultures(value : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_SupportedUICultures_0__1__System_Collections_Generic_IList_System_Globalization_CultureInfo_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Localization.IRequestCultureProvider> get_RequestCultureProviders()
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.get_RequestCultureProviders
    open func get_RequestCultureProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Localization_IRequestCultureProvider___get_RequestCultureProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestCultureProviders(System.Collections.Generic.IList<Microsoft.AspNetCore.Localization.IRequestCultureProvider>)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptions.set_RequestCultureProviders(System.Collections.Generic.IList{Microsoft.AspNetCore.Localization.IRequestCultureProvider})
    open func set_RequestCultureProviders(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RequestLocalizationOptions_void__set_RequestCultureProviders_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Localization_IRequestCultureProvider_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value that determines if  is applied to the response Content-Language header.
            

    */
    open var ApplyCurrentCultureToResponseHeaders : Bool {
        get {
            return try! get_ApplyCurrentCultureToResponseHeaders();
        }
        set(v) {
            return try! set_ApplyCurrentCultureToResponseHeaders(value: v);
        }
    }
    /**
    
            Gets or sets the default culture to use for requests when a supported culture could not be determined by
            one of the configured s.
            Defaults to  and .
            

    */
    open var DefaultRequestCulture : aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture {
        get {
            return try! get_DefaultRequestCulture();
        }
        set(v) {
            return try! set_DefaultRequestCulture(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether to set a request culture to an parent culture in the case the
            culture determined by the configured s is not in the
             list but a parent culture is.
            Defaults to true;
            

    */
    open var FallBackToParentCultures : Bool {
        get {
            return try! get_FallBackToParentCultures();
        }
        set(v) {
            return try! set_FallBackToParentCultures(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether to set a request UI culture to a parent culture in the case the
            UI culture determined by the configured s is not in the
             list but a parent culture is.
            Defaults to true;
            

    */
    open var FallBackToParentUICultures : Bool {
        get {
            return try! get_FallBackToParentUICultures();
        }
        set(v) {
            return try! set_FallBackToParentUICultures(value: v);
        }
    }
    /**
    
            An ordered list of providers used to determine a request's culture information. The first provider that
            returns a non-null result for a given request will be used.
            Defaults to the following:
            
                
                
                
            
            

    */
    open var RequestCultureProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider> {
        get {
            return try! get_RequestCultureProviders();
        }
        set(v) {
            return try! set_RequestCultureProviders(value: v);
        }
    }
    /**
    
            The cultures supported by the application. The  will only set
            the current request culture to an entry in this list.
            Defaults to .
            

    */
    open var SupportedCultures : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>> {
        get {
            return try! get_SupportedCultures();
        }
        set(v) {
            return try! set_SupportedCultures(value: v!);
        }
    }
    /**
    
            The UI cultures supported by the application. The  will only set
            the current request culture to an entry in this list.
            Defaults to .
            

    */
    open var SupportedUICultures : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Globalization.CultureInfo>> {
        get {
            return try! get_SupportedUICultures();
        }
        set(v) {
            return try! set_SupportedUICultures(value: v!);
        }
    }
} // RequestLocalizationOptions


// type: Microsoft.AspNetCore.Builder.RequestLocalizationOptionsExtensions
public struct RequestLocalizationOptionsExtensions {
    // Microsoft.AspNetCore.Builder.RequestLocalizationOptions AddInitialRequestCultureProvider(Microsoft.AspNetCore.Builder.RequestLocalizationOptions, Microsoft.AspNetCore.Localization.RequestCultureProvider)
// docid: M:Microsoft.AspNetCore.Builder.RequestLocalizationOptionsExtensions.AddInitialRequestCultureProvider(Microsoft.AspNetCore.Builder.RequestLocalizationOptions,Microsoft.AspNetCore.Localization.RequestCultureProvider)
    /**
    
            Adds a new  to the .
            

    - Parameter requestLocalizationOptions: The cultures to be added.
    - Parameter requestCultureProvider: The cultures to be added.
    - Returns: The .

    */
    public static func AddInitialRequestCultureProvider(requestLocalizationOptions : aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions, requestCultureProvider : aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider) throws -> aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RequestLocalizationOptionsExtensions_RequestLocalizationOptions__AddInitialRequestCultureProvider_0__2__RequestLocalizationOptions_RequestCultureProvider(&__thrown, requestLocalizationOptions.get_handle(), requestCultureProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions(hndl : __return);
        }
    }
} // RequestLocalizationOptionsExtensions


}

// Microsoft.AspNetCore.Localization
extension Microsoft.AspNetCore.Localization {
// type: Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider
    /**
    
            Determines the culture information for a request via the value of the Accept-Language header.
            

    */
open class AcceptLanguageHeaderRequestCultureProvider
    :
    aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_AcceptLanguageHeaderRequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_AcceptLanguageHeaderRequestCultureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open override func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_AcceptLanguageHeaderRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumAcceptLanguageHeaderValuesToTry()
// docid: M:Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider.get_MaximumAcceptLanguageHeaderValuesToTry
    open func get_MaximumAcceptLanguageHeaderValuesToTry() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_AcceptLanguageHeaderRequestCultureProvider_i32__get_MaximumAcceptLanguageHeaderValuesToTry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumAcceptLanguageHeaderValuesToTry(System.Int32)
// docid: M:Microsoft.AspNetCore.Localization.AcceptLanguageHeaderRequestCultureProvider.set_MaximumAcceptLanguageHeaderValuesToTry(System.Int32)
    open func set_MaximumAcceptLanguageHeaderValuesToTry(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_AcceptLanguageHeaderRequestCultureProvider_void__set_MaximumAcceptLanguageHeaderValuesToTry_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The maximum number of values in the Accept-Language header to attempt to create a 
            from for the current request.
            Defaults to 3.
            

    */
    open var MaximumAcceptLanguageHeaderValuesToTry : Swift.Int32 {
        get {
            return try! get_MaximumAcceptLanguageHeaderValuesToTry();
        }
        set(v) {
            return try! set_MaximumAcceptLanguageHeaderValuesToTry(value: v);
        }
    }
} // AcceptLanguageHeaderRequestCultureProvider


// type: Microsoft.AspNetCore.Localization.CookieRequestCultureProvider
    /**
    
            Determines the culture information for a request via the value of a cookie.
            

    */
open class CookieRequestCultureProvider
    :
    aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultCookieName
    /**
    
            Represent the default cookie name used to track the user's preferred culture information, which is ".AspNetCore.Culture".
            

    */
    open class var DefaultCookieName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_get_DefaultCookieName());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open override func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String MakeCookieValue(Microsoft.AspNetCore.Localization.RequestCulture)
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.MakeCookieValue(Microsoft.AspNetCore.Localization.RequestCulture)
    /**
    
            Creates a string representation of a  for placement in a cookie.
            

    - Parameter requestCulture: The .
    - Returns: The cookie value.

    */
    open class func MakeCookieValue(requestCulture : aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_String__MakeCookieValue_0__1__RequestCulture(&__thrown, requestCulture.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Localization.ProviderCultureResult ParseCookieValue(System.String)
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.ParseCookieValue(System.String)
    /**
    
            Parses a  from the specified cookie value.
            Returns null if parsing fails.
            

    - Parameter value: The cookie value to parse.
    - Returns: The  or null if parsing fails.

    */
    open class func ParseCookieValue(value : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_ProviderCultureResult__ParseCookieValue_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_CookieName()
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.get_CookieName
    open func get_CookieName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_String__get_CookieName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieName(System.String)
// docid: M:Microsoft.AspNetCore.Localization.CookieRequestCultureProvider.set_CookieName(System.String)
    open func set_CookieName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_CookieRequestCultureProvider_void__set_CookieName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the cookie that contains the user's preferred culture information.
            Defaults to .
            

    */
    open var CookieName : dotnet.System.String {
        get {
            return try! get_CookieName();
        }
        set(v) {
            return try! set_CookieName(value: v);
        }
    }
} // CookieRequestCultureProvider


// type: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
    /**
    
            Determines the culture information for a request via the configured delegate.
            

    */
open class CustomRequestCultureProvider
    :
    aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_CustomRequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<Microsoft.AspNetCore.Http.HttpContext,System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult>>)
// docid: M:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}})
    /**
    
            Creates a new  using the specified delegate.
            

    - Parameter provider: The provider delegate.
    */
    public init(provider : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_CustomRequestCultureProvider_ctor_0__1__System_Func_Microsoft_AspNetCore_Http_HttpContext_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult__(&__thrown, provider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open override func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_CustomRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // CustomRequestCultureProvider


// type: Microsoft.AspNetCore.Localization.IRequestCultureFeature
    /**
    
            Represents the feature that provides the current request's culture information.
            

    */
open class IRequestCultureFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Localization_IRequestCultureFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_IRequestCultureFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Localization.RequestCulture get_RequestCulture()
// docid: M:Microsoft.AspNetCore.Localization.IRequestCultureFeature.get_RequestCulture
    open func get_RequestCulture() throws -> aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_IRequestCultureFeature_RequestCulture__get_RequestCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Localization.IRequestCultureProvider get_Provider()
// docid: M:Microsoft.AspNetCore.Localization.IRequestCultureFeature.get_Provider
    open func get_Provider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_IRequestCultureFeature_IRequestCultureProvider__get_Provider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRequestCultureFeature


// type: Microsoft.AspNetCore.Localization.IRequestCultureProvider
    /**
    
            Represents a provider for determining the culture information of an .
            

    */
open class IRequestCultureProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Localization_IRequestCultureProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_IRequestCultureProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.IRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Implements the provider to determine the culture of the given request.
            

    - Parameter httpContext: The  for the request.
    - Returns: 
                The determined .
                Returns null if the provider couldn't determine a .
            

    */
    open func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_IRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IRequestCultureProvider


// type: Microsoft.AspNetCore.Localization.ProviderCultureResult
    /**
    
            Details about the cultures obtained from .
            

    */
open class ProviderCultureResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_ProviderCultureResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Creates a new  object that has its  and
             properties set to the same culture value.
            

    - Parameter culture: The name of the culture to be used for formatting, text, i.e. language.
    */
    public init(culture : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_ProviderCultureResult_ctor_0__1__StringSegment(&__thrown, culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Creates a new  object has its  and
             properties set to the respective culture values provided.
            

    - Parameter culture: The name of the culture to be used for formatting.
    - Parameter uiCulture:  The name of the ui culture to be used for text, i.e. language.
    */
    public init(culture : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, uiCulture : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_ProviderCultureResult_ctor_0__2__StringSegment_StringSegment(&__thrown, culture.get_handle(), uiCulture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment>)
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment})
    /**
    
            Creates a new  object that has its  and
             properties set to the same culture value.
            

    - Parameter cultures: The list of cultures to be used for formatting, text, i.e. language.
    */
    public init(cultures : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_ProviderCultureResult_ctor_0__1__System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment_(&__thrown, cultures.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment>, System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment>)
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment},System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment})
    /**
    
            Creates a new  object has its  and
             properties set to the respective culture values provided.
            

    - Parameter cultures: The list of cultures to be used for formatting.
    - Parameter uiCultures: The list of ui cultures to be used for text, i.e. language.
    */
    public init(cultures : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment>, uiCultures : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_ProviderCultureResult_ctor_0__2__System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment__System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment_(&__thrown, cultures.get_handle(), uiCultures.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment> get_Cultures()
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.get_Cultures
    open func get_Cultures() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_ProviderCultureResult_System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment___get_Cultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment> get_UICultures()
// docid: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.get_UICultures
    open func get_UICultures() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_ProviderCultureResult_System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment___get_UICultures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of cultures to be used for formatting.
            

    */
    open var Cultures : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_Cultures();
        }
    }
    /**
    
            Gets the list of ui cultures to be used for text, i.e. language;
            

    */
    open var UICultures : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_UICultures();
        }
    }
} // ProviderCultureResult


// type: Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider
    /**
    
            Determines the culture information for a request via values in the query string.
            

    */
open class QueryStringRequestCultureProvider
    :
    aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open override func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_QueryStringKey()
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.get_QueryStringKey
    open func get_QueryStringKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_String__get_QueryStringKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QueryStringKey(System.String)
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.set_QueryStringKey(System.String)
    open func set_QueryStringKey(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_void__set_QueryStringKey_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UIQueryStringKey()
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.get_UIQueryStringKey
    open func get_UIQueryStringKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_String__get_UIQueryStringKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UIQueryStringKey(System.String)
// docid: M:Microsoft.AspNetCore.Localization.QueryStringRequestCultureProvider.set_UIQueryStringKey(System.String)
    open func set_UIQueryStringKey(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_QueryStringRequestCultureProvider_void__set_UIQueryStringKey_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The key that contains the culture name.
            Defaults to "culture".
            

    */
    open var QueryStringKey : dotnet.System.String {
        get {
            return try! get_QueryStringKey();
        }
        set(v) {
            return try! set_QueryStringKey(value: v);
        }
    }
    /**
    
            The key that contains the UI culture name. If not specified or no value is found,
             will be used.
            Defaults to "ui-culture".
            

    */
    open var UIQueryStringKey : dotnet.System.String {
        get {
            return try! get_UIQueryStringKey();
        }
        set(v) {
            return try! set_UIQueryStringKey(value: v);
        }
    }
} // QueryStringRequestCultureProvider


// type: Microsoft.AspNetCore.Localization.RequestCulture
    /**
    
            Details about the culture for an .
            

    */
open class RequestCulture
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_RequestCulture_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.#ctor(System.Globalization.CultureInfo)
    /**
    
            Creates a new  object with its  and 
            properties set to the same  value.
            

    - Parameter culture: The  for the request.
    */
    public init(culture : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestCulture_ctor_0__1__CultureInfo(&__thrown, culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.#ctor(System.String)
    /**
    
            Creates a new  object with its  and 
            properties set to the same  value.
            

    - Parameter culture: The culture for the request.
    */
    public init(culture : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestCulture_ctor_0__1__String(&__thrown, culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.#ctor(System.String,System.String)
    /**
    
            Creates a new  object with its  and 
            properties set to the respective  values provided.
            

    - Parameter culture: The culture for the request to be used for formatting.
    - Parameter uiCulture: The culture for the request to be used for text, i.e. language.
    */
    public init(culture : dotnet.System.String, uiCulture : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestCulture_ctor_0__2__String_String(&__thrown, culture.get_handle(), uiCulture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Globalization.CultureInfo, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
    /**
    
            Creates a new  object with its  and 
            properties set to the respective  values provided.
            

    - Parameter culture: The  for the request to be used for formatting.
    - Parameter uiCulture: The  for the request to be used for text, i.e. language.
    */
    public init(culture : dotnet.System.Globalization.CultureInfo, uiCulture : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestCulture_ctor_0__2__CultureInfo_CultureInfo(&__thrown, culture.get_handle(), uiCulture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.get_Culture
    open func get_Culture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCulture_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_UICulture()
// docid: M:Microsoft.AspNetCore.Localization.RequestCulture.get_UICulture
    open func get_UICulture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCulture_CultureInfo__get_UICulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    /**
    
            Gets the  for the request to be used for formatting.
            

    */
    open var Culture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_Culture();
        }
    }
    /**
    
            Gets the  for the request to be used for text, i.e. language;
            

    */
    open var UICulture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_UICulture();
        }
    }
} // RequestCulture


// type: Microsoft.AspNetCore.Localization.RequestCultureFeature
    /**
    
            Provides the current request's culture information.
            

    */
open class RequestCultureFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Localization_IRequestCultureFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_RequestCultureFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Localization.RequestCulture, Microsoft.AspNetCore.Localization.IRequestCultureProvider)
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureFeature.#ctor(Microsoft.AspNetCore.Localization.RequestCulture,Microsoft.AspNetCore.Localization.IRequestCultureProvider)
    /**
    
            Creates a new  with the specified .
            

    - Parameter requestCulture: The .
    - Parameter provider: The .
    */
    public init(requestCulture : aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture, provider : Optional<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestCultureFeature_ctor_0__2__RequestCulture_IRequestCultureProvider(&__thrown, requestCulture.get_handle(), provider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Localization.RequestCulture get_RequestCulture()
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureFeature.get_RequestCulture
    open /* method final */ func get_RequestCulture() throws -> aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCultureFeature_RequestCulture__get_RequestCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Localization.IRequestCultureProvider get_Provider()
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureFeature.get_Provider
    open /* method final */ func get_Provider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCultureFeature_IRequestCultureProvider__get_Provider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public var Provider : Optional<aspnetcore.Microsoft.AspNetCore.Localization.IRequestCultureProvider> {
        get {
            return try! get_Provider();
        }
    }
    /**
    */
    public var RequestCulture : aspnetcore.Microsoft.AspNetCore.Localization.RequestCulture {
        get {
            return try! get_RequestCulture();
        }
    }
} // RequestCultureFeature


// type: Microsoft.AspNetCore.Localization.RequestCultureProvider
    /**
    
            An abstract base class provider for determining the culture information of an .
            

    */
open class RequestCultureProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Localization_IRequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_RequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.RequestLocalizationOptions get_Options()
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureProvider.get_Options
    open func get_Options() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestCultureProvider_RequestLocalizationOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Options(Microsoft.AspNetCore.Builder.RequestLocalizationOptions)
// docid: M:Microsoft.AspNetCore.Localization.RequestCultureProvider.set_Options(Microsoft.AspNetCore.Builder.RequestLocalizationOptions)
    open func set_Options(value : Optional<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_RequestCultureProvider_void__set_Options_0__1__RequestLocalizationOptions(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The current options for the .
            

    */
    open var Options : Optional<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions> {
        get {
            return try! get_Options();
        }
        set(v) {
            return try! set_Options(value: v!);
        }
    }
} // RequestCultureProvider


// type: Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware
    /**
    
            Enables automatic setting of the culture for s based on information
            sent by the client in headers and logic provided by the application.
            

    */
open class RequestLocalizationMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_RequestLocalizationMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.RequestLocalizationOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter options: The  representing the options for the
            The  used for logging.
            .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_RequestLocalizationMiddleware_ctor_0__3__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_RequestLocalizationOptions__ILoggerFactory(&__thrown, next.get_handle(), options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the logic of the middleware.
            

    - Parameter context: The .
    - Returns: A  that completes when the middleware has completed processing.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_RequestLocalizationMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RequestLocalizationMiddleware


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions
public struct RequestLocalizationServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddRequestLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.RequestLocalizationOptions})
    /**
    
            Adds services and options for the request localization middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: The .

    */
    public static func AddRequestLocalization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_RequestLocalizationServiceCollectionExtensions_IServiceCollection__AddRequestLocalization_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_RequestLocalizationOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRequestLocalization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>(configureOptions);
        return try AddRequestLocalization(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddRequestLocalization<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions,TService>)
// docid: M:Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.RequestLocalizationOptions,``0})
    /**
    
            Adds services and options for the request localization middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: The .

    */
    public static func AddRequestLocalization<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_RequestLocalizationServiceCollectionExtensions_IServiceCollection__AddRequestLocalization_1__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_RequestLocalizationOptions_UTService_(UTService.get_type_handle(), &__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRequestLocalization<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions,UTService>(configureOptions);
        return try AddRequestLocalization(services: services, configureOptions: del_configureOptions);
    }
} // RequestLocalizationServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Localization_IRequestCultureFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Localization_IRequestCultureProvider
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRequestLocalization() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.RequestLocalizationOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRequestLocalization(options : aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRequestLocalization(optionsAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), optionsAction: optionsAction);
    }
    // delegate closure overload
    public func UseRequestLocalization(optionsAction : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_optionsAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>(optionsAction);
        return try aspnetcore.Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), optionsAction: del_optionsAction);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String[])
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRequestLocalization(cultures : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), cultures: cultures);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.RequestLocalizationOptions AddInitialRequestCultureProvider(Microsoft.AspNetCore.Builder.RequestLocalizationOptions, Microsoft.AspNetCore.Localization.RequestCultureProvider)
extension aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
    public func AddInitialRequestCultureProvider(requestCultureProvider : aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider) throws -> aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptionsExtensions.AddInitialRequestCultureProvider(requestLocalizationOptions: self, requestCultureProvider: requestCultureProvider);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddRequestLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRequestLocalization(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddRequestLocalization(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddRequestLocalization<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.RequestLocalizationOptions,TService>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRequestLocalization<UTService : SGBridgeGenericValue>(configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddRequestLocalization<UTService : SGBridgeGenericValue>(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.RequestLocalizationOptions,UTService>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RequestLocalizationServiceCollectionExtensions.AddRequestLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

