// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.Cors
extension Microsoft.AspNetCore.Mvc.Cors {
// type: Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter
    /**
    
            A filter that applies the given  and adds appropriate response headers.
            

    */
open class CorsAuthorizationFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.#ctor(Microsoft.AspNetCore.Cors.Infrastructure.ICorsService,Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider)
    /**
    
            Creates a new instance of .
            

    - Parameter corsService: The .
    - Parameter policyProvider: The .
    */
    public init(corsService : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, policyProvider : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_ctor_0__2__ICorsService_ICorsPolicyProvider(&__thrown, corsService.get_handle(), policyProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.#ctor(Microsoft.AspNetCore.Cors.Infrastructure.ICorsService,Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new instance of .
            

    - Parameter corsService: The .
    - Parameter policyProvider: The .
    - Parameter loggerFactory: The .
    */
    public init(corsService : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsService, policyProvider : aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_ctor_0__3__ICorsService_ICorsPolicyProvider_ILoggerFactory(&__thrown, corsService.get_handle(), policyProvider.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
    /**
    */
    open /* method final */ func OnAuthorizationAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_Task__OnAuthorizationAsync_0__1__AuthorizationFilterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_PolicyName()
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.get_PolicyName
    open func get_PolicyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_String__get_PolicyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PolicyName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.set_PolicyName(System.String)
    open func set_PolicyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_void__set_PolicyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Cors.CorsAuthorizationFilter.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Cors_CorsAuthorizationFilter_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The policy name used to fetch a .
            

    */
    open var PolicyName : Optional<dotnet.System.String> {
        get {
            return try! get_PolicyName();
        }
        set(v) {
            return try! set_PolicyName(value: v!);
        }
    }
} // CorsAuthorizationFilter


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions
public struct MvcCorsMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Configures  to use CORS.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddCors(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCorsMvcCoreBuilderExtensions_IMvcCoreBuilder__AddCors_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})
    /**
    
            Configures  to use CORS.
            

    - Parameter builder: The .
    - Parameter setupAction: An  to configure the provided .
    - Returns: The .

    */
    public static func AddCors(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCorsMvcCoreBuilderExtensions_IMvcCoreBuilder__AddCors_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCors(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try AddCors(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})
    /**
    
            Configures .
            

    - Parameter builder: The .
    - Parameter setupAction: The configure action.
    - Returns: The .

    */
    public static func ConfigureCors(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCorsMvcCoreBuilderExtensions_IMvcCoreBuilder__ConfigureCors_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Cors_Infrastructure_CorsOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureCors(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try ConfigureCors(builder: builder, setupAction: del_setupAction);
    }
} // MvcCorsMvcCoreBuilderExtensions


}



// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCors() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCors(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddCors(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func ConfigureCors(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.ConfigureCors(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureCors(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.ConfigureCors(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

