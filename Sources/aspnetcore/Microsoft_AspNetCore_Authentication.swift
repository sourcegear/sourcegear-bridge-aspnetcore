// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authentication
extension Microsoft.AspNetCore.Authentication {
// type: Microsoft.AspNetCore.Authentication.AccessDeniedContext
    /**
    
            Provides access denied failure context information to handler providers.
            

    */
open class AccessDeniedContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AccessDeniedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions)
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The .
    - Parameter scheme: The .
    - Parameter options: The .
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AccessDeniedContext_ctor_0__3__HttpContext_AuthenticationScheme_RemoteAuthenticationOptions(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_AccessDeniedPath()
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.get_AccessDeniedPath
    open func get_AccessDeniedPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AccessDeniedContext_PathString__get_AccessDeniedPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
    open func set_AccessDeniedPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AccessDeniedContext_void__set_AccessDeniedPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AccessDeniedContext_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AccessDeniedContext_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReturnUrl()
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.get_ReturnUrl
    open func get_ReturnUrl() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AccessDeniedContext_String__get_ReturnUrl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReturnUrl(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.set_ReturnUrl(System.String)
    open func set_ReturnUrl(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AccessDeniedContext_void__set_ReturnUrl_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReturnUrlParameter()
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.get_ReturnUrlParameter
    open func get_ReturnUrlParameter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AccessDeniedContext_String__get_ReturnUrlParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ReturnUrlParameter(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AccessDeniedContext.set_ReturnUrlParameter(System.String)
    open func set_ReturnUrlParameter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AccessDeniedContext_void__set_ReturnUrlParameter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the endpoint path the user agent will be redirected to.
            By default, this property is set to .
            

    */
    open var AccessDeniedPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_AccessDeniedPath();
        }
        set(v) {
            return try! set_AccessDeniedPath(value: v);
        }
    }
    /**
    
            Additional state values for the authentication session.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
    /**
    
            Gets or sets the return URL that will be flowed up to the access denied page.
            If  is not set, this property is not used.
            

    */
    open var ReturnUrl : Optional<dotnet.System.String> {
        get {
            return try! get_ReturnUrl();
        }
        set(v) {
            return try! set_ReturnUrl(value: v!);
        }
    }
    /**
    
            Gets or sets the parameter name that will be used to flow the return URL.
            By default, this property is set to .
            

    */
    open var ReturnUrlParameter : dotnet.System.String {
        get {
            return try! get_ReturnUrlParameter();
        }
        set(v) {
            return try! set_ReturnUrlParameter(value: v);
        }
    }
} // AccessDeniedContext


// type: Microsoft.AspNetCore.Authentication.AuthenticationBuilder
    /**
    
            Used to configure authentication
            

    */
open class AuthenticationBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter services: The services being configured.
    */
    public init(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationBuilder_ctor_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddScheme<TOptions, THandler>(System.String, System.String, System.Action<TOptions>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddScheme<TOptions, THandler>(System.String, System.Action<TOptions>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddRemoteScheme<TOptions, THandler>(System.String, System.String, System.Action<TOptions>)
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddPolicyScheme(System.String, System.String, System.Action<Microsoft.AspNetCore.Authentication.PolicySchemeOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AddPolicyScheme(System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.PolicySchemeOptions})
    /**
    
            Adds a  based authentication handler which can be used to
            redirect to other authentication schemes.
            

    - Parameter authenticationScheme: The name of this scheme.
    - Parameter displayName: The display name of this scheme.
    - Parameter configureOptions: Used to configure the scheme options.
    - Returns: The builder.

    */
    open func AddPolicyScheme(authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.PolicySchemeOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationBuilder_AuthenticationBuilder__AddPolicyScheme_0__3__String_String_System_Action_Microsoft_AspNetCore_Authentication_PolicySchemeOptions_(&__thrown, self.get_handle(), authenticationScheme.get_handle(), displayName?.get_handle() ?? nil, configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddPolicyScheme(authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.PolicySchemeOptions>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.PolicySchemeOptions>(configureOptions);
        return try AddPolicyScheme(authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: del_configureOptions);
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationBuilder.get_Services
    open func get_Services() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    /**
    
            The services being configured.
            

    */
    open var Services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        get {
            return try! get_Services();
        }
    }
} // AuthenticationBuilder


// type: Microsoft.AspNetCore.Authentication.AuthenticationHandler`1
    /**
    
            An opinionated abstraction for implementing .
            

    */
open class AuthenticationHandler_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Initialize the handler, resolve the options and validate them.
            

    - Parameter scheme: 
    - Parameter context: 
    - Returns: 

    */
    open /* method final */ func InitializeAsync(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_Task__InitializeAsync_0__2__AuthenticationScheme_HttpContext(TOptions.get_type_handle(), &__thrown, self.get_handle(), scheme.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.AuthenticateAsync
    /**
    */
    open /* method final */ func AuthenticateAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open /* method final */ func ChallengeAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_Task__ChallengeAsync_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open /* method final */ func ForbidAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_Task__ForbidAsync_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationScheme get_Scheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.get_Scheme
    open func get_Scheme() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_AuthenticationScheme__get_Scheme_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme(hndl : __return);
        }
    }
    // [IsSpecialName] TOptions get_Options()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.get_Options
    open func get_Options() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandler_1_TOptions__get_Options_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    /**
    
            Gets or sets the options associated with this authentication handler.
            

    */
    open var Options : TOptions {
        get {
            return try! get_Options();
        }
    }
    /**
    
            Gets or sets the  asssociated with this authentication handler.
            

    */
    open var Scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        get {
            return try! get_Scheme();
        }
    }
} // AuthenticationHandler_1


// type: Microsoft.AspNetCore.Authentication.AuthenticationMiddleware
    /**
    
            Middleware that performs authentication.
            

    */
open class AuthenticationMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter next: The next item in the middleware pipeline.
    - Parameter schemes: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationMiddleware_ctor_0__2__RequestDelegate_IAuthenticationSchemeProvider(&__thrown, next.get_handle(), schemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the middleware performing authentication.
            

    - Parameter context: The .
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider get_Schemes()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.get_Schemes
    open func get_Schemes() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationMiddleware_IAuthenticationSchemeProvider__get_Schemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Schemes(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.set_Schemes(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
    open func set_Schemes(value : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationMiddleware_void__set_Schemes_0__1__IAuthenticationSchemeProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        get {
            return try! get_Schemes();
        }
        set(v) {
            return try! set_Schemes(value: v);
        }
    }
} // AuthenticationMiddleware


// type: Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions
    /**
    
            Contains the options used by the .
            

    */
open class AuthenticationSchemeOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Validate()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate
    /**
    
            Check that the options are valid. Should throw an exception if things are not ok.
            

    */
    open func Validate() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__Validate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate(System.String)
    /**
    
            Checks that the options are valid for a specific scheme
            

    - Parameter scheme: The scheme being validated.
    */
    open func Validate(scheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__Validate_0__1__String(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ClaimsIssuer()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ClaimsIssuer
    open func get_ClaimsIssuer() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ClaimsIssuer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ClaimsIssuer(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ClaimsIssuer(System.String)
    open func set_ClaimsIssuer(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ClaimsIssuer_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Events()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_Events
    open func get_Events() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_Object__get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Events(System.Object)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_Events(System.Object)
    open func set_Events(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_Events_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_EventsType()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_EventsType
    open func get_EventsType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_Type__get_EventsType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EventsType(System.Type)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_EventsType(System.Type)
    open func set_EventsType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_EventsType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardDefault()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardDefault
    open func get_ForwardDefault() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardDefault(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardDefault(System.String)
    open func set_ForwardDefault(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardDefault_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardAuthenticate()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardAuthenticate
    open func get_ForwardAuthenticate() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardAuthenticate(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardAuthenticate(System.String)
    open func set_ForwardAuthenticate(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardAuthenticate_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardChallenge()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardChallenge
    open func get_ForwardChallenge() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardChallenge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardChallenge(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardChallenge(System.String)
    open func set_ForwardChallenge(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardChallenge_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardForbid()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardForbid
    open func get_ForwardForbid() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardForbid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardForbid(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardForbid(System.String)
    open func set_ForwardForbid(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardForbid_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardSignIn()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardSignIn
    open func get_ForwardSignIn() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardSignIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardSignIn(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardSignIn(System.String)
    open func set_ForwardSignIn(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardSignIn_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardSignOut()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardSignOut
    open func get_ForwardSignOut() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_String__get_ForwardSignOut_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardSignOut(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardSignOut(System.String)
    open func set_ForwardSignOut(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardSignOut_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Http.HttpContext,System.String> get_ForwardDefaultSelector()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.get_ForwardDefaultSelector
    open func get_ForwardDefaultSelector() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_System_Func_Microsoft_AspNetCore_Http_HttpContext_string___get_ForwardDefaultSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ForwardDefaultSelector(System.Func<Microsoft.AspNetCore.Http.HttpContext,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.set_ForwardDefaultSelector(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.String})
    open func set_ForwardDefaultSelector(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeOptions_void__set_ForwardDefaultSelector_0__1__System_Func_Microsoft_AspNetCore_Http_HttpContext_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ForwardDefaultSelector(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.String>(value);
        return try set_ForwardDefaultSelector(value: del_value);
    }
    /**
    
            Gets or sets the issuer that should be used for any claims that are created
            

    */
    open var ClaimsIssuer : Optional<dotnet.System.String> {
        get {
            return try! get_ClaimsIssuer();
        }
        set(v) {
            return try! set_ClaimsIssuer(value: v!);
        }
    }
    /**
    
            Instance used for events
            

    */
    open var Events : Optional<dotnet.System.Object> {
        get {
            return try! get_Events();
        }
        set(v) {
            return try! set_Events(value: v!);
        }
    }
    /**
    
            If set, will be used as the service type to get the Events instance instead of the property.
            

    */
    open var EventsType : Optional<dotnet.System.Type_> {
        get {
            return try! get_EventsType();
        }
        set(v) {
            return try! set_EventsType(value: v!);
        }
    }
    /**
    
            If set, this specifies the target scheme that this scheme should forward AuthenticateAsync calls to.
            For example Context.AuthenticateAsync("ThisScheme") => Context.AuthenticateAsync("ForwardAuthenticateValue");
            Set the target to the current scheme to disable forwarding and allow normal processing.
            

    */
    open var ForwardAuthenticate : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardAuthenticate();
        }
        set(v) {
            return try! set_ForwardAuthenticate(value: v!);
        }
    }
    /**
    
            If set, this specifies the target scheme that this scheme should forward ChallengeAsync calls to.
            For example Context.ChallengeAsync("ThisScheme") => Context.ChallengeAsync("ForwardChallengeValue");
            Set the target to the current scheme to disable forwarding and allow normal processing.
            

    */
    open var ForwardChallenge : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardChallenge();
        }
        set(v) {
            return try! set_ForwardChallenge(value: v!);
        }
    }
    /**
    
            If set, this specifies a default scheme that authentication handlers should forward all authentication operations to
            by default. The default forwarding logic will check the most specific ForwardAuthenticate/Challenge/Forbid/SignIn/SignOut
            setting first, followed by checking the ForwardDefaultSelector, followed by ForwardDefault. The first non null result
            will be used as the target scheme to forward to.
            

    */
    open var ForwardDefault : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardDefault();
        }
        set(v) {
            return try! set_ForwardDefault(value: v!);
        }
    }
    /**
    
            Used to select a default scheme for the current request that authentication handlers should forward all authentication operations to
            by default. The default forwarding logic will check the most specific ForwardAuthenticate/Challenge/Forbid/SignIn/SignOut
            setting first, followed by checking the ForwardDefaultSelector, followed by ForwardDefault. The first non null result
            will be used as the target scheme to forward to.
            

    */
    open var ForwardDefaultSelector : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.String>> {
        get {
            return try! get_ForwardDefaultSelector();
        }
        set(v) {
            return try! set_ForwardDefaultSelector(value: v!);
        }
    }
    /**
    
            If set, this specifies the target scheme that this scheme should forward ForbidAsync calls to.
            For example Context.ForbidAsync("ThisScheme") => Context.ForbidAsync("ForwardForbidValue");
            Set the target to the current scheme to disable forwarding and allow normal processing.
            

    */
    open var ForwardForbid : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardForbid();
        }
        set(v) {
            return try! set_ForwardForbid(value: v!);
        }
    }
    /**
    
            If set, this specifies the target scheme that this scheme should forward SignInAsync calls to.
            For example Context.SignInAsync("ThisScheme") => Context.SignInAsync("ForwardSignInValue");
            Set the target to the current scheme to disable forwarding and allow normal processing.
            

    */
    open var ForwardSignIn : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardSignIn();
        }
        set(v) {
            return try! set_ForwardSignIn(value: v!);
        }
    }
    /**
    
            If set, this specifies the target scheme that this scheme should forward SignOutAsync calls to.
            For example Context.SignOutAsync("ThisScheme") => Context.SignOutAsync("ForwardSignOutValue");
            Set the target to the current scheme to disable forwarding and allow normal processing.
            

    */
    open var ForwardSignOut : Optional<dotnet.System.String> {
        get {
            return try! get_ForwardSignOut();
        }
        set(v) {
            return try! set_ForwardSignOut(value: v!);
        }
    }
} // AuthenticationSchemeOptions


// type: Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder
public struct Base64UrlTextEncoder {
    // System.String Encode(System.Byte[])
// docid: M:Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder.Encode(System.Byte[])
    /**
    
            Encodes supplied data into Base64 and replaces any URL encodable characters into non-URL encodable
            characters.
            

    - Parameter data: Data to be encoded.
    - Returns: Base64 encoded string modified with non-URL encodable characters

    */
    public static func Encode(data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Base64UrlTextEncoder_String__Encode_0__1__u8Array(&__thrown, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Byte[] Decode(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder.Decode(System.String)
    /**
    
            Decodes supplied string by replacing the non-URL encodable characters with URL encodable characters and
            then decodes the Base64 string.
            

    - Parameter text: The string to be decoded.
    - Returns: The decoded data.

    */
    public static func Decode(text : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Base64UrlTextEncoder_u8Array__Decode_0__1__String(&__thrown, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
} // Base64UrlTextEncoder


// type: Microsoft.AspNetCore.Authentication.BaseContext`1
    /**
    
            Base class used by other context classes.
            

    */
open class BaseContext_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_BaseContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationScheme get_Scheme()
// docid: M:Microsoft.AspNetCore.Authentication.BaseContext`1.get_Scheme
    open func get_Scheme() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_BaseContext_1_AuthenticationScheme__get_Scheme_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme(hndl : __return);
        }
    }
    // [IsSpecialName] TOptions get_Options()
// docid: M:Microsoft.AspNetCore.Authentication.BaseContext`1.get_Options
    open func get_Options() throws -> TOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_BaseContext_1_TOptions__get_Options_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOptions(gval: __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Authentication.BaseContext`1.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_BaseContext_1_HttpContext__get_HttpContext_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Authentication.BaseContext`1.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_BaseContext_1_HttpRequest__get_Request_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Authentication.BaseContext`1.get_Response
    open func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_BaseContext_1_HttpResponse__get_Response_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    /**
    
            The context.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets the authentication options associated with the scheme.
            

    */
    open var Options : TOptions {
        get {
            return try! get_Options();
        }
    }
    /**
    
            The request.
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            The response.
            

    */
    open var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            The authentication scheme.
            

    */
    open var Scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        get {
            return try! get_Scheme();
        }
    }
} // BaseContext_1


// type: Microsoft.AspNetCore.Authentication.HandleRequestContext`1
    /**
    
            Base context type for handling authentication request.
            

    */
open class HandleRequestContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.BaseContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_HandleRequestContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void HandleResponse()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestContext`1.HandleResponse
    /**
    
            Discontinue all processing for this request and return to the client.
            The caller is responsible for generating the full response.
            

    */
    open func HandleResponse() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_HandleRequestContext_1_void__HandleResponse_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SkipHandler()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestContext`1.SkipHandler
    /**
    
            Discontinue processing the request in the current handler.
            

    */
    open func SkipHandler() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_HandleRequestContext_1_void__SkipHandler_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.HandleRequestResult get_Result()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestContext`1.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestContext_1_HandleRequestResult__get_Result_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Authentication.HandleRequestResult)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestContext`1.set_Result(Microsoft.AspNetCore.Authentication.HandleRequestResult)
    open func set_Result(value : aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_HandleRequestContext_1_void__set_Result_0__1__HandleRequestResult(TOptions.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The  which is used by the handler.
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v);
        }
    }
} // HandleRequestContext_1


// type: Microsoft.AspNetCore.Authentication.HandleRequestResult
    /**
    
            Contains the result of an Authenticate call
            

    */
open class HandleRequestResult
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_HandleRequestResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_HandleRequestResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Indicates that authentication was successful.
            

    - Parameter ticket: The ticket representing the authentication result.
    - Returns: The result.

    */
    open class override func Success(ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Success_0__1__AuthenticationTicket(&__thrown, ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Fail(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.Exception)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failure: The failure exception.
    - Returns: The result.

    */
    open class override func Fail(failure : dotnet.System.Exception) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Fail_0__1__Exception(&__thrown, failure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Fail(System.Exception, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.Exception,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failure: The failure exception.
    - Parameter properties: Additional state values for the authentication session.
    - Returns: The result.

    */
    open class override func Fail(failure : dotnet.System.Exception, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Fail_0__2__Exception_AuthenticationProperties(&__thrown, failure.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Fail(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.String)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failureMessage: The failure message.
    - Returns: The result.

    */
    open class override func Fail(failureMessage : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Fail_0__1__String(&__thrown, failureMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Fail(System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failureMessage: The failure message.
    - Parameter properties: Additional state values for the authentication session.
    - Returns: The result.

    */
    open class override func Fail(failureMessage : dotnet.System.String, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Fail_0__2__String_AuthenticationProperties(&__thrown, failureMessage.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult Handle()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.Handle
    /**
    
            Discontinue all processing for this request and return to the client.
            The caller is responsible for generating the full response.
            

    - Returns: The result.

    */
    open class func Handle() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__Handle_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult SkipHandler()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.SkipHandler
    /**
    
            Discontinue processing the request in the current handler.
            

    - Returns: The result.

    */
    open class func SkipHandler() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__SkipHandler_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.HandleRequestResult NoResult()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.NoResult
    /**
    
            Indicates that there were no results produced during authentication.
            

    - Returns: The result.

    */
    open class override func NoResult() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_HandleRequestResult__NoResult_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestResult(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Handled()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.get_Handled
    open func get_Handled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_bool__get_Handled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Skipped()
// docid: M:Microsoft.AspNetCore.Authentication.HandleRequestResult.get_Skipped
    open func get_Skipped() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_HandleRequestResult_bool__get_Skipped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Indicates that stage of authentication was directly handled by
            user intervention and no further processing should be attempted.
            

    */
    open var Handled : Bool {
        get {
            return try! get_Handled();
        }
    }
    /**
    
            Indicates that the default authentication logic should be
            skipped and that the rest of the pipeline should be invoked.
            

    */
    open var Skipped : Bool {
        get {
            return try! get_Skipped();
        }
    }
} // HandleRequestResult


// type: Microsoft.AspNetCore.Authentication.IDataSerializer`1
    /**
    
            Contract for serialzing authentication data.
            

    */
open class IDataSerializer_1<TModel : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IDataSerializer_1
{
    public typealias TModel_IDataSerializer_1 = TModel;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IDataSerializer_1_get_type_handle(TModel.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Byte[] Serialize(TModel)
// docid: M:Microsoft.AspNetCore.Authentication.IDataSerializer`1.Serialize(`0)
    /**
    
            Serializes the specified .
            

    - Parameter model: The value to serialize.
    - Returns: The serialized data.

    */
    open func Serialize(model : TModel) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IDataSerializer_1_u8Array__Serialize_0__1__TModel(TModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // TModel Deserialize(System.Byte[])
// docid: M:Microsoft.AspNetCore.Authentication.IDataSerializer`1.Deserialize(System.Byte[])
    /**
    
            Deserializes the specified  as an instance of type .
            

    - Parameter data: The bytes being deserialized.
    - Returns: The model.

    */
    open func Deserialize(data : dotnet.System_Arr<Swift.UInt8>) throws -> TModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IDataSerializer_1_TModel__Deserialize_0__1__u8Array(TModel.get_type_handle(), &__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TModel(gval: __return);
        }
    }
} // IDataSerializer_1


// type: Microsoft.AspNetCore.Authentication.ISecureDataFormat`1
    /**
    
            A contract for securing data.
            

    */
open class ISecureDataFormat_1<TData : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_ISecureDataFormat_1
{
    public typealias TData_ISecureDataFormat_1 = TData;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_ISecureDataFormat_1_get_type_handle(TData.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String Protect(TData)
// docid: M:Microsoft.AspNetCore.Authentication.ISecureDataFormat`1.Protect(`0)
    /**
    
            Protects the specified .
            

    - Parameter data: The value to protect
    - Returns: The data protected value.

    */
    open func Protect(data : TData) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ISecureDataFormat_1_String__Protect_0__1__TData(TData.get_type_handle(), &__thrown, self.get_handle(), data.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Protect(TData, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ISecureDataFormat`1.Protect(`0,System.String)
    /**
    
            Protects the specified  for the specified .
            

    - Parameter data: The value to protect
    - Parameter purpose: The purpose.
    - Returns: A data protected value.

    */
    open func Protect(data : TData, purpose : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ISecureDataFormat_1_String__Protect_0__2__TData_String(TData.get_type_handle(), &__thrown, self.get_handle(), data.to_gval(), purpose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // TData Unprotect(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ISecureDataFormat`1.Unprotect(System.String)
    /**
    
            Unprotects the specified .
            

    - Parameter protectedText: The data protected value.
    - Returns: An instance of .

    */
    open func Unprotect(protectedText : Optional<dotnet.System.String>) throws -> TData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ISecureDataFormat_1_TData__Unprotect_0__1__String(TData.get_type_handle(), &__thrown, self.get_handle(), protectedText?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TData(gval: __return);
        }
    }
    // TData Unprotect(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ISecureDataFormat`1.Unprotect(System.String,System.String)
    /**
    
            Unprotects the specified  using the specified .
            

    - Parameter protectedText: The data protected value.
    - Parameter purpose: The purpose.
    - Returns: An instance of .

    */
    open func Unprotect(protectedText : Optional<dotnet.System.String>, purpose : Optional<dotnet.System.String>) throws -> TData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ISecureDataFormat_1_TData__Unprotect_0__2__String_String(TData.get_type_handle(), &__thrown, self.get_handle(), protectedText?.get_handle() ?? nil, purpose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TData(gval: __return);
        }
    }
} // ISecureDataFormat_1


// type: Microsoft.AspNetCore.Authentication.ISystemClock
    /**
    
            Abstracts the system clock to facilitate testing.
            

    */
open class ISystemClock
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_ISystemClock
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_ISystemClock_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.DateTimeOffset get_UtcNow()
// docid: M:Microsoft.AspNetCore.Authentication.ISystemClock.get_UtcNow
    open func get_UtcNow() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ISystemClock_DateTimeOffset__get_UtcNow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
} // ISystemClock


// type: Microsoft.AspNetCore.Authentication.JsonDocumentAuthExtensions
public struct JsonDocumentAuthExtensions {
    // System.String GetString(System.Text.Json.JsonElement, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.JsonDocumentAuthExtensions.GetString(System.Text.Json.JsonElement,System.String)
    /**
    
            Gets a string property value from the specified .
            

    - Parameter element: The .
    - Parameter key: The property name.
    - Returns: The property value.

    */
    public static func GetString(element : dotnet.System.Text.Json.JsonElement, key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_JsonDocumentAuthExtensions_String__GetString_0__2__JsonElement_String(&__thrown, element.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // JsonDocumentAuthExtensions


// type: Microsoft.AspNetCore.Authentication.PolicySchemeHandler
    /**
    
            PolicySchemes are used to redirect authentication methods to another scheme.
            

    */
open class PolicySchemeHandler
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler_1<aspnetcore.Microsoft.AspNetCore.Authentication.PolicySchemeOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PolicySchemeHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.AspNetCore.Authentication.PolicySchemeOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Authentication.ISystemClock)
// docid: M:Microsoft.AspNetCore.Authentication.PolicySchemeHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.PolicySchemeOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The monitor for the options instance.
    - Parameter logger: The .
    - Parameter encoder: The .
    - Parameter clock: The .
    */
    public override init(options : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<aspnetcore.Microsoft.AspNetCore.Authentication.PolicySchemeOptions>, logger : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, encoder : dotnet.System.Text.Encodings.Web.UrlEncoder, clock : aspnetcore.Microsoft.AspNetCore.Authentication.ISystemClock) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_PolicySchemeHandler_ctor_0__4__Microsoft_Extensions_Options_IOptionsMonitor_Microsoft_AspNetCore_Authentication_PolicySchemeOptions__ILoggerFactory_UrlEncoder_ISystemClock(&__thrown, options.get_handle(), logger.get_handle(), encoder.get_handle(), clock.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PolicySchemeHandler


// type: Microsoft.AspNetCore.Authentication.PolicySchemeOptions
    /**
    
            Contains the options used by the .
            

    */
open class PolicySchemeOptions
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PolicySchemeOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.PolicySchemeOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_PolicySchemeOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PolicySchemeOptions


// type: Microsoft.AspNetCore.Authentication.PrincipalContext`1
    /**
    
            Base context for authentication events which deal with a ClaimsPrincipal.
            

    */
open class PrincipalContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PrincipalContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Authentication.PrincipalContext`1.get_Principal
    open func get_Principal() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PrincipalContext_1_ClaimsPrincipal__get_Principal_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Principal(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.PrincipalContext`1.set_Principal(System.Security.Claims.ClaimsPrincipal)
    open func set_Principal(value : Optional<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_PrincipalContext_1_void__set_Principal_0__1__ClaimsPrincipal(TOptions.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  containing the user claims.
            

    */
    open var Principal : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_Principal();
        }
        set(v) {
            return try! set_Principal(value: v!);
        }
    }
} // PrincipalContext_1


// type: Microsoft.AspNetCore.Authentication.PropertiesContext`1
    /**
    
            Base context for authentication events which contain .
            

    */
open class PropertiesContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.BaseContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PropertiesContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesContext`1.get_Properties
    open func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PropertiesContext_1_AuthenticationProperties__get_Properties_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesContext`1.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_PropertiesContext_1_void__set_Properties_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v);
        }
    }
} // PropertiesContext_1


// type: Microsoft.AspNetCore.Authentication.PropertiesDataFormat
    /**
    
            A  instance to secure
            .
            

    */
open class PropertiesDataFormat
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.SecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PropertiesDataFormat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.DataProtection.IDataProtector)
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesDataFormat.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtector)
    /**
    
            Initializes a new instance of .
            

    - Parameter protector: The .
    */
    public init(protector : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtector) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_PropertiesDataFormat_ctor_0__1__IDataProtector(&__thrown, protector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PropertiesDataFormat


// type: Microsoft.AspNetCore.Authentication.PropertiesSerializer
    /**
    
            A  for .
            

    */
open class PropertiesSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_PropertiesSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_PropertiesSerializer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Byte[] Serialize(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.Serialize(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open func Serialize(model : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PropertiesSerializer_u8Array__Serialize_0__1__AuthenticationProperties(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationProperties Deserialize(System.Byte[])
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.Deserialize(System.Byte[])
    /**
    */
    open func Deserialize(data : dotnet.System_Arr<Swift.UInt8>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PropertiesSerializer_AuthenticationProperties__Deserialize_0__1__u8Array(&__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Write(System.IO.BinaryWriter, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.Write(System.IO.BinaryWriter,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open func Write(writer : dotnet.System.IO.BinaryWriter, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_PropertiesSerializer_void__Write_0__2__BinaryWriter_AuthenticationProperties(&__thrown, self.get_handle(), writer.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationProperties Read(System.IO.BinaryReader)
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.Read(System.IO.BinaryReader)
    /**
    */
    open func Read(reader : dotnet.System.IO.BinaryReader) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PropertiesSerializer_AuthenticationProperties__Read_0__1__BinaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.PropertiesSerializer get_Default()
// docid: M:Microsoft.AspNetCore.Authentication.PropertiesSerializer.get_Default
    open class func get_Default() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesSerializer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_PropertiesSerializer_PropertiesSerializer__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesSerializer(hndl : __return);
        }
    }
    /**
    
            Gets the default instance of .
            

    */
    public static var Default : aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesSerializer {
        get {
            return try! get_Default();
        }
    }
} // PropertiesSerializer


// type: Microsoft.AspNetCore.Authentication.RedirectContext`1
    /**
    
            Context passed for redirect events.
            

    */
open class RedirectContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RedirectContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, TOptions, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RedirectContext`1.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,`0,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Creates a new context object.
            

    - Parameter context: The HTTP request context
    - Parameter scheme: The scheme data
    - Parameter options: The handler options
    - Parameter redirectUri: The initial redirect URI
    - Parameter properties: The .
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : TOptions, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, redirectUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_RedirectContext_1_ctor_0__5__HttpContext_AuthenticationScheme_TOptions_AuthenticationProperties_String(TOptions.get_type_handle(), &__thrown, context.get_handle(), scheme.get_handle(), options.to_gval(), properties.get_handle(), redirectUri.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RedirectUri()
// docid: M:Microsoft.AspNetCore.Authentication.RedirectContext`1.get_RedirectUri
    open func get_RedirectUri() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RedirectContext_1_String__get_RedirectUri_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RedirectUri(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RedirectContext`1.set_RedirectUri(System.String)
    open func set_RedirectUri(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RedirectContext_1_void__set_RedirectUri_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or Sets the URI used for the redirect operation.
            

    */
    open var RedirectUri : dotnet.System.String {
        get {
            return try! get_RedirectUri();
        }
        set(v) {
            return try! set_RedirectUri(value: v);
        }
    }
} // RedirectContext_1


// type: Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1
    /**
    
            Base context for remote authentication.
            

    */
open class RemoteAuthenticationContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Success()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.Success
    /**
    
            Calls success creating a ticket with the  and .
            

    */
    open func Success() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_void__Success_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.Fail(System.Exception)
    /**
    
            Indicates that authentication failed.
            

    - Parameter failure: The exception associated with the failure.
    */
    open func Fail(failure : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_void__Fail_0__1__Exception(TOptions.get_type_handle(), &__thrown, self.get_handle(), failure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.Fail(System.String)
    /**
    
            Indicates that authentication failed.
            

    - Parameter failureMessage: The exception associated with the failure.
    */
    open func Fail(failureMessage : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_void__Fail_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), failureMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.get_Principal
    open func get_Principal() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_ClaimsPrincipal__get_Principal_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Principal(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.set_Principal(System.Security.Claims.ClaimsPrincipal)
    open func set_Principal(value : Optional<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_void__set_Principal_0__1__ClaimsPrincipal(TOptions.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_AuthenticationProperties__get_Properties_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationContext_1_void__set_Properties_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  containing the user claims.
            

    */
    open var Principal : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_Principal();
        }
        set(v) {
            return try! set_Principal(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // RemoteAuthenticationContext_1


// type: Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents
    /**
    
            Allows subscribing to events raised during remote authentication.
            

    */
open class RemoteAuthenticationEvents
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task AccessDenied(Microsoft.AspNetCore.Authentication.AccessDeniedContext)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.AccessDenied(Microsoft.AspNetCore.Authentication.AccessDeniedContext)
    /**
    
            Invoked when an access denied error was returned by the remote server.
            

    */
    open func AccessDenied(context : aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_Task__AccessDenied_0__1__AccessDeniedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.RemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext)
    /**
    
            Invoked when there is a remote failure.
            

    */
    open func RemoteFailure(context : aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_Task__RemoteFailure_0__1__RemoteFailureContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task TicketReceived(Microsoft.AspNetCore.Authentication.TicketReceivedContext)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.TicketReceived(Microsoft.AspNetCore.Authentication.TicketReceivedContext)
    /**
    
            Invoked after the remote ticket has been received.
            

    */
    open func TicketReceived(context : aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_Task__TicketReceived_0__1__TicketReceivedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.AccessDeniedContext,System.Threading.Tasks.Task> get_OnAccessDenied()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.get_OnAccessDenied
    open func get_OnAccessDenied() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_AccessDeniedContext_Task___get_OnAccessDenied_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnAccessDenied(System.Func<Microsoft.AspNetCore.Authentication.AccessDeniedContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.set_OnAccessDenied(System.Func{Microsoft.AspNetCore.Authentication.AccessDeniedContext,System.Threading.Tasks.Task})
    open func set_OnAccessDenied(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_void__set_OnAccessDenied_0__1__System_Func_Microsoft_AspNetCore_Authentication_AccessDeniedContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnAccessDenied(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnAccessDenied(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RemoteFailureContext,System.Threading.Tasks.Task> get_OnRemoteFailure()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.get_OnRemoteFailure
    open func get_OnRemoteFailure() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_RemoteFailureContext_Task___get_OnRemoteFailure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRemoteFailure(System.Func<Microsoft.AspNetCore.Authentication.RemoteFailureContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.set_OnRemoteFailure(System.Func{Microsoft.AspNetCore.Authentication.RemoteFailureContext,System.Threading.Tasks.Task})
    open func set_OnRemoteFailure(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_void__set_OnRemoteFailure_0__1__System_Func_Microsoft_AspNetCore_Authentication_RemoteFailureContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRemoteFailure(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRemoteFailure(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.TicketReceivedContext,System.Threading.Tasks.Task> get_OnTicketReceived()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.get_OnTicketReceived
    open func get_OnTicketReceived() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_TicketReceivedContext_Task___get_OnTicketReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnTicketReceived(System.Func<Microsoft.AspNetCore.Authentication.TicketReceivedContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.set_OnTicketReceived(System.Func{Microsoft.AspNetCore.Authentication.TicketReceivedContext,System.Threading.Tasks.Task})
    open func set_OnTicketReceived(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationEvents_void__set_OnTicketReceived_0__1__System_Func_Microsoft_AspNetCore_Authentication_TicketReceivedContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnTicketReceived(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnTicketReceived(value: del_value);
    }
    /**
    
            Invoked when an access denied error was returned by the remote server.
            

    */
    open var OnAccessDenied : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.AccessDeniedContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnAccessDenied();
        }
        set(v) {
            return try! set_OnAccessDenied(value: v);
        }
    }
    /**
    
            Invoked when there is a remote failure.
            

    */
    open var OnRemoteFailure : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteFailureContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRemoteFailure();
        }
        set(v) {
            return try! set_OnRemoteFailure(value: v);
        }
    }
    /**
    
            Invoked after the remote ticket has been received.
            

    */
    open var OnTicketReceived : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.TicketReceivedContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnTicketReceived();
        }
        set(v) {
            return try! set_OnTicketReceived(value: v);
        }
    }
} // RemoteAuthenticationEvents


// type: Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1
    /**
    
            An opinionated abstraction for an  that performs authentication using a separately hosted
            provider.
            

    */
open class RemoteAuthenticationHandler_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHandler_1<TOptions>,
    Microsoft_AspNetCore_Authentication_IAuthenticationRequestHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RemoteAuthenticationHandler_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<bool> ShouldHandleRequestAsync()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1.ShouldHandleRequestAsync
    /**
    
            Gets a value that determines if the current authentication request should be handled by .
            

    - Returns:  to handle the operation, otherwise .

    */
    open func ShouldHandleRequestAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationHandler_1_System_Threading_Tasks_Task_bool___ShouldHandleRequestAsync_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> HandleRequestAsync()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1.HandleRequestAsync
    /**
    
            Handles the current authentication request.
            

    - Returns:  if authentication was handled, otherwise .

    */
    open func HandleRequestAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationHandler_1_System_Threading_Tasks_Task_bool___HandleRequestAsync_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // RemoteAuthenticationHandler_1


// type: Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions
    /**
    
            Contains the options used by the .
            

    */
open class RemoteAuthenticationOptions
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.#ctor
    /**
    
            Initializes a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Validate(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate(System.String)
    /**
    
            Checks that the options are valid for a specific scheme
            

    - Parameter scheme: The scheme being validated.
    */
    open override func Validate(scheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__Validate_0__1__String(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate
    /**
    
            Check that the options are valid.  Should throw an exception if things are not ok.
            

    */
    open override func Validate() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__Validate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_BackchannelTimeout()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_BackchannelTimeout
    open func get_BackchannelTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_TimeSpan__get_BackchannelTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_BackchannelTimeout(System.TimeSpan)
    // [IsSpecialName] System.Net.Http.HttpMessageHandler get_BackchannelHttpHandler()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_BackchannelHttpHandler
    open func get_BackchannelHttpHandler() throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_HttpMessageHandler__get_BackchannelHttpHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BackchannelHttpHandler(System.Net.Http.HttpMessageHandler)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_BackchannelHttpHandler(System.Net.Http.HttpMessageHandler)
    open func set_BackchannelHttpHandler(value : Optional<dotnet.System.Net.Http.HttpMessageHandler>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_BackchannelHttpHandler_0__1__HttpMessageHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpClient get_Backchannel()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_Backchannel
    open func get_Backchannel() throws -> dotnet.System.Net.Http.HttpClient {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_HttpClient__get_Backchannel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.HttpClient(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Backchannel(System.Net.Http.HttpClient)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_Backchannel(System.Net.Http.HttpClient)
    open func set_Backchannel(value : dotnet.System.Net.Http.HttpClient) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_Backchannel_0__1__HttpClient(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.DataProtection.IDataProtectionProvider get_DataProtectionProvider()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_DataProtectionProvider
    open func get_DataProtectionProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_IDataProtectionProvider__get_DataProtectionProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_DataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
    open func set_DataProtectionProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_DataProtectionProvider_0__1__IDataProtectionProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_CallbackPath()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_CallbackPath
    open func get_CallbackPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_PathString__get_CallbackPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CallbackPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_CallbackPath(Microsoft.AspNetCore.Http.PathString)
    open func set_CallbackPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_CallbackPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_AccessDeniedPath()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_AccessDeniedPath
    open func get_AccessDeniedPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_PathString__get_AccessDeniedPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
    open func set_AccessDeniedPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_AccessDeniedPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReturnUrlParameter()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_ReturnUrlParameter
    open func get_ReturnUrlParameter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_String__get_ReturnUrlParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ReturnUrlParameter(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_ReturnUrlParameter(System.String)
    open func set_ReturnUrlParameter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_ReturnUrlParameter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SignInScheme()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_SignInScheme
    open func get_SignInScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_String__get_SignInScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignInScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_SignInScheme(System.String)
    open func set_SignInScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_SignInScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_RemoteAuthenticationTimeout()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_RemoteAuthenticationTimeout
    open func get_RemoteAuthenticationTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_TimeSpan__get_RemoteAuthenticationTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_RemoteAuthenticationTimeout(System.TimeSpan)
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents get_Events()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_Events
    open override func get_Events() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_RemoteAuthenticationEvents__get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Events(Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_Events(Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents)
    open func set_Events(value : aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_Events_0__1__RemoteAuthenticationEvents(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SaveTokens()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_SaveTokens
    open func get_SaveTokens() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_bool__get_SaveTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SaveTokens(bool)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_SaveTokens(System.Boolean)
    open func set_SaveTokens(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_SaveTokens_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_CorrelationCookie()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.get_CorrelationCookie
    open func get_CorrelationCookie() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_CookieBuilder__get_CorrelationCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CorrelationCookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.set_CorrelationCookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_CorrelationCookie(value : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteAuthenticationOptions_void__set_CorrelationCookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the optional path the user agent is redirected to if the user
            doesn't approve the authorization demand requested by the remote server.
            This property is not set by default. In this case, an exception is thrown
            if an access_denied response is returned by the remote authorization server.
            

    */
    open var AccessDeniedPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_AccessDeniedPath();
        }
        set(v) {
            return try! set_AccessDeniedPath(value: v);
        }
    }
    /**
    
            Used to communicate with the remote identity provider.
            

    */
    open var Backchannel : dotnet.System.Net.Http.HttpClient {
        get {
            return try! get_Backchannel();
        }
        set(v) {
            return try! set_Backchannel(value: v);
        }
    }
    /**
    
            The HttpMessageHandler used to communicate with remote identity provider.
            This cannot be set at the same time as BackchannelCertificateValidator unless the value
            can be downcast to a WebRequestHandler.
            

    */
    open var BackchannelHttpHandler : Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        get {
            return try! get_BackchannelHttpHandler();
        }
        set(v) {
            return try! set_BackchannelHttpHandler(value: v!);
        }
    }
    /**
    
            Gets or sets timeout value in milliseconds for back channel communications with the remote identity provider.
            

    */
    open var BackchannelTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_BackchannelTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_BackchannelTimeout(System.TimeSpan)
    }
    /**
    
            The request path within the application's base path where the user-agent will be returned.
            The middleware will process this request when it arrives.
            

    */
    open var CallbackPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_CallbackPath();
        }
        set(v) {
            return try! set_CallbackPath(value: v);
        }
    }
    /**
    
            Determines the settings used to create the correlation cookie before the
            cookie gets added to the response.
            

    */
    open var CorrelationCookie : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        get {
            return try! get_CorrelationCookie();
        }
        set(v) {
            return try! set_CorrelationCookie(value: v);
        }
    }
    /**
    
            Gets or sets the type used to secure data.
            

    */
    open var DataProtectionProvider : Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider> {
        get {
            return try! get_DataProtectionProvider();
        }
        set(v) {
            return try! set_DataProtectionProvider(value: v!);
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents get_Events()
    /**
    
            Gets or sets the time limit for completing the authentication flow (15 minutes by default).
            

    */
    open var RemoteAuthenticationTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_RemoteAuthenticationTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_RemoteAuthenticationTimeout(System.TimeSpan)
    }
    /**
    
            Gets or sets the name of the parameter used to convey the original location
            of the user before the remote challenge was triggered up to the access denied page.
            This property is only used when the  is explicitly specified.
            

    */
    open var ReturnUrlParameter : dotnet.System.String {
        get {
            return try! get_ReturnUrlParameter();
        }
        set(v) {
            return try! set_ReturnUrlParameter(value: v);
        }
    }
    /**
    
            Defines whether access and refresh tokens should be stored in the
             after a successful authorization.
            This property is set to false by default to reduce
            the size of the final authentication cookie.
            

    */
    open var SaveTokens : Bool {
        get {
            return try! get_SaveTokens();
        }
        set(v) {
            return try! set_SaveTokens(value: v);
        }
    }
    /**
    
            Gets or sets the authentication scheme corresponding to the middleware
            responsible of persisting user's identity after a successful authentication.
            This value typically corresponds to a cookie middleware registered in the Startup class.
            When omitted,  is used as a fallback value.
            

    */
    open var SignInScheme : Optional<dotnet.System.String> {
        get {
            return try! get_SignInScheme();
        }
        set(v) {
            return try! set_SignInScheme(value: v!);
        }
    }
} // RemoteAuthenticationOptions


// type: Microsoft.AspNetCore.Authentication.RemoteFailureContext
    /**
    
            Provides failure context information to handler providers.
            

    */
open class RemoteFailureContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.HandleRequestContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RemoteFailureContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions, System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteFailureContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions,System.Exception)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The .
    - Parameter scheme: The .
    - Parameter options: The .
    - Parameter failure: User friendly error message for the error.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions, failure : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_RemoteFailureContext_ctor_0__4__HttpContext_AuthenticationScheme_RemoteAuthenticationOptions_Exception(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), failure.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Exception get_Failure()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteFailureContext.get_Failure
    open func get_Failure() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteFailureContext_Exception__get_Failure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Failure(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteFailureContext.set_Failure(System.Exception)
    open func set_Failure(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteFailureContext_void__set_Failure_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.RemoteFailureContext.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RemoteFailureContext_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.RemoteFailureContext.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_RemoteFailureContext_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            User friendly error message for the error.
            

    */
    open var Failure : Optional<dotnet.System.Exception> {
        get {
            return try! get_Failure();
        }
        set(v) {
            return try! set_Failure(value: v!);
        }
    }
    /**
    
            Additional state values for the authentication session.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // RemoteFailureContext


// type: Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder
    /**
    
            A cookie builder that sets  to the request path base.
            

    */
open class RequestPathBaseCookieBuilder
    :
    aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_RequestPathBaseCookieBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_RequestPathBaseCookieBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.CookieOptions Build(Microsoft.AspNetCore.Http.HttpContext, System.DateTimeOffset)
// docid: M:Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext,System.DateTimeOffset)
    /**
    
            Configures  if not explicitly configured.
            

    */
    open override func Build(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, expiresFrom : dotnet.System.DateTimeOffset) throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_RequestPathBaseCookieBuilder_CookieOptions__Build_0__2__HttpContext_DateTimeOffset(&__thrown, self.get_handle(), context.get_handle(), expiresFrom.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
} // RequestPathBaseCookieBuilder


// type: Microsoft.AspNetCore.Authentication.ResultContext`1
    /**
    
            Base context for events that produce AuthenticateResults.
            

    */
open class ResultContext_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.BaseContext_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_ResultContext_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Success()
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.Success
    /**
    
            Calls success creating a ticket with the  and .
            

    */
    open func Success() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__Success_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void NoResult()
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.NoResult
    /**
    
            Indicates that there was no information returned for this authentication scheme.
            

    */
    open func NoResult() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__NoResult_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.Fail(System.Exception)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failure: 
    */
    open func Fail(failure : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__Fail_0__1__Exception(TOptions.get_type_handle(), &__thrown, self.get_handle(), failure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.Fail(System.String)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failureMessage: 
    */
    open func Fail(failureMessage : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__Fail_0__1__String(TOptions.get_type_handle(), &__thrown, self.get_handle(), failureMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.get_Principal
    open func get_Principal() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ResultContext_1_ClaimsPrincipal__get_Principal_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Principal(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.set_Principal(System.Security.Claims.ClaimsPrincipal)
    open func set_Principal(value : Optional<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__set_Principal_0__1__ClaimsPrincipal(TOptions.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.get_Properties
    open func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ResultContext_1_AuthenticationProperties__get_Properties_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_ResultContext_1_void__set_Properties_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticateResult get_Result()
// docid: M:Microsoft.AspNetCore.Authentication.ResultContext`1.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_ResultContext_1_AuthenticateResult__get_Result_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    /**
    
            Gets or sets the  containing the user claims.
            

    */
    open var Principal : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_Principal();
        }
        set(v) {
            return try! set_Principal(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v);
        }
    }
    /**
    
            Gets the  result.
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        get {
            return try! get_Result();
        }
    }
} // ResultContext_1


// type: Microsoft.AspNetCore.Authentication.SecureDataFormat`1
    /**
    
            An implementation for .
            

    */
open class SecureDataFormat_1<TData : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_SecureDataFormat_1_get_type_handle(TData.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Authentication.IDataSerializer<TData>, Microsoft.AspNetCore.DataProtection.IDataProtector)
// docid: M:Microsoft.AspNetCore.Authentication.SecureDataFormat`1.#ctor(Microsoft.AspNetCore.Authentication.IDataSerializer{`0},Microsoft.AspNetCore.DataProtection.IDataProtector)
    /**
    
            Initializes a new instance of .
            

    - Parameter serializer: The .
    - Parameter protector: The .
    */
    public init(serializer : aspnetcore.Microsoft.AspNetCore.Authentication.IDataSerializer_1<TData>, protector : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtector) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_SecureDataFormat_1_ctor_0__2__Microsoft_AspNetCore_Authentication_IDataSerializer_TData__IDataProtector(TData.get_type_handle(), &__thrown, serializer.get_handle(), protector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Protect(TData)
// docid: M:Microsoft.AspNetCore.Authentication.SecureDataFormat`1.Protect(`0)
    /**
    */
    open /* method final */ func Protect(data : TData) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SecureDataFormat_1_String__Protect_0__1__TData(TData.get_type_handle(), &__thrown, self.get_handle(), data.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Protect(TData, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.SecureDataFormat`1.Protect(`0,System.String)
    /**
    */
    open /* method final */ func Protect(data : TData, purpose : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SecureDataFormat_1_String__Protect_0__2__TData_String(TData.get_type_handle(), &__thrown, self.get_handle(), data.to_gval(), purpose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // TData Unprotect(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.SecureDataFormat`1.Unprotect(System.String)
    /**
    */
    open /* method final */ func Unprotect(protectedText : Optional<dotnet.System.String>) throws -> TData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SecureDataFormat_1_TData__Unprotect_0__1__String(TData.get_type_handle(), &__thrown, self.get_handle(), protectedText?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TData(gval: __return);
        }
    }
    // TData Unprotect(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.SecureDataFormat`1.Unprotect(System.String,System.String)
    /**
    */
    open /* method final */ func Unprotect(protectedText : Optional<dotnet.System.String>, purpose : Optional<dotnet.System.String>) throws -> TData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SecureDataFormat_1_TData__Unprotect_0__2__String_String(TData.get_type_handle(), &__thrown, self.get_handle(), protectedText?.get_handle() ?? nil, purpose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TData(gval: __return);
        }
    }
} // SecureDataFormat_1


// type: Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler`1
    /**
    
            Adds support for SignInAsync
            

    */
open class SignInAuthenticationHandler_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler_1<TOptions>,
    Microsoft_AspNetCore_Authentication_IAuthenticationSignInHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_SignInAuthenticationHandler_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<TOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Authentication.ISystemClock)
// docid: M:Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler`1.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{`0},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The monitor for the options instance.
    - Parameter logger: The .
    - Parameter encoder: The .
    - Parameter clock: The .
    */
    public override init(options : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<TOptions>, logger : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, encoder : dotnet.System.Text.Encodings.Web.UrlEncoder, clock : aspnetcore.Microsoft.AspNetCore.Authentication.ISystemClock) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_SignInAuthenticationHandler_1_ctor_0__4__Microsoft_Extensions_Options_IOptionsMonitor_TOptions__ILoggerFactory_UrlEncoder_ISystemClock(TOptions.get_type_handle(), &__thrown, options.get_handle(), logger.get_handle(), encoder.get_handle(), clock.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler`1.SignInAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open func SignInAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SignInAuthenticationHandler_1_Task__SignInAsync_0__2__ClaimsPrincipal_AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), user.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // SignInAuthenticationHandler_1


// type: Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler`1
    /**
    
            Adds support for SignOutAsync
            

    */
open class SignOutAuthenticationHandler_1<TOptions : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHandler_1<TOptions>,
    Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_SignOutAuthenticationHandler_1_get_type_handle(TOptions.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<TOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Authentication.ISystemClock)
// docid: M:Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler`1.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{`0},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The monitor for the options instance.
    - Parameter logger: The .
    - Parameter encoder: The .
    - Parameter clock: The .
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<TOptions>, logger : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, encoder : dotnet.System.Text.Encodings.Web.UrlEncoder, clock : aspnetcore.Microsoft.AspNetCore.Authentication.ISystemClock) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_SignOutAuthenticationHandler_1_ctor_0__4__Microsoft_Extensions_Options_IOptionsMonitor_TOptions__ILoggerFactory_UrlEncoder_ISystemClock(TOptions.get_type_handle(), &__thrown, options.get_handle(), logger.get_handle(), encoder.get_handle(), clock.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler`1.SignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    */
    open func SignOutAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SignOutAuthenticationHandler_1_Task__SignOutAsync_0__1__AuthenticationProperties(TOptions.get_type_handle(), &__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // SignOutAuthenticationHandler_1


// type: Microsoft.AspNetCore.Authentication.SystemClock
    /**
    
            Provides access to the normal system clock with precision in seconds.
            

    */
open class SystemClock
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_ISystemClock
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_SystemClock_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.SystemClock.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_SystemClock_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.DateTimeOffset get_UtcNow()
// docid: M:Microsoft.AspNetCore.Authentication.SystemClock.get_UtcNow
    open /* method final */ func get_UtcNow() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_SystemClock_DateTimeOffset__get_UtcNow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    /**
    
            Retrieves the current system time in UTC.
            

    */
    public var UtcNow : dotnet.System.DateTimeOffset {
        get {
            return try! get_UtcNow();
        }
    }
} // SystemClock


// type: Microsoft.AspNetCore.Authentication.TicketDataFormat
    /**
    
            A  instance to secure
            .
            

    */
open class TicketDataFormat
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.SecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_TicketDataFormat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.DataProtection.IDataProtector)
// docid: M:Microsoft.AspNetCore.Authentication.TicketDataFormat.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtector)
    /**
    
            Initializes a new instance of .
            

    - Parameter protector: The .
    */
    public init(protector : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtector) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_TicketDataFormat_ctor_0__1__IDataProtector(&__thrown, protector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // TicketDataFormat


// type: Microsoft.AspNetCore.Authentication.TicketReceivedContext
    /**
    
            Provides context information to handler providers.
            

    */
open class TicketReceivedContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_TicketReceivedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions, Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.TicketReceivedContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions,Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Initializes a new instance of .
            

    - Parameter context: The .
    - Parameter scheme: The .
    - Parameter options: The .
    - Parameter ticket: The received ticket.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_TicketReceivedContext_ctor_0__4__HttpContext_AuthenticationScheme_RemoteAuthenticationOptions_AuthenticationTicket(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), ticket.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ReturnUri()
// docid: M:Microsoft.AspNetCore.Authentication.TicketReceivedContext.get_ReturnUri
    open func get_ReturnUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_TicketReceivedContext_String__get_ReturnUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReturnUri(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.TicketReceivedContext.set_ReturnUri(System.String)
    open func set_ReturnUri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_TicketReceivedContext_void__set_ReturnUri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the URL to redirect to after signin.
            

    */
    open var ReturnUri : Optional<dotnet.System.String> {
        get {
            return try! get_ReturnUri();
        }
        set(v) {
            return try! set_ReturnUri(value: v!);
        }
    }
} // TicketReceivedContext


// type: Microsoft.AspNetCore.Authentication.TicketSerializer
    /**
    
            Serializes and deserializes  instances.
            

    */
open class TicketSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_TicketSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_TicketSerializer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Byte[] Serialize(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.Serialize(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    */
    open func Serialize(ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_TicketSerializer_u8Array__Serialize_0__1__AuthenticationTicket(&__thrown, self.get_handle(), ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationTicket Deserialize(System.Byte[])
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.Deserialize(System.Byte[])
    /**
    */
    open func Deserialize(data : dotnet.System_Arr<Swift.UInt8>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_TicketSerializer_AuthenticationTicket__Deserialize_0__1__u8Array(&__thrown, self.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Write(System.IO.BinaryWriter, Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.Write(System.IO.BinaryWriter,Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Writes the  using the specified .
            

    - Parameter writer: The .
    - Parameter ticket: The .
    */
    open func Write(writer : dotnet.System.IO.BinaryWriter, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_TicketSerializer_void__Write_0__2__BinaryWriter_AuthenticationTicket(&__thrown, self.get_handle(), writer.get_handle(), ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationTicket Read(System.IO.BinaryReader)
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.Read(System.IO.BinaryReader)
    /**
    
            Reads an .
            

    - Parameter reader: The .
    - Returns: The  if the format is supported, otherwise .

    */
    open func Read(reader : dotnet.System.IO.BinaryReader) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_TicketSerializer_AuthenticationTicket__Read_0__1__BinaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.TicketSerializer get_Default()
// docid: M:Microsoft.AspNetCore.Authentication.TicketSerializer.get_Default
    open class func get_Default() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.TicketSerializer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_TicketSerializer_TicketSerializer__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.TicketSerializer(hndl : __return);
        }
    }
    /**
    
            Gets the default implementation for .
            

    */
    public static var Default : aspnetcore.Microsoft.AspNetCore.Authentication.TicketSerializer {
        get {
            return try! get_Default();
        }
    }
} // TicketSerializer


}

// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions
public struct AuthAppBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions.UseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  to the specified , which enables authentication capabilities.
            

    - Parameter app: The  to add the middleware to.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseAuthentication(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthAppBuilderExtensions_IApplicationBuilder__UseAuthentication_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // AuthAppBuilderExtensions


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions
public struct AuthenticationServiceCollectionExtensions {
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Registers services required by authentication services.
            

    - Parameter services: The .
    - Returns: A  that can be used to further configure authentication.

    */
    public static func AddAuthentication(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthenticationServiceCollectionExtensions_AuthenticationBuilder__AddAuthentication_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)
    /**
    
            Registers services required by authentication services.  specifies the name of the
            scheme to use by default when a specific scheme isn't requested.
            

    - Parameter services: The .
    - Parameter defaultScheme: The default scheme used as a fallback for all other schemes.
    - Returns: A  that can be used to further configure authentication.

    */
    public static func AddAuthentication(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, defaultScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthenticationServiceCollectionExtensions_AuthenticationBuilder__AddAuthentication_0__2__IServiceCollection_String(&__thrown, services.get_handle(), defaultScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})
    /**
    
            Registers services required by authentication services and configures .
            

    - Parameter services: The .
    - Parameter configureOptions: A delegate to configure .
    - Returns: A  that can be used to further configure authentication.

    */
    public static func AddAuthentication(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthenticationServiceCollectionExtensions_AuthenticationBuilder__AddAuthentication_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Authentication_AuthenticationOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAuthentication(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>(configureOptions);
        return try AddAuthentication(services: services, configureOptions: del_configureOptions);
    }
} // AuthenticationServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Authentication_IDataSerializer_1
    :
    SGBridgeGetHandle
{
    associatedtype TModel_IDataSerializer_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Authentication_ISecureDataFormat_1
    :
    SGBridgeGetHandle
{
    associatedtype TData_ISecureDataFormat_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Authentication_ISystemClock
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.String GetString(System.Text.Json.JsonElement, System.String)
extension dotnet.System.Text.Json.JsonElement {
    public func GetString(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.JsonDocumentAuthExtensions.GetString(element: self, key: key);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseAuthentication() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions.UseAuthentication(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthentication() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthentication(defaultScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), defaultScheme: defaultScheme);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthentication(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddAuthentication(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

