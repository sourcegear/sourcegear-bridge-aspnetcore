// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authorization
extension Microsoft.AspNetCore.Authorization {
// type: Microsoft.AspNetCore.Authorization.IAllowAnonymous
    /**
    
            Marker interface to allow access to anonymous users.
            

    */
open class IAllowAnonymous
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAllowAnonymous
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAllowAnonymous_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAllowAnonymous_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // IAllowAnonymous


// type: Microsoft.AspNetCore.Authorization.IAuthorizeData
    /**
    
            Defines the set of data required to apply authorization rules to a resource.
            

    */
open class IAuthorizeData
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizeData
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizeData_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Authorization_IAuthorizeData_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] System.String get_Policy()
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.get_Policy
    open func get_Policy() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizeData_String__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Policy(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.set_Policy(System.String)
    open func set_Policy(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_IAuthorizeData_void__set_Policy_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Roles()
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.get_Roles
    open func get_Roles() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizeData_String__get_Roles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Roles(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.set_Roles(System.String)
    open func set_Roles(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_IAuthorizeData_void__set_Roles_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizeData_String__get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.String)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizeData.set_AuthenticationSchemes(System.String)
    open func set_AuthenticationSchemes(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authorization_IAuthorizeData_void__set_AuthenticationSchemes_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAuthorizeData


}



public protocol Microsoft_AspNetCore_Authorization_IAllowAnonymous
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_IAuthorizeData
    :
    SGBridgeGetHandle
{
}

