// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder
    /**
    
            Builds conventions that will be used for customization of  instances.
            

    */
public final class PageActionEndpointConventionBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_PageActionEndpointConventionBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})
    /**
    
            Adds the specified convention to the builder. Conventions are used to customize  instances.
            

    - Parameter convention: The convention to add to the builder.
    */
    public func Add(convention : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_PageActionEndpointConventionBuilder_void__Add_0__1__System_Action_Microsoft_AspNetCore_Builder_EndpointBuilder_(&__thrown, self.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Add(convention : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws -> Void) throws {
        let del_convention = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>(convention);
        return try Add(convention: del_convention);
    }
} // PageActionEndpointConventionBuilder


// type: Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions
public struct RazorPagesEndpointRouteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder MapRazorPages(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
// docid: M:Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapRazorPages(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
    /**
    
            Adds endpoints for Razor Pages to the .
            

    - Parameter endpoints: The .
    - Returns: An  for endpoints associated with Razor Pages.

    */
    public static func MapRazorPages(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RazorPagesEndpointRouteBuilderExtensions_PageActionEndpointConventionBuilder__MapRazorPages_0__1__IEndpointRouteBuilder(&__thrown, endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a page endpoint that
            matches .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter page: The page name.
    */
    public static func MapFallbackToPage(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, page : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RazorPagesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToPage_0__2__IEndpointRouteBuilder_String(&__thrown, endpoints.get_handle(), page.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a page endpoint that
            matches .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter page: The action name.
    */
    public static func MapFallbackToPage(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, page : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RazorPagesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToPage_0__3__IEndpointRouteBuilder_String_String(&__thrown, endpoints.get_handle(), pattern.get_handle(), page.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a page endpoint that
            matches , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter page: The action name.
    - Parameter area: The area name.
    */
    public static func MapFallbackToAreaPage(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, page : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RazorPagesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToAreaPage_0__3__IEndpointRouteBuilder_String_String(&__thrown, endpoints.get_handle(), page.get_handle(), area.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a page endpoint that
            matches , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter page: The action name.
    - Parameter area: The area name.
    */
    public static func MapFallbackToAreaPage(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, page : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RazorPagesEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToAreaPage_0__4__IEndpointRouteBuilder_String_String_String(&__thrown, endpoints.get_handle(), pattern.get_handle(), page.get_handle(), area.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)
} // RazorPagesEndpointRouteBuilderExtensions


}

// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.ApplicationModels
extension Microsoft.AspNetCore.Mvc.ApplicationModels {
// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention
    /**
    
            Allows customization of the .
            

    */
open class IPageApplicationModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelConvention,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelConvention_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter model: The .
    */
    open func Apply(model : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelConvention_void__Apply_0__1__PageApplicationModel(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPageApplicationModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider
    /**
    
            Provides parts that are used to construct a  instance
            

    */
open class IPageApplicationModelPartsProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel CreateHandlerModel(System.Reflection.MethodInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider.CreateHandlerModel(System.Reflection.MethodInfo)
    /**
    
            Creates a  for the specified .s
            

    - Parameter method: The .
    - Returns: The .

    */
    open func CreateHandlerModel(method : dotnet.System.Reflection.MethodInfo) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider_PageHandlerModel__CreateHandlerModel_0__1__MethodInfo(&__thrown, self.get_handle(), method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel CreateParameterModel(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider.CreateParameterModel(System.Reflection.ParameterInfo)
    /**
    
            Creates a  for the specified .
            

    - Parameter parameter: The .
    - Returns: The .

    */
    open func CreateParameterModel(parameter : dotnet.System.Reflection.ParameterInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider_PageParameterModel__CreateParameterModel_0__1__ParameterInfo(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel CreatePropertyModel(System.Reflection.PropertyInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider.CreatePropertyModel(System.Reflection.PropertyInfo)
    /**
    
            Creates a  for the .
            

    - Parameter property: The .
    - Returns: The .

    */
    open func CreatePropertyModel(property : dotnet.System.Reflection.PropertyInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider_PagePropertyModel__CreatePropertyModel_0__1__PropertyInfo(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel(hndl : __return);
        }
    }
    // bool IsHandler(System.Reflection.MethodInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelPartsProvider.IsHandler(System.Reflection.MethodInfo)
    /**
    
            Determines if the specified  is a handler.
            

    - Parameter methodInfo: The .
    - Returns: true if the  is a handler. Otherwise false.

    */
    open func IsHandler(methodInfo : dotnet.System.Reflection.MethodInfo) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider_bool__IsHandler_0__1__MethodInfo(&__thrown, self.get_handle(), methodInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IPageApplicationModelPartsProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider
    /**
    
            Builds or modifies an  for Razor Page discovery.
            

    */
open class IPageApplicationModelProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext)
    /**
    
            Executed for the first pass of building  instances. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider_void__OnProvidersExecuting_0__1__PageApplicationModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext)
    /**
    
            Executed for the second pass of building  instances. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider_void__OnProvidersExecuted_0__1__PageApplicationModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IPageApplicationModelProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention
    /**
    
            Common interface for route and application model conventions that apply to Razor Pages.
            

    */
open class IPageConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IPageConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageHandlerModelConvention
    /**
    
            Allows customization of the .
            

    */
open class IPageHandlerModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageHandlerModelConvention,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageHandlerModelConvention_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageHandlerModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter model: The .
    */
    open func Apply(model : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageHandlerModelConvention_void__Apply_0__1__PageHandlerModel(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPageHandlerModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention
    /**
    
            Allows customization of the .
            

    */
open class IPageRouteModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelConvention,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelConvention_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter model: The .
    */
    open func Apply(model : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelConvention_void__Apply_0__1__PageRouteModel(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPageRouteModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider
    /**
    
            Builds or modifies an  for Razor Page routing.
            

    */
open class IPageRouteModelProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext)
    /**
    
            Executed for the first pass of building  instances. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider_void__OnProvidersExecuting_0__1__PageRouteModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext)
    /**
    
            Executed for the second pass of building  instances. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider_void__OnProvidersExecuted_0__1__PageRouteModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IPageRouteModelProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel
    /**
    
            Application model component for RazorPages.
            

    */
open class PageApplicationModel
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, System.Reflection.TypeInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor,System.Reflection.TypeInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new instance of .
            

    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, handlerType : dotnet.System.Reflection.TypeInfo, handlerAttributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_ctor_0__3__PageActionDescriptor_TypeInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, actionDescriptor.get_handle(), handlerType.get_handle(), handlerAttributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, System.Reflection.TypeInfo, System.Reflection.TypeInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor,System.Reflection.TypeInfo,System.Reflection.TypeInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new instance of .
            

    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, declaredModelType : dotnet.System.Reflection.TypeInfo, handlerType : dotnet.System.Reflection.TypeInfo, handlerAttributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_ctor_0__4__PageActionDescriptor_TypeInfo_TypeInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, actionDescriptor.get_handle(), declaredModelType.get_handle(), handlerType.get_handle(), handlerAttributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
    /**
    
            A copy constructor for .
            

    - Parameter other: The  to copy from.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_ctor_0__1__PageApplicationModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_ActionDescriptor
    open func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_PageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RelativePath()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_RelativePath
    open func get_RelativePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_String__get_RelativePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ViewEnginePath()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_ViewEnginePath
    open func get_ViewEnginePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_String__get_ViewEnginePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AreaName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_AreaName
    open func get_AreaName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_String__get_AreaName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_RouteTemplate
    open func get_RouteTemplate() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_String__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_Filters
    open func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_PageType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_PageType
    open func get_PageType() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_TypeInfo__get_PageType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PageType(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.set_PageType(System.Reflection.TypeInfo)
    open func set_PageType(value : dotnet.System.Reflection.TypeInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_void__set_PageType_0__1__TypeInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_DeclaredModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_DeclaredModelType
    open func get_DeclaredModelType() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_TypeInfo__get_DeclaredModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_ModelType
    open func get_ModelType() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_TypeInfo__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ModelType(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.set_ModelType(System.Reflection.TypeInfo)
    open func set_ModelType(value : Optional<dotnet.System.Reflection.TypeInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_void__set_ModelType_0__1__TypeInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_HandlerType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_HandlerType
    open func get_HandlerType() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_TypeInfo__get_HandlerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_HandlerTypeAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_HandlerTypeAttributes
    open func get_HandlerTypeAttributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IReadOnlyList_object___get_HandlerTypeAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel> get_HandlerMethods()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_HandlerMethods
    open func get_HandlerMethods() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel___get_HandlerMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel> get_HandlerProperties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_HandlerProperties
    open func get_HandlerProperties() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel___get_HandlerProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Object> get_EndpointMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel.get_EndpointMetadata
    open func get_EndpointMetadata() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_System_Collections_Generic_IList_object___get_EndpointMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            Gets the area name.
            

    */
    open var AreaName : Optional<dotnet.System.String> {
        get {
            return try! get_AreaName();
        }
    }
    /**
    
            Gets the declared model  of the model for the page.
            Typically this  will be the type specified by the @model directive
            in the razor page.
            

    */
    open var DeclaredModelType : Optional<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_DeclaredModelType();
        }
    }
    /**
    
            Gets the endpoint metadata for this action.
            

    */
    open var EndpointMetadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        get {
            return try! get_EndpointMetadata();
        }
    }
    /**
    
            Gets the applicable  instances.
            

    */
    open var Filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filters();
        }
    }
    /**
    
            Gets the sequence of  instances.
            

    */
    open var HandlerMethods : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel> {
        get {
            return try! get_HandlerMethods();
        }
    }
    /**
    
            Gets the sequence of  instances on .
            

    */
    open var HandlerProperties : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel> {
        get {
            return try! get_HandlerProperties();
        }
    }
    /**
    
            Gets the  of the handler.
            

    */
    open var HandlerType : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_HandlerType();
        }
    }
    /**
    
            Gets the sequence of attributes declared on .
            

    */
    open var HandlerTypeAttributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_HandlerTypeAttributes();
        }
    }
    /**
    
            Gets or sets the runtime model  of the model for the razor page.
            This is the  that will be used at runtime to instantiate and populate
            the model property of the page.
            

    */
    open var ModelType : Optional<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_ModelType();
        }
        set(v) {
            return try! set_ModelType(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the Razor page.
            

    */
    open var PageType : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_PageType();
        }
        set(v) {
            return try! set_PageType(value: v);
        }
    }
    /**
    
            Stores arbitrary metadata properties associated with the .
            

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets the application root relative path for the page.
            

    */
    open var RelativePath : dotnet.System.String {
        get {
            return try! get_RelativePath();
        }
    }
    /**
    
            Gets the route template for the page.
            

    */
    open var RouteTemplate : Optional<dotnet.System.String> {
        get {
            return try! get_RouteTemplate();
        }
    }
    /**
    
            Gets the path relative to the base path for page discovery.
            
            This value is the path of the file without extension, relative to the pages root directory.
            e.g. the  for the file /Pages/Catalog/Antiques.cshtml is /Catalog/Antiques
            
            
            In an area, this value is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the   for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            

    */
    open var ViewEnginePath : dotnet.System.String {
        get {
            return try! get_ViewEnginePath();
        }
    }
} // PageApplicationModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext
    /**
    
            A context object for .
            

    */
open class PageApplicationModelProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor,System.Reflection.TypeInfo)
    /**
    
            Instantiates a new instance of .
            

    - Parameter descriptor: The .
    - Parameter pageTypeInfo: The type of the page.
    */
    public init(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, pageTypeInfo : dotnet.System.Reflection.TypeInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_ctor_0__2__PageActionDescriptor_TypeInfo(&__thrown, descriptor.get_handle(), pageTypeInfo.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext.get_ActionDescriptor
    open func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_PageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_PageType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext.get_PageType
    open func get_PageType() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_TypeInfo__get_PageType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel get_PageApplicationModel()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext.get_PageApplicationModel
    open func get_PageApplicationModel() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_PageApplicationModel__get_PageApplicationModel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PageApplicationModel(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModelProviderContext.set_PageApplicationModel(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
    open func set_PageApplicationModel(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModelProviderContext_void__set_PageApplicationModel_0__1__PageApplicationModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the .
            

    */
    open var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var PageApplicationModel : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        get {
            return try! get_PageApplicationModel();
        }
        set(v) {
            return try! set_PageApplicationModel(value: v);
        }
    }
    /**
    
            Gets the page .
            

    */
    open var PageType : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_PageType();
        }
    }
} // PageApplicationModelProviderContext


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection
    /**
    
            Collection of .
            

    */
open class PageConventionCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.#ctor
    /**
    
            Initializes a new instance of the  class that is empty.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention})
    /**
    
            Initializes a new instance of the  class
            as a wrapper for the specified list.
            

    - Parameter conventions: The list that is wrapped by the new collection.
    */
    public init(conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageConvention>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_ctor_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention_(&__thrown, conventions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention AddPageApplicationModelConvention(System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddPageApplicationModelConvention(System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel})
    /**
    
            Creates and adds an  that invokes an action on the
             for the page with the specified name.
            

    - Parameter pageName: The name of the page e.g. /Users/List
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddPageApplicationModelConvention(pageName : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageApplicationModelConvention__AddPageApplicationModelConvention_0__2__String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_(&__thrown, self.get_handle(), pageName.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddPageApplicationModelConvention(pageName : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>(action);
        return try AddPageApplicationModelConvention(pageName: pageName, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention AddAreaPageApplicationModelConvention(System.String, System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddAreaPageApplicationModelConvention(System.String,System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel})
    /**
    
            Creates and adds an  that invokes an action on the
             for the page with the specified name located in the specified area.
            

    - Parameter areaName: The name of area.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddAreaPageApplicationModelConvention(areaName : dotnet.System.String, pageName : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageApplicationModelConvention__AddAreaPageApplicationModelConvention_0__3__String_String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_(&__thrown, self.get_handle(), areaName.get_handle(), pageName.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddAreaPageApplicationModelConvention(areaName : dotnet.System.String, pageName : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>(action);
        return try AddAreaPageApplicationModelConvention(areaName: areaName, pageName: pageName, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention AddFolderApplicationModelConvention(System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddFolderApplicationModelConvention(System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel})
    /**
    
            Creates and adds an  that invokes an action on
             instances for all page under the specified folder.
            

    - Parameter folderPath: The path of the folder relative to the Razor Pages root. e.g. /Users/
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddFolderApplicationModelConvention(folderPath : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageApplicationModelConvention__AddFolderApplicationModelConvention_0__2__String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_(&__thrown, self.get_handle(), folderPath.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddFolderApplicationModelConvention(folderPath : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>(action);
        return try AddFolderApplicationModelConvention(folderPath: folderPath, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention AddAreaFolderApplicationModelConvention(System.String, System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddAreaFolderApplicationModelConvention(System.String,System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel})
    /**
    
            Creates and adds an  that invokes an action on
             instances for all pages under the specified area folder.
            

    - Parameter areaName: The name of area.
    - Parameter folderPath: 
            The folder path e.g. /Manage/
            
            The folder path is the path of the folder, relative to the pages root directory for the specified area.
            e.g. the folder path for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage.
            
            
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddAreaFolderApplicationModelConvention(areaName : dotnet.System.String, folderPath : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageApplicationModelConvention__AddAreaFolderApplicationModelConvention_0__3__String_String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_(&__thrown, self.get_handle(), areaName.get_handle(), folderPath.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddAreaFolderApplicationModelConvention(areaName : dotnet.System.String, folderPath : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>(action);
        return try AddAreaFolderApplicationModelConvention(areaName: areaName, folderPath: folderPath, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention AddPageRouteModelConvention(System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddPageRouteModelConvention(System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel})
    /**
    
            Creates and adds an  that invokes an action on the
             for the page with the specified name.
            

    - Parameter pageName: The name of the page e.g. /Users/List
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddPageRouteModelConvention(pageName : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageRouteModelConvention__AddPageRouteModelConvention_0__2__String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_(&__thrown, self.get_handle(), pageName.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddPageRouteModelConvention(pageName : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>(action);
        return try AddPageRouteModelConvention(pageName: pageName, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention AddAreaPageRouteModelConvention(System.String, System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddAreaPageRouteModelConvention(System.String,System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel})
    /**
    
            Creates and adds an  that invokes an action on the
             for the page with the specified name located in the specified area.
            

    - Parameter areaName: The area name.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddAreaPageRouteModelConvention(areaName : dotnet.System.String, pageName : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageRouteModelConvention__AddAreaPageRouteModelConvention_0__3__String_String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_(&__thrown, self.get_handle(), areaName.get_handle(), pageName.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddAreaPageRouteModelConvention(areaName : dotnet.System.String, pageName : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>(action);
        return try AddAreaPageRouteModelConvention(areaName: areaName, pageName: pageName, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention AddFolderRouteModelConvention(System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddFolderRouteModelConvention(System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel})
    /**
    
            Creates and adds an  that invokes an action on
             instances for all page under the specified folder.
            

    - Parameter folderPath: The path of the folder relative to the Razor Pages root. e.g. /Users/
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddFolderRouteModelConvention(folderPath : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageRouteModelConvention__AddFolderRouteModelConvention_0__2__String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_(&__thrown, self.get_handle(), folderPath.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddFolderRouteModelConvention(folderPath : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>(action);
        return try AddFolderRouteModelConvention(folderPath: folderPath, action: del_action);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention AddAreaFolderRouteModelConvention(System.String, System.String, System.Action<Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddAreaFolderRouteModelConvention(System.String,System.String,System.Action{Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel})
    /**
    
            Creates and adds an  that invokes an action on
             instances for all page under the specified area folder.
            

    - Parameter areaName: The area name.
    - Parameter folderPath: 
            The folder path e.g. /Manage/
            
            The folder path is the path of the folder, relative to the pages root directory for the specified area.
            e.g. the folder path for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage.
            
            
    - Parameter action: The .
    - Returns: The added .

    */
    open func AddAreaFolderRouteModelConvention(areaName : dotnet.System.String, folderPath : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_IPageRouteModelConvention__AddAreaFolderRouteModelConvention_0__3__String_String_System_Action_Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_(&__thrown, self.get_handle(), areaName.get_handle(), folderPath.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    open func AddAreaFolderRouteModelConvention(areaName : dotnet.System.String, folderPath : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelConvention {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel>(action);
        return try AddAreaFolderRouteModelConvention(areaName: areaName, folderPath: folderPath, action: del_action);
    }
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TPageConvention>()
    // void RemoveType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.RemoveType(System.Type)
    /**
    
            Removes all  instances of the specified type.
            

    - Parameter pageConventionType: The type to remove.
    */
    open func RemoveType(pageConventionType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageConventionCollection_void__RemoveType_0__1__Type(&__thrown, self.get_handle(), pageConventionType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PageConventionCollection


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel
    /**
    
            Represents a handler in a .
            

    */
open class PageHandlerModel
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.MethodInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.#ctor(System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Creates a new .
            

    - Parameter handlerMethod: The  for the handler.
    - Parameter attributes: Any attributes annotated on the handler method.
    */
    public init(handlerMethod : dotnet.System.Reflection.MethodInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_ctor_0__2__MethodInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, handlerMethod.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
    /**
    
            Creates a new instance of  from a given .
            

    - Parameter other: The  which needs to be copied.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_ctor_0__1__PageHandlerModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_MethodInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_MethodInfo
    open func get_MethodInfo() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_MethodInfo__get_MethodInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_HttpMethod()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_HttpMethod
    open func get_HttpMethod() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_String__get_HttpMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HttpMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.set_HttpMethod(System.String)
    open func set_HttpMethod(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_void__set_HttpMethod_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HandlerName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_HandlerName
    open func get_HandlerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_String__get_HandlerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HandlerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.set_HandlerName(System.String)
    open func set_HandlerName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_void__set_HandlerName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_Name
    open /* method final */ func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_Page
    open func get_Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_PageApplicationModel__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Page(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.set_Page(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
    open func set_Page(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_void__set_Page_0__1__PageApplicationModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_Attributes
    open /* method final */ func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel.get_Properties
    open /* method final */ func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageHandlerModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    */
    public var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets or sets the handler method name.
            

    */
    open var HandlerName : Optional<dotnet.System.String> {
        get {
            return try! get_HandlerName();
        }
        set(v) {
            return try! set_HandlerName(value: v!);
        }
    }
    /**
    
            Gets or sets the HTTP method supported by this handler.
            

    */
    open var HttpMethod : dotnet.System.String {
        get {
            return try! get_HttpMethod();
        }
        set(v) {
            return try! set_HttpMethod(value: v);
        }
    }
    /**
    
            Gets the  for the handler.
            

    */
    open var MethodInfo : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_MethodInfo();
        }
    }
    /**
    
            Gets or sets a descriptive name for the handler.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Page : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v);
        }
    }
    /**
    
            Gets the sequence of  instances.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
} // PageHandlerModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel
    /**
    
            A model type for reading and manipulation properties and parameters representing a Page Parameter.
            

    */
open class PageParameterModel
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.ParameterInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.#ctor(System.Reflection.ParameterInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new instance of a .
            

    - Parameter parameterInfo: The parameter info.
    - Parameter attributes: The attributes.
    */
    public init(parameterInfo : dotnet.System.Reflection.ParameterInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_ctor_0__2__ParameterInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, parameterInfo.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel)
    /**
    
            Copy constructor.
            

    - Parameter other: The model to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_ctor_0__1__PageParameterModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel get_Handler()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.get_Handler
    open func get_Handler() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_PageHandlerModel__get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Handler(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.set_Handler(Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel)
    open func set_Handler(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_void__set_Handler_0__1__PageHandlerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.get_ParameterInfo
    open func get_ParameterInfo() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ParameterName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.get_ParameterName
    open func get_ParameterName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_String__get_ParameterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageParameterModel.set_ParameterName(System.String)
    open func set_ParameterName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageParameterModel_void__set_ParameterName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The .
            

    */
    open var Handler : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageHandlerModel {
        get {
            return try! get_Handler();
        }
        set(v) {
            return try! set_Handler(value: v);
        }
    }
    /**
    
            The .
            

    */
    open var ParameterInfo : dotnet.System.Reflection.ParameterInfo {
        get {
            return try! get_ParameterInfo();
        }
    }
    /**
    
            Gets or sets the parameter name.
            

    */
    open var ParameterName : dotnet.System.String {
        get {
            return try! get_ParameterName();
        }
        set(v) {
            return try! set_ParameterName(value: v);
        }
    }
} // PageParameterModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel
    /**
    
            Represents a property in a .
            

    */
open class PagePropertyModel
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.PropertyInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.#ctor(System.Reflection.PropertyInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Creates a new instance of .
            

    - Parameter propertyInfo: The  for the underlying property.
    - Parameter attributes: Any attributes which are annotated on the property.
    */
    public init(propertyInfo : dotnet.System.Reflection.PropertyInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_ctor_0__2__PropertyInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, propertyInfo.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel)
    /**
    
            Creates a new instance of  from a given .
            

    - Parameter other: The  which needs to be copied.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_ctor_0__1__PagePropertyModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.get_Page
    open func get_Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_PageApplicationModel__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Page(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.set_Page(Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel)
    open func set_Page(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_void__set_Page_0__1__PageApplicationModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.get_PropertyInfo
    open func get_PropertyInfo() throws -> dotnet.System.Reflection.PropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.get_PropertyName
    open func get_PropertyName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PropertyName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PagePropertyModel.set_PropertyName(System.String)
    open func set_PropertyName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PagePropertyModel_void__set_PropertyName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  this  is associated with.
            

    */
    open var Page : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v);
        }
    }
    /**
    
            The .
            

    */
    open var PropertyInfo : dotnet.System.Reflection.PropertyInfo {
        get {
            return try! get_PropertyInfo();
        }
    }
    /**
    
            Gets or sets the property name.
            

    */
    open var PropertyName : dotnet.System.String {
        get {
            return try! get_PropertyName();
        }
        set(v) {
            return try! set_PropertyName(value: v);
        }
    }
} // PagePropertyModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteMetadata
    /**
    
            Metadata used to construct an endpoint route to the page.
            

    */
public final class PageRouteMetadata
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteMetadata.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter pageRoute: The page route.
    - Parameter routeTemplate: The route template specified by the page.
    */
    public init(pageRoute : dotnet.System.String, routeTemplate : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteMetadata_ctor_0__2__String_String(&__thrown, pageRoute.get_handle(), routeTemplate?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PageRoute()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteMetadata.get_PageRoute
    public func get_PageRoute() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteMetadata_String__get_PageRoute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteMetadata.get_RouteTemplate
    public func get_RouteTemplate() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteMetadata_String__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the page route.
            

    */
    public var PageRoute : dotnet.System.String {
        get {
            return try! get_PageRoute();
        }
    }
    /**
    
            Gets the route template specified by the page.
            

    */
    public var RouteTemplate : Optional<dotnet.System.String> {
        get {
            return try! get_RouteTemplate();
        }
    }
} // PageRouteMetadata


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel
    /**
    
            A model component for routing RazorPages.
            

    */
open class PageRouteModel
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter relativePath: The application relative path of the page.
    - Parameter viewEnginePath: The path relative to the base path for page discovery.
    */
    public init(relativePath : dotnet.System.String, viewEnginePath : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_ctor_0__2__String_String(&__thrown, relativePath.get_handle(), viewEnginePath.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.#ctor(System.String,System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter relativePath: The application relative path of the page.
    - Parameter viewEnginePath: The path relative to the base path for page discovery.
    - Parameter areaName: The area name.
    */
    public init(relativePath : dotnet.System.String, viewEnginePath : dotnet.System.String, areaName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_ctor_0__3__String_String_String(&__thrown, relativePath.get_handle(), viewEnginePath.get_handle(), areaName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
    /**
    
            A copy constructor for .
            

    - Parameter other: The  to copy from.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_ctor_0__1__PageRouteModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RelativePath()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_RelativePath
    open func get_RelativePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_String__get_RelativePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ViewEnginePath()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_ViewEnginePath
    open func get_ViewEnginePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_String__get_ViewEnginePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AreaName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_AreaName
    open func get_AreaName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_String__get_AreaName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> get_Selectors()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_Selectors
    open func get_Selectors() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel___get_Selectors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_RouteValues
    open func get_RouteValues() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IOutboundParameterTransformer get_RouteParameterTransformer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.get_RouteParameterTransformer
    open func get_RouteParameterTransformer() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_IOutboundParameterTransformer__get_RouteParameterTransformer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteParameterTransformer(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel.set_RouteParameterTransformer(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
    open func set_RouteParameterTransformer(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel_void__set_RouteParameterTransformer_0__1__IOutboundParameterTransformer(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the area name. Will be null for non-area pages.
            

    */
    open var AreaName : Optional<dotnet.System.String> {
        get {
            return try! get_AreaName();
        }
    }
    /**
    
            Stores arbitrary metadata properties associated with the .
            

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets the application root relative path for the page.
            

    */
    open var RelativePath : dotnet.System.String {
        get {
            return try! get_RelativePath();
        }
    }
    /**
    
            Gets or sets an  that will be used to transform
            built-in route parameters such as action, controller, and area as well as
            additional parameters specified by  into static segments in the route template.
            

    */
    open var RouteParameterTransformer : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer> {
        get {
            return try! get_RouteParameterTransformer();
        }
        set(v) {
            return try! set_RouteParameterTransformer(value: v!);
        }
    }
    /**
    
            Gets a collection of route values that must be present in the 
            for the corresponding page to be selected.
            

    */
    open var RouteValues : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_RouteValues();
        }
    }
    /**
    
            Gets the  instances.
            

    */
    open var Selectors : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        get {
            return try! get_Selectors();
        }
    }
    /**
    
            Gets the path relative to the base path for page discovery.
            
            This value is the path of the file without extension, relative to the pages root directory.
            e.g. the  for the file /Pages/Catalog/Antiques.cshtml is /Catalog/Antiques
            
            
            In an area, this value is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the   for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            

    */
    open var ViewEnginePath : dotnet.System.String {
        get {
            return try! get_ViewEnginePath();
        }
    }
} // PageRouteModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext
    /**
    
            A context object for .
            

    */
open class PageRouteModelProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModelProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModelProviderContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel> get_RouteModels()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModelProviderContext.get_RouteModels
    open func get_RouteModels() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModelProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteModel___get_RouteModels_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the  instances.
            

    */
    open var RouteModels : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel> {
        get {
            return try! get_RouteModels();
        }
    }
} // PageRouteModelProviderContext


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteTransformerConvention
    /**
    
            An  that sets page route resolution
            to use the specified  on .
            This convention does not effect controller action routes.
            

    */
open class PageRouteTransformerConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelConvention,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteTransformerConvention_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteTransformerConvention.#ctor(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
    /**
    
            Creates a new instance of  with the specified .
            

    - Parameter parameterTransformer: The  to use resolve page routes.
    */
    public init(parameterTransformer : aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteTransformerConvention_ctor_0__1__IOutboundParameterTransformer(&__thrown, parameterTransformer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteTransformerConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel)
    /**
    */
    open /* method final */ func Apply(model : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageRouteModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PageRouteTransformerConvention_void__Apply_0__1__PageRouteModel(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PageRouteTransformerConvention


}

// Microsoft.AspNetCore.Mvc.Diagnostics
extension Microsoft.AspNetCore.Mvc.Diagnostics {
// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData
    /**
    
            An  that occurs after a handler method is called.
            

    */
public final class AfterHandlerMethodEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, System.Object, Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Object,Microsoft.AspNetCore.Mvc.IActionResult)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The action context.
    - Parameter arguments: The arguments to the method.
    - Parameter handlerMethodDescriptor: The method descriptor.
    - Parameter instance: The instance.
    - Parameter result: The result of the handler method
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>, handlerMethodDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, instance : dotnet.System.Object, result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_ctor_0__5__ActionContext_System_Collections_Generic_IReadOnlyDictionary_string_object__HandlerMethodDescriptor_Object_IActionResult(&__thrown, actionContext.get_handle(), arguments.get_handle(), handlerMethodDescriptor.get_handle(), instance.get_handle(), result?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor get_HandlerMethodDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.get_HandlerMethodDescriptor
    public func get_HandlerMethodDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_HandlerMethodDescriptor__get_HandlerMethodDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Instance()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.get_Instance
    public func get_Instance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_Object__get_Instance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterHandlerMethodEventData.get_Result
    public func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterHandlerMethodEventData_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The arguments to the method.
            

    */
    public var Arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerMethodDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor {
        get {
            return try! get_HandlerMethodDescriptor();
        }
    }
    /**
    
            The instance.
            

    */
    public var Instance : dotnet.System.Object {
        get {
            return try! get_Instance();
        }
    }
    /**
    
            The result of the method.
            

    */
    public var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
    }
} // AfterHandlerMethodEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData
    /**
    
            An  that occurs after page handler executed.
            

    */
public final class AfterPageFilterOnPageHandlerExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutedContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext get_HandlerExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData.get_HandlerExecutedContext
    public func get_HandlerExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_PageHandlerExecutedContext__get_HandlerExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutedEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        get {
            return try! get_HandlerExecutedContext();
        }
    }
} // AfterPageFilterOnPageHandlerExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData
    /**
    
            An  that occurs after page handler executing.
            

    */
public final class AfterPageFilterOnPageHandlerExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutingContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext get_HandlerExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData.get_HandlerExecutingContext
    public func get_HandlerExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_PageHandlerExecutingContext__get_HandlerExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutingEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        get {
            return try! get_HandlerExecutingContext();
        }
    }
} // AfterPageFilterOnPageHandlerExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData
    /**
    
            An  that occurs after page handler execution.
            

    */
public final class AfterPageFilterOnPageHandlerExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutedContext_IAsyncPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext get_HandlerExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData.get_HandlerExecutedContext
    public func get_HandlerExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_PageHandlerExecutedContext__get_HandlerExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerExecutionEventData_IAsyncPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        get {
            return try! get_HandlerExecutedContext();
        }
    }
} // AfterPageFilterOnPageHandlerExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterPageFilterOnPageHandlerSelectedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerSelectedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerSelectedContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerSelectedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext get_HandlerSelectedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData.get_HandlerSelectedContext
    public func get_HandlerSelectedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_PageHandlerSelectedContext__get_HandlerSelectedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectedEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        get {
            return try! get_HandlerSelectedContext();
        }
    }
} // AfterPageFilterOnPageHandlerSelectedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData
    /**
    
            An  that occurs after page handler selection.
            

    */
public final class AfterPageFilterOnPageHandlerSelectionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerSelectedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerSelectedContext_IAsyncPageFilter(&__thrown, actionDescriptor.get_handle(), handlerSelectedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext get_HandlerSelectedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData.get_HandlerSelectedContext
    public func get_HandlerSelectedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_PageHandlerSelectedContext__get_HandlerSelectedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterPageFilterOnPageHandlerSelectionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterPageFilterOnPageHandlerSelectionEventData_IAsyncPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        get {
            return try! get_HandlerSelectedContext();
        }
    }
} // AfterPageFilterOnPageHandlerSelectionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData
    /**
    
            An  that occurs before a handler method is called.
            

    */
public final class BeforeHandlerMethodEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Object)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The action context.
    - Parameter arguments: The arguments to the method.
    - Parameter handlerMethodDescriptor: The method descriptor.
    - Parameter instance: The instance.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>, handlerMethodDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_ctor_0__4__ActionContext_System_Collections_Generic_IReadOnlyDictionary_string_object__HandlerMethodDescriptor_Object(&__thrown, actionContext.get_handle(), arguments.get_handle(), handlerMethodDescriptor.get_handle(), instance.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor get_HandlerMethodDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData.get_HandlerMethodDescriptor
    public func get_HandlerMethodDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_HandlerMethodDescriptor__get_HandlerMethodDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Instance()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeHandlerMethodEventData.get_Instance
    public func get_Instance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeHandlerMethodEventData_Object__get_Instance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The arguments to the method.
            

    */
    public var Arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerMethodDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor {
        get {
            return try! get_HandlerMethodDescriptor();
        }
    }
    /**
    
            The instance.
            

    */
    public var Instance : dotnet.System.Object {
        get {
            return try! get_Instance();
        }
    }
} // BeforeHandlerMethodEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData
    /**
    
            An  that occurs before page handler executed.
            

    */
public final class BeforePageFilterOnPageHandlerExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutedContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext get_HandlerExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData.get_HandlerExecutedContext
    public func get_HandlerExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_PageHandlerExecutedContext__get_HandlerExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutedEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext {
        get {
            return try! get_HandlerExecutedContext();
        }
    }
} // BeforePageFilterOnPageHandlerExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData
    /**
    
            An  that occurs before page handler executing.
            

    */
public final class BeforePageFilterOnPageHandlerExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutingContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext get_HandlerExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData.get_HandlerExecutingContext
    public func get_HandlerExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_PageHandlerExecutingContext__get_HandlerExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutingEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        get {
            return try! get_HandlerExecutingContext();
        }
    }
} // BeforePageFilterOnPageHandlerExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData
    /**
    
            An  that occurs before page handler execution.
            

    */
public final class BeforePageFilterOnPageHandlerExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerExecutionContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerExecutionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerExecutingContext_IAsyncPageFilter(&__thrown, actionDescriptor.get_handle(), handlerExecutionContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext get_HandlerExecutionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData.get_HandlerExecutionContext
    public func get_HandlerExecutionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_PageHandlerExecutingContext__get_HandlerExecutionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerExecutionEventData_IAsyncPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerExecutionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext {
        get {
            return try! get_HandlerExecutionContext();
        }
    }
} // BeforePageFilterOnPageHandlerExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforePageFilterOnPageHandlerSelectedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerSelectedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerSelectedContext_IPageFilter(&__thrown, actionDescriptor.get_handle(), handlerSelectedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext get_HandlerSelectedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData.get_HandlerSelectedContext
    public func get_HandlerSelectedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_PageHandlerSelectedContext__get_HandlerSelectedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectedEventData_IPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        get {
            return try! get_HandlerSelectedContext();
        }
    }
} // BeforePageFilterOnPageHandlerSelectedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData
    /**
    
            An  that occurs before page handler selection.
            

    */
public final class BeforePageFilterOnPageHandlerSelectionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            Name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter handlerSelectedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor, handlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_ctor_0__3__CompiledPageActionDescriptor_PageHandlerSelectedContext_IAsyncPageFilter(&__thrown, actionDescriptor.get_handle(), handlerSelectedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext get_HandlerSelectedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData.get_HandlerSelectedContext
    public func get_HandlerSelectedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_PageHandlerSelectedContext__get_HandlerSelectedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforePageFilterOnPageHandlerSelectionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforePageFilterOnPageHandlerSelectionEventData_IAsyncPageFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The .
            

    */
    public var HandlerSelectedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext {
        get {
            return try! get_HandlerSelectedContext();
        }
    }
} // BeforePageFilterOnPageHandlerSelectionEventData


}

// Microsoft.AspNetCore.Mvc.Filters
extension Microsoft.AspNetCore.Mvc.Filters {
// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter
    /**
    
            A filter that asynchronously surrounds execution of a page handler method. This filter is executed only when
            decorated on a handler's type and not on individual handler methods.
            

    */
open class IAsyncPageFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
    /**
    
            Called asynchronously after the handler method has been selected, but before model binding occurs.
            

    - Parameter context: The .
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnPageHandlerSelectionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter_Task__OnPageHandlerSelectionAsync_0__1__PageHandlerSelectedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)
    /**
    
            Called asynchronously before the handler method is invoked, after model binding is complete.
            

    - Parameter context: The .
    - Parameter next: 
            The . Invoked to execute the next page filter or the handler method itself.
            
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnPageHandlerExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter_Task__OnPageHandlerExecutionAsync_0__2__PageHandlerExecutingContext_PageHandlerExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnPageHandlerExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate(next);
        return try OnPageHandlerExecutionAsync(context: context, next: del_next);
    }
} // IAsyncPageFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IPageFilter
    /**
    
            A filter that surrounds execution of a page handler method. This filter is executed only when decorated on a
            handler's type and not on individual handler methods.
            

    */
open class IPageFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IPageFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IPageFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnPageHandlerSelected(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IPageFilter.OnPageHandlerSelected(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
    /**
    
            Called after a handler method has been selected, but before model binding occurs.
            

    - Parameter context: The .
    */
    open func OnPageHandlerSelected(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IPageFilter_void__OnPageHandlerSelected_0__1__PageHandlerSelectedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnPageHandlerExecuting(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IPageFilter.OnPageHandlerExecuting(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext)
    /**
    
            Called before the handler method executes, after model binding is complete.
            

    - Parameter context: The .
    */
    open func OnPageHandlerExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IPageFilter_void__OnPageHandlerExecuting_0__1__PageHandlerExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnPageHandlerExecuted(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IPageFilter.OnPageHandlerExecuted(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext)
    /**
    
            Called after the handler method executes, before the action result executes.
            

    - Parameter context: The .
    */
    open func OnPageHandlerExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IPageFilter_void__OnPageHandlerExecuted_0__1__PageHandlerExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPageFilter


// type: Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext
    /**
    
            A context for page filters, used specifically in
             and
            .
            

    */
open class PageHandlerExecutedContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Object)
    /**
    
            Creates a new instance of .
            

    - Parameter pageContext: The  associated with the current request.
    - Parameter filters: The set of filters associated with the page.
    - Parameter handlerMethod: The handler method to be invoked, may be null.
    - Parameter handlerInstance: The handler instance associated with the page.
    */
    public init(pageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, handlerMethod : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor>, handlerInstance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_ctor_0__4__PageContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__HandlerMethodDescriptor_Object(&__thrown, pageContext.get_handle(), filters.get_handle(), handlerMethod?.get_handle() ?? nil, handlerInstance.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_ActionDescriptor
    open override func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Canceled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_Canceled
    open func get_Canceled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_bool__get_Canceled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Canceled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.set_Canceled(System.Boolean)
    open func set_Canceled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_void__set_Canceled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_HandlerInstance()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_HandlerInstance
    open func get_HandlerInstance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_Object__get_HandlerInstance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor get_HandlerMethod()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_HandlerMethod
    open func get_HandlerMethod() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_HandlerMethodDescriptor__get_HandlerMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_Exception
    open func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Exception(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.set_Exception(System.Exception)
    open func set_Exception(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_void__set_Exception_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.ExceptionServices.ExceptionDispatchInfo get_ExceptionDispatchInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_ExceptionDispatchInfo
    open func get_ExceptionDispatchInfo() throws -> Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_ExceptionDispatchInfo__get_ExceptionDispatchInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
    open func set_ExceptionDispatchInfo(value : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_void__set_ExceptionDispatchInfo_0__1__ExceptionDispatchInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ExceptionHandled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_ExceptionHandled
    open func get_ExceptionHandled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_bool__get_ExceptionHandled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ExceptionHandled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.set_ExceptionHandled(System.Boolean)
    open func set_ExceptionHandled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_void__set_ExceptionHandled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_mutable_with_subclass ) [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
    /**
    
            Gets or sets an indication that an page filter short-circuited the action and the page filter pipeline.
            

    */
    open var Canceled : Bool {
        get {
            return try! get_Canceled();
        }
        set(v) {
            return try! set_Canceled(value: v);
        }
    }
    /**
    
            Gets or sets the  caught while executing the action or action filters, if
            any.
            

    */
    open var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
        set(v) {
            return try! set_Exception(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the
            , if an  was caught and this information captured.
            

    */
    open var ExceptionDispatchInfo : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        get {
            return try! get_ExceptionDispatchInfo();
        }
        set(v) {
            return try! set_ExceptionDispatchInfo(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the  has been handled.
            

    */
    open var ExceptionHandled : Bool {
        get {
            return try! get_ExceptionHandled();
        }
        set(v) {
            return try! set_ExceptionHandled(value: v);
        }
    }
    /**
    
            Gets the handler instance containing the handler method.
            

    */
    open var HandlerInstance : dotnet.System.Object {
        get {
            return try! get_HandlerInstance();
        }
    }
    /**
    
            Gets the descriptor for the handler method that was invoked.
            

    */
    open var HandlerMethod : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        get {
            return try! get_HandlerMethod();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // PageHandlerExecutedContext


// type: Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext
    /**
    
            A context for page filters, used specifically in
             and
            .
            

    */
open class PageHandlerExecutingContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor, System.Collections.Generic.IDictionary<System.String,System.Object>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
    /**
    
            Creates a new instance of .
            

    - Parameter pageContext: The  associated with the current request.
    - Parameter filters: The set of filters associated with the page.
    - Parameter handlerMethod: The handler method to be invoked, may be null.
    - Parameter handlerArguments: The arguments to provide to the handler method.
    - Parameter handlerInstance: The handler instance associated with the page.
    */
    public init(pageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, handlerMethod : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor>, handlerArguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>, handlerInstance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_ctor_0__5__PageContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__HandlerMethodDescriptor_System_Collections_Generic_IDictionary_string_object__Object(&__thrown, pageContext.get_handle(), filters.get_handle(), handlerMethod?.get_handle() ?? nil, handlerArguments.get_handle(), handlerInstance.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.get_ActionDescriptor
    open override func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_HandlerArguments()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.get_HandlerArguments
    open func get_HandlerArguments() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_System_Collections_Generic_IDictionary_string_object___get_HandlerArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor get_HandlerMethod()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.get_HandlerMethod
    open func get_HandlerMethod() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_HandlerMethodDescriptor__get_HandlerMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_HandlerInstance()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext.get_HandlerInstance
    open func get_HandlerInstance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutingContext_Object__get_HandlerInstance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
// TODO COPE (is_override_mutable_with_subclass ) [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
    /**
    
            Gets the arguments to pass when invoking the handler method. Keys are parameter names.
            

    */
    open var HandlerArguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_HandlerArguments();
        }
    }
    /**
    
            Gets the object instance containing the handler method.
            

    */
    open var HandlerInstance : dotnet.System.Object {
        get {
            return try! get_HandlerInstance();
        }
    }
    /**
    
            Gets the descriptor for the handler method about to be invoked.
            

    */
    open var HandlerMethod : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        get {
            return try! get_HandlerMethod();
        }
    }
    /**
    
            Gets or sets the  to execute. Setting  to a non-null
            value inside a page filter will short-circuit the page and any remaining page filters.
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // PageHandlerExecutingContext


// type: Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate
    /**
    
            A delegate that asynchronously returns a  indicating the page or the next
            page filter has executed.
            

    */
public final class PageHandlerExecutionDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate.Invoke
    public func Invoke() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext___EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext>) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate.Invoke
    public func callAsFunction() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_PageHandlerExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // PageHandlerExecutionDelegate


// type: Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext
    /**
    
            A context for page filters, used specifically in
             and
            .
            

    */
open class PageHandlerSelectedContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},System.Object)
    /**
    
            Creates a new instance of .
            

    - Parameter pageContext: The  associated with the current request.
    - Parameter filters: The set of filters associated with the page.
    - Parameter handlerInstance: The handler instance associated with the page.
    */
    public init(pageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, handlerInstance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_ctor_0__3__PageContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__Object(&__thrown, pageContext.get_handle(), filters.get_handle(), handlerInstance.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext.get_ActionDescriptor
    open override func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor get_HandlerMethod()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext.get_HandlerMethod
    open func get_HandlerMethod() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_HandlerMethodDescriptor__get_HandlerMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HandlerMethod(Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext.set_HandlerMethod(Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor)
    open func set_HandlerMethod(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_void__set_HandlerMethod_0__1__HandlerMethodDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_HandlerInstance()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext.get_HandlerInstance
    open func get_HandlerInstance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_PageHandlerSelectedContext_Object__get_HandlerInstance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
// TODO COPE (is_override_mutable_with_subclass ) [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
    /**
    
            Gets the object instance containing the handler method.
            

    */
    open var HandlerInstance : dotnet.System.Object {
        get {
            return try! get_HandlerInstance();
        }
    }
    /**
    
            Gets or sets the descriptor for the handler method about to be invoked.
            

    */
    open var HandlerMethod : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        get {
            return try! get_HandlerMethod();
        }
        set(v) {
            return try! set_HandlerMethod(value: v!);
        }
    }
} // PageHandlerSelectedContext


}

// Microsoft.AspNetCore.Mvc.RazorPages
extension Microsoft.AspNetCore.Mvc.RazorPages {
// type: Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor
    /**
    
            A  for a compiled Razor page.
            

    */
open class CompiledPageActionDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.#ctor
    /**
    
            Initializes an empty .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
    /**
    
            Initializes a new instance of 
            from the specified  instance.
            

    - Parameter actionDescriptor: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_ctor_0__1__PageActionDescriptor(&__thrown, actionDescriptor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> get_HandlerMethods()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_HandlerMethods
    open func get_HandlerMethods() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor___get_HandlerMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HandlerMethods(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_HandlerMethods(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor})
    open func set_HandlerMethods(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_HandlerMethods_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_HandlerTypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_HandlerTypeInfo
    open func get_HandlerTypeInfo() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_TypeInfo__get_HandlerTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HandlerTypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_HandlerTypeInfo(System.Reflection.TypeInfo)
    open func set_HandlerTypeInfo(value : dotnet.System.Reflection.TypeInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_HandlerTypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_DeclaredModelTypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_DeclaredModelTypeInfo
    open func get_DeclaredModelTypeInfo() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_TypeInfo__get_DeclaredModelTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DeclaredModelTypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_DeclaredModelTypeInfo(System.Reflection.TypeInfo)
    open func set_DeclaredModelTypeInfo(value : Optional<dotnet.System.Reflection.TypeInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_DeclaredModelTypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_ModelTypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_ModelTypeInfo
    open func get_ModelTypeInfo() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_TypeInfo__get_ModelTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ModelTypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_ModelTypeInfo(System.Reflection.TypeInfo)
    open func set_ModelTypeInfo(value : Optional<dotnet.System.Reflection.TypeInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_ModelTypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_PageTypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_PageTypeInfo
    open func get_PageTypeInfo() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_TypeInfo__get_PageTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PageTypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_PageTypeInfo(System.Reflection.TypeInfo)
    open func set_PageTypeInfo(value : dotnet.System.Reflection.TypeInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_PageTypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Endpoint get_Endpoint()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.get_Endpoint
    open func get_Endpoint() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_Endpoint__get_Endpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor.set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
    open func set_Endpoint(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor_void__set_Endpoint_0__1__Endpoint(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the declared model  of the model for the page.
            Typically this  will be the type specified by the @model directive
            in the razor page.
            

    */
    open var DeclaredModelTypeInfo : Optional<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_DeclaredModelTypeInfo();
        }
        set(v) {
            return try! set_DeclaredModelTypeInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the associated  of this page.
            

    */
    open var Endpoint : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoint();
        }
        set(v) {
            return try! set_Endpoint(value: v!);
        }
    }
    /**
    
            Gets the list of handler methods for the page.
            

    */
    open var HandlerMethods : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        get {
            return try! get_HandlerMethods();
        }
        set(v) {
            return try! set_HandlerMethods(value: v);
        }
    }
    /**
    
            Gets or sets the  of the type that defines handler methods for the page. This can be
            the same as  and  if the page does not have an
            explicit model type defined.
            

    */
    open var HandlerTypeInfo : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_HandlerTypeInfo();
        }
        set(v) {
            return try! set_HandlerTypeInfo(value: v);
        }
    }
    /**
    
            Gets or sets the runtime model  of the model for the razor page.
            This is the  that will be used at runtime to instantiate and populate
            the model property of the page.
            

    */
    open var ModelTypeInfo : Optional<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_ModelTypeInfo();
        }
        set(v) {
            return try! set_ModelTypeInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the page.
            

    */
    open var PageTypeInfo : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_PageTypeInfo();
        }
        set(v) {
            return try! set_PageTypeInfo(value: v);
        }
    }
} // CompiledPageActionDescriptor


// type: Microsoft.AspNetCore.Mvc.RazorPages.IPageActivatorProvider
    /**
    
            Provides methods to create a Razor page.
            

    */
open class IPageActivatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object> CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Creates a Razor page activator.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to activate the page.

    */
    open func CreateActivator(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object___CreateActivator_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object> CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor page.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated page.

    */
    open func CreateReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Action_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object___CreateReleaser_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor page asynchronously.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated page asynchronously.

    */
    open func CreateAsyncReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object_System_Threading_Tasks_ValueTask___CreateAsyncReleaser_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_4(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IPageActivatorProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.IPageFactoryProvider
    /**
    
            Provides methods for creation and disposal of Razor pages.
            

    */
open class IPageFactoryProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object> CreatePageFactory(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageFactoryProvider.CreatePageFactory(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Creates a factory for producing Razor pages for the specified .
            

    - Parameter descriptor: The .
    - Returns: The Razor page factory.

    */
    open func CreatePageFactory(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object___CreatePageFactory_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object> CreatePageDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageFactoryProvider.CreatePageDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor page.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created page.

    */
    open func CreatePageDisposer(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Action_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object___CreatePageDisposer_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncPageDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageFactoryProvider.CreateAsyncPageDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor page asynchronously.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created page asynchronously.

    */
    open func CreateAsyncPageDisposer(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_object_System_Threading_Tasks_ValueTask___CreateAsyncPageDisposer_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_4(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IPageFactoryProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.IPageModelActivatorProvider
    /**
    
            Provides methods to create a Razor Page model.
            

    */
open class IPageModelActivatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Creates a Razor Page model activator.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to activate the page model.

    */
    open func CreateActivator(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateActivator_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor Page model.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated Razor Page model.

    */
    open func CreateReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateReleaser_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor Page model asynchronously.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated Razor Page model asynchronously.

    */
    open func CreateAsyncReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object_System_Threading_Tasks_ValueTask___CreateAsyncReleaser_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IPageModelActivatorProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.IPageModelFactoryProvider
    /**
    
            Provides methods for creation and disposal of Razor Page models.
            

    */
open class IPageModelFactoryProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateModelFactory(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelFactoryProvider.CreateModelFactory(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Creates a factory for producing models for Razor Pages given the specified .
            

    - Parameter descriptor: The .
    - Returns: The Razor Page model factory.

    */
    open func CreateModelFactory(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateModelFactory_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateModelDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelFactoryProvider.CreateModelDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor Page model.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created Razor Page model.

    */
    open func CreateModelDisposer(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateModelDisposer_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncModelDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.IPageModelFactoryProvider.CreateAsyncModelDisposer(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    
            Releases a Razor Page model asynchronously.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created Razor Page model asynchronously.

    */
    open func CreateAsyncModelDisposer(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object_System_Threading_Tasks_ValueTask___CreateAsyncModelDisposer_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IPageModelFactoryProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.NonHandlerAttribute
    /**
    
            Specifies that the targeted method is not a page handler method.
            

    */
open class NonHandlerAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_NonHandlerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.NonHandlerAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_NonHandlerAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NonHandlerAttribute


// type: Microsoft.AspNetCore.Mvc.RazorPages.Page
    /**
    
            A base class for a Razor page.
            

    */
open class Page
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Page_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // Page


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor
    /**
    
            Describes a page action.
            

    */
open class PageActionDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.#ctor(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
    /**
    
            A copy constructor for .
            

    - Parameter other: The  to copy from.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_ctor_0__1__PageActionDescriptor(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RelativePath()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.get_RelativePath
    open func get_RelativePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_String__get_RelativePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RelativePath(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.set_RelativePath(System.String)
    open func set_RelativePath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_void__set_RelativePath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ViewEnginePath()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.get_ViewEnginePath
    open func get_ViewEnginePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_String__get_ViewEnginePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewEnginePath(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.set_ViewEnginePath(System.String)
    open func set_ViewEnginePath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_void__set_ViewEnginePath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AreaName()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.get_AreaName
    open func get_AreaName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_String__get_AreaName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AreaName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.set_AreaName(System.String)
    open func set_AreaName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_void__set_AreaName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.get_DisplayName
    open override func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor.set_DisplayName(System.String)
    open override func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageActionDescriptor_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the area name for this page.
            This value will be null for non-area pages.
            

    */
    open var AreaName : Optional<dotnet.System.String> {
        get {
            return try! get_AreaName();
        }
        set(v) {
            return try! set_AreaName(value: v!);
        }
    }
    /**
    */
    open override var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets the application root relative path for the page.
            

    */
    open var RelativePath : dotnet.System.String {
        get {
            return try! get_RelativePath();
        }
        set(v) {
            return try! set_RelativePath(value: v);
        }
    }
    /**
    
            Gets or sets the path relative to the base path for page discovery.
            
            This value is the path of the file without extension, relative to the pages root directory.
            e.g. the  for the file /Pages/Catalog/Antiques.cshtml is /Catalog/Antiques
            
            
            In an area, this value is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the   for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            

    */
    open var ViewEnginePath : dotnet.System.String {
        get {
            return try! get_ViewEnginePath();
        }
        set(v) {
            return try! set_ViewEnginePath(value: v);
        }
    }
} // PageActionDescriptor


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageBase
    /**
    
            A base class for a Razor page.
            

    */
open class PageBase
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void EnsureRenderedBodyOrSections()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.EnsureRenderedBodyOrSections
    /**
    */
    open override func EnsureRenderedBodyOrSections() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__EnsureRenderedBodyOrSections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginContext(System.Int32, System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.BeginContext(System.Int32,System.Int32,System.Boolean)
    /**
    */
    open override func BeginContext(position : Swift.Int32, length : Swift.Int32, isLiteral : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__BeginContext_0__3__i32_i32_bool(&__thrown, self.get_handle(), position, length, Swift.Int32(isLiteral ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.EndContext
    /**
    */
    open override func EndContext() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__EndContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestResult BadRequest()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.BadRequest
    /**
    
            Creates a  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func BadRequest() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_BadRequestResult__BadRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.BadRequest(System.Object)
    /**
    
            Creates a  that produces a  response.
            

    - Parameter error: An error object to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(error : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_BadRequestObjectResult__BadRequest_0__1__Object(&__thrown, self.get_handle(), error.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a  that produces a  response.
            

    - Parameter modelState: The  containing errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_BadRequestObjectResult__BadRequest_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelState.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Challenge
    /**
    
            Creates a .
            

    - Returns: The created  for the response.

    */
    open func Challenge() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ChallengeResult__Challenge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Challenge(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ChallengeResult__Challenge_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  with the specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ChallengeResult__Challenge_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ChallengeResult__Challenge_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Content(System.String)
    /**
    
            Creates a  object with  by specifying a
             string.
            

    - Parameter content: The content to write to the response.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ContentResult__Content_0__1__String(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Content(System.String,System.String)
    /**
    
            Creates a  object with  by specifying a
             string and a content type.
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ContentResult__Content_0__2__String_String(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Content(System.String,System.String,System.Text.Encoding)
    /**
    
            Creates a  object with  by specifying a
             string, a , and .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Parameter contentEncoding: The content encoding.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String, contentEncoding : dotnet.System.Text.Encoding) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ContentResult__Content_0__3__String_String_Encoding(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle(), contentEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Content(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a  object with  by specifying a
             string and a .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ContentResult__Content_0__2__String_MediaTypeHeaderValue(&__thrown, self.get_handle(), content.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Forbid
    /**
    
            Creates a  ( by default).
            

    - Returns: The created  for the response.

    */
    open func Forbid() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ForbidResult__Forbid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Forbid(System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ForbidResult__Forbid_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  ( by default) with the
            specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ForbidResult__Forbid_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes and .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ForbidResult__Forbid_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.Byte[],System.String)
    /**
    
            Returns a file with the specified  as content
            () and the specified  as the Content-Type.
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_FileContentResult__File_0__2__u8Array_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.Byte[],System.String,System.String)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_FileContentResult__File_0__3__u8Array_String_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.IO.Stream,System.String)
    /**
    
            Returns a file in the specified  ()
            with the specified  as the Content-Type.
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_FileStreamResult__File_0__2__Stream_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.IO.Stream,System.String,System.String)
    /**
    
            Returns a file in the specified  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_FileStreamResult__File_0__3__Stream_String_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_VirtualFileResult__File_0__2__String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.File(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_VirtualFileResult__File_0__3__String_String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.PhysicalFile(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            

    - Parameter physicalPath: The physical path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PhysicalFileResult__PhysicalFile_0__2__String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.PhysicalFile(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter physicalPath: The physical path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PhysicalFileResult__PhysicalFile_0__3__String_String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirect(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.LocalRedirect(System.String)
    /**
    
            Creates a  object that redirects
            () to the specified local .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirect(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_LocalRedirectResult__LocalRedirect_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.LocalRedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to
            true () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanent(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_LocalRedirectResult__LocalRedirectPermanent_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.LocalRedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            false and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_LocalRedirectResult__LocalRedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.LocalRedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            true and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanentPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_LocalRedirectResult__LocalRedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundResult NotFound()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.NotFound
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_NotFoundResult__NotFound_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundObjectResult NotFound(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.NotFound(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound(value : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_NotFoundObjectResult__NotFound_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RazorPages.PageResult Page()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Page
    /**
    
            Creates a  object that renders this page as a view to the response.
            

    - Returns: The created  object for the response.

    */
    open func Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PageResult__Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult Redirect(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Redirect(System.String)
    /**
    
            Creates a  object that redirects to the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func Redirect(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectResult__Redirect_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to true
            () using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanent(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectResult__RedirectPermanent_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to false
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectResult__RedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to true
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanentPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectResult__RedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String)
    /**
    
            Redirects () to the specified action using the .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String,System.Object)
    /**
    
            Redirects () to the specified action using the
             and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String,System.String)
    /**
    
            Redirects () to the specified action using the
             and the .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToAction(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToAction_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to false and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToActionPermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanentPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToActionResult__RedirectToActionPermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoute(System.String)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoute_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoute(System.Object)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoute_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoute(System.String,System.Object)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoute_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoute(System.String,System.String)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoute_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoute(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route using the specified
            , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoute_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanent(System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanent_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanent(System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanent_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanent(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified ,
            , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanent_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToRoutePermanentPreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanentPreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToRouteResult__RedirectToRoutePermanentPreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage
    /**
    
            Redirects () to the current page.
            

    - Returns: The .

    */
    open func RedirectToPage() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.Object)
    /**
    
            Redirects () to the current page with the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__1__String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__2__String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__2__String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__3__String_String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPage(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPage_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__1__String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__2__String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__2__String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__3__String_String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__3__String_String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified page with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePreserveMethod(pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.RedirectToPagePermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePermanentPreserveMethod(pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RedirectToPageResult__RedirectToPagePermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.SignIn(System.Security.Claims.ClaimsPrincipal,System.String)
    /**
    
            Creates a  with the specified authentication scheme.
            

    - Parameter principal: The  containing the user claims.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_SignInResult__SignIn_0__2__ClaimsPrincipal_String(&__thrown, self.get_handle(), principal.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.SignIn(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Creates a  with the specified authentication scheme and
            .
            

    - Parameter principal: The  containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_SignInResult__SignIn_0__3__ClaimsPrincipal_AuthenticationProperties_String(&__thrown, self.get_handle(), principal.get_handle(), properties.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.SignOut(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_SignOutResult__SignOut_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the sign-out operation.
    - Parameter authenticationSchemes: The authentication scheme to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_SignOutResult__SignOut_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.StatusCodeResult StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.StatusCode(System.Int32)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter statusCode: The status code to set on the response.
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_StatusCodeResult__StatusCode_0__1__i32(&__thrown, self.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ObjectResult StatusCode(System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.StatusCode(System.Int32,System.Object)
    /**
    
            Creates a  object by specifying a  and 
            

    - Parameter statusCode: The status code to set on the response.
    - Parameter value: The value to set on the .
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32, value : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ObjectResult__StatusCode_0__2__i32_Object(&__thrown, self.get_handle(), statusCode, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnauthorizedResult Unauthorized()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Unauthorized
    /**
    
            Creates an  that produces an  response.
            

    - Returns: The created  for the response.

    */
    open func Unauthorized() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_UnauthorizedResult__Unauthorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult Partial(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Partial(System.String)
    /**
    
            Creates a  by specifying the name of a partial to render.
            

    - Parameter viewName: The partial name.
    - Returns: The created  object for the response.

    */
    open func Partial(viewName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PartialViewResult__Partial_0__1__String(&__thrown, self.get_handle(), viewName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult Partial(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.Partial(System.String,System.Object)
    /**
    
            Creates a  by specifying the name of a partial to render and the model object.
            

    - Parameter viewName: The partial name.
    - Parameter model: The model to be passed into the partial.
    - Returns: The created  object for the response.

    */
    open func Partial(viewName : dotnet.System.String, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PartialViewResult__Partial_0__2__String_Object(&__thrown, self.get_handle(), viewName.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.ViewComponent(System.String)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ViewComponentResult__ViewComponent_0__1__String(&__thrown, self.get_handle(), componentName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.ViewComponent(System.Type)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ViewComponentResult__ViewComponent_0__1__Type(&__thrown, self.get_handle(), componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.ViewComponent(System.String,System.Object)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ViewComponentResult__ViewComponent_0__2__String_Object(&__thrown, self.get_handle(), componentName.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.ViewComponent(System.Type,System.Object)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ViewComponentResult__ViewComponent_0__2__Type_Object(&__thrown, self.get_handle(), componentType.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0)
    /**
    
            Updates the specified  instance using values from the 's current
            .
            

    - Parameter model: The model instance to update.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__1__UTModel(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String)
    /**
    
            Updates the specified  instance using values from the 's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__2__UTModel_String(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_IValueProvider(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String,System.Linq.Expressions.Expression`1[])
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, includeExpressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__Array(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), includeExpressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using values from the 's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, propertyFilter : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws -> Bool) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try TryUpdateModelAsync(model: model, prefix: prefix, propertyFilter: del_propertyFilter);
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Linq.Expressions.Expression`1[])
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, includeExpressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__4__UTModel_String_IValueProvider_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__Array(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle(), includeExpressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__4__UTModel_String_IValueProvider_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws -> Bool) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try TryUpdateModelAsync(model: model, prefix: prefix, valueProvider: valueProvider, propertyFilter: del_propertyFilter);
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync(System.Object, System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync(System.Object,System.Type,System.String)
    /**
    
            Updates the specified  instance using values from the 's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter modelType: The type of model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_0__3__Object_Type_String(&__thrown, self.get_handle(), model.get_handle(), modelType.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryUpdateModelAsync(System.Object,System.Type,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter modelType: The type of model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_0__5__Object_Type_String_IValueProvider_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(&__thrown, self.get_handle(), model.get_handle(), modelType.get_handle(), prefix.get_handle(), valueProvider.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws -> Bool) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try TryUpdateModelAsync(model: model, modelType: modelType, prefix: prefix, valueProvider: valueProvider, propertyFilter: del_propertyFilter);
    }
    // bool TryValidateModel(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryValidateModel(System.Object)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Returns: true if the  is valid; false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_bool__TryValidateModel_0__1__Object(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateModel(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.TryValidateModel(System.Object,System.String)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Parameter prefix: The key to use when looking up information in .
            
    - Returns: true if the  is valid;false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object, prefix : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_bool__TryValidateModel_0__2__Object_String(&__thrown, self.get_handle(), model.get_handle(), prefix?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.PageContext get_PageContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_PageContext
    open func get_PageContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_PageContext__get_PageContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PageContext(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.set_PageContext(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
    open func set_PageContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__set_PageContext_0__1__PageContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_ViewContext
    open override func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open override func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_Response
    open func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_HttpResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.get_MetadataProvider
    open func get_MetadataProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageBase_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageBase.set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    open func set_MetadataProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageBase_void__set_MetadataProvider_0__1__IModelMetadataProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the .
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var MetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        get {
            return try! get_MetadataProvider();
        }
        set(v) {
            return try! set_MetadataProvider(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            The .
            

    */
    open var PageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext {
        get {
            return try! get_PageContext();
        }
        set(v) {
            return try! set_PageContext(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
    /**
    */
    open override var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
} // PageBase


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageContext
    /**
    
            The context associated with the current request for a Razor page.
            

    */
open class PageContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.#ctor
    /**
    
            Creates an empty .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    */
    public override init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_ctor_0__1__ActionContext(&__thrown, actionContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.get_ActionDescriptor
    open override func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_CompiledPageActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionDescriptor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.set_ActionDescriptor(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    open func set_ActionDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageContext_void__set_ActionDescriptor_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> get_ValueProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.get_ValueProviderFactories
    open func get_ValueProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory___get_ValueProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueProviderFactories(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.set_ValueProviderFactories(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})
    open func set_ValueProviderFactories(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageContext_void__set_ValueProviderFactories_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageContext_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>> get_ViewStartFactories()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.get_ViewStartFactories
    open func get_ViewStartFactories() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageContext_System_Collections_Generic_IList_System_System_Func_Microsoft_AspNetCore_Mvc_Razor_IRazorPage____get_ViewStartFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewStartFactories(System.Collections.Generic.IList<System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContext.set_ViewStartFactories(System.Collections.Generic.IList{System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}})
    open func set_ViewStartFactories(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageContext_void__set_ViewStartFactories_0__1__System_Collections_Generic_IList_System_System_Func_Microsoft_AspNetCore_Mvc_Razor_IRazorPage__(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_mutable_with_subclass ) [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor get_ActionDescriptor()
    /**
    
            Gets or sets the list of  instances for the current request.
            

    */
    open var ValueProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        get {
            return try! get_ValueProviderFactories();
        }
        set(v) {
            return try! set_ValueProviderFactories(value: v);
        }
    }
    /**
    
            Gets or sets .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
    /**
    
            Gets or sets the applicable _ViewStart instances.
            

    */
    open var ViewStartFactories : dotnet.System.Collections.Generic.IList_1<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>> {
        get {
            return try! get_ViewStartFactories();
        }
        set(v) {
            return try! set_ViewStartFactories(value: v);
        }
    }
} // PageContext


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageContextAttribute
    /**
    
            Specifies that a Razor Page model property should be set with the current  when creating
            the model instance. The property must have a public set method.
            

    */
open class PageContextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageContextAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageContextAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageContextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PageContextAttribute


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageModel
    /**
    
            Abstract class representing a Page
            

    */
open class PageModel
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IPageFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageModel_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.BadRequestResult BadRequest()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.BadRequest
    /**
    
            Creates a  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func BadRequest() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_BadRequestResult__BadRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.BadRequest(System.Object)
    /**
    
            Creates a  that produces a  response.
            

    - Parameter error: An error object to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(error : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_BadRequestObjectResult__BadRequest_0__1__Object(&__thrown, self.get_handle(), error.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a  that produces a  response.
            

    - Parameter modelState: The  containing errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_BadRequestObjectResult__BadRequest_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelState.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Challenge
    /**
    
            Creates a .
            

    - Returns: The created  for the response.

    */
    open func Challenge() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ChallengeResult__Challenge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Challenge(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ChallengeResult__Challenge_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  with the specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ChallengeResult__Challenge_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ChallengeResult__Challenge_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Content(System.String)
    /**
    
            Creates a  object with  by specifying a
             string.
            

    - Parameter content: The content to write to the response.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ContentResult__Content_0__1__String(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Content(System.String,System.String)
    /**
    
            Creates a  object with  by specifying a
             string and a content type.
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ContentResult__Content_0__2__String_String(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Content(System.String,System.String,System.Text.Encoding)
    /**
    
            Creates a  object with  by specifying a
             string, a , and .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Parameter contentEncoding: The content encoding.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String, contentEncoding : dotnet.System.Text.Encoding) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ContentResult__Content_0__3__String_String_Encoding(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle(), contentEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Content(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a  object with  by specifying a
             string and a .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ContentResult__Content_0__2__String_MediaTypeHeaderValue(&__thrown, self.get_handle(), content.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Forbid
    /**
    
            Creates a  ( by default).
            

    - Returns: The created  for the response.

    */
    open func Forbid() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ForbidResult__Forbid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Forbid(System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ForbidResult__Forbid_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  ( by default) with the
            specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ForbidResult__Forbid_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes and .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ForbidResult__Forbid_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.Byte[],System.String)
    /**
    
            Returns a file with the specified  as content
            () and the specified  as the Content-Type.
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_FileContentResult__File_0__2__u8Array_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.Byte[],System.String,System.String)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_FileContentResult__File_0__3__u8Array_String_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.IO.Stream,System.String)
    /**
    
            Returns a file in the specified  ()
            with the specified  as the Content-Type.
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_FileStreamResult__File_0__2__Stream_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.IO.Stream,System.String,System.String)
    /**
    
            Returns a file in the specified  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_FileStreamResult__File_0__3__Stream_String_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_VirtualFileResult__File_0__2__String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.File(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_VirtualFileResult__File_0__3__String_String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirect(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.LocalRedirect(System.String)
    /**
    
            Creates a  object that redirects
            () to the specified local .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirect(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_LocalRedirectResult__LocalRedirect_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.LocalRedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to
            true () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanent(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_LocalRedirectResult__LocalRedirectPermanent_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.LocalRedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            false and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_LocalRedirectResult__LocalRedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.LocalRedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            true and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanentPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_LocalRedirectResult__LocalRedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundResult NotFound()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.NotFound
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_NotFoundResult__NotFound_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundObjectResult NotFound(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.NotFound(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound(value : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_NotFoundObjectResult__NotFound_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RazorPages.PageResult Page()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Page
    /**
    
            Creates a  object that renders the page.
            

    - Returns: The .

    */
    open func Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PageResult__Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.PhysicalFile(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            

    - Parameter physicalPath: The physical path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PhysicalFileResult__PhysicalFile_0__2__String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.PhysicalFile(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            

    - Parameter physicalPath: The physical path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PhysicalFileResult__PhysicalFile_0__3__String_String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to true
            () using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanent(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectResult__RedirectPermanent_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to false
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectResult__RedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to true
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanentPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectResult__RedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String)
    /**
    
            Redirects () to the specified action using the .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String,System.Object)
    /**
    
            Redirects () to the specified action using the
             and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String,System.String)
    /**
    
            Redirects () to the specified action using the
             and the .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToAction(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToAction_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to false and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToActionPermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the pageModel.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanentPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToActionResult__RedirectToActionPermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoute(System.String)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoute_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoute(System.Object)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoute_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoute(System.String,System.Object)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoute_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoute(System.String,System.String)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoute_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoute(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route using the specified
            , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoute_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanent(System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanent_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanent(System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanent_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanent(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified ,
            , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanent_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToRoutePermanentPreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanentPreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToRouteResult__RedirectToRoutePermanentPreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage
    /**
    
            Redirects () to the current page.
            

    - Returns: The .

    */
    open func RedirectToPage() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.Object)
    /**
    
            Redirects () to the current page with the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__1__String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__2__String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__3__String_String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__2__String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__3__String_String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPage(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPage_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__1__String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__2__String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__2__String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__3__String_String_Object(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__3__String_String_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__3__String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified page with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePreserveMethod(pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.RedirectToPagePermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePermanentPreserveMethod(pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RedirectToPageResult__RedirectToPagePermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.SignIn(System.Security.Claims.ClaimsPrincipal,System.String)
    /**
    
            Creates a  with the specified authentication scheme.
            

    - Parameter principal: The  containing the user claims.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_SignInResult__SignIn_0__2__ClaimsPrincipal_String(&__thrown, self.get_handle(), principal.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.SignIn(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Creates a  with the specified authentication scheme and
            .
            

    - Parameter principal: The  containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_SignInResult__SignIn_0__3__ClaimsPrincipal_AuthenticationProperties_String(&__thrown, self.get_handle(), principal.get_handle(), properties.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.SignOut(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_SignOutResult__SignOut_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the sign-out operation.
    - Parameter authenticationSchemes: The authentication scheme to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_SignOutResult__SignOut_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.StatusCodeResult StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.StatusCode(System.Int32)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter statusCode: The status code to set on the response.
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_StatusCodeResult__StatusCode_0__1__i32(&__thrown, self.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ObjectResult StatusCode(System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.StatusCode(System.Int32,System.Object)
    /**
    
            Creates a  object by specifying a  and 
            

    - Parameter statusCode: The status code to set on the response.
    - Parameter value: The value to set on the .
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32, value : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ObjectResult__StatusCode_0__2__i32_Object(&__thrown, self.get_handle(), statusCode, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnauthorizedResult Unauthorized()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Unauthorized
    /**
    
            Creates an  that produces an  response.
            

    - Returns: The created  for the response.

    */
    open func Unauthorized() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_UnauthorizedResult__Unauthorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult Partial(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Partial(System.String)
    /**
    
            Creates a  by specifying the name of a partial to render.
            

    - Parameter viewName: The partial name.
    - Returns: The created  object for the response.

    */
    open func Partial(viewName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PartialViewResult__Partial_0__1__String(&__thrown, self.get_handle(), viewName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult Partial(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.Partial(System.String,System.Object)
    /**
    
            Creates a  by specifying the name of a partial to render and the model object.
            

    - Parameter viewName: The partial name.
    - Parameter model: The model to be passed into the partial.
    - Returns: The created  object for the response.

    */
    open func Partial(viewName : dotnet.System.String, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PartialViewResult__Partial_0__2__String_Object(&__thrown, self.get_handle(), viewName.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.ViewComponent(System.String)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ViewComponentResult__ViewComponent_0__1__String(&__thrown, self.get_handle(), componentName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.ViewComponent(System.Type)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ViewComponentResult__ViewComponent_0__1__Type(&__thrown, self.get_handle(), componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.ViewComponent(System.String,System.Object)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ViewComponentResult__ViewComponent_0__2__String_Object(&__thrown, self.get_handle(), componentName.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.ViewComponent(System.Type,System.Object)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ViewComponentResult__ViewComponent_0__2__Type_Object(&__thrown, self.get_handle(), componentType.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // bool TryValidateModel(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.TryValidateModel(System.Object)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Returns: true if the  is valid; false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_bool__TryValidateModel_0__1__Object(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateModel(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.TryValidateModel(System.Object,System.String)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Parameter name: The key to use when looking up information in .
            
    - Returns: true if the  is valid;false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object, name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_bool__TryValidateModel_0__2__Object_String(&__thrown, self.get_handle(), model.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void OnPageHandlerSelected(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.OnPageHandlerSelected(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
    /**
    
            Called after a handler method has been selected, but before model binding occurs.
            

    - Parameter context: The .
    */
    open func OnPageHandlerSelected(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__OnPageHandlerSelected_0__1__PageHandlerSelectedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnPageHandlerExecuting(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.OnPageHandlerExecuting(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext)
    /**
    
            Called before the handler method executes, after model binding is complete.
            

    - Parameter context: The .
    */
    open func OnPageHandlerExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__OnPageHandlerExecuting_0__1__PageHandlerExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnPageHandlerExecuted(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.OnPageHandlerExecuted(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext)
    /**
    
            Called after the handler method executes, before the action result executes.
            

    - Parameter context: The .
    */
    open func OnPageHandlerExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__OnPageHandlerExecuted_0__1__PageHandlerExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)
    /**
    
            Called asynchronously after the handler method has been selected, but before model binding occurs.
            

    - Parameter context: The .
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnPageHandlerSelectionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_Task__OnPageHandlerSelectionAsync_0__1__PageHandlerSelectedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)
    /**
    
            Called asynchronously before the handler method is invoked, after model binding is complete.
            

    - Parameter context: The .
    - Parameter next: 
            The . Invoked to execute the next page filter or the handler method itself.
            
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnPageHandlerExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_Task__OnPageHandlerExecutionAsync_0__2__PageHandlerExecutingContext_PageHandlerExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnPageHandlerExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate(next);
        return try OnPageHandlerExecutionAsync(context: context, next: del_next);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.PageContext get_PageContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_PageContext
    open func get_PageContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_PageContext__get_PageContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PageContext(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.set_PageContext(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
    open func set_PageContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__set_PageContext_0__1__PageContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_Response
    open func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_HttpResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_Url()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_Url
    open func get_Url() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_IUrlHelper__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_Url(value : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__set_Url_0__1__IUrlHelper(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_MetadataProvider
    open func get_MetadataProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    open func set_MetadataProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageModel_void__set_MetadataProvider_0__1__IModelMetadataProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageModel.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageModel_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var MetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        get {
            return try! get_MetadataProvider();
        }
        set(v) {
            return try! set_MetadataProvider(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets the .
            

    */
    open var PageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext {
        get {
            return try! get_PageContext();
        }
        set(v) {
            return try! set_PageContext(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
    /**
    
            Gets or sets  used by .
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Url : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        get {
            return try! get_Url();
        }
        set(v) {
            return try! set_Url(value: v);
        }
    }
    /**
    
            Gets the  for user associated with the executing action.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
    }
} // PageModel


// type: Microsoft.AspNetCore.Mvc.RazorPages.PageResult
    /**
    
            An  that renders a Razor Page.
            

    */
open class PageResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_PageResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.get_Model
    open func get_Model() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.RazorPages.PageBase get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.get_Page
    open func get_Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageBase {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_PageBase__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageBase(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Page(Microsoft.AspNetCore.Mvc.RazorPages.PageBase)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.set_Page(Microsoft.AspNetCore.Mvc.RazorPages.PageBase)
    open func set_Page(value : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageBase) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageResult_void__set_Page_0__1__PageBase(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageResult_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.get_StatusCode
    open func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_PageResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.PageResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_PageResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the Content-Type header for the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets the page model.
            

    */
    open var Model : dotnet.System.Object {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets or sets the  to be executed.
            

    */
    open var Page : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageBase {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v);
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    open var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the page to be executed.
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
} // PageResult


// type: Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions
    /**
    
            Provides configuration for Razor Pages.
            

    */
open class RazorPagesOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection get_Conventions()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions.get_Conventions
    open func get_Conventions() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_PageConventionCollection__get_Conventions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Conventions(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions.set_Conventions(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection)
    open func set_Conventions(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_void__set_Conventions_0__1__PageConventionCollection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RootDirectory()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions.get_RootDirectory
    open func get_RootDirectory() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_String__get_RootDirectory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RootDirectory(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions.set_RootDirectory(System.String)
    open func set_RootDirectory(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_void__set_RootDirectory_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a collection of  instances that are applied during
            route and page model construction.
            

    */
    open var Conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        get {
            return try! get_Conventions();
        }
        set(v) {
            return try! set_Conventions(value: v);
        }
    }
    /**
    
            Application relative path used as the root of discovery for Razor Page files.
            Defaults to the /Pages directory under application root.
            

    */
    open var RootDirectory : dotnet.System.String {
        get {
            return try! get_RootDirectory();
        }
        set(v) {
            return try! set_RootDirectory(value: v);
        }
    }
} // RazorPagesOptions


}
// Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure
extension Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure {
// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.CompiledPageActionDescriptorProvider
    /**
    
            A  for build-time compiled Razor Pages.
            

    */
public final class CompiledPageActionDescriptorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_CompiledPageActionDescriptorProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider>, Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.CompiledPageActionDescriptorProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider},Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})
    /**
    
            Initializes a new isntance of .
            

    - Parameter pageRouteModelProviders: The sequence of .
    - Parameter applicationModelProviders: The sequence of .
    - Parameter applicationPartManager: The .
    - Parameter mvcOptions: Accessor to .
    - Parameter pageOptions: Accessor to .
    */
    public init(pageRouteModelProviders : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider>, applicationModelProviders : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelProvider>, applicationPartManager : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager, mvcOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, pageOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_CompiledPageActionDescriptorProvider_ctor_0__5__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider__ApplicationPartManager_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_(&__thrown, pageRouteModelProviders.get_handle(), applicationModelProviders.get_handle(), applicationPartManager.get_handle(), mvcOptions.get_handle(), pageOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.CompiledPageActionDescriptorProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    */
    public func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_CompiledPageActionDescriptorProvider_void__OnProvidersExecuting_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.CompiledPageActionDescriptorProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    */
    public func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_CompiledPageActionDescriptorProvider_void__OnProvidersExecuted_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.CompiledPageActionDescriptorProvider.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_CompiledPageActionDescriptorProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // CompiledPageActionDescriptorProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor
    /**
    
            Represents a description of a handler method.
            

    */
open class HandlerMethodDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_MethodInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.get_MethodInfo
    open func get_MethodInfo() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_MethodInfo__get_MethodInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MethodInfo(System.Reflection.MethodInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.set_MethodInfo(System.Reflection.MethodInfo)
    open func set_MethodInfo(value : dotnet.System.Reflection.MethodInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_void__set_MethodInfo_0__1__MethodInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HttpMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.get_HttpMethod
    open func get_HttpMethod() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_String__get_HttpMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HttpMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.set_HttpMethod(System.String)
    open func set_HttpMethod(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_void__set_HttpMethod_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Parameters(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor.set_Parameters(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor})
    open func set_Parameters(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerMethodDescriptor_void__set_Parameters_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the http method.
            

    */
    open var HttpMethod : dotnet.System.String {
        get {
            return try! get_HttpMethod();
        }
        set(v) {
            return try! set_HttpMethod(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var MethodInfo : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_MethodInfo();
        }
        set(v) {
            return try! set_MethodInfo(value: v);
        }
    }
    /**
    
            Gets or sets the name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets or sets the parameters for the method.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v);
        }
    }
} // HandlerMethodDescriptor


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor
    /**
    
            Describes an handler parameter.
            

    */
open class HandlerParameterDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,
    Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor.get_ParameterInfo
    open /* method final */ func get_ParameterInfo() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterInfo(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerParameterDescriptor.set_ParameterInfo(System.Reflection.ParameterInfo)
    open func set_ParameterInfo(value : dotnet.System.Reflection.ParameterInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_HandlerParameterDescriptor_void__set_ParameterInfo_0__1__ParameterInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    public var ParameterInfo : dotnet.System.Reflection.ParameterInfo {
        get {
            return try! get_ParameterInfo();
        }
        set(v) {
            return try! set_ParameterInfo(value: v);
        }
    }
} // HandlerParameterDescriptor


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageHandlerMethodSelector
    /**
    
            Selects a handler method from a page.
            

    */
open class IPageHandlerMethodSelector
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageHandlerMethodSelector
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageHandlerMethodSelector_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor Select(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageHandlerMethodSelector.Select(Microsoft.AspNetCore.Mvc.RazorPages.PageContext)
    /**
    
            Selects a handler method from a page.
            

    - Parameter context: The .
    - Returns: The selected .

    */
    open func Select(context : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageHandlerMethodSelector_HandlerMethodDescriptor__Select_0__1__PageContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IPageHandlerMethodSelector


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageLoader
    /**
    
            Creates a  from a .
            

    */
open class IPageLoader
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageLoader
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageLoader_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor Load(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.IPageLoader.Load(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
    /**
    
            Produces a  given a .
            

    - Parameter actionDescriptor: The .
    - Returns: The .

    */
    open func Load(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageLoader_CompiledPageActionDescriptor__Load_0__1__PageActionDescriptor(&__thrown, self.get_handle(), actionDescriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor(hndl : __return);
        }
    }
} // IPageLoader


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider
    /**
    
            A  for PageActions
            

    */
open class PageActionDescriptorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})
    /**
    
            Instantiates a new instance of .
            

    - Parameter pageRouteModelProviders: The s to use.
    - Parameter mvcOptionsAccessor: The .
    - Parameter pagesOptionsAccessor: The .
    */
    public init(pageRouteModelProviders : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageRouteModelProvider>, mvcOptionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, pagesOptionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_ctor_0__3__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_(&__thrown, pageRouteModelProviders.get_handle(), mvcOptionsAccessor.get_handle(), pagesOptionsAccessor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    */
    open /* method final */ func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_void__OnProvidersExecuting_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    */
    open /* method final */ func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_void__OnProvidersExecuted_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionDescriptorProvider.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageActionDescriptorProvider_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // PageActionDescriptorProvider


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBoundPropertyDescriptor
    /**
    
            Describes a page bound property.
            

    */
open class PageBoundPropertyDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,
    Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageBoundPropertyDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBoundPropertyDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageBoundPropertyDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_Property()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBoundPropertyDescriptor.get_Property
    open func get_Property() throws -> dotnet.System.Reflection.PropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageBoundPropertyDescriptor_PropertyInfo__get_Property_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Property(System.Reflection.PropertyInfo)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageBoundPropertyDescriptor.set_Property(System.Reflection.PropertyInfo)
    open func set_Property(value : dotnet.System.Reflection.PropertyInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageBoundPropertyDescriptor_void__set_Property_0__1__PropertyInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  for this property.
            

    */
    open var Property : dotnet.System.Reflection.PropertyInfo {
        get {
            return try! get_Property();
        }
        set(v) {
            return try! set_Property(value: v);
        }
    }
} // PageBoundPropertyDescriptor


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoader
    /**
    
            Creates a  from a .
            

    */
open class PageLoader
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageLoader
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageLoader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor> LoadAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoader.LoadAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor)
    /**
    
            Produces a  given a .
            

    - Parameter actionDescriptor: The .
    - Returns: A  that on completion returns a .

    */
    open func LoadAsync(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageLoader_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor___LoadAsync_0__1__PageActionDescriptor(&__thrown, self.get_handle(), actionDescriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor> LoadAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, Microsoft.AspNetCore.Http.EndpointMetadataCollection)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageLoader.LoadAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor,Microsoft.AspNetCore.Http.EndpointMetadataCollection)
    /**
    
            Produces a  given a .
            

    - Parameter actionDescriptor: The .
    - Parameter endpointMetadata: The .
    - Returns: A  that on completion returns a .

    */
    open func LoadAsync(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageActionDescriptor, endpointMetadata : aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageLoader_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_RazorPages_CompiledPageActionDescriptor___LoadAsync_0__2__PageActionDescriptor_EndpointMetadataCollection(&__thrown, self.get_handle(), actionDescriptor.get_handle(), endpointMetadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // PageLoader


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageModelAttribute
    /**
    
            An attribute for base classes for page models. Applying this attribute to a type
            marks all subclasses of that type as page model types.
            

    */
open class PageModelAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageModelAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageModelAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageModelAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PageModelAttribute


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageResultExecutor
    /**
    
            Executes a Razor Page.
            

    */
open class PageResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageResultExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, System.Diagnostics.DiagnosticListener, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageResultExecutor.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator,System.Diagnostics.DiagnosticListener,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Creates a new .
            

    - Parameter writerFactory: The .
    - Parameter compositeViewEngine: The .
    - Parameter razorViewEngine: The .
    - Parameter razorPageActivator: The .
    - Parameter diagnosticListener: The .
    - Parameter htmlEncoder: The .
    */
    public init(writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, compositeViewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, razorViewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, razorPageActivator : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageResultExecutor_ctor_0__6__IHttpResponseStreamWriterFactory_ICompositeViewEngine_IRazorViewEngine_IRazorPageActivator_DiagnosticListener_HtmlEncoder(&__thrown, writerFactory.get_handle(), compositeViewEngine.get_handle(), razorViewEngine.get_handle(), razorPageActivator.get_handle(), diagnosticListener.get_handle(), htmlEncoder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageContext, Microsoft.AspNetCore.Mvc.RazorPages.PageResult)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.RazorPages.PageContext,Microsoft.AspNetCore.Mvc.RazorPages.PageResult)
    /**
    
            Executes a Razor Page asynchronously.
            

    */
    open func ExecuteAsync(pageContext : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageResult) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageResultExecutor_Task__ExecuteAsync_0__2__PageContext_PageResult(&__thrown, self.get_handle(), pageContext.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // PageResultExecutor


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageViewLocationExpander
    /**
    
            An  for PageView.
            

    */
open class PageViewLocationExpander
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageViewLocationExpander_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageViewLocationExpander.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageViewLocationExpander_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageViewLocationExpander.ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext,System.Collections.Generic.IEnumerable{System.String})
    /**
    */
    open /* method final */ func ExpandViewLocations(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, viewLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageViewLocationExpander_System_Collections_Generic_IEnumerable_string___ExpandViewLocations_0__2__ViewLocationExpanderContext_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), context.get_handle(), viewLocations.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // void PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
    /**
    */
    open /* method final */ func PopulateValues(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_PageViewLocationExpander_void__PopulateValues_0__1__ViewLocationExpanderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PageViewLocationExpander


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter
    /**
    
            Implements IRazorPage so that RazorPageBase-derived classes don't get activated twice.
            The page gets activated before handler methods run, but the RazorView will also activate
            each page.
            

    */
open class RazorPageAdapter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPage
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.RazorPageBase, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.#ctor(Microsoft.AspNetCore.Mvc.Razor.RazorPageBase,System.Type)
    /**
    
            Instantiates a new instance of .
            

    - Parameter page: The .
    - Parameter modelType: The model type.
    */
    public init(page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase, modelType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_ctor_0__2__RazorPageBase_Type(&__thrown, page.get_handle(), modelType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void EnsureRenderedBodyOrSections()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.EnsureRenderedBodyOrSections
    /**
    */
    open /* method final */ func EnsureRenderedBodyOrSections() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__EnsureRenderedBodyOrSections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.ExecuteAsync
    /**
    */
    open /* method final */ func ExecuteAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_Task__ExecuteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_ViewContext
    open /* method final */ func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open /* method final */ func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.IHtmlContent get_BodyContent()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_BodyContent
    open /* method final */ func get_BodyContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_IHtmlContent__get_BodyContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
    open /* method final */ func set_BodyContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_BodyContent_0__1__IHtmlContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsLayoutBeingRendered()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_IsLayoutBeingRendered
    open /* method final */ func get_IsLayoutBeingRendered() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_bool__get_IsLayoutBeingRendered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsLayoutBeingRendered(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_IsLayoutBeingRendered(System.Boolean)
    open /* method final */ func set_IsLayoutBeingRendered(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_IsLayoutBeingRendered_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_Path
    open /* method final */ func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_Path(System.String)
    open /* method final */ func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Layout()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_Layout
    open /* method final */ func get_Layout() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_String__get_Layout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Layout(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_Layout(System.String)
    open /* method final */ func set_Layout(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_Layout_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_PreviousSectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_PreviousSectionWriters
    open /* method final */ func get_PreviousSectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_PreviousSectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PreviousSectionWriters(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.set_PreviousSectionWriters(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate})
    open /* method final */ func set_PreviousSectionWriters(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_void__set_PreviousSectionWriters_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_SectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAdapter.get_SectionWriters
    open /* method final */ func get_SectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAdapter_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_SectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    */
    public var BodyContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        get {
            return try! get_BodyContent();
        }
        set(v) {
            return try! set_BodyContent(value: v!);
        }
    }
    /**
    */
    public var IsLayoutBeingRendered : Bool {
        get {
            return try! get_IsLayoutBeingRendered();
        }
        set(v) {
            return try! set_IsLayoutBeingRendered(value: v);
        }
    }
    /**
    */
    public var Layout : Optional<dotnet.System.String> {
        get {
            return try! get_Layout();
        }
        set(v) {
            return try! set_Layout(value: v!);
        }
    }
    /**
    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    */
    public var PreviousSectionWriters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        get {
            return try! get_PreviousSectionWriters();
        }
        set(v) {
            return try! set_PreviousSectionWriters(value: v);
        }
    }
    /**
    */
    public var SectionWriters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        get {
            return try! get_SectionWriters();
        }
    }
    /**
    */
    public var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
} // RazorPageAdapter


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute
    /**
    
            Obsolete: This attribute has been superseded by RazorCompiledItem and will not be used by the runtime.
            

    */
open class RazorPageAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute.#ctor(System.String,System.Type,System.String)
    /**
    
            This attribute has been superseded by RazorCompiledItem and will not be used by the runtime.
            

    - Parameter path: 
    - Parameter viewType: 
    - Parameter routeTemplate: 
    */
    public init(path : dotnet.System.String, viewType : dotnet.System.Type_, routeTemplate : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAttribute_ctor_0__3__String_Type_String(&__thrown, path.get_handle(), viewType.get_handle(), routeTemplate.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute.get_RouteTemplate
    open func get_RouteTemplate() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_RazorPageAttribute_String__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The route template.
            

    */
    open var RouteTemplate : dotnet.System.String {
        get {
            return try! get_RouteTemplate();
        }
    }
} // RazorPageAttribute


// type: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ServiceBasedPageModelActivatorProvider
    /**
    
             that uses type activation to create Razor Page instances.
            

    */
open class ServiceBasedPageModelActivatorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_ServiceBasedPageModelActivatorProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ServiceBasedPageModelActivatorProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_ServiceBasedPageModelActivatorProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ServiceBasedPageModelActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    */
    open /* method final */ func CreateActivator(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_ServiceBasedPageModelActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateActivator_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.RazorPages.PageContext,System.Object> CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.ServiceBasedPageModelActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor)
    /**
    */
    open /* method final */ func CreateReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.PageContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_ServiceBasedPageModelActivatorProvider_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_PageContext_object___CreateReleaser_0__1__CompiledPageActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ServiceBasedPageModelActivatorProvider


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions
public struct MvcRazorPagesMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPagesOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.AddRazorPagesOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})
    /**
    
            Configures a set of  for the application.
            

    - Parameter builder: The .
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddRazorPagesOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcBuilderExtensions_IMvcBuilder__AddRazorPagesOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRazorPagesOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(setupAction);
        return try AddRazorPagesOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String)
    /**
    
            Configures Razor Pages to use the specified .
            

    - Parameter builder: The .
    - Parameter rootDirectory: The application relative path to use as the root directory.
    - Returns: The .

    */
    public static func WithRazorPagesRoot(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, rootDirectory : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcBuilderExtensions_IMvcBuilder__WithRazorPagesRoot_0__2__IMvcBuilder_String(&__thrown, builder.get_handle(), rootDirectory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesAtContentRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesAtContentRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Configures Razor Pages to be rooted at the content root ().
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func WithRazorPagesAtContentRoot(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcBuilderExtensions_IMvcBuilder__WithRazorPagesAtContentRoot_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
} // MvcRazorPagesMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions
public struct MvcRazorPagesMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Register services needed for Razor Pages.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddRazorPages(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddRazorPages_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})
    /**
    
            Register services needed for Razor Pages.
            

    - Parameter builder: The .
    - Parameter setupAction: The action to setup the .
    - Returns: The .

    */
    public static func AddRazorPages(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddRazorPages_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRazorPages(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(setupAction);
        return try AddRazorPages(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.String)
    /**
    
            Configures Razor Pages to use the specified .
            

    - Parameter builder: The .
    - Parameter rootDirectory: The application relative path to use as the root directory.
    - Returns: 

    */
    public static func WithRazorPagesRoot(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, rootDirectory : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorPagesMvcCoreBuilderExtensions_IMvcCoreBuilder__WithRazorPagesRoot_0__2__IMvcCoreBuilder_String(&__thrown, builder.get_handle(), rootDirectory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
} // MvcRazorPagesMvcCoreBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions
public struct PageConventionCollectionExtensions {
    // Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.Func<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.Func{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})
    /**
    
            Configures the specified  to apply filters to all Razor Pages.
            

    - Parameter conventions: The  to configure.
    - Parameter factory: The factory to create filters.
    - Returns: 

    */
    public static func ConfigureFilter(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, factory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_IPageApplicationModelConvention__ConfigureFilter_0__2__PageConventionCollection_System_Func_Microsoft_AspNetCore_Mvc_ApplicationModels_PageApplicationModel_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_(&__thrown, conventions.get_handle(), factory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureFilter(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, factory : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_factory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>(factory);
        return try ConfigureFilter(conventions: conventions, factory: del_factory);
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Configures the specified  to apply to all Razor Pages.
            

    - Parameter conventions: The  to configure.
    - Parameter filter: The  to add.
    - Returns: The .

    */
    public static func ConfigureFilter(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__ConfigureFilter_0__2__PageConventionCollection_IFilterMetadata(&__thrown, conventions.get_handle(), filter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection Add(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.Add(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
    /**
    
            Adds the specified  to .
            The added convention will apply to all handler properties and parameters on handler methods.
            

    - Parameter conventions: The  to configure.
    - Parameter convention: The  to apply.
    - Returns: The .

    */
    public static func Add(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, convention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__Add_0__2__PageConventionCollection_IParameterModelBaseConvention(&__thrown, conventions.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)
    /**
    
            Allows anonymous access to the page with the specified name.
            

    - Parameter conventions: The  to configure.
    - Parameter pageName: The page name.
    - Returns: The .

    */
    public static func AllowAnonymousToPage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AllowAnonymousToPage_0__2__PageConventionCollection_String(&__thrown, conventions.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Allows anonymous access to the page with the specified name located in the specified area.
            

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Returns: The .

    */
    public static func AllowAnonymousToAreaPage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AllowAnonymousToAreaPage_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)
    /**
    
            Allows anonymous access to all pages under the specified folder.
            

    - Parameter conventions: The  to configure.
    - Parameter folderPath: The folder path.
    - Returns: The .

    */
    public static func AllowAnonymousToFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AllowAnonymousToFolder_0__2__PageConventionCollection_String(&__thrown, conventions.get_handle(), folderPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
             Allows anonymous access to all pages under the specified area folder.
             

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter folderPath: 
             The folder path e.g. /Manage/
             
             The folder path is the path of the folder, relative to the pages root directory for the specified area.
             e.g. the folder path for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage.
             
            .
    - Returns: The .

    */
    public static func AllowAnonymousToAreaFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AllowAnonymousToAreaFolder_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), folderPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Requires authorization with the specified policy for the page with the specified name.
            

    - Parameter conventions: The  to configure.
    - Parameter pageName: The page name.
    - Parameter policy: The authorization policy.
    - Returns: The .

    */
    public static func AuthorizePage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, pageName : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizePage_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), pageName.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)
    /**
    
            Requires authorization for the specified page.
            

    - Parameter conventions: The  to configure.
    - Parameter pageName: The page name.
    - Returns: The .

    */
    public static func AuthorizePage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizePage_0__2__PageConventionCollection_String(&__thrown, conventions.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Requires authorization for the specified area page.
            

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Returns: The .

    */
    public static func AuthorizeAreaPage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeAreaPage_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String,System.String)
    /**
    
            Requires authorization for the specified area page with the specified policy.
            

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Parameter policy: The authorization policy.
    - Returns: The .

    */
    public static func AuthorizeAreaPage(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, pageName : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeAreaPage_0__4__PageConventionCollection_String_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), pageName.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Requires authorization for all pages under the specified folder.
            

    - Parameter conventions: The  to configure.
    - Parameter folderPath: The folder path.
    - Parameter policy: The authorization policy.
    - Returns: The .

    */
    public static func AuthorizeFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, folderPath : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeFolder_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), folderPath.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)
    /**
    
            Requires authorization for all pages under the specified folder.
            

    - Parameter conventions: The  to configure.
    - Parameter folderPath: The folder path.
    - Returns: The .

    */
    public static func AuthorizeFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeFolder_0__2__PageConventionCollection_String(&__thrown, conventions.get_handle(), folderPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Requires authorization with the default policy for all pages under the specified folder.
            

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter folderPath: 
            The folder path e.g. /Manage/
            
            The folder path is the path of the folder, relative to the pages root directory for the specified area.
            e.g. the folder path for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage.
            
            
    - Returns: The .

    */
    public static func AuthorizeAreaFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeAreaFolder_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), folderPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String,System.String)
    /**
    
            Requires authorization with the specified policy for all pages under the specified folder.
            

    - Parameter conventions: The  to configure.
    - Parameter areaName: The area name.
    - Parameter folderPath: 
            The folder path e.g. /Manage/
            
            The folder path is the path of the folder, relative to the pages root directory for the specified area.
            e.g. the folder path for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage.
            
            
    - Parameter policy: The authorization policy.
    - Returns: The .

    */
    public static func AuthorizeAreaFolder(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, folderPath : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AuthorizeAreaFolder_0__4__PageConventionCollection_String_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), folderPath.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)
    /**
    
            Adds the specified  to the page at the specified .
            
            The page can be routed via  in addition to the default set of path based routes.
            All links generated for this page will use the specified route.
            
            

    - Parameter conventions: The .
    - Parameter pageName: The page name.
    - Parameter route: The route to associate with the page.
    - Returns: The .

    */
    public static func AddPageRoute(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, pageName : dotnet.System.String, route : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AddPageRoute_0__3__PageConventionCollection_String_String(&__thrown, conventions.get_handle(), pageName.get_handle(), route.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddAreaPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddAreaPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String,System.String)
    /**
    
            Adds the specified  to the page at the specified  located in the specified
            area.
            
            The page can be routed via  in addition to the default set of path based routes.
            All links generated for this page will use the specified route.
            
            

    - Parameter conventions: The .
    - Parameter areaName: The area name.
    - Parameter pageName: 
            The page name e.g. /Users/List
            
            The page name is the path of the file without extension, relative to the pages root directory for the specified area.
            e.g. the page name for the file Areas/Identity/Pages/Manage/Accounts.cshtml, is /Manage/Accounts.
            
            
    - Parameter route: The route to associate with the page.
    - Returns: The .

    */
    public static func AddAreaPageRoute(conventions : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, areaName : dotnet.System.String, pageName : dotnet.System.String, route : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PageConventionCollectionExtensions_PageConventionCollection__AddAreaPageRoute_0__4__PageConventionCollection_String_String_String(&__thrown, conventions.get_handle(), areaName.get_handle(), pageName.get_handle(), route.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection(hndl : __return);
        }
    }
} // PageConventionCollectionExtensions


}



public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelConvention
    :
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelPartsProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageApplicationModelProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageHandlerModelConvention
    :
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelConvention
    :
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPageConvention
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPageRouteModelProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncPageFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IPageFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_IPageActivatorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_IPageFactoryProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_IPageModelActivatorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_IPageModelFactoryProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageHandlerMethodSelector
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_RazorPages_Infrastructure_IPageLoader
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder MapRazorPages(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapRazorPages() throws -> aspnetcore.Microsoft.AspNetCore.Builder.PageActionEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapRazorPages(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToPage(page : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToPage(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), page: page);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToPage(pattern : dotnet.System.String, page : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToPage(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, page: page);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToAreaPage(page : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToAreaPage(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), page: page, area: area);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaPage(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToAreaPage(pattern : dotnet.System.String, page : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToAreaPage(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, page: page, area: area);
    }
}

// EXTENSION METHOD void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE extension method (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)

// EXTENSION METHOD void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)
// TODO COPE extension method (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)

// EXTENSION METHOD void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)
// TODO COPE extension method (unused generic param) void MapDynamicPageRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPagesOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddRazorPagesOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.AddRazorPagesOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddRazorPagesOptions(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.AddRazorPagesOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.String)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func WithRazorPagesRoot(rootDirectory : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesRoot(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), rootDirectory: rootDirectory);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesAtContentRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func WithRazorPagesAtContentRoot() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesAtContentRoot(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddRazorPages() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddRazorPages(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddRazorPages(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.String)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func WithRazorPagesRoot(rootDirectory : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.WithRazorPagesRoot(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), rootDirectory: rootDirectory);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.Func<Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func ConfigureFilter(factory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(conventions: self, factory: factory);
    }
    // delegate closure overload
    public func ConfigureFilter(factory : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention {
        let del_factory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>(factory);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(conventions: self, factory: del_factory);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func ConfigureFilter(filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(conventions: self, filter: filter);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection Add(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func Add(convention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.Add(conventions: self, convention: convention);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AllowAnonymousToPage(pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToPage(conventions: self, pageName: pageName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AllowAnonymousToAreaPage(areaName : dotnet.System.String, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToAreaPage(conventions: self, areaName: areaName, pageName: pageName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AllowAnonymousToFolder(folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToFolder(conventions: self, folderPath: folderPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AllowAnonymousToAreaFolder(areaName : dotnet.System.String, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToAreaFolder(conventions: self, areaName: areaName, folderPath: folderPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizePage(pageName : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(conventions: self, pageName: pageName, policy: policy);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizePage(pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(conventions: self, pageName: pageName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeAreaPage(areaName : dotnet.System.String, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaPage(conventions: self, areaName: areaName, pageName: pageName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeAreaPage(areaName : dotnet.System.String, pageName : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaPage(conventions: self, areaName: areaName, pageName: pageName, policy: policy);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeFolder(folderPath : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(conventions: self, folderPath: folderPath, policy: policy);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeFolder(folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(conventions: self, folderPath: folderPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeAreaFolder(areaName : dotnet.System.String, folderPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaFolder(conventions: self, areaName: areaName, folderPath: folderPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeAreaFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AuthorizeAreaFolder(areaName : dotnet.System.String, folderPath : dotnet.System.String, policy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeAreaFolder(conventions: self, areaName: areaName, folderPath: folderPath, policy: policy);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AddPageRoute(pageName : dotnet.System.String, route : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddPageRoute(conventions: self, pageName: pageName, route: route);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddAreaPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
    public func AddAreaPageRoute(areaName : dotnet.System.String, pageName : dotnet.System.String, route : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddAreaPageRoute(conventions: self, areaName: areaName, pageName: pageName, route: route);
    }
}

