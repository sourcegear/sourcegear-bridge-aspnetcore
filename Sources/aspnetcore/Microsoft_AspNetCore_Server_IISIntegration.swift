// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.IISOptions
    /**
    
            Options to configure IIS Out-Of-Process.
            

    */
open class IISOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_IISOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Builder_IISOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_IISOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AutomaticAuthentication()
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.get_AutomaticAuthentication
    open func get_AutomaticAuthentication() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IISOptions_bool__get_AutomaticAuthentication_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutomaticAuthentication(bool)
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.set_AutomaticAuthentication(System.Boolean)
    open func set_AutomaticAuthentication(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_IISOptions_void__set_AutomaticAuthentication_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AuthenticationDisplayName()
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.get_AuthenticationDisplayName
    open func get_AuthenticationDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IISOptions_String__get_AuthenticationDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticationDisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.set_AuthenticationDisplayName(System.String)
    open func set_AuthenticationDisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_IISOptions_void__set_AuthenticationDisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ForwardClientCertificate()
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.get_ForwardClientCertificate
    open func get_ForwardClientCertificate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IISOptions_bool__get_ForwardClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ForwardClientCertificate(bool)
// docid: M:Microsoft.AspNetCore.Builder.IISOptions.set_ForwardClientCertificate(System.Boolean)
    open func set_ForwardClientCertificate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_IISOptions_void__set_ForwardClientCertificate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Sets the display name shown to users on login pages. The default is null.
            

    */
    open var AuthenticationDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_AuthenticationDisplayName();
        }
        set(v) {
            return try! set_AuthenticationDisplayName(value: v!);
        }
    }
    /**
    
            If true the middleware should set HttpContext.User. If false the middleware will only provide an
            identity when explicitly requested by the AuthenticationScheme.
            Note Windows Authentication must also be enabled in IIS for this to work.
            

    */
    open var AutomaticAuthentication : Bool {
        get {
            return try! get_AutomaticAuthentication();
        }
        set(v) {
            return try! set_AutomaticAuthentication(value: v);
        }
    }
    /**
    
            Populates the ITLSConnectionFeature if the MS-ASPNETCORE-CLIENTCERT request header is present.
            

    */
    open var ForwardClientCertificate : Bool {
        get {
            return try! get_ForwardClientCertificate();
        }
        set(v) {
            return try! set_ForwardClientCertificate(value: v);
        }
    }
} // IISOptions


}

// Microsoft.AspNetCore.Server
// Microsoft.AspNetCore.Server.IISIntegration
extension Microsoft.AspNetCore.Server.IISIntegration {
// type: Microsoft.AspNetCore.Server.IISIntegration.IISDefaults
    /**
    
            String constants used to configure IIS Out-Of-Process.
            

    */
open class IISDefaults
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.String AuthenticationScheme
    /**
    
            Default authentication scheme, which is "Windows".
            

    */
    open class var AuthenticationScheme : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_get_AuthenticationScheme());
            return __return;
        }
    }
    // static field: System.String Negotiate
    /**
    
            Default negotiate string, which is "Negotiate".
            

    */
    open class var Negotiate : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_get_Negotiate());
            return __return;
        }
    }
    // static field: System.String Ntlm
    /**
    
            Default NTLM string, which is "NTLM".
            

    */
    open class var Ntlm : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_get_Ntlm());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISDefaults.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Server_IISIntegration_IISDefaults_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // IISDefaults


// type: Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup
    /**
    
            The  to add IISIntegration to apps.
            

    */
open class IISHostingStartup
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_IHostingStartup
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Server_IISIntegration_IISHostingStartup_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Server_IISIntegration_IISHostingStartup_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Server_IISIntegration_IISHostingStartup_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
    /**
    
            Adds IISIntegration into the middleware pipeline.
            

    - Parameter builder: The .
    */
    open /* method final */ func Configure(builder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_IISIntegration_IISHostingStartup_void__Configure_0__1__IWebHostBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IISHostingStartup


// type: Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware
    /**
    
            The middleware that enables IIS Out-Of-Process to work.
            

    */
open class IISMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Server_IISIntegration_IISMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Server_IISIntegration_IISMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IISOptions>, System.String, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IISOptions},System.String,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
    /**
    
            The middleware that enables IIS Out-Of-Process to work.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter loggerFactory: The .
    - Parameter options: The configuration for this middleware.
    - Parameter pairingToken: A token used to coordinate with the ASP.NET Core Module.
    - Parameter authentication: The .
    - Parameter applicationLifetime: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.IISOptions>, pairingToken : dotnet.System.String, authentication : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, applicationLifetime : aspnetcore.Microsoft.Extensions.Hosting.IHostApplicationLifetime) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Server_IISIntegration_IISMiddleware_ctor_0__6__RequestDelegate_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_IISOptions__String_IAuthenticationSchemeProvider_IHostApplicationLifetime(&__thrown, next.get_handle(), loggerFactory.get_handle(), options.get_handle(), pairingToken.get_handle(), authentication.get_handle(), applicationLifetime.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IISOptions>, System.String, bool, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IISOptions},System.String,System.Boolean,Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
    /**
    
            The middleware that enables IIS Out-Of-Process to work.
            

    - Parameter next: The next middleware in the pipeline.
    - Parameter loggerFactory: The .
    - Parameter options: The configuration for this middleware.
    - Parameter pairingToken: A token used to coordinate with the ASP.NET Core Module.
    - Parameter isWebsocketsSupported: Whether websockets are supported by IIS.
    - Parameter authentication: The .
    - Parameter applicationLifetime: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.IISOptions>, pairingToken : dotnet.System.String, isWebsocketsSupported : Bool, authentication : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, applicationLifetime : aspnetcore.Microsoft.Extensions.Hosting.IHostApplicationLifetime) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Server_IISIntegration_IISMiddleware_ctor_0__7__RequestDelegate_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_IISOptions__String_bool_IAuthenticationSchemeProvider_IHostApplicationLifetime(&__thrown, next.get_handle(), loggerFactory.get_handle(), options.get_handle(), pairingToken.get_handle(), Swift.Int32(isWebsocketsSupported ? 1 : 0), authentication.get_handle(), applicationLifetime.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invoke the middleware.
            

    - Parameter httpContext: The .
    - Returns: A  that represents the asynchronous operation.

    */
    open func Invoke(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_IISIntegration_IISMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IISMiddleware


}




