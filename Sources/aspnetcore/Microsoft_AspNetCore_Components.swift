// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Components
extension Microsoft.AspNetCore.Components {
// type: Microsoft.AspNetCore.Components.BindConverter
public struct BindConverter {
    // System.String FormatValue(System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.String>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__String_CultureInfo(&__thrown, value?.get_handle() ?? nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool FormatValue(bool, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Boolean,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Bool, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__FormatValue_0__2__bool_CultureInfo(&__thrown, Swift.Int32(value ? 1 : 0), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Nullable<bool> FormatValue(System.Nullable<bool>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Boolean},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Bool>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_System_Nullable_bool___FormatValue_0__2__System_Nullable_bool__CultureInfo(&__thrown, (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // System.String FormatValue(System.Int32, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int32,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Swift.Int32, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__i32_CultureInfo(&__thrown, value, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.Int32>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int32},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Swift.Int32>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_i32__CultureInfo(&__thrown, (value != nil) ? System_Int32_box(value!) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Int64, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int64,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Swift.Int64, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__i64_CultureInfo(&__thrown, value, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.Int64>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int64},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Swift.Int64>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_i64__CultureInfo(&__thrown, (value != nil) ? System_Int64_box(value!) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Int16, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Int16,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Swift.Int16, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__i16_CultureInfo(&__thrown, value, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.Int16>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Int16},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Swift.Int16>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_i16__CultureInfo(&__thrown, (value != nil) ? System_Int16_box(value!) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Single, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Single,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Swift.Float, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__f32_CultureInfo(&__thrown, value, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.Single>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Single},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Swift.Float>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_f32__CultureInfo(&__thrown, (value != nil) ? System_Single_box(value!) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Double, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Double,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Swift.Double, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__f64_CultureInfo(&__thrown, value, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.Double>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Double},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<Swift.Double>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_f64__CultureInfo(&__thrown, (value != nil) ? System_Double_box(value!) : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Decimal, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Decimal,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  for inclusion in an attribute.
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.Decimal, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__Decimal_CultureInfo(&__thrown, value.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.Decimal>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.Decimal},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.Decimal>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_System_Decimal__CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.DateTime, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTime,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateTime, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__DateTime_CultureInfo(&__thrown, value.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.DateTime, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTime,System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateTime, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__DateTime_String_CultureInfo(&__thrown, value.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.DateTime>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTime},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateTime>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_System_DateTime__CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.DateTime>, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTime},System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateTime>, format : Optional<dotnet.System.String>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__System_Nullable_System_DateTime__String_CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, format?.get_handle() ?? nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.DateTimeOffset, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTimeOffset,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateTimeOffset, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__DateTimeOffset_CultureInfo(&__thrown, value.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.DateTimeOffset, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateTimeOffset,System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateTimeOffset, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__DateTimeOffset_String_CultureInfo(&__thrown, value.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.DateTimeOffset>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTimeOffset},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateTimeOffset>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_System_DateTimeOffset__CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.DateTimeOffset>, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateTimeOffset},System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateTimeOffset>, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__System_Nullable_System_DateTimeOffset__String_CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.DateOnly, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateOnly,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__DateOnly_CultureInfo(&__thrown, value.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.DateOnly, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.DateOnly,System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.DateOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__DateOnly_String_CultureInfo(&__thrown, value.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.DateOnly>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateOnly},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateOnly>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_System_DateOnly__CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.DateOnly>, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.DateOnly},System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.DateOnly>, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__System_Nullable_System_DateOnly__String_CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.TimeOnly, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.TimeOnly,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.TimeOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__TimeOnly_CultureInfo(&__thrown, value.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.TimeOnly, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.TimeOnly,System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : dotnet.System.TimeOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__TimeOnly_String_CultureInfo(&__thrown, value.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatValue(System.Nullable<System.TimeOnly>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.TimeOnly},System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.TimeOnly>, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__2__System_Nullable_System_TimeOnly__CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Nullable<System.TimeOnly>, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue(System.Nullable{System.TimeOnly},System.String,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter format: The format to use. Provided to .
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue(value : Optional<dotnet.System.TimeOnly>, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_String__FormatValue_0__3__System_Nullable_System_TimeOnly__String_CultureInfo(&__thrown, (value != nil) ? value!.get_handle() : nil, format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object FormatValue<T>(T, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.FormatValue``1(``0,System.Globalization.CultureInfo)
    /**
    
            Formats the provided  as a .
            

    - Parameter value: The value to format.
    - Parameter culture: 
            The  to use while formatting. Defaults to .
            
    - Returns: The formatted value.

    */
    public static func FormatValue<UT : SGBridgeGenericValue>(value : UT, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_Object__FormatValue_1__2__UT_CultureInfo(UT.get_type_handle(), &__thrown, value.to_gval(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool TryConvertToString(System.Object, System.Globalization.CultureInfo, ref System.String)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToString(System.Object,System.Globalization.CultureInfo,System.String@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToString(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToString_0__3__Object_CultureInfo_outString(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.String(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvertToBool(System.Object, System.Globalization.CultureInfo, ref bool)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToBool(System.Object,System.Globalization.CultureInfo,System.Boolean@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToBool(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = Swift.Int32(value ? 1 : 0);
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToBool_0__3__Object_CultureInfo_outbool(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = (_tmp_out_value) != 0;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableBool(System.Object, System.Globalization.CultureInfo, ref System.Nullable<bool>)
    // bool TryConvertToInt(System.Object, System.Globalization.CultureInfo, ref System.Int32)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToInt(System.Object,System.Globalization.CultureInfo,System.Int32@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToInt(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToInt_0__3__Object_CultureInfo_outi32(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableInt(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Int32>)
    // bool TryConvertToLong(System.Object, System.Globalization.CultureInfo, ref System.Int64)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToLong(System.Object,System.Globalization.CultureInfo,System.Int64@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToLong(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToLong_0__3__Object_CultureInfo_outi64(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableLong(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Int64>)
    // bool TryConvertToShort(System.Object, System.Globalization.CultureInfo, ref System.Int16)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToShort(System.Object,System.Globalization.CultureInfo,System.Int16@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToShort(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Swift.Int16) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToShort_0__3__Object_CultureInfo_outi16(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableShort(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Int16>)
    // bool TryConvertToFloat(System.Object, System.Globalization.CultureInfo, ref System.Single)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToFloat(System.Object,System.Globalization.CultureInfo,System.Single@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToFloat(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Swift.Float) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToFloat_0__3__Object_CultureInfo_outf32(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableFloat(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Single>)
    // bool TryConvertToDouble(System.Object, System.Globalization.CultureInfo, ref System.Double)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDouble(System.Object,System.Globalization.CultureInfo,System.Double@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDouble(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Swift.Double) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDouble_0__3__Object_CultureInfo_outf64(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDouble(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Double>)
    // bool TryConvertToDecimal(System.Object, System.Globalization.CultureInfo, ref System.Decimal)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDecimal(System.Object,System.Globalization.CultureInfo,System.Decimal@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDecimal(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.Decimal>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDecimal_0__3__Object_CultureInfo_outDecimal(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.Decimal(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDecimal(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.Decimal>)
    // bool TryConvertToDateTime(System.Object, System.Globalization.CultureInfo, ref System.DateTime)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTime(System.Object,System.Globalization.CultureInfo,System.DateTime@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateTime(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.DateTime>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateTime_0__3__Object_CultureInfo_outDateTime(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateTime(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvertToDateTime(System.Object, System.Globalization.CultureInfo, System.String, ref System.DateTime)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTime(System.Object,System.Globalization.CultureInfo,System.String,System.DateTime@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter format: The format string to use in conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateTime(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, format : dotnet.System.String, value : inout Optional<dotnet.System.DateTime>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateTime_0__4__Object_CultureInfo_String_outDateTime(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, format.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateTime(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateTime(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.DateTime>)
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateTime(System.Object, System.Globalization.CultureInfo, System.String, ref System.Nullable<System.DateTime>)
    // bool TryConvertToDateTimeOffset(System.Object, System.Globalization.CultureInfo, ref System.DateTimeOffset)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.DateTimeOffset@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateTimeOffset(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.DateTimeOffset>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateTimeOffset_0__3__Object_CultureInfo_outDateTimeOffset(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateTimeOffset(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvertToDateTimeOffset(System.Object, System.Globalization.CultureInfo, System.String, ref System.DateTimeOffset)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateTimeOffset(System.Object,System.Globalization.CultureInfo,System.String,System.DateTimeOffset@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter format: The format string to use in conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateTimeOffset(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, format : dotnet.System.String, value : inout Optional<dotnet.System.DateTimeOffset>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateTimeOffset_0__4__Object_CultureInfo_String_outDateTimeOffset(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, format.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateTimeOffset(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateTimeOffset(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.DateTimeOffset>)
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateTimeOffset(System.Object, System.Globalization.CultureInfo, System.String, ref System.Nullable<System.DateTimeOffset>)
    // bool TryConvertToDateOnly(System.Object, System.Globalization.CultureInfo, ref System.DateOnly)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateOnly(System.Object,System.Globalization.CultureInfo,System.DateOnly@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateOnly(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.DateOnly>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateOnly_0__3__Object_CultureInfo_outDateOnly(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateOnly(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvertToDateOnly(System.Object, System.Globalization.CultureInfo, System.String, ref System.DateOnly)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToDateOnly(System.Object,System.Globalization.CultureInfo,System.String,System.DateOnly@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter format: The format string to use in conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToDateOnly(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, format : dotnet.System.String, value : inout Optional<dotnet.System.DateOnly>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToDateOnly_0__4__Object_CultureInfo_String_outDateOnly(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, format.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.DateOnly(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateOnly(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.DateOnly>)
// TODO COPE (parm byref nullable of): bool TryConvertToNullableDateOnly(System.Object, System.Globalization.CultureInfo, System.String, ref System.Nullable<System.DateOnly>)
    // bool TryConvertToTimeOnly(System.Object, System.Globalization.CultureInfo, ref System.TimeOnly)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToTimeOnly(System.Object,System.Globalization.CultureInfo,System.TimeOnly@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToTimeOnly(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : inout Optional<dotnet.System.TimeOnly>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToTimeOnly_0__3__Object_CultureInfo_outTimeOnly(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.TimeOnly(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryConvertToTimeOnly(System.Object, System.Globalization.CultureInfo, System.String, ref System.TimeOnly)
// docid: M:Microsoft.AspNetCore.Components.BindConverter.TryConvertToTimeOnly(System.Object,System.Globalization.CultureInfo,System.String,System.TimeOnly@)
    /**
    
            Attempts to convert a value to a .
            

    - Parameter obj: The object to convert.
    - Parameter culture: The  to use for conversion.
    - Parameter format: The format string to use in conversion.
    - Parameter value: The converted value.
    - Returns: true if conversion is successful, otherwise false.

    */
    public static func TryConvertToTimeOnly(obj : Optional<dotnet.System.Object>, culture : Optional<dotnet.System.Globalization.CultureInfo>, format : dotnet.System.String, value : inout Optional<dotnet.System.TimeOnly>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Components_BindConverter_bool__TryConvertToTimeOnly_0__4__Object_CultureInfo_String_outTimeOnly(&__thrown, obj?.get_handle() ?? nil, culture?.get_handle() ?? nil, format.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.TimeOnly(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (parm byref nullable of): bool TryConvertToNullableTimeOnly(System.Object, System.Globalization.CultureInfo, ref System.Nullable<System.TimeOnly>)
// TODO COPE (parm byref nullable of): bool TryConvertToNullableTimeOnly(System.Object, System.Globalization.CultureInfo, System.String, ref System.Nullable<System.TimeOnly>)
// TODO COPE (write_all_methods) (unused generic param) bool TryConvertTo<T>(System.Object, System.Globalization.CultureInfo, ref T)
} // BindConverter


// type: Microsoft.AspNetCore.Components.BindElementAttribute
    /**
    
            Configures options for binding specific element types.
            

    */
public final class BindElementAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_BindElementAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Components.BindElementAttribute.#ctor(System.String,System.String,System.String,System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter element: The tag name of the element.
    - Parameter suffix: The suffix value. For example, set this to value for bind-value, or set this to  for bind.
    - Parameter valueAttribute: The name of the value attribute to be bound.
    - Parameter changeAttribute: The name of an attribute that will register an associated change event.
    */
    public init(element : dotnet.System.String, suffix : Optional<dotnet.System.String>, valueAttribute : dotnet.System.String, changeAttribute : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_BindElementAttribute_ctor_0__4__String_String_String_String(&__thrown, element.get_handle(), suffix?.get_handle() ?? nil, valueAttribute.get_handle(), changeAttribute.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Element()
// docid: M:Microsoft.AspNetCore.Components.BindElementAttribute.get_Element
    public func get_Element() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindElementAttribute_String__get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Suffix()
// docid: M:Microsoft.AspNetCore.Components.BindElementAttribute.get_Suffix
    public func get_Suffix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindElementAttribute_String__get_Suffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ValueAttribute()
// docid: M:Microsoft.AspNetCore.Components.BindElementAttribute.get_ValueAttribute
    public func get_ValueAttribute() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindElementAttribute_String__get_ValueAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ChangeAttribute()
// docid: M:Microsoft.AspNetCore.Components.BindElementAttribute.get_ChangeAttribute
    public func get_ChangeAttribute() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindElementAttribute_String__get_ChangeAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the name of an attribute that will register an associated change event.
            

    */
    public var ChangeAttribute : dotnet.System.String {
        get {
            return try! get_ChangeAttribute();
        }
    }
    /**
    
            Gets the tag name of the element.
            

    */
    public var Element : dotnet.System.String {
        get {
            return try! get_Element();
        }
    }
    /**
    
            Gets the suffix value.
            For example, this will be value to mean bind-value, or  to mean bind.
            

    */
    public var Suffix : Optional<dotnet.System.String> {
        get {
            return try! get_Suffix();
        }
    }
    /**
    
            Gets the name of the value attribute to be bound.
            

    */
    public var ValueAttribute : dotnet.System.String {
        get {
            return try! get_ValueAttribute();
        }
    }
} // BindElementAttribute


// type: Microsoft.AspNetCore.Components.CascadingParameterAttribute
    /**
    
            Denotes the target member as a cascading component parameter. Its value will be
            supplied by the closest ancestor  component that
            supplies values with a compatible type and name.
            

    */
public final class CascadingParameterAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_CascadingParameterAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.CascadingParameterAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_CascadingParameterAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.CascadingParameterAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingParameterAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Components.CascadingParameterAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingParameterAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
             If specified, the parameter value will be supplied by the closest
             ancestor  that supplies a value with
             this name.
            
             If null, the parameter value will be supplied by the closest ancestor
               that supplies a value with a compatible
             type.
             

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // CascadingParameterAttribute


// type: Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute
    /**
    
            Denotes the generic type parameter as cascading. This allows generic type inference
            to use this type parameter value automatically on descendants that also have a type
            parameter with the same name.
            

    */
public final class CascadingTypeParameterAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_CascadingTypeParameterAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter name: The name of the type parameter.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_CascadingTypeParameterAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingTypeParameterAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the name of the type parameter.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // CascadingTypeParameterAttribute


// type: Microsoft.AspNetCore.Components.CascadingValue`1
    /**
    
            A component that provides a cascading value to all descendant components.
            

    */
open class CascadingValue_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_CascadingValue_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_CascadingValue_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    */
    open /* method final */ func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingValue_1_void__Attach_0__1__RenderHandle(TValue.get_type_handle(), &__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open /* method final */ func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingValue_1_Task__SetParametersAsync_0__1__ParameterView(TValue.get_type_handle(), &__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingValue_1_RenderFragment__get_ChildContent_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingValue_1_void__set_ChildContent_0__1__RenderFragment(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.get_Value
    open func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingValue_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Value(TValue)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.set_Value(`0)
    open func set_Value(value : TValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingValue_1_void__set_Value_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingValue_1_String__get_Name_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingValue_1_void__set_Name_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsFixed()
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.get_IsFixed
    open func get_IsFixed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CascadingValue_1_bool__get_IsFixed_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsFixed(bool)
// docid: M:Microsoft.AspNetCore.Components.CascadingValue`1.set_IsFixed(System.Boolean)
    open func set_IsFixed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_CascadingValue_1_void__set_IsFixed_0__1__bool(TValue.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The content to which the value should be provided.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            If true, indicates that  will not change. This is a
            performance optimization that allows the framework to skip setting up
            change notifications. Set this flag only if you will not change
             during the component's lifetime.
            

    */
    open var IsFixed : Bool {
        get {
            return try! get_IsFixed();
        }
        set(v) {
            return try! set_IsFixed(value: v);
        }
    }
    /**
    
             Optionally gives a name to the provided value. Descendant components
             will be able to receive the value by specifying this name.
            
             If no name is specified, then descendant components will receive the
             value based the type of value they are requesting.
             

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            The value to be provided.
            

    */
    open var Value : TValue {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // CascadingValue_1


// type: Microsoft.AspNetCore.Components.ChangeEventArgs
    /**
    
            Supplies information about an change event that is being raised.
            

    */
open class ChangeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ChangeEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.ChangeEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ChangeEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Components.ChangeEventArgs.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ChangeEventArgs_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:Microsoft.AspNetCore.Components.ChangeEventArgs.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ChangeEventArgs_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the new value.
            

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // ChangeEventArgs


// type: Microsoft.AspNetCore.Components.ComponentBase
    /**
    
            Optional base class for components. Alternatively, components may
            implement  directly.
            

    */
open class ComponentBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent,
    Microsoft_AspNetCore_Components_IHandleEvent,
    Microsoft_AspNetCore_Components_IHandleAfterRender
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ComponentBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.#ctor
    /**
    
            Constructs an instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ComponentBase_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
    /**
    
            Renders the component to the supplied .
            

    - Parameter builder: A  that will receive the render output.
    */
    open func BuildRenderTree(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ComponentBase_void__BuildRenderTree_0__1__RenderTreeBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnInitialized()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnInitialized
    /**
    
            Method invoked when the component is ready to start, having received its
            initial parameters from its parent in the render tree.
            

    */
    open func OnInitialized() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ComponentBase_void__OnInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnInitializedAsync()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync
    /**
    
             Method invoked when the component is ready to start, having received its
             initial parameters from its parent in the render tree.
            
             Override this method if you will perform an asynchronous operation and
             want the component to refresh when that operation is completed.
             

    - Returns: A  representing any asynchronous operation.

    */
    open func OnInitializedAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__OnInitializedAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void OnParametersSet()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet
    /**
    
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            

    */
    open func OnParametersSet() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ComponentBase_void__OnParametersSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnParametersSetAsync()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync
    /**
    
            Method invoked when the component has received parameters from its parent in
            the render tree, and the incoming values have been assigned to properties.
            

    - Returns: A  representing any asynchronous operation.

    */
    open func OnParametersSetAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__OnParametersSetAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void StateHasChanged()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged
    /**
    
            Notifies the component that its state has changed. When applicable, this will
            cause the component to be re-rendered.
            

    */
    open func StateHasChanged() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ComponentBase_void__StateHasChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ShouldRender()
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.ShouldRender
    /**
    
            Returns a flag to indicate whether the component should render.
            

    - Returns: 

    */
    open func ShouldRender() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_bool__ShouldRender_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void OnAfterRender(bool)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)
    /**
    
            Method invoked after each time the component has been rendered.
            

    - Parameter firstRender: 
            Set to true if this is the first time  has been invoked
            on this component instance; otherwise false.
            
    */
    open func OnAfterRender(firstRender : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ComponentBase_void__OnAfterRender_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(firstRender ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnAfterRenderAsync(bool)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)
    /**
    
            Method invoked after each time the component has been rendered. Note that the component does
            not automatically re-render after the completion of any returned , because
            that would cause an infinite render loop.
            

    - Parameter firstRender: 
            Set to true if this is the first time  has been invoked
            on this component instance; otherwise false.
            
    - Returns: A  representing any asynchronous operation.

    */
    open func OnAfterRenderAsync(firstRender : Bool) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__OnAfterRenderAsync_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(firstRender ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Action)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action)
    /**
    
            Executes the supplied work item on the associated renderer's
            synchronization context.
            

    - Parameter workItem: The work item to execute.
    */
    open func InvokeAsync(workItem : dotnet.System.Action) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__InvokeAsync_0__1__Action(&__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync(workItem : @escaping () throws -> Void) async throws {
        let del_workItem = try dotnet.System.Action(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func{System.Threading.Tasks.Task})
    /**
    
            Executes the supplied work item on the associated renderer's
            synchronization context.
            

    - Parameter workItem: The work item to execute.
    */
    open func InvokeAsync(workItem : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__InvokeAsync_0__1__System_Func_Task_(&__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync(workItem : @escaping () throws -> dotnet.System.Threading.Tasks.Task) async throws {
        let del_workItem = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    
            Sets parameters supplied by the component's parent in the render tree.
            

    - Parameter parameters: The parameters.
    - Returns: A  that completes when the component has finished updating and rendering itself.

    */
    open func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ComponentBase_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    public static func subclass<T: aspnetcore.Microsoft.AspNetCore.Components.ComponentBase>(
        BuildRenderTree __closure_BuildRenderTree : @escaping (T) -> (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void
        ) throws -> System.Type_
    {
        let __interlude_BuildRenderTree : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, selph : NonnullHandle, builder : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try __closure_BuildRenderTree(T(hndl: selph))(aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder(hndl: builder));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        func __cb_BuildRenderTree(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, selph : NonnullHandle, builder : NonnullHandle) -> Void
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f_interlude(thrown, selph, builder);
        }
        let __pdata_BuildRenderTree = UnsafeRawPointer(Unmanaged.passRetained(__interlude_BuildRenderTree as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ComponentBase_subclass(
            &__thrown,
            __cb_BuildRenderTree,
            __pdata_BuildRenderTree,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return System.Type_(hndl: h);
        }
    }
} // ComponentBase


// type: Microsoft.AspNetCore.Components.Dispatcher
    /**
    
            Dispatches external actions to be executed on the context of a .
            

    */
open class Dispatcher
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Dispatcher_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Components.Dispatcher CreateDefault()
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.CreateDefault
    /**
    
            Creates a default instance of .
            

    - Returns: A  instance.

    */
    open class func CreateDefault() throws -> aspnetcore.Microsoft.AspNetCore.Components.Dispatcher {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_Dispatcher__CreateDefault_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Dispatcher(hndl : __return);
        }
    }
    // void AssertAccess()
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.AssertAccess
    /**
    
            Validates that the currently executing code is running inside the dispatcher.
            

    */
    open func AssertAccess() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Dispatcher_void__AssertAccess_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CheckAccess()
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.CheckAccess
    /**
    
            Returns a value that determines whether using the dispatcher to invoke a work item is required
            from the current context.
            

    - Returns: true if invoking is required, otherwise false.

    */
    open func CheckAccess() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_bool__CheckAccess_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Action)
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync(System.Action)
    /**
    
            Invokes the given  in the context of the associated .
            

    - Parameter workItem: The action to execute.
    - Returns: A  that will be completed when the action has finished executing.

    */
    open func InvokeAsync(workItem : dotnet.System.Action) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_Task__InvokeAsync_0__1__Action(&__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync(workItem : @escaping () throws -> Void) async throws {
        let del_workItem = try dotnet.System.Action(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task})
    /**
    
            Invokes the given  in the context of the associated .
            

    - Parameter workItem: The asynchronous action to execute.
    - Returns: A  that will be completed when the action has finished executing.

    */
    open func InvokeAsync(workItem : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_Task__InvokeAsync_0__1__System_Func_Task_(&__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync(workItem : @escaping () throws -> dotnet.System.Threading.Tasks.Task) async throws {
        let del_workItem = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
    // System.Threading.Tasks.Task<TResult> InvokeAsync<TResult>(System.Func<TResult>)
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync``1(System.Func{``0})
    /**
    
            Invokes the given  in the context of the associated .
            

    - Parameter workItem: The function to execute.
    - Returns: A  that will be completed when the function has finished executing.

    */
    open func InvokeAsync<UTResult : SGBridgeGenericValue>(workItem : dotnet.System.Func_1<UTResult>) async throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_System_Threading_Tasks_Task_UTResult___InvokeAsync_1__1__System_Func_UTResult_(UTResult.get_type_handle(), &__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync<UTResult : SGBridgeGenericValue>(workItem : @escaping () throws -> UTResult) async throws -> UTResult {
        let del_workItem = try dotnet.System.Func_1<UTResult>(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
    // System.Threading.Tasks.Task<TResult> InvokeAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
// docid: M:Microsoft.AspNetCore.Components.Dispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
    /**
    
            Invokes the given  in the context of the associated .
            

    - Parameter workItem: The asynchronous function to execute.
    - Returns: A  that will be completed when the function has finished executing.

    */
    open func InvokeAsync<UTResult : SGBridgeGenericValue>(workItem : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<UTResult>>) async throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Dispatcher_System_Threading_Tasks_Task_UTResult___InvokeAsync_1__1__System_Func_System_Threading_Tasks_System_Threading_Tasks_Task_UTResult__(UTResult.get_type_handle(), &__thrown, self.get_handle(), workItem.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync<UTResult : SGBridgeGenericValue>(workItem : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<UTResult>) async throws -> UTResult {
        let del_workItem = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<UTResult>>(workItem);
        return try await InvokeAsync(workItem: del_workItem);
    }
} // Dispatcher


// type: Microsoft.AspNetCore.Components.DynamicComponent
    /**
    
            A component that renders another component dynamically according to its
             parameter.
            

    */
open class DynamicComponent
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_DynamicComponent_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.#ctor
    /**
    
            Constructs an instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_DynamicComponent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    */
    open /* method final */ func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_DynamicComponent_void__Attach_0__1__RenderHandle(&__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open /* method final */ func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_DynamicComponent_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_DynamicComponent_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.set_Type(System.Type)
    open func set_Type(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_DynamicComponent_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Parameters()
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.get_Parameters
    open func get_Parameters() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_DynamicComponent_System_Collections_Generic_IDictionary_string_object___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Parameters(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.set_Parameters(System.Collections.Generic.IDictionary{System.String,System.Object})
    open func set_Parameters(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_DynamicComponent_void__set_Parameters_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Instance()
// docid: M:Microsoft.AspNetCore.Components.DynamicComponent.get_Instance
    open func get_Instance() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_DynamicComponent_Object__get_Instance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets rendered component instance.
            

    */
    open var Instance : Optional<dotnet.System.Object> {
        get {
            return try! get_Instance();
        }
    }
    /**
    
            Gets or sets a dictionary of parameters to be passed to the component.
            

    */
    open var Parameters : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v!);
        }
    }
    /**
    
            Gets or sets the type of the component to be rendered. The supplied type must
            implement .
            

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // DynamicComponent


// type: Microsoft.AspNetCore.Components.EditorRequiredAttribute
    /**
    
            Specifies that the component parameter is required to be provided by the user when authoring it in the editor.
            
            If a value for this parameter is not provided, editors or build tools may provide warnings indicating the user to
            specify a value. This attribute is only valid on properties marked with .
            
            

    */
public final class EditorRequiredAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EditorRequiredAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.EditorRequiredAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EditorRequiredAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EditorRequiredAttribute


// type: Microsoft.AspNetCore.Components.ElementReference
// boxed value type
    /**
    
            Represents a reference to a rendered element.
            

    */
public final class ElementReference
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ElementReference_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the  instance.
            

    */
    public var Context : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceContext> {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets a unique identifier for .
            

    */
    public var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Components.ElementReferenceContext)
// docid: M:Microsoft.AspNetCore.Components.ElementReference.#ctor(System.String,Microsoft.AspNetCore.Components.ElementReferenceContext)
    /**
    
            Instantiates a new .
            

    - Parameter id: A unique identifier for this .
    - Parameter context: The nullable  instance.
    */
    public init(id : dotnet.System.String, context : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ElementReference_ctor_0__2__String_ElementReferenceContext(&__thrown, id.get_handle(), context?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Components.ElementReference.#ctor(System.String)
    /**
    
            Instantiates a new .
            

    - Parameter id: A unique identifier for this .
    */
    public init(id : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ElementReference_ctor_0__1__String(&__thrown, id.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_ElementReference_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Components.ElementReference.get_Id
    public func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ElementReference_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.ElementReferenceContext get_Context()
// docid: M:Microsoft.AspNetCore.Components.ElementReference.get_Context
    public func get_Context() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ElementReference_ElementReferenceContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ElementReference


// type: Microsoft.AspNetCore.Components.ElementReferenceContext
    /**
    
            Context for an .
            

    */
open class ElementReferenceContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ElementReferenceContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ElementReferenceContext


// type: Microsoft.AspNetCore.Components.ErrorBoundaryBase
    /**
    
            A base class for error boundary components.
            

    */
open class ErrorBoundaryBase
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ErrorBoundaryBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Recover()
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover
    /**
    
            Resets the error boundary to a non-errored state. If the error boundary is not
            already in an errored state, the call has no effect.
            

    */
    open func Recover() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ErrorBoundaryBase_void__Recover_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ErrorBoundaryBase_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ErrorBoundaryBase_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<System.Exception> get_ErrorContent()
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.get_ErrorContent
    open func get_ErrorContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<dotnet.System.Exception>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ErrorBoundaryBase_Microsoft_AspNetCore_Components_RenderFragment_System_Exception___get_ErrorContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ErrorContent(Microsoft.AspNetCore.Components.RenderFragment<System.Exception>)
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.set_ErrorContent(Microsoft.AspNetCore.Components.RenderFragment{System.Exception})
    open func set_ErrorContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<dotnet.System.Exception>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ErrorBoundaryBase_void__set_ErrorContent_0__1__Microsoft_AspNetCore_Components_RenderFragment_System_Exception_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ErrorContent(value : @escaping (dotnet.System.Exception) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<dotnet.System.Exception>(value);
        return try set_ErrorContent(value: del_value);
    }
    // [IsSpecialName] System.Int32 get_MaximumErrorCount()
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.get_MaximumErrorCount
    open func get_MaximumErrorCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ErrorBoundaryBase_i32__get_MaximumErrorCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumErrorCount(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.set_MaximumErrorCount(System.Int32)
    open func set_MaximumErrorCount(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ErrorBoundaryBase_void__set_MaximumErrorCount_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The content to be displayed when there is no error.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            The content to be displayed when there is an error.
            

    */
    open var ErrorContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<dotnet.System.Exception>> {
        get {
            return try! get_ErrorContent();
        }
        set(v) {
            return try! set_ErrorContent(value: v!);
        }
    }
    /**
    
            The maximum number of errors that can be handled. If more errors are received,
            they will be treated as fatal. Calling  resets the count.
            

    */
    open var MaximumErrorCount : Swift.Int32 {
        get {
            return try! get_MaximumErrorCount();
        }
        set(v) {
            return try! set_MaximumErrorCount(value: v);
        }
    }
} // ErrorBoundaryBase


// type: Microsoft.AspNetCore.Components.EventCallback
// boxed value type
    /**
    
            A bound event handler delegate.
            

    */
public final class EventCallback
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EventCallback_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Components.EventCallbackFactory Factory
    /**
    
            Gets a reference to the .
            

    */
    public class var Factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory(hndl: Microsoft_AspNetCore_Components_EventCallback_get_Factory());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.EventCallback Empty
    /**
    
            Gets an empty .
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl: Microsoft_AspNetCore_Components_EventCallback_get_Empty());
            return __return;
        }
    }
    /**
    
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            

    */
    public var HasDelegate : Bool {
        get {
            return try! get_HasDelegate();
        }
    }
    // .ctor(Microsoft.AspNetCore.Components.IHandleEvent, System.MulticastDelegate)
// docid: M:Microsoft.AspNetCore.Components.EventCallback.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)
    /**
    
            Creates the new .
            

    - Parameter receiver: The event receiver.
    - Parameter delegate: The delegate to bind.
    */
    public init(receiver : Optional<aspnetcore.Microsoft.AspNetCore.Components.IHandleEvent>, delegate : Optional<dotnet.System.MulticastDelegate>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventCallback_ctor_0__2__IHandleEvent_MulticastDelegate(&__thrown, receiver?.get_handle() ?? nil, delegate?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_EventCallback_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Object)
// docid: M:Microsoft.AspNetCore.Components.EventCallback.InvokeAsync(System.Object)
    /**
    
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            

    - Parameter arg: The argument.
    - Returns: A  which completes asynchronously once event processing has completed.

    */
    public func InvokeAsync(arg : Optional<dotnet.System.Object>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_Task__InvokeAsync_0__1__Object(&__thrown, self.get_handle(), arg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task InvokeAsync()
// docid: M:Microsoft.AspNetCore.Components.EventCallback.InvokeAsync
    /**
    
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            

    - Returns: A  which completes asynchronously once event processing has completed.

    */
    public func InvokeAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_Task__InvokeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_HasDelegate()
// docid: M:Microsoft.AspNetCore.Components.EventCallback.get_HasDelegate
    public func get_HasDelegate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_bool__get_HasDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // EventCallback


// type: Microsoft.AspNetCore.Components.EventCallbackFactory
    /**
    
            A factory for creating  and 
            instances.
            

    */
public final class EventCallbackFactory
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EventCallbackFactory_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventCallbackFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Components.EventCallback Create(System.Object, Microsoft.AspNetCore.Components.EventCallback)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,Microsoft.AspNetCore.Components.EventCallback)
    /**
    
            Returns the provided . For internal framework use only.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Returns: 

    */
    public func Create(receiver : dotnet.System.Object, callback : aspnetcore.Microsoft.AspNetCore.Components.EventCallback) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_EventCallback__Create_0__2__Object_EventCallback(&__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Components.EventCallback Create(System.Object, System.Action)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action)
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_EventCallback__Create_0__2__Object_Action(&__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping () throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        let del_callback = try dotnet.System.Action(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback Create(System.Object, System.Action<System.Object>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Action{System.Object})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_EventCallback__Create_0__2__Object_System_Action_object_(&__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (dotnet.System.Object) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        let del_callback = try dotnet.System.Action_1<dotnet.System.Object>(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback Create(System.Object, System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_EventCallback__Create_0__2__Object_System_Func_Task_(&__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        let del_callback = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback Create(System.Object, System.Func<System.Object,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create(System.Object,System.Func{System.Object,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_EventCallback__Create_0__2__Object_System_Func_object_Task_(&__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, Microsoft.AspNetCore.Components.EventCallback)
    // Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, Microsoft.AspNetCore.Components.EventCallback<TValue>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,Microsoft.AspNetCore.Components.EventCallback{``0})
    /**
    
            Returns the provided . For internal framework use only.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Returns: 

    */
    public func Create<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_Microsoft_AspNetCore_Components_EventCallback_UTValue___Create_1__2__Object_Microsoft_AspNetCore_Components_EventCallback_UTValue_(UTValue.get_type_handle(), &__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, System.Action)
    // Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, System.Action<TValue>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Action{``0})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<UTValue>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_Microsoft_AspNetCore_Components_EventCallback_UTValue___Create_1__2__Object_System_Action_UTValue_(UTValue.get_type_handle(), &__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UTValue) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        let del_callback = try dotnet.System.Action_1<UTValue>(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, System.Func<System.Threading.Tasks.Task>)
    // Microsoft.AspNetCore.Components.EventCallback<TValue> Create<TValue>(System.Object, System.Func<TValue,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.Create``1(System.Object,System.Func{``0,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public func Create<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<UTValue,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_Microsoft_AspNetCore_Components_EventCallback_UTValue___Create_1__2__Object_System_Func_UTValue_Task_(UTValue.get_type_handle(), &__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func Create<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UTValue) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        let del_callback = try dotnet.System.Func_2<UTValue,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<TValue> CreateInferred<TValue>(System.Object, System.Action<TValue>, TValue)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Action{``0},``0)
    /**
    
            Creates an  for the provided  and
            . For internal framework use only.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Parameter value: 
    - Returns: 

    */
    public func CreateInferred<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<UTValue>, value : UTValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_Microsoft_AspNetCore_Components_EventCallback_UTValue___CreateInferred_1__3__Object_System_Action_UTValue__UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func CreateInferred<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UTValue) throws -> Void, value : UTValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        let del_callback = try dotnet.System.Action_1<UTValue>(callback);
        return try CreateInferred(receiver: receiver, callback: del_callback, value: value);
    }
    // Microsoft.AspNetCore.Components.EventCallback<TValue> CreateInferred<TValue>(System.Object, System.Func<TValue,System.Threading.Tasks.Task>, TValue)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactory.CreateInferred``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},``0)
    /**
    
            Creates an  for the provided  and
            . For internal framework use only.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Parameter value: 
    - Returns: 

    */
    public func CreateInferred<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<UTValue,dotnet.System.Threading.Tasks.Task>, value : UTValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactory_Microsoft_AspNetCore_Components_EventCallback_UTValue___CreateInferred_1__3__Object_System_Func_UTValue_Task__UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), receiver.get_handle(), callback.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public func CreateInferred<UTValue : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UTValue) throws -> dotnet.System.Threading.Tasks.Task, value : UTValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTValue> {
        let del_callback = try dotnet.System.Func_2<UTValue,dotnet.System.Threading.Tasks.Task>(callback);
        return try CreateInferred(receiver: receiver, callback: del_callback, value: value);
    }
} // EventCallbackFactory


// type: Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions
public struct EventCallbackFactoryBinderExtensions {
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.String>, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.String},System.String,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.String>, existingValue : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_string__String_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Optional<dotnet.System.String>) throws -> Void, existingValue : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.String>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<bool>, bool, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Boolean},System.Boolean,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Bool>, existingValue : Bool, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_bool__bool_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), Swift.Int32(existingValue ? 1 : 0), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Bool) throws -> Void, existingValue : Bool, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Bool>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<bool>>, System.Nullable<bool>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int32>, System.Int32, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int32},System.Int32,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int32>, existingValue : Swift.Int32, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_i32__i32_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Swift.Int32) throws -> Void, existingValue : Swift.Int32, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int32>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int32>>, System.Nullable<System.Int32>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int64>, System.Int64, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int64},System.Int64,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int64>, existingValue : Swift.Int64, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_i64__i64_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Swift.Int64) throws -> Void, existingValue : Swift.Int64, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int64>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int16>, System.Int16, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Int16},System.Int16,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int16>, existingValue : Swift.Int16, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_i16__i16_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Swift.Int16) throws -> Void, existingValue : Swift.Int16, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int16>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int64>>, System.Nullable<System.Int64>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int16>>, System.Nullable<System.Int16>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Single>, System.Single, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Single},System.Single,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Float>, existingValue : Swift.Float, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_f32__f32_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Swift.Float) throws -> Void, existingValue : Swift.Float, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Float>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Single>>, System.Nullable<System.Single>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Double>, System.Double, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Double},System.Double,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Double>, existingValue : Swift.Double, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_f64__f64_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (Swift.Double) throws -> Void, existingValue : Swift.Double, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Double>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Double>>, System.Nullable<System.Double>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Decimal>, System.Decimal, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.Decimal},System.Decimal,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.Decimal>, existingValue : dotnet.System.Decimal, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_System_Decimal__Decimal_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.Decimal) throws -> Void, existingValue : dotnet.System.Decimal, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.Decimal>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Decimal>>, System.Nullable<System.Decimal>, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTime>, System.DateTime, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTime>, existingValue : dotnet.System.DateTime, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_System_DateTime__DateTime_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTime) throws -> Void, existingValue : dotnet.System.DateTime, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTime>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTime>, System.DateTime, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTime},System.DateTime,System.String,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter format: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTime>, existingValue : dotnet.System.DateTime, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__6__EventCallbackFactory_Object_System_Action_System_DateTime__DateTime_String_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTime) throws -> Void, existingValue : dotnet.System.DateTime, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTime>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTime>>, System.Nullable<System.DateTime>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTime>>, System.Nullable<System.DateTime>, System.String, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTimeOffset>, System.DateTimeOffset, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTimeOffset},System.DateTimeOffset,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTimeOffset>, existingValue : dotnet.System.DateTimeOffset, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_System_DateTimeOffset__DateTimeOffset_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTimeOffset) throws -> Void, existingValue : dotnet.System.DateTimeOffset, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTimeOffset>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTimeOffset>, System.DateTimeOffset, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateTimeOffset},System.DateTimeOffset,System.String,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter format: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTimeOffset>, existingValue : dotnet.System.DateTimeOffset, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__6__EventCallbackFactory_Object_System_Action_System_DateTimeOffset__DateTimeOffset_String_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTimeOffset) throws -> Void, existingValue : dotnet.System.DateTimeOffset, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTimeOffset>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTimeOffset>>, System.Nullable<System.DateTimeOffset>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTimeOffset>>, System.Nullable<System.DateTimeOffset>, System.String, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateOnly>, System.DateOnly, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateOnly},System.DateOnly,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateOnly>, existingValue : dotnet.System.DateOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_System_DateOnly__DateOnly_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateOnly) throws -> Void, existingValue : dotnet.System.DateOnly, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateOnly>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateOnly>, System.DateOnly, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.DateOnly},System.DateOnly,System.String,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter format: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateOnly>, existingValue : dotnet.System.DateOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__6__EventCallbackFactory_Object_System_Action_System_DateOnly__DateOnly_String_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateOnly) throws -> Void, existingValue : dotnet.System.DateOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateOnly>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateOnly>>, System.Nullable<System.DateOnly>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateOnly>>, System.Nullable<System.DateOnly>, System.String, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.TimeOnly>, System.TimeOnly, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.TimeOnly},System.TimeOnly,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.TimeOnly>, existingValue : dotnet.System.TimeOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__5__EventCallbackFactory_Object_System_Action_System_TimeOnly__TimeOnly_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.TimeOnly) throws -> Void, existingValue : dotnet.System.TimeOnly, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.TimeOnly>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.TimeOnly>, System.TimeOnly, System.String, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.TimeOnly},System.TimeOnly,System.String,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter format: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.TimeOnly>, existingValue : dotnet.System.TimeOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_0__6__EventCallbackFactory_Object_System_Action_System_TimeOnly__TimeOnly_String_CultureInfo(&__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.get_handle(), format.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (dotnet.System.TimeOnly) throws -> Void, existingValue : dotnet.System.TimeOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.TimeOnly>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.TimeOnly>>, System.Nullable<System.TimeOnly>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.TimeOnly>>, System.Nullable<System.TimeOnly>, System.String, System.Globalization.CultureInfo)
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder<T>(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<T>, T, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder``1(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{``0},``0,System.Globalization.CultureInfo)
    /**
    
            For internal use only.
            

    - Parameter factory: 
    - Parameter receiver: 
    - Parameter setter: 
    - Parameter existingValue: 
    - Parameter culture: 
    - Returns: 

    */
    public static func CreateBinder<UT : SGBridgeGenericValue>(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : dotnet.System.Action_1<UT>, existingValue : UT, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryBinderExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___CreateBinder_1__5__EventCallbackFactory_Object_System_Action_UT__UT_CultureInfo(UT.get_type_handle(), &__thrown, factory.get_handle(), receiver.get_handle(), setter.get_handle(), existingValue.to_gval(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateBinder<UT : SGBridgeGenericValue>(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, setter : @escaping (UT) throws -> Void, existingValue : UT, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<UT>(setter);
        return try CreateBinder(factory: factory, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
} // EventCallbackFactoryBinderExtensions


// type: Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions
public struct EventCallbackFactoryEventArgsExtensions {
    // Microsoft.AspNetCore.Components.EventCallback<System.EventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.EventArgs>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{System.EventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<dotnet.System.EventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_System_EventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_System_EventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (dotnet.System.EventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.EventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<System.EventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<System.EventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{System.EventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<dotnet.System.EventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_System_EventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_System_EventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (dotnet.System.EventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        let del_callback = try dotnet.System.Func_2<dotnet.System.EventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.ChangeEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.ChangeEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_ChangeEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.ChangeEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.ChangeEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_ChangeEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_ChangeEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
} // EventCallbackFactoryEventArgsExtensions


// type: Microsoft.AspNetCore.Components.EventCallbackWorkItem
// boxed value type
    /**
    
            Wraps a callback delegate associated with an event.
            

    */
public final class EventCallbackWorkItem
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EventCallbackWorkItem_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Components.EventCallbackWorkItem Empty
    /**
    
            An empty .
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackWorkItem {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.EventCallbackWorkItem(hndl: Microsoft_AspNetCore_Components_EventCallbackWorkItem_get_Empty());
            return __return;
        }
    }
    // .ctor(System.MulticastDelegate)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.#ctor(System.MulticastDelegate)
    /**
    
            Creates a new  with the provided .
            

    - Parameter delegate: The callback delegate.
    */
    public init(delegate : Optional<dotnet.System.MulticastDelegate>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventCallbackWorkItem_ctor_0__1__MulticastDelegate(&__thrown, delegate?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_EventCallbackWorkItem_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Threading.Tasks.Task InvokeAsync(System.Object)
// docid: M:Microsoft.AspNetCore.Components.EventCallbackWorkItem.InvokeAsync(System.Object)
    /**
    
            Invokes the delegate associated with this .
            

    - Parameter arg: The argument to provide to the delegate. May be null.
    - Returns: A  then will complete asynchronously once the delegate has completed.

    */
    public func InvokeAsync(arg : Optional<dotnet.System.Object>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallbackWorkItem_Task__InvokeAsync_0__1__Object(&__thrown, self.get_handle(), arg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // EventCallbackWorkItem


// type: Microsoft.AspNetCore.Components.EventCallback`1
// boxed value type
    /**
    
            A bound event handler delegate.
            

    */
public final class EventCallback_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EventCallback_1_get_type_handle(TValue.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field:  Empty
    /**
    
            Gets an empty .
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<TValue> {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<TValue>(hndl: Microsoft_AspNetCore_Components_EventCallback_1_get_Empty());
            return __return;
        }
    }
    /**
    
            Gets a value that indicates whether the delegate associated with this event dispatcher is non-null.
            

    */
    public var HasDelegate : Bool {
        get {
            return try! get_HasDelegate();
        }
    }
    // .ctor(Microsoft.AspNetCore.Components.IHandleEvent, System.MulticastDelegate)
// docid: M:Microsoft.AspNetCore.Components.EventCallback`1.#ctor(Microsoft.AspNetCore.Components.IHandleEvent,System.MulticastDelegate)
    /**
    
            Creates the new .
            

    - Parameter receiver: The event receiver.
    - Parameter delegate: The delegate to bind.
    */
    public init(receiver : Optional<aspnetcore.Microsoft.AspNetCore.Components.IHandleEvent>, delegate : Optional<dotnet.System.MulticastDelegate>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventCallback_1_ctor_0__2__IHandleEvent_MulticastDelegate(TValue.get_type_handle(), &__thrown, receiver?.get_handle() ?? nil, delegate?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_EventCallback_1_implicit_ctor(TValue.get_type_handle());
            super.init(hndl: h);
    }
    // System.Threading.Tasks.Task InvokeAsync(TValue)
// docid: M:Microsoft.AspNetCore.Components.EventCallback`1.InvokeAsync(`0)
    /**
    
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            

    - Parameter arg: The argument.
    - Returns: A  which completes asynchronously once event processing has completed.

    */
    public func InvokeAsync(arg : TValue) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_1_Task__InvokeAsync_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), arg.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task InvokeAsync()
// docid: M:Microsoft.AspNetCore.Components.EventCallback`1.InvokeAsync
    /**
    
            Invokes the delegate associated with this binding and dispatches an event notification to the
            appropriate component.
            

    - Returns: A  which completes asynchronously once event processing has completed.

    */
    public func InvokeAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_1_Task__InvokeAsync_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_HasDelegate()
// docid: M:Microsoft.AspNetCore.Components.EventCallback`1.get_HasDelegate
    public func get_HasDelegate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventCallback_1_bool__get_HasDelegate_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // EventCallback_1


// type: Microsoft.AspNetCore.Components.EventHandlerAttribute
    /**
    
            Associates an event argument type with an event attribute name.
            

    */
public final class EventHandlerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_EventHandlerAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.#ctor(System.String,System.Type)
    /**
    
            Constructs an instance of .
            

    - Parameter attributeName: 
    - Parameter eventArgsType: 
    */
    public init(attributeName : dotnet.System.String, eventArgsType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventHandlerAttribute_ctor_0__2__String_Type(&__thrown, attributeName.get_handle(), eventArgsType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type, bool, bool)
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.#ctor(System.String,System.Type,System.Boolean,System.Boolean)
    /**
    
            Constructs an instance of .
            

    - Parameter attributeName: 
    - Parameter eventArgsType: 
    - Parameter enableStopPropagation: 
    - Parameter enablePreventDefault: 
    */
    public init(attributeName : dotnet.System.String, eventArgsType : dotnet.System.Type_, enableStopPropagation : Bool, enablePreventDefault : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_EventHandlerAttribute_ctor_0__4__String_Type_bool_bool(&__thrown, attributeName.get_handle(), eventArgsType.get_handle(), Swift.Int32(enableStopPropagation ? 1 : 0), Swift.Int32(enablePreventDefault ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AttributeName()
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.get_AttributeName
    public func get_AttributeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventHandlerAttribute_String__get_AttributeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_EventArgsType()
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.get_EventArgsType
    public func get_EventArgsType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventHandlerAttribute_Type__get_EventArgsType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EnableStopPropagation()
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.get_EnableStopPropagation
    public func get_EnableStopPropagation() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventHandlerAttribute_bool__get_EnableStopPropagation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_EnablePreventDefault()
// docid: M:Microsoft.AspNetCore.Components.EventHandlerAttribute.get_EnablePreventDefault
    public func get_EnablePreventDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_EventHandlerAttribute_bool__get_EnablePreventDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the attribute name.
            

    */
    public var AttributeName : dotnet.System.String {
        get {
            return try! get_AttributeName();
        }
    }
    /**
    
            Gets the event's ability to prevent default event flow.
            

    */
    public var EnablePreventDefault : Bool {
        get {
            return try! get_EnablePreventDefault();
        }
    }
    /**
    
            Gets the event's ability to stop propagation.
            

    */
    public var EnableStopPropagation : Bool {
        get {
            return try! get_EnableStopPropagation();
        }
    }
    /**
    
            Gets the event argument type.
            

    */
    public var EventArgsType : dotnet.System.Type_ {
        get {
            return try! get_EventArgsType();
        }
    }
} // EventHandlerAttribute


// type: Microsoft.AspNetCore.Components.IComponent
    /**
    
            Represents a UI component.
            

    */
open class IComponent
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_IComponent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_IComponent_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    
            Attaches the component to a .
            

    - Parameter renderHandle: A  that allows the component to be rendered.
    */
    open func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_IComponent_void__Attach_0__1__RenderHandle(&__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    
            Sets parameters supplied by the component's parent in the render tree.
            

    - Parameter parameters: The parameters.
    - Returns: A  that completes when the component has finished updating and rendering itself.

    */
    open func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IComponent_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IComponent


// type: Microsoft.AspNetCore.Components.IComponentActivator
    /**
    
            Represents an activator that can be used to instantiate components.
            The activator is not responsible for dependency injection, since the framework
            performs dependency injection to the resulting instances separately.
            

    */
open class IComponentActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_IComponentActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_IComponentActivator_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Components.IComponent CreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Components.IComponentActivator.CreateInstance(System.Type)
    /**
    
            Creates a component of the specified type.
            

    - Parameter componentType: The type of component to create.
    - Returns: A reference to the newly created component.

    */
    open func CreateInstance(componentType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Components.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IComponentActivator_IComponent__CreateInstance_0__1__Type(&__thrown, self.get_handle(), componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.IComponent(hndl : __return);
        }
    }
} // IComponentActivator


// type: Microsoft.AspNetCore.Components.IHandleAfterRender
    /**
    
            Interface implemented by components that receive notification that they have been rendered.
            

    */
open class IHandleAfterRender
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_IHandleAfterRender
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_IHandleAfterRender_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnAfterRenderAsync()
// docid: M:Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync
    /**
    
            Notifies the component that it has been rendered.
            

    - Returns: A  that represents the asynchronous event handling operation.

    */
    open func OnAfterRenderAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IHandleAfterRender_Task__OnAfterRenderAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IHandleAfterRender


// type: Microsoft.AspNetCore.Components.IHandleEvent
    /**
    
            Interface implemented by components that receive notification of state changes.
            

    */
open class IHandleEvent
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_IHandleEvent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_IHandleEvent_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem, System.Object)
// docid: M:Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem,System.Object)
    /**
    
            Notifies the a state change has been triggered.
            

    - Parameter item: The  associated with this event.
    - Parameter arg: The argument associated with this event.
    - Returns: 
            A  that completes once the component has processed the state change.
            

    */
    open func HandleEventAsync(item : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackWorkItem, arg : Optional<dotnet.System.Object>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IHandleEvent_Task__HandleEventAsync_0__2__EventCallbackWorkItem_Object(&__thrown, self.get_handle(), item.get_handle(), arg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IHandleEvent


// type: Microsoft.AspNetCore.Components.IPersistentComponentStateStore
    /**
    
            Manages the storage for components and services that are part of a Blazor application.
            

    */
open class IPersistentComponentStateStore
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_IPersistentComponentStateStore
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_IPersistentComponentStateStore_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String,System.Byte[]>> GetPersistedStateAsync()
// docid: M:Microsoft.AspNetCore.Components.IPersistentComponentStateStore.GetPersistedStateAsync
    /**
    
            Gets the persisted state from the store.
            

    - Returns: The persisted state.

    */
    open func GetPersistedStateAsync() async throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IPersistentComponentStateStore_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IDictionary_string_u8Array____GetPersistedStateAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task PersistStateAsync(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Byte[]>)
// docid: M:Microsoft.AspNetCore.Components.IPersistentComponentStateStore.PersistStateAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Byte[]})
    /**
    
            Persists the serialized state into the storage.
            

    - Parameter state: The serialized state to persist.
    - Returns: A  that completes when the state is persisted to disk.

    */
    open func PersistStateAsync(state : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System_Arr<Swift.UInt8>>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_IPersistentComponentStateStore_Task__PersistStateAsync_0__1__System_Collections_Generic_IReadOnlyDictionary_string_u8Array_(&__thrown, self.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IPersistentComponentStateStore


// type: Microsoft.AspNetCore.Components.InjectAttribute
    /**
    
            Indicates that the associated property should have a value injected from the
            service provider during initialization.
            

    */
public final class InjectAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_InjectAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.InjectAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_InjectAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InjectAttribute


// type: Microsoft.AspNetCore.Components.LayoutAttribute
    /**
    
            Indicates that the associated component type uses a specified layout.
            

    */
public final class LayoutAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_LayoutAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Components.LayoutAttribute.#ctor(System.Type)
    /**
    
            Constructs an instance of .
            

    - Parameter layoutType: The type of the layout.
    */
    public init(layoutType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_LayoutAttribute_ctor_0__1__Type(&__thrown, layoutType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_LayoutType()
// docid: M:Microsoft.AspNetCore.Components.LayoutAttribute.get_LayoutType
    public func get_LayoutType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutAttribute_Type__get_LayoutType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            The type of the layout. The type must implement 
            and must accept a parameter with the name 'Body'.
            

    */
    public var LayoutType : dotnet.System.Type_ {
        get {
            return try! get_LayoutType();
        }
    }
} // LayoutAttribute


// type: Microsoft.AspNetCore.Components.LayoutComponentBase
    /**
    
            Optional base class for components that represent a layout.
            Alternatively, components may implement  directly
            and declare their own parameter named .
            

    */
open class LayoutComponentBase
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_LayoutComponentBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.LayoutComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open override func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutComponentBase_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_Body()
// docid: M:Microsoft.AspNetCore.Components.LayoutComponentBase.get_Body
    open func get_Body() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutComponentBase_RenderFragment__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Body(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.LayoutComponentBase.set_Body(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_Body(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_LayoutComponentBase_void__set_Body_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Body(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_Body(value: del_value);
    }
    /**
    
            Gets the content to be rendered inside the layout.
            

    */
    open var Body : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v!);
        }
    }
} // LayoutComponentBase


// type: Microsoft.AspNetCore.Components.LayoutView
    /**
    
            Displays the specified content inside the specified layout and any further
            nested layouts.
            

    */
open class LayoutView
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_LayoutView_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.LayoutView.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_LayoutView_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.LayoutView.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    */
    open /* method final */ func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_LayoutView_void__Attach_0__1__RenderHandle(&__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.LayoutView.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open /* method final */ func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutView_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.LayoutView.get_ChildContent
    open func get_ChildContent() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutView_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.LayoutView.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_LayoutView_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] System.Type get_Layout()
// docid: M:Microsoft.AspNetCore.Components.LayoutView.get_Layout
    open func get_Layout() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_LayoutView_Type__get_Layout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Layout(System.Type)
// docid: M:Microsoft.AspNetCore.Components.LayoutView.set_Layout(System.Type)
    open func set_Layout(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_LayoutView_void__set_Layout_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the content to display.
            

    */
    open var ChildContent : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v);
        }
    }
    /**
    
            Gets or sets the type of the layout in which to display the content.
            The type must implement  and accept a parameter named .
            

    */
    open var Layout : dotnet.System.Type_ {
        get {
            return try! get_Layout();
        }
        set(v) {
            return try! set_Layout(value: v);
        }
    }
} // LayoutView


// type: Microsoft.AspNetCore.Components.LocationChangeException
    /**
    
            An exception thrown when  throws an exception.
            

    */
public final class LocationChangeException
    :
    dotnet.System.Exception
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_LocationChangeException_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Components.LocationChangeException.#ctor(System.String,System.Exception)
    /**
    
            Creates a new instance of .
            

    - Parameter message: The exception message.
    - Parameter innerException: The inner exception.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_LocationChangeException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // LocationChangeException


// type: Microsoft.AspNetCore.Components.MarkupString
// boxed value type
    /**
    
            A string value that can be rendered as markup such as HTML.
            

    */
public final class MarkupString
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_MarkupString_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the value of the .
            

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Components.MarkupString.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter value: The value for the new instance.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_MarkupString_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_MarkupString_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.MarkupString op_Explicit(System.String)
// docid: M:Microsoft.AspNetCore.Components.MarkupString.op_Explicit(System.String)
    public class func op_Explicit(value : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Components.MarkupString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_MarkupString_MarkupString__op_Explicit_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.MarkupString(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Components.MarkupString.ToString
    /**
    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_MarkupString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Components.MarkupString.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_MarkupString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // MarkupString


// type: Microsoft.AspNetCore.Components.NavigationException
    /**
    
            Exception thrown when an  is not able to navigate to a different url.
            

    */
open class NavigationException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_NavigationException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationException.#ctor(System.String)
    /**
    
            Initializes a new  instance.
            

    */
    public init(uri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_NavigationException_ctor_0__1__String(&__thrown, uri.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Location()
// docid: M:Microsoft.AspNetCore.Components.NavigationException.get_Location
    open func get_Location() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationException_String__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the uri to which navigation was attempted.
            

    */
    open var Location : dotnet.System.String {
        get {
            return try! get_Location();
        }
    }
} // NavigationException


// type: Microsoft.AspNetCore.Components.NavigationManager
    /**
    
            Provides an abstraction for querying and managing URI navigation.
            

    */
open class NavigationManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_NavigationManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void NavigateTo(System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,System.Boolean)
    /**
    
            Navigates to the specified URI.
            

    - Parameter uri: The destination URI. This can be absolute, or relative to the base URI
            (as returned by ).
    - Parameter forceLoad: If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.
    */
    open func NavigateTo(uri : dotnet.System.String, forceLoad : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__NavigateTo_0__2__String_bool(&__thrown, self.get_handle(), uri.get_handle(), Swift.Int32(forceLoad ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void NavigateTo(System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,System.Boolean,System.Boolean)
    /**
    
            Navigates to the specified URI.
            

    - Parameter uri: The destination URI. This can be absolute, or relative to the base URI
            (as returned by ).
    - Parameter forceLoad: If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.
    - Parameter replace: If true, replaces the current entry in the history stack. If false, appends the new entry to the history stack.
    */
    open func NavigateTo(uri : dotnet.System.String, forceLoad : Bool = false, replace : Bool = false) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__NavigateTo_0__3__String_bool_bool(&__thrown, self.get_handle(), uri.get_handle(), Swift.Int32(forceLoad ? 1 : 0), Swift.Int32(replace ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void NavigateTo(System.String, Microsoft.AspNetCore.Components.NavigationOptions)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,Microsoft.AspNetCore.Components.NavigationOptions)
    /**
    
            Navigates to the specified URI.
            

    - Parameter uri: The destination URI. This can be absolute, or relative to the base URI
            (as returned by ).
    - Parameter options: Provides additional .
    */
    open func NavigateTo(uri : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Components.NavigationOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__NavigateTo_0__2__String_NavigationOptions(&__thrown, self.get_handle(), uri.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Uri ToAbsoluteUri(System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.ToAbsoluteUri(System.String)
    /**
    
            Converts a relative URI into an absolute one (by resolving it
            relative to the current absolute URI).
            

    - Parameter relativeUri: The relative URI.
    - Returns: The absolute URI.

    */
    open func ToAbsoluteUri(relativeUri : dotnet.System.String) throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManager_Uri__ToAbsoluteUri_0__1__String(&__thrown, self.get_handle(), relativeUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // System.String ToBaseRelativePath(System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.ToBaseRelativePath(System.String)
    /**
    
            Given a base URI (e.g., one previously returned by ),
            converts an absolute URI into one relative to the base URI prefix.
            

    - Parameter uri: An absolute URI that is within the space of the base URI.
    - Returns: A relative URI path.

    */
    open func ToBaseRelativePath(uri : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManager_String__ToBaseRelativePath_0__1__String(&__thrown, self.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_BaseUri()
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.get_BaseUri
    open func get_BaseUri() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManager_String__get_BaseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseUri(System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.set_BaseUri(System.String)
    open func set_BaseUri(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__set_BaseUri_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Uri()
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.get_Uri
    open func get_Uri() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManager_String__get_Uri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Uri(System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.set_Uri(System.String)
    open func set_Uri(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__set_Uri_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_LocationChanged(System.EventHandler<Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.add_LocationChanged(System.EventHandler{Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs})
    open func add_LocationChanged(value : dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__add_LocationChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_LocationChanged(value : @escaping (Optional<dotnet.System.Object>, aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>(value);
        return try add_LocationChanged(value: del_value);
    }
    // [IsSpecialName] void remove_LocationChanged(System.EventHandler<Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManager.remove_LocationChanged(System.EventHandler{Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs})
    open func remove_LocationChanged(value : dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationManager_void__remove_LocationChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_LocationChanged(value : @escaping (Optional<dotnet.System.Object>, aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs>(value);
        return try remove_LocationChanged(value: del_value);
    }
    /**
    
            Gets or sets the current base URI. The  is always represented as an absolute URI in string form with trailing slash.
            Typically this corresponds to the 'href' attribute on the document's <base> element.
            

    */
    open var BaseUri : dotnet.System.String {
        get {
            return try! get_BaseUri();
        }
        set(v) {
            return try! set_BaseUri(value: v);
        }
    }
    /**
    
            Gets or sets the current URI. The  is always represented as an absolute URI in string form.
            

    */
    open var Uri : dotnet.System.String {
        get {
            return try! get_Uri();
        }
        set(v) {
            return try! set_Uri(value: v);
        }
    }
} // NavigationManager


// type: Microsoft.AspNetCore.Components.NavigationManagerExtensions
public struct NavigationManagerExtensions {
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Boolean)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_bool(&__thrown, navigationManager.get_handle(), name.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Boolean})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<Bool>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_bool_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.DateTime)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.DateTime)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : dotnet.System.DateTime) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_DateTime(&__thrown, navigationManager.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.DateTime>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.DateTime})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.DateTime>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_System_DateTime_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.DateOnly)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.DateOnly)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : dotnet.System.DateOnly) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_DateOnly(&__thrown, navigationManager.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.DateOnly>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.DateOnly})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.DateOnly>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_System_DateOnly_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.TimeOnly)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.TimeOnly)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : dotnet.System.TimeOnly) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_TimeOnly(&__thrown, navigationManager.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.TimeOnly>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.TimeOnly})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.TimeOnly>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_System_TimeOnly_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Decimal)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Decimal)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : dotnet.System.Decimal) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_Decimal(&__thrown, navigationManager.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Decimal>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Decimal})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.Decimal>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_System_Decimal_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Double)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Double)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Swift.Double) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_f64(&__thrown, navigationManager.get_handle(), name.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Double>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Double})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<Swift.Double>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_f64_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? System_Double_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Single)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Single)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Swift.Float) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_f32(&__thrown, navigationManager.get_handle(), name.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Single>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Single})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<Swift.Float>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_f32_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? System_Single_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Guid)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Guid)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : dotnet.System.Guid) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_Guid(&__thrown, navigationManager.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Guid>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Guid})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.Guid>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_System_Guid_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Int32)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_i32(&__thrown, navigationManager.get_handle(), name.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Int32})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<Swift.Int32>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_i32_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Int64)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Int64)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added or updated.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Swift.Int64) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_i64(&__thrown, navigationManager.get_handle(), name.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Nullable{System.Int64})
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<Swift.Int64>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_System_Nullable_i64_(&__thrown, navigationManager.get_handle(), name.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.String)
    /**
    
            Returns a URI that is constructed by updating  with a single parameter
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter name: The name of the parameter to add or update.
    - Parameter value: The value of the parameter to add or update.
    */
    public static func GetUriWithQueryParameter(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, name : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameter_0__3__NavigationManager_String_String(&__thrown, navigationManager.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Returns a URI constructed from  with multiple parameters
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter parameters: The values to add, update, or remove.
    */
    public static func GetUriWithQueryParameters(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, parameters : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameters_0__2__NavigationManager_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, navigationManager.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Returns a URI constructed from  except with multiple parameters
            added, updated, or removed.
            

    - Parameter navigationManager: The .
    - Parameter uri: The URI with the query to modify.
    - Parameter parameters: The values to add, update, or remove.
    */
    public static func GetUriWithQueryParameters(navigationManager : aspnetcore.Microsoft.AspNetCore.Components.NavigationManager, uri : dotnet.System.String, parameters : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationManagerExtensions_String__GetUriWithQueryParameters_0__3__NavigationManager_String_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, navigationManager.get_handle(), uri.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // NavigationManagerExtensions


// type: Microsoft.AspNetCore.Components.NavigationOptions
// boxed value type
    /**
    
            Additional options for navigating to another URI.
            

    */
public final class NavigationOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_NavigationOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            If true, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.
            

    */
    public var ForceLoad : Bool {
        get {
            return try! get_ForceLoad();
        }
        set(v) {
            return try! set_ForceLoad(value: v);
        }
    }
    /**
    
            If true, replaces the currently entry in the history stack.
            If false, appends the new entry to the history stack.
            

    */
    public var ReplaceHistoryEntry : Bool {
        get {
            return try! get_ReplaceHistoryEntry();
        }
        set(v) {
            return try! set_ReplaceHistoryEntry(value: v);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_NavigationOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_ForceLoad()
// docid: M:Microsoft.AspNetCore.Components.NavigationOptions.get_ForceLoad
    public func get_ForceLoad() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationOptions_bool__get_ForceLoad_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ForceLoad(bool)
// docid: M:Microsoft.AspNetCore.Components.NavigationOptions.set_ForceLoad(System.Boolean)
    public func set_ForceLoad(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationOptions_void__set_ForceLoad_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ReplaceHistoryEntry()
// docid: M:Microsoft.AspNetCore.Components.NavigationOptions.get_ReplaceHistoryEntry
    public func get_ReplaceHistoryEntry() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_NavigationOptions_bool__get_ReplaceHistoryEntry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReplaceHistoryEntry(bool)
// docid: M:Microsoft.AspNetCore.Components.NavigationOptions.set_ReplaceHistoryEntry(System.Boolean)
    public func set_ReplaceHistoryEntry(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_NavigationOptions_void__set_ReplaceHistoryEntry_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // NavigationOptions


// type: Microsoft.AspNetCore.Components.OwningComponentBase
    /**
    
            A base class that creates a service provider scope.
            

    */
open class OwningComponentBase
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_OwningComponentBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // OwningComponentBase


// type: Microsoft.AspNetCore.Components.OwningComponentBase`1
    /**
    
            A base class that creates a service provider scope, and resolves a service of type .
            

    */
open class OwningComponentBase_1<TService : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.OwningComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_OwningComponentBase_1_get_type_handle(TService.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // OwningComponentBase_1


// type: Microsoft.AspNetCore.Components.ParameterAttribute
    /**
    
            Denotes the target member as a component parameter.
            

    */
public final class ParameterAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ParameterAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.ParameterAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_ParameterAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_CaptureUnmatchedValues()
// docid: M:Microsoft.AspNetCore.Components.ParameterAttribute.get_CaptureUnmatchedValues
    public func get_CaptureUnmatchedValues() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterAttribute_bool__get_CaptureUnmatchedValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CaptureUnmatchedValues(bool)
// docid: M:Microsoft.AspNetCore.Components.ParameterAttribute.set_CaptureUnmatchedValues(System.Boolean)
    public func set_CaptureUnmatchedValues(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ParameterAttribute_void__set_CaptureUnmatchedValues_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value that determines whether the parameter will capture values that
            don't match any other parameter.
            

    */
    public var CaptureUnmatchedValues : Bool {
        get {
            return try! get_CaptureUnmatchedValues();
        }
        set(v) {
            return try! set_CaptureUnmatchedValues(value: v);
        }
    }
} // ParameterAttribute


// type: Microsoft.AspNetCore.Components.ParameterValue
// boxed value type
    /**
    
            Represents a single parameter supplied to an 
            by its parent in the render tree.
            

    */
public final class ParameterValue
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ParameterValue_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets a value to indicate whether the parameter is cascading, meaning that it
            was supplied by a .
            

    */
    public var Cascading : Bool {
        get {
            return try! get_Cascading();
        }
    }
    /**
    
            Gets the name of the parameter.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the value being supplied for the parameter.
            

    */
    public var Value : dotnet.System.Object {
        get {
            return try! get_Value();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_ParameterValue_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.ParameterValue.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterValue_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Components.ParameterValue.get_Value
    public func get_Value() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterValue_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Cascading()
// docid: M:Microsoft.AspNetCore.Components.ParameterValue.get_Cascading
    public func get_Cascading() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterValue_bool__get_Cascading_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ParameterValue


// type: Microsoft.AspNetCore.Components.ParameterView
// boxed value type
    /**
    
            Represents a collection of parameters supplied to an 
            by its parent in the render tree.
            

    */
public final class ParameterView
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ParameterView_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets an empty .
            

    */
    public static var Empty : aspnetcore.Microsoft.AspNetCore.Components.ParameterView {
        get {
            return try! get_Empty();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_ParameterView_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Components.ParameterView.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Components.ParameterView.GetEnumerator
    /**
    
            Returns an enumerator that iterates through the .
            

    - Returns: The enumerator.

    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Components.ParameterView_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_ParameterView_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.ParameterView_Enumerator(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) bool TryGetValue<TValue>(System.String, ref TValue)
// TODO COPE (write_all_methods) (unused generic param) TValue GetValueOrDefault<TValue>(System.String)
    // TValue GetValueOrDefault<TValue>(System.String, TValue)
// docid: M:Microsoft.AspNetCore.Components.ParameterView.GetValueOrDefault``1(System.String,``0)
    /**
    
            Gets the value of the parameter with the specified name, or a specified default value
            if no such parameter exists in the collection.
            

    - Parameter parameterName: The name of the parameter.
    - Parameter defaultValue: The default value to return if no such parameter exists in the collection.
    - Returns: The parameter value if found; otherwise .

    */
    public func GetValueOrDefault<UTValue : SGBridgeGenericValue>(parameterName : dotnet.System.String, defaultValue : UTValue) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_UTValue__GetValueOrDefault_1__2__String_UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), parameterName.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> ToDictionary()
// docid: M:Microsoft.AspNetCore.Components.ParameterView.ToDictionary
    /**
    
            Returns a dictionary populated with the contents of the .
            

    - Returns: A dictionary populated with the contents of the .

    */
    public func ToDictionary() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_System_Collections_Generic_IReadOnlyDictionary_string_object___ToDictionary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Components.ParameterView FromDictionary(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.ParameterView.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Creates a new  from the given .
            

    - Parameter parameters: The  with the parameters.
    - Returns: A .

    */
    public class func FromDictionary(parameters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Components.ParameterView {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_ParameterView__FromDictionary_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.ParameterView(hndl : __return);
        }
    }
    // void SetParameterProperties(System.Object)
// docid: M:Microsoft.AspNetCore.Components.ParameterView.SetParameterProperties(System.Object)
    /**
    
            For each parameter property on , updates its value to
            match the corresponding entry in the .
            

    - Parameter target: An object that has a public writable property matching each parameter's name and type.
    */
    public func SetParameterProperties(target : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_ParameterView_void__SetParameterProperties_0__1__Object(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.ParameterView get_Empty()
// docid: M:Microsoft.AspNetCore.Components.ParameterView.get_Empty
    public class func get_Empty() throws -> aspnetcore.Microsoft.AspNetCore.Components.ParameterView {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_ParameterView__get_Empty_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.ParameterView(hndl : __return);
        }
    }
} // ParameterView


// type: Microsoft.AspNetCore.Components.ParameterView+Enumerator
// boxed value type
    /**
    
            An enumerator that iterates through a .
            

    */
public final class ParameterView_Enumerator
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_ParameterView_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the current value of the enumerator.
            

    */
    public var Current : aspnetcore.Microsoft.AspNetCore.Components.ParameterValue {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_ParameterView_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Components.ParameterView.Enumerator.MoveNext
    /**
    
            Instructs the enumerator to move to the next value in the sequence.
            

    - Returns: A flag to indicate whether or not there is a next value.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.ParameterValue get_Current()
// docid: M:Microsoft.AspNetCore.Components.ParameterView.Enumerator.get_Current
    public func get_Current() throws -> aspnetcore.Microsoft.AspNetCore.Components.ParameterValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ParameterView_Enumerator_ParameterValue__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.ParameterValue(hndl : __return);
        }
    }
} // ParameterView_Enumerator


// type: Microsoft.AspNetCore.Components.PersistentComponentState
    /**
    
            The state for the components and services of a components application.
            

    */
open class PersistentComponentState
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_PersistentComponentState_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Components.PersistingComponentStateSubscription RegisterOnPersisting(System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.PersistentComponentState.RegisterOnPersisting(System.Func{System.Threading.Tasks.Task})
    /**
    
            Register a callback to persist the component state when the application is about to be paused.
            Registered callbacks can use this opportunity to persist their state so that it can be retrieved when the application resumes.
            

    - Parameter callback: The callback to invoke when the application is being paused.
    - Returns: A subscription that can be used to unregister the callback when disposed.

    */
    open func RegisterOnPersisting(callback : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.PersistingComponentStateSubscription {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_PersistentComponentState_PersistingComponentStateSubscription__RegisterOnPersisting_0__1__System_Func_Task_(&__thrown, self.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.PersistingComponentStateSubscription(hndl : __return);
        }
    }
    // delegate closure overload
    open func RegisterOnPersisting(callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.PersistingComponentStateSubscription {
        let del_callback = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(callback);
        return try RegisterOnPersisting(callback: del_callback);
    }
    // void PersistAsJson<TValue>(System.String, TValue)
// docid: M:Microsoft.AspNetCore.Components.PersistentComponentState.PersistAsJson``1(System.String,``0)
    /**
    
            Serializes  as JSON and persists it under the given .
            

    - Parameter key: The key to use to persist the state.
    - Parameter instance: The instance to persist.
    */
    open func PersistAsJson<UTValue : SGBridgeGenericValue>(key : dotnet.System.String, instance : UTValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_PersistentComponentState_void__PersistAsJson_1__2__String_UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), key.get_handle(), instance.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) bool TryTakeFromJson<TValue>(System.String, ref TValue)
} // PersistentComponentState


// type: Microsoft.AspNetCore.Components.PersistingComponentStateSubscription
// boxed value type
    /**
    
            Represents a subscription to the OnPersisting callback that  callback will trigger
            when the application is being persisted.
            

    */
public final class PersistingComponentStateSubscription
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_PersistingComponentStateSubscription_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = Microsoft_AspNetCore_Components_PersistingComponentStateSubscription_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Components.PersistingComponentStateSubscription.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_PersistingComponentStateSubscription_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PersistingComponentStateSubscription


// type: Microsoft.AspNetCore.Components.RenderFragment
    /**
    
            Represents a segment of UI content, implemented as a delegate that
            writes the content to a .
            

    */
public final class RenderFragment
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderFragment_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment.Invoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
    public func Invoke(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderFragment_void__Invoke_0__1__RenderTreeBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment.BeginInvoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.AsyncCallback,System.Object)
    public func BeginInvoke(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderFragment_IAsyncResult__BeginInvoke_0__3__RenderTreeBuilder_AsyncCallback_Object(&__thrown, self.get_handle(), builder.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderFragment_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, builder : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try __closure_Invoke(aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder(hndl: builder));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, builder : NonnullHandle) -> Void
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f_interlude(thrown, builder);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderFragment_create(
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // void Invoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment.Invoke(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)
    public func callAsFunction(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderFragment_void__Invoke_0__1__RenderTreeBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RenderFragment


// type: Microsoft.AspNetCore.Components.RenderFragment`1
    /**
    
            Represents a segment of UI content for an object of type , implemented as
            a function that returns a .
            

    */
public final class RenderFragment_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderFragment_1_get_type_handle(TValue.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Components.RenderFragment Invoke(TValue)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment`1.Invoke(`0)
    public func Invoke(value : TValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderFragment_1_RenderFragment__Invoke_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(TValue, System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment`1.BeginInvoke(`0,System.AsyncCallback,System.Object)
    public func BeginInvoke(value : TValue, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderFragment_1_IAsyncResult__BeginInvoke_0__3__TValue_AsyncCallback_Object(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Components.RenderFragment EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment`1.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderFragment_1_RenderFragment__EndInvoke_0__1__IAsyncResult(TValue.get_type_handle(), &__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __return);
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (TValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, GVal) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, value : GVal) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try __closure_Invoke(TValue(gval: value));
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, value : GVal) -> NonnullHandle
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, GVal) -> NonnullHandle;
            return f_interlude(thrown, value);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderFragment_1_create(
            TValue.get_type_handle(),
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Components.RenderFragment Invoke(TValue)
// docid: M:Microsoft.AspNetCore.Components.RenderFragment`1.Invoke(`0)
    public func callAsFunction(value : TValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderFragment_1_RenderFragment__Invoke_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __return);
        }
    }
} // RenderFragment_1


// type: Microsoft.AspNetCore.Components.RenderHandle
// boxed value type
    /**
    
            Allows a component to interact with its renderer.
            

    */
public final class RenderHandle
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderHandle_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the  associated with the component.
            

    */
    public var Dispatcher : aspnetcore.Microsoft.AspNetCore.Components.Dispatcher {
        get {
            return try! get_Dispatcher();
        }
    }
    /**
    
            Gets a value that indicates whether the  has been
            initialized and is ready to use.
            

    */
    public var IsInitialized : Bool {
        get {
            return try! get_IsInitialized();
        }
    }
    /**
    
            Gets a value that determines if the  is triggering a render in response to a metadata update (hot-reload) change.
            

    */
    public var IsRenderingOnMetadataUpdate : Bool {
        get {
            return try! get_IsRenderingOnMetadataUpdate();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderHandle_implicit_ctor();
            super.init(hndl: h);
    }
    // void Render(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.RenderHandle.Render(Microsoft.AspNetCore.Components.RenderFragment)
    /**
    
            Notifies the renderer that the component should be rendered.
            

    - Parameter renderFragment: The content that should be rendered.
    */
    public func Render(renderFragment : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderHandle_void__Render_0__1__RenderFragment(&__thrown, self.get_handle(), renderFragment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Render(renderFragment : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_renderFragment = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(renderFragment);
        return try Render(renderFragment: del_renderFragment);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Dispatcher get_Dispatcher()
// docid: M:Microsoft.AspNetCore.Components.RenderHandle.get_Dispatcher
    public func get_Dispatcher() throws -> aspnetcore.Microsoft.AspNetCore.Components.Dispatcher {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderHandle_Dispatcher__get_Dispatcher_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Dispatcher(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsInitialized()
// docid: M:Microsoft.AspNetCore.Components.RenderHandle.get_IsInitialized
    public func get_IsInitialized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderHandle_bool__get_IsInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsRenderingOnMetadataUpdate()
// docid: M:Microsoft.AspNetCore.Components.RenderHandle.get_IsRenderingOnMetadataUpdate
    public func get_IsRenderingOnMetadataUpdate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderHandle_bool__get_IsRenderingOnMetadataUpdate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // RenderHandle


// type: Microsoft.AspNetCore.Components.RouteAttribute
    /**
    
            Indicates that the associated component should match the specified route template pattern.
            

    */
public final class RouteAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RouteAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Components.RouteAttribute.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter template: The route template.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RouteAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Components.RouteAttribute.get_Template
    public func get_Template() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteAttribute_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the route template.
            

    */
    public var Template : dotnet.System.String {
        get {
            return try! get_Template();
        }
    }
} // RouteAttribute


// type: Microsoft.AspNetCore.Components.RouteData
    /**
    
            Describes information determined during routing that specifies
            the page to be displayed.
            

    */
public final class RouteData
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RouteData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.RouteData.#ctor(System.Type,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Constructs an instance of .
            

    - Parameter pageType: The type of the page matching the route, which must implement .
    - Parameter routeValues: The route parameter values extracted from the matched route.
    */
    public init(pageType : dotnet.System.Type_, routeValues : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RouteData_ctor_0__2__Type_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, pageType.get_handle(), routeValues.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_PageType()
// docid: M:Microsoft.AspNetCore.Components.RouteData.get_PageType
    public func get_PageType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteData_Type__get_PageType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Components.RouteData.get_RouteValues
    public func get_RouteValues() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteData_System_Collections_Generic_IReadOnlyDictionary_string_object___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets the type of the page matching the route.
            

    */
    public var PageType : dotnet.System.Type_ {
        get {
            return try! get_PageType();
        }
    }
    /**
    
            Gets route parameter values extracted from the matched route.
            

    */
    public var RouteValues : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_RouteValues();
        }
    }
} // RouteData


// type: Microsoft.AspNetCore.Components.RouteView
    /**
    
            Displays the specified page component, rendering it inside its layout
            and any further nested layouts.
            

    */
open class RouteView
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RouteView_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.RouteView.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RouteView_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.RouteView.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    */
    open /* method final */ func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RouteView_void__Attach_0__1__RenderHandle(&__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.RouteView.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open /* method final */ func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteView_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Components.RouteView.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Components.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteView_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Components.RouteData)
// docid: M:Microsoft.AspNetCore.Components.RouteView.set_RouteData(Microsoft.AspNetCore.Components.RouteData)
    open func set_RouteData(value : aspnetcore.Microsoft.AspNetCore.Components.RouteData) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RouteView_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_DefaultLayout()
// docid: M:Microsoft.AspNetCore.Components.RouteView.get_DefaultLayout
    open func get_DefaultLayout() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RouteView_Type__get_DefaultLayout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DefaultLayout(System.Type)
// docid: M:Microsoft.AspNetCore.Components.RouteView.set_DefaultLayout(System.Type)
    open func set_DefaultLayout(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RouteView_void__set_DefaultLayout_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the type of a layout to be used if the page does not
            declare any layout. If specified, the type must implement 
            and accept a parameter named .
            

    */
    open var DefaultLayout : dotnet.System.Type_ {
        get {
            return try! get_DefaultLayout();
        }
        set(v) {
            return try! set_DefaultLayout(value: v);
        }
    }
    /**
    
            Gets or sets the route data. This determines the page that will be
            displayed and the parameter values that will be supplied to the page.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Components.RouteData {
        get {
            return try! get_RouteData();
        }
        set(v) {
            return try! set_RouteData(value: v);
        }
    }
} // RouteView


// type: Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute
    /**
    
            Indicates that routing components may supply a value for the parameter from the
            current URL querystring. They may also supply further values if the URL querystring changes.
            

    */
public final class SupplyParameterFromQueryAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_SupplyParameterFromQueryAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_SupplyParameterFromQueryAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_SupplyParameterFromQueryAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_SupplyParameterFromQueryAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the querystring parameter. If null, the querystring
            parameter is assumed to have the same name as the associated property.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // SupplyParameterFromQueryAttribute


}
// Microsoft.AspNetCore.Components.CompilerServices
extension Microsoft.AspNetCore.Components.CompilerServices {
// type: Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers
public struct RuntimeHelpers {
    // T TypeCheck<T>(T)
// docid: M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck``1(``0)
    /**
    
            Not intended for use by application code.
            

    - Parameter value: 
    - Returns: 

    */
    public static func TypeCheck<UT : SGBridgeGenericValue>(value : UT) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CompilerServices_RuntimeHelpers_UT__TypeCheck_1__1__UT(UT.get_type_handle(), &__thrown, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // Microsoft.AspNetCore.Components.EventCallback<T> CreateInferredEventCallback<T>(System.Object, System.Action<T>, T)
// docid: M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback``1(System.Object,System.Action{``0},``0)
    /**
    
            Not intended for use by application code.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Parameter value: 
    - Returns: 

    */
    public static func CreateInferredEventCallback<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<UT>, value : UT) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CompilerServices_RuntimeHelpers_Microsoft_AspNetCore_Components_EventCallback_UT___CreateInferredEventCallback_1__3__Object_System_Action_UT__UT(UT.get_type_handle(), &__thrown, receiver.get_handle(), callback.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateInferredEventCallback<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UT) throws -> Void, value : UT) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UT> {
        let del_callback = try dotnet.System.Action_1<UT>(callback);
        return try CreateInferredEventCallback(receiver: receiver, callback: del_callback, value: value);
    }
    // Microsoft.AspNetCore.Components.EventCallback<T> CreateInferredEventCallback<T>(System.Object, System.Func<T,System.Threading.Tasks.Task>, T)
// docid: M:Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback``1(System.Object,System.Func{``0,System.Threading.Tasks.Task},``0)
    /**
    
            Not intended for use by application code.
            

    - Parameter receiver: 
    - Parameter callback: 
    - Parameter value: 
    - Returns: 

    */
    public static func CreateInferredEventCallback<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<UT,dotnet.System.Threading.Tasks.Task>, value : UT) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_CompilerServices_RuntimeHelpers_Microsoft_AspNetCore_Components_EventCallback_UT___CreateInferredEventCallback_1__3__Object_System_Func_UT_Task__UT(UT.get_type_handle(), &__thrown, receiver.get_handle(), callback.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateInferredEventCallback<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, callback : @escaping (UT) throws -> dotnet.System.Threading.Tasks.Task, value : UT) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UT> {
        let del_callback = try dotnet.System.Func_2<UT,dotnet.System.Threading.Tasks.Task>(callback);
        return try CreateInferredEventCallback(receiver: receiver, callback: del_callback, value: value);
    }
} // RuntimeHelpers


}

// Microsoft.AspNetCore.Components.Infrastructure
extension Microsoft.AspNetCore.Components.Infrastructure {
// type: Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager
    /**
    
            Manages the persistent state of components in an application.
            

    */
open class ComponentStatePersistenceManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager>)
// docid: M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager})
    /**
    
            Initializes a new instance of .
            

    */
    public init(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_ctor_0__1__Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_(&__thrown, logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task RestoreStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore)
// docid: M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.RestoreStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore)
    /**
    
            Restores the component application state from the given .
            

    - Parameter store: The  to restore the application state from.
    - Returns: A  that will complete when the state has been restored.

    */
    open func RestoreStateAsync(store : aspnetcore.Microsoft.AspNetCore.Components.IPersistentComponentStateStore) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_Task__RestoreStateAsync_0__1__IPersistentComponentStateStore(&__thrown, self.get_handle(), store.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task PersistStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore, Microsoft.AspNetCore.Components.RenderTree.Renderer)
// docid: M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.PersistStateAsync(Microsoft.AspNetCore.Components.IPersistentComponentStateStore,Microsoft.AspNetCore.Components.RenderTree.Renderer)
    /**
    
            Persists the component application state into the given .
            

    - Parameter store: The  to restore the application state from.
    - Parameter renderer: The  that components are being rendered.
    - Returns: A  that will complete when the state has been restored.

    */
    open func PersistStateAsync(store : aspnetcore.Microsoft.AspNetCore.Components.IPersistentComponentStateStore, renderer : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.Renderer) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_Task__PersistStateAsync_0__2__IPersistentComponentStateStore_Renderer(&__thrown, self.get_handle(), store.get_handle(), renderer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.PersistentComponentState get_State()
// docid: M:Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.get_State
    open func get_State() throws -> aspnetcore.Microsoft.AspNetCore.Components.PersistentComponentState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Infrastructure_ComponentStatePersistenceManager_PersistentComponentState__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.PersistentComponentState(hndl : __return);
        }
    }
    /**
    
            Gets the  associated with the .
            

    */
    open var State : aspnetcore.Microsoft.AspNetCore.Components.PersistentComponentState {
        get {
            return try! get_State();
        }
    }
} // ComponentStatePersistenceManager


}

// Microsoft.AspNetCore.Components.RenderTree
extension Microsoft.AspNetCore.Components.RenderTree {
// type: Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public final class ArrayBuilderSegment_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_get_type_handle(T.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the current underlying array holding the segment's elements.
            

    */
    public var Array : dotnet.System_Arr<T> {
        get {
            return try! get_Array();
        }
    }
    /**
    
            Gets the number of items in the segment.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            Gets the offset into the underlying array holding the segment's elements.
            

    */
    public var Offset : Swift.Int32 {
        get {
            return try! get_Offset();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] T[] get_Array()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.get_Array
    public func get_Array() throws -> dotnet.System_Arr<T> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_TArray__get_Array_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<T>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Offset()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.get_Offset
    public func get_Offset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_i32__get_Offset_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1.get_Item(System.Int32)
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_ArrayBuilderSegment_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // ArrayBuilderSegment_1


// type: Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public final class ArrayRange_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_ArrayRange_1_get_type_handle(T.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(T[], System.Int32)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.#ctor(Microsoft.AspNetCore.Components.RenderTree.T[],System.Int32)
    public init(array : dotnet.System_Arr<T>, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_ArrayRange_1_ctor_0__2__TArray_i32(T.get_type_handle(), &__thrown, array.get_handle(), count);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_ArrayRange_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> Clone()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1.Clone
    /**
    
            Creates a shallow clone of the instance.
            

    - Returns: 

    */
    public func Clone() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_ArrayRange_1_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_T___Clone_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
} // ArrayRange_1


// type: Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            

    */
open class EventFieldInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_ComponentId()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.get_ComponentId
    open func get_ComponentId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_i32__get_ComponentId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ComponentId(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.set_ComponentId(System.Int32)
    open func set_ComponentId(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_void__set_ComponentId_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_FieldValue()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.get_FieldValue
    open func get_FieldValue() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_Object__get_FieldValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FieldValue(System.Object)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo.set_FieldValue(System.Object)
    open func set_FieldValue(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_EventFieldInfo_void__set_FieldValue_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Identifies the component whose render tree contains the affected form field.
            

    */
    open var ComponentId : Swift.Int32 {
        get {
            return try! get_ComponentId();
        }
        set(v) {
            return try! set_ComponentId(value: v);
        }
    }
    /**
    
            Specifies the form field's new value.
            

    */
    open var FieldValue : dotnet.System.Object {
        get {
            return try! get_FieldValue();
        }
        set(v) {
            return try! set_FieldValue(value: v);
        }
    }
} // EventFieldInfo


// type: Microsoft.AspNetCore.Components.RenderTree.RenderBatch
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            

    */
public final class RenderBatch
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderBatch_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the IDs of the components that were disposed.
            

    */
    public var DisposedComponentIDs : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<Swift.Int32> {
        get {
            return try! get_DisposedComponentIDs();
        }
    }
    /**
    
            Gets the IDs of the event handlers that were disposed.
            

    */
    public var DisposedEventHandlerIDs : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<Swift.UInt64> {
        get {
            return try! get_DisposedEventHandlerIDs();
        }
    }
    /**
    
            Gets render frames that may be referenced by entries in .
            For example, edit entries of type 
            will point to an entry in this array to specify the subtree to be prepended.
            

    */
    public var ReferenceFrames : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame> {
        get {
            return try! get_ReferenceFrames();
        }
    }
    /**
    
            Gets the changes to components that were added or updated.
            

    */
    public var UpdatedComponents : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff> {
        get {
            return try! get_UpdatedComponents();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_RenderBatch_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.ArrayRange<Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff> get_UpdatedComponents()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.get_UpdatedComponents
    public func get_UpdatedComponents() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderBatch_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_Microsoft_AspNetCore_Components_RenderTree_RenderTreeDiff___get_UpdatedComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.ArrayRange<Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame> get_ReferenceFrames()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.get_ReferenceFrames
    public func get_ReferenceFrames() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderBatch_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame___get_ReferenceFrames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.ArrayRange<System.Int32> get_DisposedComponentIDs()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.get_DisposedComponentIDs
    public func get_DisposedComponentIDs() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderBatch_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_i32___get_DisposedComponentIDs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.ArrayRange<System.UInt64> get_DisposedEventHandlerIDs()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderBatch.get_DisposedEventHandlerIDs
    public func get_DisposedEventHandlerIDs() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderBatch_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_u64___get_DisposedEventHandlerIDs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
} // RenderBatch


// type: Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public final class RenderTreeDiff
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderTreeDiff_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_RenderTreeDiff_implicit_ctor();
            super.init(hndl: h);
    }
} // RenderTreeDiff


// type: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public final class RenderTreeEdit
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderTreeEdit_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_RenderTreeEdit_implicit_ctor();
            super.init(hndl: h);
    }
} // RenderTreeEdit


// type: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public struct RenderTreeEditType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType PrependFrame
    /**
    
            Indicates that a new frame should be inserted before the specified tree frame.
            

    */
    public static var PrependFrame : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_PrependFrame());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType RemoveFrame
    /**
    
            Indicates that the specified tree frame should be removed.
            

    */
    public static var RemoveFrame : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_RemoveFrame());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType SetAttribute
    /**
    
            Indicates that an attribute value should be applied to the specified frame.
            This may be a change to an existing attribute, or the addition of a new attribute.
            

    */
    public static var SetAttribute : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_SetAttribute());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType RemoveAttribute
    /**
    
            Indicates that a named attribute should be removed from the specified frame.
            

    */
    public static var RemoveAttribute : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_RemoveAttribute());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType UpdateText
    /**
    
            Indicates that the text content of the specified frame (which must be a text frame)
            should be updated.
            

    */
    public static var UpdateText : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_UpdateText());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType StepIn
    /**
    
            Indicates that the edit position should move inside the specified frame.
            

    */
    public static var StepIn : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_StepIn());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType StepOut
    /**
    
            Indicates that there are no further edit operations on the current frame, and the
            edit position should move back to the parent frame.
            

    */
    public static var StepOut : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_StepOut());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType UpdateMarkup
    /**
    
            Indicates that the markup content of the specified frame (which must be a markup frame)
            should be updated.
            

    */
    public static var UpdateMarkup : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_UpdateMarkup());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType PermutationListEntry
    /**
    
            An entry in a sparse permutation list. That is, a list of old indices with
            corresponding new indices, which altogether describe a valid permutation of
            the children at the current edit position.
            

    */
    public static var PermutationListEntry : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_PermutationListEntry());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType PermutationListEnd
    /**
    
            Indicates that the preceding series of  entries
            is now complete.
            

    */
    public static var PermutationListEnd : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeEditType_get_PermutationListEnd());
            return __return;
        }
    }
} // RenderTreeEditType


// type: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame
// boxed value type
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public final class RenderTreeFrame
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            If the  property equals 
            gets the ID of the corresponding event handler, if any.
            

    */
    public var AttributeEventHandlerId : Swift.UInt64 {
        get {
            return try! get_AttributeEventHandlerId();
        }
    }
    /**
    
            If the  property equals ,
            and the attribute represents an event handler, gets the name of another attribute whose value
            can be updated to represent the UI state prior to executing the event handler. This is
            primarily used in two-way bindings.
            

    */
    public var AttributeEventUpdatesAttributeName : Optional<dotnet.System.String> {
        get {
            return try! get_AttributeEventUpdatesAttributeName();
        }
    }
    /**
    
            If the  property equals ,
            gets the attribute name. Otherwise, the value is undefined.
            

    */
    public var AttributeName : Optional<dotnet.System.String> {
        get {
            return try! get_AttributeName();
        }
    }
    /**
    
            If the  property equals ,
            gets the attribute value. Otherwise, the value is undefined.
            

    */
    public var AttributeValue : Optional<dotnet.System.Object> {
        get {
            return try! get_AttributeValue();
        }
    }
    /**
    
            If the  property equals ,
            gets the child component instance. Otherwise, the value is undefined.
            

    */
    public var Component : Optional<aspnetcore.Microsoft.AspNetCore.Components.IComponent> {
        get {
            return try! get_Component();
        }
    }
    /**
    
            If the  property equals ,
            gets the child component instance identifier.
            

    */
    public var ComponentId : Swift.Int32 {
        get {
            return try! get_ComponentId();
        }
    }
    /**
    
            If the  property equals ,
            gets the component's diffing key, or null if none was specified.
            

    */
    public var ComponentKey : Optional<dotnet.System.Object> {
        get {
            return try! get_ComponentKey();
        }
    }
    /**
    
            If the  property equals ,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            

    */
    public var ComponentReferenceCaptureAction : Optional<dotnet.System.Action_1<dotnet.System.Object>> {
        get {
            return try! get_ComponentReferenceCaptureAction();
        }
    }
    /**
    
            If the  property equals ,
            gets the index of the parent frame representing the component being captured. Otherwise, the value is undefined.
            WARNING: This index can only be used in the context of the frame's original render tree. If the frame is
                     copied elsewhere, such as to the ReferenceFrames buffer of a RenderTreeDiff, then the index will
                     not relate to entries in that other buffer.
                     Currently there's no scenario where this matters, but if there was, we could change all of the subtree
                     initialization logic in RenderTreeDiffBuilder to walk the frames hierarchically, then it would know
                     the parent index at the point where it wants to initialize the ComponentReferenceCapture frame.
            

    */
    public var ComponentReferenceCaptureParentFrameIndex : Swift.Int32 {
        get {
            return try! get_ComponentReferenceCaptureParentFrameIndex();
        }
    }
    /**
    
            If the  property equals 
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            

    */
    public var ComponentSubtreeLength : Swift.Int32 {
        get {
            return try! get_ComponentSubtreeLength();
        }
    }
    /**
    
            If the  property equals ,
            gets the type of the child component.
            

    */
    public var ComponentType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ComponentType();
        }
    }
    /**
    
            If the  property equals ,
            gets the element's diffing key, or null if none was specified.
            

    */
    public var ElementKey : Optional<dotnet.System.Object> {
        get {
            return try! get_ElementKey();
        }
    }
    /**
    
            If the  property equals ,
            gets a name representing the type of the element. Otherwise, the value is undefined.
            

    */
    public var ElementName : Optional<dotnet.System.String> {
        get {
            return try! get_ElementName();
        }
    }
    /**
    
            If the  property equals ,
            gets the action that writes the reference to its target. Otherwise, the value is undefined.
            

    */
    public var ElementReferenceCaptureAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>> {
        get {
            return try! get_ElementReferenceCaptureAction();
        }
    }
    /**
    
            If the  property equals ,
            gets the ID of the reference capture. Otherwise, the value is undefined.
            

    */
    public var ElementReferenceCaptureId : Optional<dotnet.System.String> {
        get {
            return try! get_ElementReferenceCaptureId();
        }
    }
    /**
    
            If the  property equals 
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            

    */
    public var ElementSubtreeLength : Swift.Int32 {
        get {
            return try! get_ElementSubtreeLength();
        }
    }
    /**
    
            Describes the type of this frame.
            

    */
    public var FrameType : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
            return try! get_FrameType();
        }
    }
    /**
    
            If the  property equals ,
            gets the content of the markup frame. Otherwise, the value is undefined.
            

    */
    public var MarkupContent : Optional<dotnet.System.String> {
        get {
            return try! get_MarkupContent();
        }
    }
    /**
    
            If the  property equals 
            gets the number of frames in the subtree for which this frame is the root.
            The value is zero if the frame has not yet been closed.
            

    */
    public var RegionSubtreeLength : Swift.Int32 {
        get {
            return try! get_RegionSubtreeLength();
        }
    }
    /**
    
            Gets the sequence number of the frame. Sequence numbers indicate the relative source
            positions of the instructions that inserted the frames. Sequence numbers are only
            comparable within the same sequence (typically, the same source method).
            

    */
    public var Sequence : Swift.Int32 {
        get {
            return try! get_Sequence();
        }
    }
    /**
    
            If the  property equals ,
            gets the content of the text frame. Otherwise, the value is undefined.
            

    */
    public var TextContent : Optional<dotnet.System.String> {
        get {
            return try! get_TextContent();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.ToString
    /**
    */
    public override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Sequence()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_Sequence
    public func get_Sequence() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_Sequence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType get_FrameType()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_FrameType
    public func get_FrameType() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_RenderTreeFrameType__get_FrameType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ElementSubtreeLength()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ElementSubtreeLength
    public func get_ElementSubtreeLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_ElementSubtreeLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ElementName()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ElementName
    public func get_ElementName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_ElementName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ElementKey()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ElementKey
    public func get_ElementKey() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_Object__get_ElementKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TextContent()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_TextContent
    public func get_TextContent() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_TextContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.UInt64 get_AttributeEventHandlerId()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_AttributeEventHandlerId
    public func get_AttributeEventHandlerId() throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_u64__get_AttributeEventHandlerId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_AttributeName()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_AttributeName
    public func get_AttributeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_AttributeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_AttributeValue()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_AttributeValue
    public func get_AttributeValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_Object__get_AttributeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_AttributeEventUpdatesAttributeName()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_AttributeEventUpdatesAttributeName
    public func get_AttributeEventUpdatesAttributeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_AttributeEventUpdatesAttributeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_ComponentSubtreeLength()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentSubtreeLength
    public func get_ComponentSubtreeLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_ComponentSubtreeLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ComponentId()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentId
    public func get_ComponentId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_ComponentId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_ComponentType()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentType
    public func get_ComponentType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_Type__get_ComponentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ComponentKey()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentKey
    public func get_ComponentKey() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_Object__get_ComponentKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.IComponent get_Component()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_Component
    public func get_Component() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.IComponent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_IComponent__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.IComponent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_RegionSubtreeLength()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_RegionSubtreeLength
    public func get_RegionSubtreeLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_RegionSubtreeLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ElementReferenceCaptureId()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ElementReferenceCaptureId
    public func get_ElementReferenceCaptureId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_ElementReferenceCaptureId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Action<Microsoft.AspNetCore.Components.ElementReference> get_ElementReferenceCaptureAction()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ElementReferenceCaptureAction
    public func get_ElementReferenceCaptureAction() throws -> Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_System_Action_Microsoft_AspNetCore_Components_ElementReference___get_ElementReferenceCaptureAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_ComponentReferenceCaptureParentFrameIndex()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentReferenceCaptureParentFrameIndex
    public func get_ComponentReferenceCaptureParentFrameIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_i32__get_ComponentReferenceCaptureParentFrameIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Action<System.Object> get_ComponentReferenceCaptureAction()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_ComponentReferenceCaptureAction
    public func get_ComponentReferenceCaptureAction() throws -> Optional<dotnet.System.Action_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_System_Action_object___get_ComponentReferenceCaptureAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MarkupContent()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.get_MarkupContent
    public func get_MarkupContent() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame_String__get_MarkupContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RenderTreeFrame


// type: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in future release.
            

    */
public struct RenderTreeFrameType : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType None
    /**
    
            Used only for uninitialized frames.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Element
    /**
    
            Represents a container for other frames.
            

    */
    public static var Element : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Element());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Text
    /**
    
            Represents text content.
            

    */
    public static var Text : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Text());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Attribute
    /**
    
            Represents a key-value pair associated with another .
            

    */
    public static var Attribute : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Attribute());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Component
    /**
    
            Represents a child component.
            

    */
    public static var Component : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Component());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Region
    /**
    
            Defines the boundary around range of sibling frames that should be treated as an
            unsplittable group for the purposes of diffing. This is typically used when appending
            a tree fragment generated by external code, because the sequence numbers in that tree
            fragment are not comparable to sequence numbers outside it.
            

    */
    public static var Region : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Region());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType ElementReferenceCapture
    /**
    
            Represents an instruction to capture or update a reference to the parent element.
            

    */
    public static var ElementReferenceCapture : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_ElementReferenceCapture());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType ComponentReferenceCapture
    /**
    
            Represents an instruction to capture or update a reference to the parent component.
            

    */
    public static var ComponentReferenceCapture : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_ComponentReferenceCapture());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType Markup
    /**
    
            Represents a block of markup content.
            

    */
    public static var Markup : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType(val: Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrameType_get_Markup());
            return __return;
        }
    }
} // RenderTreeFrameType


// type: Microsoft.AspNetCore.Components.RenderTree.Renderer
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            

    */
open class Renderer
    :
    dotnet.System.Object,
    System_IDisposable,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_Renderer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Constructs an instance of .
            

    - Parameter serviceProvider: The  to be used when initializing components.
    - Parameter loggerFactory: The .
    */
    public init(serviceProvider : dotnet.System.IServiceProvider, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_Renderer_ctor_0__2__IServiceProvider_ILoggerFactory(&__thrown, serviceProvider.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IServiceProvider, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Components.IComponentActivator)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Components.IComponentActivator)
    /**
    
            Constructs an instance of .
            

    - Parameter serviceProvider: The  to be used when initializing components.
    - Parameter loggerFactory: The .
    - Parameter componentActivator: The .
    */
    public init(serviceProvider : dotnet.System.IServiceProvider, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, componentActivator : aspnetcore.Microsoft.AspNetCore.Components.IComponentActivator) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_Renderer_ctor_0__3__IServiceProvider_ILoggerFactory_IComponentActivator(&__thrown, serviceProvider.get_handle(), loggerFactory.get_handle(), componentActivator.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task DispatchEventAsync(System.UInt64, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo, System.EventArgs)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64,Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo,System.EventArgs)
    /**
    
            Notifies the renderer that an event has occurred.
            

    - Parameter eventHandlerId: The  value from the original event attribute.
    - Parameter eventArgs: Arguments to be passed to the event handler.
    - Parameter fieldInfo: Information that the renderer can use to update the state of the existing render tree to match the UI.
    - Returns: 
            A  which will complete once all asynchronous processing related to the event
            has completed.
            

    */
    open func DispatchEventAsync(eventHandlerId : Swift.UInt64, fieldInfo : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo>, eventArgs : dotnet.System.EventArgs) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_Renderer_Task__DispatchEventAsync_0__3__u64_EventFieldInfo_EventArgs(&__thrown, self.get_handle(), eventHandlerId, fieldInfo?.get_handle() ?? nil, eventArgs.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Type GetEventArgsType(System.UInt64)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetEventArgsType(System.UInt64)
    /**
    
            Gets the event arguments type for the specified event handler.
            

    - Parameter eventHandlerId: The  value from the original event attribute.
    - Returns: The parameter type expected by the event handler. Normally this is a subclass of .

    */
    open func GetEventArgsType(eventHandlerId : Swift.UInt64) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_Renderer_Type__GetEventArgsType_0__1__u64(&__thrown, self.get_handle(), eventHandlerId);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose
    /**
    
            Releases all resources currently used by this  instance.
            

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_Renderer_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DisposeAsync
    /**
    */
    open /* method final */ func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_Renderer_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Dispatcher get_Dispatcher()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.get_Dispatcher
    open func get_Dispatcher() throws -> aspnetcore.Microsoft.AspNetCore.Components.Dispatcher {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_Renderer_Dispatcher__get_Dispatcher_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Dispatcher(hndl : __return);
        }
    }
    // [IsSpecialName] void add_UnhandledSynchronizationException(System.UnhandledExceptionEventHandler)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.add_UnhandledSynchronizationException(System.UnhandledExceptionEventHandler)
    open func add_UnhandledSynchronizationException(value : dotnet.System.UnhandledExceptionEventHandler) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_Renderer_void__add_UnhandledSynchronizationException_0__1__UnhandledExceptionEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UnhandledSynchronizationException(value : @escaping (dotnet.System.Object, dotnet.System.UnhandledExceptionEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.UnhandledExceptionEventHandler(value);
        return try add_UnhandledSynchronizationException(value: del_value);
    }
    // [IsSpecialName] void remove_UnhandledSynchronizationException(System.UnhandledExceptionEventHandler)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.Renderer.remove_UnhandledSynchronizationException(System.UnhandledExceptionEventHandler)
    open func remove_UnhandledSynchronizationException(value : dotnet.System.UnhandledExceptionEventHandler) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_Renderer_void__remove_UnhandledSynchronizationException_0__1__UnhandledExceptionEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UnhandledSynchronizationException(value : @escaping (dotnet.System.Object, dotnet.System.UnhandledExceptionEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.UnhandledExceptionEventHandler(value);
        return try remove_UnhandledSynchronizationException(value: del_value);
    }
    /**
    
            Gets the  associated with this .
            

    */
    open var Dispatcher : aspnetcore.Microsoft.AspNetCore.Components.Dispatcher {
        get {
            return try! get_Dispatcher();
        }
    }
} // Renderer


}

// Microsoft.AspNetCore.Components.Rendering
extension Microsoft.AspNetCore.Components.Rendering {
// type: Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder
    /**
    
            Provides methods for building a collection of  entries.
            

    */
public final class RenderTreeBuilder
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OpenElement(System.Int32, System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenElement(System.Int32,System.String)
    /**
    
            Appends a frame representing an element, i.e., a container for other frames.
            In order for the  state to be valid, you must
            also call  immediately after appending the
            new element's child frames.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter elementName: A value representing the type of the element.
    */
    public func OpenElement(sequence : Swift.Int32, elementName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__OpenElement_0__2__i32_String(&__thrown, self.get_handle(), sequence, elementName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CloseElement()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseElement
    /**
    
            Marks a previously appended element frame as closed. Calls to this method
            must be balanced with calls to .
            

    */
    public func CloseElement() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__CloseElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddMarkupContent(System.Int32, System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddMarkupContent(System.Int32,System.String)
    /**
    
            Appends a frame representing markup content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter markupContent: Content for the new markup frame.
    */
    public func AddMarkupContent(sequence : Swift.Int32, markupContent : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddMarkupContent_0__2__i32_String(&__thrown, self.get_handle(), sequence, markupContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddContent(System.Int32, System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,System.String)
    /**
    
            Appends a frame representing text content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter textContent: Content for the new text frame.
    */
    public func AddContent(sequence : Swift.Int32, textContent : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddContent_0__2__i32_String(&__thrown, self.get_handle(), sequence, textContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddContent(System.Int32, Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)
    /**
    
            Appends frames representing an arbitrary fragment of content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter fragment: Content to append.
    */
    public func AddContent(sequence : Swift.Int32, fragment : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddContent_0__2__i32_RenderFragment(&__thrown, self.get_handle(), sequence, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func AddContent(sequence : Swift.Int32, fragment : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_fragment = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(fragment);
        return try AddContent(sequence: sequence, fragment: del_fragment);
    }
    // void AddContent<TValue>(System.Int32, Microsoft.AspNetCore.Components.RenderFragment<TValue>, TValue)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent``1(System.Int32,Microsoft.AspNetCore.Components.RenderFragment{``0},``0)
    /**
    
            Appends frames representing an arbitrary fragment of content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter fragment: Content to append.
    - Parameter value: The value used by .
    */
    public func AddContent<UTValue : SGBridgeGenericValue>(sequence : Swift.Int32, fragment : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<UTValue>>, value : UTValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddContent_1__3__i32_Microsoft_AspNetCore_Components_RenderFragment_UTValue__UTValue(UTValue.get_type_handle(), &__thrown, self.get_handle(), sequence, (fragment?.get_handle()), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func AddContent<UTValue : SGBridgeGenericValue>(sequence : Swift.Int32, fragment : @escaping (UTValue) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment, value : UTValue) throws {
        let del_fragment = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<UTValue>(fragment);
        return try AddContent(sequence: sequence, fragment: del_fragment, value: value);
    }
    // void AddContent(System.Int32, Microsoft.AspNetCore.Components.MarkupString)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,Microsoft.AspNetCore.Components.MarkupString)
    /**
    
            Appends a frame representing markup content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter markupContent: Content for the new markup frame.
    */
    public func AddContent(sequence : Swift.Int32, markupContent : aspnetcore.Microsoft.AspNetCore.Components.MarkupString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddContent_0__2__i32_MarkupString(&__thrown, self.get_handle(), sequence, markupContent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddContent(System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddContent(System.Int32,System.Object)
    /**
    
            Appends a frame representing text content.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter textContent: Content for the new text frame.
    */
    public func AddContent(sequence : Swift.Int32, textContent : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddContent_0__2__i32_Object(&__thrown, self.get_handle(), sequence, textContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String)
    /**
    
            
            Appends a frame representing a bool-valued attribute with value 'true'.
            
            
            The attribute is associated with the most recently added element.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__2__i32_String(&__thrown, self.get_handle(), sequence, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Boolean)
    /**
    
            
            Appends a frame representing a bool-valued attribute.
            
            
            The attribute is associated with the most recently added element. If the value is false and the
            current element is not a component, the frame will be omitted.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__3__i32_String_bool(&__thrown, self.get_handle(), sequence, name.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.String)
    /**
    
            
            Appends a frame representing a string-valued attribute.
            
            
            The attribute is associated with the most recently added element. If the value is null and the
            current element is not a component, the frame will be omitted.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__3__i32_String_String(&__thrown, self.get_handle(), sequence, name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String, System.MulticastDelegate)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.MulticastDelegate)
    /**
    
            
            Appends a frame representing a delegate-valued attribute.
            
            
            The attribute is associated with the most recently added element. If the value is null and the
            current element is not a component, the frame will be omitted.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String, value : Optional<dotnet.System.MulticastDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__3__i32_String_MulticastDelegate(&__thrown, self.get_handle(), sequence, name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String, Microsoft.AspNetCore.Components.EventCallback)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback)
    /**
    
            
            Appends a frame representing an  attribute.
            
            
            The attribute is associated with the most recently added element. If the value is null and the
            current element is not a component, the frame will be omitted.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String, value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__3__i32_String_EventCallback(&__thrown, self.get_handle(), sequence, name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute<TArgument>(System.Int32, System.String, Microsoft.AspNetCore.Components.EventCallback<TArgument>)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute``1(System.Int32,System.String,Microsoft.AspNetCore.Components.EventCallback{``0})
    /**
    
            
            Appends a frame representing an  attribute.
            
            
            The attribute is associated with the most recently added element. If the value is null and the
            current element is not a component, the frame will be omitted.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute<UTArgument : SGBridgeGenericValue>(sequence : Swift.Int32, name : dotnet.System.String, value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<UTArgument>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_1__3__i32_String_Microsoft_AspNetCore_Components_EventCallback_UTArgument_(UTArgument.get_type_handle(), &__thrown, self.get_handle(), sequence, name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,System.String,System.Object)
    /**
    
            Appends a frame representing a string-valued attribute.
            The attribute is associated with the most recently added element. If the value is null, or
            the  value false and the current element is not a component, the
            frame will be omitted.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter name: The name of the attribute.
    - Parameter value: The value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__3__i32_String_Object(&__thrown, self.get_handle(), sequence, name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAttribute(System.Int32, Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddAttribute(System.Int32,Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame)
    /**
    
            
            Appends a frame representing an attribute.
            
            
            The attribute is associated with the most recently added element.
            
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter frame: A  holding the name and value of the attribute.
    */
    public func AddAttribute(sequence : Swift.Int32, frame : aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddAttribute_0__2__i32_RenderTreeFrame(&__thrown, self.get_handle(), sequence, frame.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddMultipleAttributes(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddMultipleAttributes(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    /**
    
            Adds frames representing multiple attributes with the same sequence number.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter attributes: A collection of key-value pairs representing attributes.
    */
    public func AddMultipleAttributes(sequence : Swift.Int32, attributes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddMultipleAttributes_0__2__i32_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object__(&__thrown, self.get_handle(), sequence, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetUpdatesAttributeName(System.String)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.SetUpdatesAttributeName(System.String)
    /**
    
            
            Indicates that the preceding attribute represents an event handler
            whose execution updates the attribute with name .
            
            
            This information is used by the rendering system to determine whether
            to accept a value update for the other attribute when receiving a
            call to the event handler.
            
            

    - Parameter updatesAttributeName: The name of another attribute whose value can be updated when the event handler is executed.
    */
    public func SetUpdatesAttributeName(updatesAttributeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__SetUpdatesAttributeName_0__1__String(&__thrown, self.get_handle(), updatesAttributeName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void OpenComponent<TComponent>(System.Int32)
    // void OpenComponent(System.Int32, System.Type)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenComponent(System.Int32,System.Type)
    /**
    
            Appends a frame representing a child component.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter componentType: The type of the child component.
    */
    public func OpenComponent(sequence : Swift.Int32, componentType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__OpenComponent_0__2__i32_Type(&__thrown, self.get_handle(), sequence, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetKey(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.SetKey(System.Object)
    /**
    
            Assigns the specified key value to the current element or component.
            

    - Parameter value: The value for the key.
    */
    public func SetKey(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__SetKey_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CloseComponent()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseComponent
    /**
    
            Marks a previously appended component frame as closed. Calls to this method
            must be balanced with calls to .
            

    */
    public func CloseComponent() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__CloseComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddElementReferenceCapture(System.Int32, System.Action<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddElementReferenceCapture(System.Int32,System.Action{Microsoft.AspNetCore.Components.ElementReference})
    /**
    
            Appends a frame representing an instruction to capture a reference to the parent element.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter elementReferenceCaptureAction: An action to be invoked whenever the reference value changes.
    */
    public func AddElementReferenceCapture(sequence : Swift.Int32, elementReferenceCaptureAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddElementReferenceCapture_0__2__i32_System_Action_Microsoft_AspNetCore_Components_ElementReference_(&__thrown, self.get_handle(), sequence, elementReferenceCaptureAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func AddElementReferenceCapture(sequence : Swift.Int32, elementReferenceCaptureAction : @escaping (aspnetcore.Microsoft.AspNetCore.Components.ElementReference) throws -> Void) throws {
        let del_elementReferenceCaptureAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>(elementReferenceCaptureAction);
        return try AddElementReferenceCapture(sequence: sequence, elementReferenceCaptureAction: del_elementReferenceCaptureAction);
    }
    // void AddComponentReferenceCapture(System.Int32, System.Action<System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.AddComponentReferenceCapture(System.Int32,System.Action{System.Object})
    /**
    
            Appends a frame representing an instruction to capture a reference to the parent component.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter componentReferenceCaptureAction: An action to be invoked whenever the reference value changes.
    */
    public func AddComponentReferenceCapture(sequence : Swift.Int32, componentReferenceCaptureAction : dotnet.System.Action_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__AddComponentReferenceCapture_0__2__i32_System_Action_object_(&__thrown, self.get_handle(), sequence, componentReferenceCaptureAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func AddComponentReferenceCapture(sequence : Swift.Int32, componentReferenceCaptureAction : @escaping (dotnet.System.Object) throws -> Void) throws {
        let del_componentReferenceCaptureAction = try dotnet.System.Action_1<dotnet.System.Object>(componentReferenceCaptureAction);
        return try AddComponentReferenceCapture(sequence: sequence, componentReferenceCaptureAction: del_componentReferenceCaptureAction);
    }
    // void OpenRegion(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.OpenRegion(System.Int32)
    /**
    
            Appends a frame representing a region of frames.
            

    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    */
    public func OpenRegion(sequence : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__OpenRegion_0__1__i32(&__thrown, self.get_handle(), sequence);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CloseRegion()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.CloseRegion
    /**
    
            Marks a previously appended region frame as closed. Calls to this method
            must be balanced with calls to .
            

    */
    public func CloseRegion() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__CloseRegion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.Clear
    /**
    
            Clears the builder.
            

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Components.RenderTree.ArrayRange<Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame> GetFrames()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.GetFrames
    /**
    
            Returns the  values that have been appended.
            

    - Returns: An array range of  values.

    */
    public func GetFrames() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_Microsoft_AspNetCore_Components_RenderTree_ArrayRange_Microsoft_AspNetCore_Components_RenderTree_RenderTreeFrame___GetFrames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.ArrayRange_1(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Rendering_RenderTreeBuilder_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RenderTreeBuilder


}

// Microsoft.AspNetCore.Components.Routing
extension Microsoft.AspNetCore.Components.Routing {
// type: Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager
    /**
    
            An optional interface for  implementations that must be initialized
            by the host.
            

    */
open class IHostEnvironmentNavigationManager
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Routing_IHostEnvironmentNavigationManager
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_IHostEnvironmentNavigationManager_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Initialize(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager.Initialize(System.String,System.String)
    /**
    
            Initializes the .
            

    - Parameter baseUri: The base URI.
    - Parameter uri: The absolute URI.
    */
    open func Initialize(baseUri : dotnet.System.String, uri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_IHostEnvironmentNavigationManager_void__Initialize_0__2__String_String(&__thrown, self.get_handle(), baseUri.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostEnvironmentNavigationManager


// type: Microsoft.AspNetCore.Components.Routing.INavigationInterception
    /**
    
            Contract to setup navigation interception on the client.
            

    */
open class INavigationInterception
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Routing_INavigationInterception
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_INavigationInterception_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task EnableNavigationInterceptionAsync()
// docid: M:Microsoft.AspNetCore.Components.Routing.INavigationInterception.EnableNavigationInterceptionAsync
    /**
    
            Enables navigation interception on the client.
            

    - Returns: A  that represents the asynchronous operation.

    */
    open func EnableNavigationInterceptionAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_INavigationInterception_Task__EnableNavigationInterceptionAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // INavigationInterception


// type: Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs
    /**
    
             for .
            

    */
open class LocationChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.#ctor(System.String,System.Boolean)
    /**
    
            Initializes a new instance of .
            

    - Parameter location: The location.
    - Parameter isNavigationIntercepted: A value that determines if navigation for the link was intercepted.
    */
    public init(location : dotnet.System.String, isNavigationIntercepted : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_ctor_0__2__String_bool(&__thrown, location.get_handle(), Swift.Int32(isNavigationIntercepted ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Location()
// docid: M:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.get_Location
    open func get_Location() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_String__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNavigationIntercepted()
// docid: M:Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs.get_IsNavigationIntercepted
    open func get_IsNavigationIntercepted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_LocationChangedEventArgs_bool__get_IsNavigationIntercepted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a value that determines if navigation for the link was intercepted.
            

    */
    open var IsNavigationIntercepted : Bool {
        get {
            return try! get_IsNavigationIntercepted();
        }
    }
    /**
    
            Gets the changed location.
            

    */
    open var Location : dotnet.System.String {
        get {
            return try! get_Location();
        }
    }
} // LocationChangedEventArgs


// type: Microsoft.AspNetCore.Components.Routing.NavigationContext
    /**
    
            Provides information about the current asynchronous navigation event
            including the target path and the cancellation token.
            

    */
public final class NavigationContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_NavigationContext_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavigationContext.get_Path
    public func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavigationContext_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_CancellationToken()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavigationContext.get_CancellationToken
    public func get_CancellationToken() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavigationContext_CancellationToken__get_CancellationToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    /**
    
            The  to use to cancel navigation.
            

    */
    public var CancellationToken : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_CancellationToken();
        }
    }
    /**
    
            The target path for the navigation.
            

    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
    }
} // NavigationContext


// type: Microsoft.AspNetCore.Components.Routing.Router
    /**
    
            A component that supplies route data corresponding to the current navigation state.
            

    */
open class Router
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Components_IComponent,
    Microsoft_AspNetCore_Components_IHandleAfterRender,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_Router_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Routing_Router_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Attach(Microsoft.AspNetCore.Components.RenderHandle)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.Attach(Microsoft.AspNetCore.Components.RenderHandle)
    /**
    */
    open /* method final */ func Attach(renderHandle : aspnetcore.Microsoft.AspNetCore.Components.RenderHandle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__Attach_0__1__RenderHandle(&__thrown, self.get_handle(), renderHandle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open /* method final */ func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_Task__SetParametersAsync_0__1__ParameterView(&__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_AppAssembly()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_AppAssembly
    open func get_AppAssembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_Assembly__get_AppAssembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AppAssembly(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_AppAssembly(System.Reflection.Assembly)
    open func set_AppAssembly(value : dotnet.System.Reflection.Assembly) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_AppAssembly_0__1__Assembly(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Reflection.Assembly> get_AdditionalAssemblies()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_AdditionalAssemblies
    open func get_AdditionalAssemblies() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.Assembly> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_System_Collections_Generic_IEnumerable_System_Reflection_Assembly___get_AdditionalAssemblies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AdditionalAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_AdditionalAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
    open func set_AdditionalAssemblies(value : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.Assembly>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_AdditionalAssemblies_0__1__System_Collections_Generic_IEnumerable_System_Reflection_Assembly_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_NotFound()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_NotFound
    open func get_NotFound() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_RenderFragment__get_NotFound_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_NotFound(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_NotFound(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_NotFound(value : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_NotFound_0__1__RenderFragment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_NotFound(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_NotFound(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData> get_Found()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_Found
    open func get_Found() throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.RouteData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_RouteData___get_Found_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Found(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_Found(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.RouteData})
    open func set_Found(value : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.RouteData>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_Found_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_RouteData_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Found(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.RouteData) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.RouteData>(value);
        return try set_Found(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_Navigating()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_Navigating
    open func get_Navigating() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_RenderFragment__get_Navigating_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Navigating(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_Navigating(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_Navigating(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_Navigating_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Navigating(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_Navigating(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext> get_OnNavigateAsync()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_OnNavigateAsync
    open func get_OnNavigateAsync() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.NavigationContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Routing_NavigationContext___get_OnNavigateAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnNavigateAsync(Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_OnNavigateAsync(Microsoft.AspNetCore.Components.EventCallback{Microsoft.AspNetCore.Components.Routing.NavigationContext})
    open func set_OnNavigateAsync(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.NavigationContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_OnNavigateAsync_0__1__Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Routing_NavigationContext_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreferExactMatches()
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.get_PreferExactMatches
    open func get_PreferExactMatches() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_Router_bool__get_PreferExactMatches_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreferExactMatches(bool)
// docid: M:Microsoft.AspNetCore.Components.Routing.Router.set_PreferExactMatches(System.Boolean)
    open func set_PreferExactMatches(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_Router_void__set_PreferExactMatches_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional assemblies that should be searched for components
            that can match URIs.
            

    */
    open var AdditionalAssemblies : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.Assembly> {
        get {
            return try! get_AdditionalAssemblies();
        }
        set(v) {
            return try! set_AdditionalAssemblies(value: v);
        }
    }
    /**
    
            Gets or sets the assembly that should be searched for components matching the URI.
            

    */
    open var AppAssembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_AppAssembly();
        }
        set(v) {
            return try! set_AppAssembly(value: v);
        }
    }
    /**
    
            Gets or sets the content to display when a match is found for the requested route.
            

    */
    open var Found : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.RouteData> {
        get {
            return try! get_Found();
        }
        set(v) {
            return try! set_Found(value: v);
        }
    }
    /**
    
            Get or sets the content to display when asynchronous navigation is in progress.
            

    */
    open var Navigating : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_Navigating();
        }
        set(v) {
            return try! set_Navigating(value: v!);
        }
    }
    /**
    
            Gets or sets the content to display when no match is found for the requested route.
            

    */
    open var NotFound : aspnetcore.Microsoft.AspNetCore.Components.RenderFragment {
        get {
            return try! get_NotFound();
        }
        set(v) {
            return try! set_NotFound(value: v);
        }
    }
    /**
    
            Gets or sets a handler that should be called before navigating to a new page.
            

    */
    open var OnNavigateAsync : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Routing.NavigationContext> {
        get {
            return try! get_OnNavigateAsync();
        }
        set(v) {
            return try! set_OnNavigateAsync(value: v);
        }
    }
    /**
    
            Gets or sets a flag to indicate whether route matching should prefer exact matches
            over wildcards.
            This property is obsolete and configuring it does nothing.
            

    */
    open var PreferExactMatches : Bool {
        get {
            return try! get_PreferExactMatches();
        }
        set(v) {
            return try! set_PreferExactMatches(value: v);
        }
    }
} // Router


}




public protocol Microsoft_AspNetCore_Components_IComponent
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_IComponentActivator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_IHandleAfterRender
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_IHandleEvent
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_IPersistentComponentStateStore
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_Routing_IHostEnvironmentNavigationManager
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_Routing_INavigationInterception
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.String>, System.String, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.String>, existingValue : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Optional<dotnet.System.String>) throws -> Void, existingValue : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.String>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<bool>, bool, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Bool>, existingValue : Bool, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Bool) throws -> Void, existingValue : Bool, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Bool>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<bool>>, System.Nullable<bool>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int32>, System.Int32, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int32>, existingValue : Swift.Int32, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Swift.Int32) throws -> Void, existingValue : Swift.Int32, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int32>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int32>>, System.Nullable<System.Int32>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int64>, System.Int64, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int64>, existingValue : Swift.Int64, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Swift.Int64) throws -> Void, existingValue : Swift.Int64, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int64>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Int16>, System.Int16, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Int16>, existingValue : Swift.Int16, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Swift.Int16) throws -> Void, existingValue : Swift.Int16, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Int16>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int64>>, System.Nullable<System.Int64>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Int16>>, System.Nullable<System.Int16>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Single>, System.Single, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Float>, existingValue : Swift.Float, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Swift.Float) throws -> Void, existingValue : Swift.Float, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Float>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Single>>, System.Nullable<System.Single>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Double>, System.Double, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<Swift.Double>, existingValue : Swift.Double, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (Swift.Double) throws -> Void, existingValue : Swift.Double, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<Swift.Double>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Double>>, System.Nullable<System.Double>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Decimal>, System.Decimal, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.Decimal>, existingValue : dotnet.System.Decimal, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.Decimal) throws -> Void, existingValue : dotnet.System.Decimal, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.Decimal>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.Decimal>>, System.Nullable<System.Decimal>, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTime>, System.DateTime, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTime>, existingValue : dotnet.System.DateTime, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTime) throws -> Void, existingValue : dotnet.System.DateTime, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTime>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTime>, System.DateTime, System.String, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTime>, existingValue : dotnet.System.DateTime, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, format: format, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTime) throws -> Void, existingValue : dotnet.System.DateTime, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTime>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTime>>, System.Nullable<System.DateTime>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTime>>, System.Nullable<System.DateTime>, System.String, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTimeOffset>, System.DateTimeOffset, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTimeOffset>, existingValue : dotnet.System.DateTimeOffset, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTimeOffset) throws -> Void, existingValue : dotnet.System.DateTimeOffset, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTimeOffset>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateTimeOffset>, System.DateTimeOffset, System.String, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateTimeOffset>, existingValue : dotnet.System.DateTimeOffset, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, format: format, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateTimeOffset) throws -> Void, existingValue : dotnet.System.DateTimeOffset, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateTimeOffset>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTimeOffset>>, System.Nullable<System.DateTimeOffset>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateTimeOffset>>, System.Nullable<System.DateTimeOffset>, System.String, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateOnly>, System.DateOnly, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateOnly>, existingValue : dotnet.System.DateOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateOnly) throws -> Void, existingValue : dotnet.System.DateOnly, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateOnly>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.DateOnly>, System.DateOnly, System.String, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.DateOnly>, existingValue : dotnet.System.DateOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, format: format, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.DateOnly) throws -> Void, existingValue : dotnet.System.DateOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.DateOnly>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateOnly>>, System.Nullable<System.DateOnly>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.DateOnly>>, System.Nullable<System.DateOnly>, System.String, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.TimeOnly>, System.TimeOnly, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.TimeOnly>, existingValue : dotnet.System.TimeOnly, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.TimeOnly) throws -> Void, existingValue : dotnet.System.TimeOnly, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.TimeOnly>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.TimeOnly>, System.TimeOnly, System.String, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<dotnet.System.TimeOnly>, existingValue : dotnet.System.TimeOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, format: format, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder(receiver : dotnet.System.Object, setter : @escaping (dotnet.System.TimeOnly) throws -> Void, existingValue : dotnet.System.TimeOnly, format : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<dotnet.System.TimeOnly>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, format: format, culture: culture);
    }
}

// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.TimeOnly>>, System.Nullable<System.TimeOnly>, System.Globalization.CultureInfo)
// TODO COPE (parm closedgeneric of nullable): Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.Nullable<System.TimeOnly>>, System.Nullable<System.TimeOnly>, System.String, System.Globalization.CultureInfo)
// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> CreateBinder<T>(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<T>, T, System.Globalization.CultureInfo)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func CreateBinder<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, setter : dotnet.System.Action_1<UT>, existingValue : UT, culture : Optional<dotnet.System.Globalization.CultureInfo> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: setter, existingValue: existingValue, culture: culture);
    }
    // delegate closure overload
    public func CreateBinder<UT : SGBridgeGenericValue>(receiver : dotnet.System.Object, setter : @escaping (UT) throws -> Void, existingValue : UT, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_setter = try dotnet.System.Action_1<UT>(setter);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions.CreateBinder(factory: self, receiver: receiver, setter: del_setter, existingValue: existingValue, culture: culture);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<System.EventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<System.EventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<dotnet.System.EventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (dotnet.System.EventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.EventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<System.EventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<System.EventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<dotnet.System.EventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (dotnet.System.EventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<dotnet.System.EventArgs> {
        let del_callback = try dotnet.System.Func_2<dotnet.System.EventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.ChangeEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.ChangeEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.ChangeEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, bool)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Bool) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<bool>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<Bool>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.DateTime)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : dotnet.System.DateTime) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.DateTime>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.DateTime>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.DateOnly)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : dotnet.System.DateOnly) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.DateOnly>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.DateOnly>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.TimeOnly)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : dotnet.System.TimeOnly) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.TimeOnly>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.TimeOnly>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Decimal)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : dotnet.System.Decimal) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Decimal>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.Decimal>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Double)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Swift.Double) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Double>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<Swift.Double>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Single)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Swift.Float) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Single>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<Swift.Float>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Guid)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : dotnet.System.Guid) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Guid>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.Guid>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Int32)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Swift.Int32) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Int32>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<Swift.Int32>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Int64)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Swift.Int64) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Nullable<System.Int64>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<Swift.Int64>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameter(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameter(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameter(navigationManager: self, name: name, value: value);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameters(parameters : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(navigationManager: self, parameters: parameters);
    }
}

// EXTENSION METHOD System.String GetUriWithQueryParameters(Microsoft.AspNetCore.Components.NavigationManager, System.String, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
extension aspnetcore.Microsoft.AspNetCore.Components.NavigationManager {
    public func GetUriWithQueryParameters(uri : dotnet.System.String, parameters : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.NavigationManagerExtensions.GetUriWithQueryParameters(navigationManager: self, uri: uri, parameters: parameters);
    }
}

