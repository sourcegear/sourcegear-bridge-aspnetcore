// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder
    /**
    
            Builds conventions that will be used for customization of  instances.
            

    */
public final class ControllerActionEndpointConventionBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ControllerActionEndpointConventionBuilder_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})
    /**
    
            Adds the specified convention to the builder. Conventions are used to customize  instances.
            

    - Parameter convention: The convention to add to the builder.
    */
    public func Add(convention : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ControllerActionEndpointConventionBuilder_void__Add_0__1__System_Action_Microsoft_AspNetCore_Builder_EndpointBuilder_(&__thrown, self.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Add(convention : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder) throws -> Void) throws {
        let del_convention = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>(convention);
        return try Add(convention: del_convention);
    }
} // ControllerActionEndpointConventionBuilder


// type: Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions
public struct ControllerEndpointRouteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapControllers(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllers(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
    /**
    
            Adds endpoints for controller actions to the  without specifying any routes.
            

    - Parameter endpoints: The .
    - Returns: An  for endpoints associated with controller actions.

    */
    public static func MapControllers(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_ControllerActionEndpointConventionBuilder__MapControllers_0__1__IEndpointRouteBuilder(&__thrown, endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapDefaultControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDefaultControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
    /**
    
            Adds endpoints for controller actions to the  and adds the default route
            {controller=Home}/{action=Index}/{id?}.
            

    - Parameter endpoints: The .
    - Returns: 
            An  for endpoints associated with controller actions for this route.
            

    */
    public static func MapDefaultControllerRoute(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_ControllerActionEndpointConventionBuilder__MapDefaultControllerRoute_0__1__IEndpointRouteBuilder(&__thrown, endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.Object, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)
    /**
    
            Adds endpoints for controller actions to the  and specifies a route
            with the given , ,
            , , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter pattern: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            
    - Parameter dataTokens: 
            An object that contains data tokens for the route. The object's properties represent the names and
            values of the data tokens.
            
    - Returns: 
            An  for endpoints associated with controller actions for this route.
            

    */
    public static func MapControllerRoute(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, name : dotnet.System.String, pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object> = nil, constraints : Optional<dotnet.System.Object> = nil, dataTokens : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_ControllerActionEndpointConventionBuilder__MapControllerRoute_0__6__IEndpointRouteBuilder_String_String_Object_Object_Object(&__thrown, endpoints.get_handle(), name.get_handle(), pattern.get_handle(), defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil, dataTokens?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapAreaControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String, System.Object, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapAreaControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.String,System.Object,System.Object,System.Object)
    /**
    
            Adds endpoints for controller actions to the  and specifies a route
            with the given , , ,
            , , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter areaName: The area name.
    - Parameter pattern: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            
    - Parameter dataTokens: 
            An object that contains data tokens for the route. The object's properties represent the names and
            values of the data tokens.
            
    - Returns: 
            An  for endpoints associated with controller actions for this route.
            

    */
    public static func MapAreaControllerRoute(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, name : dotnet.System.String, areaName : dotnet.System.String, pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object> = nil, constraints : Optional<dotnet.System.Object> = nil, dataTokens : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_ControllerActionEndpointConventionBuilder__MapAreaControllerRoute_0__7__IEndpointRouteBuilder_String_String_String_Object_Object_Object(&__thrown, endpoints.get_handle(), name.get_handle(), areaName.get_handle(), pattern.get_handle(), defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil, dataTokens?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a controller endpoint that
            matches , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter action: The action name.
    - Parameter controller: The controller name.
    */
    public static func MapFallbackToController(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, action : dotnet.System.String, controller : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToController_0__3__IEndpointRouteBuilder_String_String(&__thrown, endpoints.get_handle(), action.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a controller endpoint that
            matches , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter action: The action name.
    - Parameter controller: The controller name.
    */
    public static func MapFallbackToController(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, action : dotnet.System.String, controller : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToController_0__4__IEndpointRouteBuilder_String_String_String(&__thrown, endpoints.get_handle(), pattern.get_handle(), action.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a controller endpoint that
            matches , , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter action: The action name.
    - Parameter controller: The controller name.
    - Parameter area: The area name.
    */
    public static func MapFallbackToAreaController(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, action : dotnet.System.String, controller : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToAreaController_0__4__IEndpointRouteBuilder_String_String_String(&__thrown, endpoints.get_handle(), action.get_handle(), controller.get_handle(), area.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.String,System.String)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority. The request will be routed to a controller endpoint that
            matches , , and .
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter action: The action name.
    - Parameter controller: The controller name.
    - Parameter area: The area name.
    */
    public static func MapFallbackToAreaController(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, action : dotnet.System.String, controller : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ControllerEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallbackToAreaController_0__5__IEndpointRouteBuilder_String_String_String_String(&__thrown, endpoints.get_handle(), pattern.get_handle(), action.get_handle(), controller.get_handle(), area.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)
// TODO COPE (write_all_methods) (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)
} // ControllerEndpointRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions
public struct MvcApplicationBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds MVC to the  request execution pipeline.
            

    - Parameter app: The .
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseMvc(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcApplicationBuilderExtensions_IApplicationBuilder__UseMvc_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvcWithDefaultRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds MVC to the  request execution pipeline
            with a default route named 'default' and the following template:
            '{controller=Home}/{action=Index}/{id?}'.
            

    - Parameter app: The .
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseMvcWithDefaultRoute(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcApplicationBuilderExtensions_IApplicationBuilder__UseMvcWithDefaultRoute_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})
    /**
    
            Adds MVC to the  request execution pipeline.
            

    - Parameter app: The .
    - Parameter configureRoutes: A callback to configure MVC routes.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseMvc(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configureRoutes : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcApplicationBuilderExtensions_IApplicationBuilder__UseMvc_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Routing_IRouteBuilder_(&__thrown, app.get_handle(), configureRoutes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseMvc(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configureRoutes : @escaping (aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configureRoutes = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(configureRoutes);
        return try UseMvc(app: app, configureRoutes: del_configureRoutes);
    }
} // MvcApplicationBuilderExtensions


// type: Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions
public struct MvcAreaRouteBuilderExtensions {
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String)
    /**
    
            Adds a route to the  with the given MVC area with the specified
            ,  and .
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter areaName: The MVC area name.
    - Parameter template: The URL pattern of the route.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapAreaRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcAreaRouteBuilderExtensions_IRouteBuilder__MapAreaRoute_0__4__IRouteBuilder_String_String_String(&__thrown, routeBuilder.get_handle(), name.get_handle(), areaName.get_handle(), template?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object)
    /**
    
            Adds a route to the  with the given MVC area with the specified
            , , , and
            .
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter areaName: The MVC area name.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapAreaRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcAreaRouteBuilderExtensions_IRouteBuilder__MapAreaRoute_0__5__IRouteBuilder_String_String_String_Object(&__thrown, routeBuilder.get_handle(), name.get_handle(), areaName.get_handle(), template?.get_handle() ?? nil, defaults?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Adds a route to the  with the given MVC area with the specified
            , , ,
            , and .
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter areaName: The MVC area name.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapAreaRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcAreaRouteBuilderExtensions_IRouteBuilder__MapAreaRoute_0__6__IRouteBuilder_String_String_String_Object_Object(&__thrown, routeBuilder.get_handle(), name.get_handle(), areaName.get_handle(), template?.get_handle() ?? nil, defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object,System.Object)
    /**
    
            Adds a route to the  with the given MVC area with the specified
            , , ,
            , , and .
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter areaName: The MVC area name.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            
    - Parameter dataTokens: 
            An object that contains data tokens for the route. The object's properties represent the names and
            values of the data tokens.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapAreaRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>, dataTokens : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MvcAreaRouteBuilderExtensions_IRouteBuilder__MapAreaRoute_0__7__IRouteBuilder_String_String_String_Object_Object_Object(&__thrown, routeBuilder.get_handle(), name.get_handle(), areaName.get_handle(), template?.get_handle() ?? nil, defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil, dataTokens?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
} // MvcAreaRouteBuilderExtensions


}

// Microsoft.AspNetCore.Mvc
extension Microsoft.AspNetCore.Mvc {
// type: Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute
    /**
    
            Specifies what HTTP methods an action supports.
            

    */
public final class AcceptVerbsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider,
    Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter method: The HTTP method the action supports.
    */
    public init(method : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_ctor_0__1__String(&__thrown, method.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.#ctor(System.String[])
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter methods: The HTTP methods the action supports.
    */
    public init(methods : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_ctor_0__1__StringArray(&__thrown, methods.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.get_HttpMethods
    public func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_System_Collections_Generic_IEnumerable_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Route()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.get_Route
    public func get_Route() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_String__get_Route_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Route(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.set_Route(System.String)
    public func set_Route(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_void__set_Route_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.set_Order(System.Int32)
    public func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptVerbsAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the HTTP methods the action supports.
            

    */
    public var HttpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_HttpMethods();
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets the value of the
             or a default value of 0 if the 
            doesn't define a value on the controller.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            The route template. May be null.
            

    */
    public var Route : Optional<dotnet.System.String> {
        get {
            return try! get_Route();
        }
        set(v) {
            return try! set_Route(value: v!);
        }
    }
} // AcceptVerbsAttribute


// type: Microsoft.AspNetCore.Mvc.AcceptedAtActionResult
    /**
    
            An  that returns a Accepted (202) response with a Location header.
            

    */
open class AcceptedAtActionResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.#ctor(System.String,System.String,System.Object,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_ctor_0__4__String_String_Object_Object(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ActionName()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.get_ActionName
    open func get_ActionName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_String__get_ActionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.set_ActionName(System.String)
    open func set_ActionName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_void__set_ActionName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.get_ControllerName
    open func get_ControllerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ControllerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.set_ControllerName(System.String)
    open func set_ControllerName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_void__set_ControllerName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtActionResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the action to use for generating the URL.
            

    */
    open var ActionName : Optional<dotnet.System.String> {
        get {
            return try! get_ActionName();
        }
        set(v) {
            return try! set_ActionName(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the controller to use for generating the URL.
            

    */
    open var ControllerName : Optional<dotnet.System.String> {
        get {
            return try! get_ControllerName();
        }
        set(v) {
            return try! set_ControllerName(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // AcceptedAtActionResult


// type: Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult
    /**
    
            An  that returns a Accepted (202) response with a Location header.
            

    */
open class AcceptedAtRouteResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.#ctor(System.Object,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_ctor_0__2__Object_Object(&__thrown, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.#ctor(System.String,System.Object,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_ctor_0__3__String_Object_Object(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedAtRouteResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the route to use for generating the URL.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // AcceptedAtRouteResult


// type: Microsoft.AspNetCore.Mvc.AcceptedResult
    /**
    
            An  that returns an Accepted (202) response with a Location header.
            

    */
open class AcceptedResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AcceptedResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.#ctor
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.#ctor(System.String,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter location: The location at which the status of requested content can be monitored.
    - Parameter value: The value to format in the entity body.
    */
    public init(location : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedResult_ctor_0__2__String_Object(&__thrown, location?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.#ctor(System.Uri,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter locationUri: The location at which the status of requested content can be monitored.
    - Parameter value: The value to format in the entity body.
    */
    public init(locationUri : dotnet.System.Uri, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AcceptedResult_ctor_0__2__Uri_Object(&__thrown, locationUri.get_handle(), value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Location()
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.get_Location
    open func get_Location() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AcceptedResult_String__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Location(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AcceptedResult.set_Location(System.String)
    open func set_Location(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AcceptedResult_void__set_Location_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the location at which the status of the requested content can be monitored.
            

    */
    open var Location : Optional<dotnet.System.String> {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v!);
        }
    }
} // AcceptedResult


// type: Microsoft.AspNetCore.Mvc.ActionContextAttribute
    /**
    
            Specifies that a controller property should be set with the current
             when creating the controller. The property must have a public
            set method.
            

    */
open class ActionContextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionContextAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContextAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionContextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ActionContextAttribute


// type: Microsoft.AspNetCore.Mvc.ActionNameAttribute
    /**
    
            Specifies the name of an action.
            

    */
public final class ActionNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionNameAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ActionNameAttribute.#ctor(System.String)
    /**
    
            Initializes a new  instance.
            

    - Parameter name: The name of the action.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionNameAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ActionNameAttribute.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionNameAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the name of the action.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // ActionNameAttribute


// type: Microsoft.AspNetCore.Mvc.ActionResult
    /**
    
            A default implementation of .
            

    */
open class ActionResult
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Executes the result operation of the action method asynchronously. This method is called by MVC to process
            the result of an action method.
            The default implementation of this method calls the  method and
            returns a completed task.
            

    - Parameter context: The context in which the result is executed. The context information includes
            information about the action that was executed and request information.
    - Returns: A task that represents the asynchronous execute operation.

    */
    open func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Executes the result operation of the action method synchronously. This method is called by MVC to process
            the result of an action method.
            

    - Parameter context: The context in which the result is executed. The context information includes
            information about the action that was executed and request information.
    */
    open func ExecuteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionResult_void__ExecuteResult_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ActionResult


// type: Microsoft.AspNetCore.Mvc.ActionResult`1
    /**
    
            A type that wraps either an  instance or an .
            

    */
public final class ActionResult_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Infrastructure_IConvertToActionResult
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionResult_1_get_type_handle(TValue.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(TValue)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.#ctor(`0)
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter value: The value.
    */
    public init(value : TValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionResult_1_ctor_0__1__TValue(TValue.get_type_handle(), &__thrown, value.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.#ctor(Microsoft.AspNetCore.Mvc.ActionResult)
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter result: The .
    */
    public init(result : aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionResult_1_ctor_0__1__ActionResult(TValue.get_type_handle(), &__thrown, result.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionResult<TValue> op_Implicit(TValue)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.op_Implicit(`0)
    public class func op_Implicit(value : TValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionResult_1_Microsoft_AspNetCore_Mvc_ActionResult_TValue___op_Implicit_0__1__TValue(TValue.get_type_handle(), &__thrown, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionResult<TValue> op_Implicit(Microsoft.AspNetCore.Mvc.ActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.op_Implicit(Microsoft.AspNetCore.Mvc.ActionResult)
    public class func op_Implicit(result : aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionResult_1_Microsoft_AspNetCore_Mvc_ActionResult_TValue___op_Implicit_0__1__ActionResult(TValue.get_type_handle(), &__thrown, result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.get_Result
    public func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionResult_1_ActionResult__get_Result_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.ActionResult`1.get_Value
    public func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionResult_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    /**
    
            Gets the .
            

    */
    public var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        get {
            return try! get_Result();
        }
    }
    /**
    
            Gets the value.
            

    */
    public var Value : TValue {
        get {
            return try! get_Value();
        }
    }
} // ActionResult_1


// type: Microsoft.AspNetCore.Mvc.AntiforgeryValidationFailedResult
    /**
    
            A  used for antiforgery validation
            failures. Use  to
            match for validation failures inside MVC result filters.
            

    */
open class AntiforgeryValidationFailedResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult,
    Microsoft_AspNetCore_Mvc_Core_Infrastructure_IAntiforgeryValidationFailedResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AntiforgeryValidationFailedResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.AntiforgeryValidationFailedResult.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AntiforgeryValidationFailedResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AntiforgeryValidationFailedResult


// type: Microsoft.AspNetCore.Mvc.ApiBehaviorOptions
    /**
    
            Options used to configure behavior for types annotated with .
            

    */
open class ApiBehaviorOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult> get_InvalidModelStateResponseFactory()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_InvalidModelStateResponseFactory
    open func get_InvalidModelStateResponseFactory() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_System_Func_Microsoft_AspNetCore_Mvc_ActionContext_Microsoft_AspNetCore_Mvc_IActionResult___get_InvalidModelStateResponseFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InvalidModelStateResponseFactory(System.Func<Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.set_InvalidModelStateResponseFactory(System.Func{Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult})
    open func set_InvalidModelStateResponseFactory(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_void__set_InvalidModelStateResponseFactory_0__1__System_Func_Microsoft_AspNetCore_Mvc_ActionContext_Microsoft_AspNetCore_Mvc_IActionResult_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_InvalidModelStateResponseFactory(value : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>(value);
        return try set_InvalidModelStateResponseFactory(value: del_value);
    }
    // [IsSpecialName] bool get_SuppressModelStateInvalidFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_SuppressModelStateInvalidFilter
    open func get_SuppressModelStateInvalidFilter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_bool__get_SuppressModelStateInvalidFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressModelStateInvalidFilter(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.set_SuppressModelStateInvalidFilter(System.Boolean)
    open func set_SuppressModelStateInvalidFilter(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_void__set_SuppressModelStateInvalidFilter_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressInferBindingSourcesForParameters()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_SuppressInferBindingSourcesForParameters
    open func get_SuppressInferBindingSourcesForParameters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_bool__get_SuppressInferBindingSourcesForParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressInferBindingSourcesForParameters(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.set_SuppressInferBindingSourcesForParameters(System.Boolean)
    open func set_SuppressInferBindingSourcesForParameters(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_void__set_SuppressInferBindingSourcesForParameters_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressConsumesConstraintForFormFileParameters()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_SuppressConsumesConstraintForFormFileParameters
    open func get_SuppressConsumesConstraintForFormFileParameters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_bool__get_SuppressConsumesConstraintForFormFileParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressConsumesConstraintForFormFileParameters(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.set_SuppressConsumesConstraintForFormFileParameters(System.Boolean)
    open func set_SuppressConsumesConstraintForFormFileParameters(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_void__set_SuppressConsumesConstraintForFormFileParameters_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressMapClientErrors()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_SuppressMapClientErrors
    open func get_SuppressMapClientErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_bool__get_SuppressMapClientErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressMapClientErrors(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.set_SuppressMapClientErrors(System.Boolean)
    open func set_SuppressMapClientErrors(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_void__set_SuppressMapClientErrors_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Int32,Microsoft.AspNetCore.Mvc.ClientErrorData> get_ClientErrorMapping()
// docid: M:Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.get_ClientErrorMapping
    open func get_ClientErrorMapping() throws -> dotnet.System.Collections.Generic.IDictionary_2<Swift.Int32,aspnetcore.Microsoft.AspNetCore.Mvc.ClientErrorData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_System_Collections_Generic_IDictionary_i32_Microsoft_AspNetCore_Mvc_ClientErrorData___get_ClientErrorMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets a map of HTTP status codes to . Configured values
            are used to transform  to an 
            instance where the  is .
            
            Use of this feature can be disabled by resetting .
            
            

    */
    open var ClientErrorMapping : dotnet.System.Collections.Generic.IDictionary_2<Swift.Int32,aspnetcore.Microsoft.AspNetCore.Mvc.ClientErrorData> {
        get {
            return try! get_ClientErrorMapping();
        }
    }
    /**
    
            Delegate invoked on actions annotated with  to convert invalid
             into an 
            

    */
    open var InvalidModelStateResponseFactory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_InvalidModelStateResponseFactory();
        }
        set(v) {
            return try! set_InvalidModelStateResponseFactory(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if an multipart/form-data consumes action constraint is added to parameters
            that are bound from form data.
            

    */
    open var SuppressConsumesConstraintForFormFileParameters : Bool {
        get {
            return try! get_SuppressConsumesConstraintForFormFileParameters();
        }
        set(v) {
            return try! set_SuppressConsumesConstraintForFormFileParameters(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if model binding sources are inferred for action parameters on controllers annotated
            with  is suppressed.
            
            When enabled, the following sources are inferred:
            Parameters that appear as route values, are assumed to be bound from the path ().
            Parameters of type  and  are assumed to be bound from form.
            Parameters that are complex () are assumed to be bound from the body ().
            All other parameters are assumed to be bound from the query.
            
            

    */
    open var SuppressInferBindingSourcesForParameters : Bool {
        get {
            return try! get_SuppressInferBindingSourcesForParameters();
        }
        set(v) {
            return try! set_SuppressInferBindingSourcesForParameters(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if controllers with 
            transform certain client errors.
            
            When , a result filter is added to API controller actions that transforms
            . Otherwise, the filter is suppressed.
            
            
            By default,  is used to map  to a
             instance (returned as the value for ).
            
            
            To customize the output of the filter (for e.g. to return a different error type), register a custom
            implementation of  in the service collection.
            
            

    */
    open var SuppressMapClientErrors : Bool {
        get {
            return try! get_SuppressMapClientErrors();
        }
        set(v) {
            return try! set_SuppressMapClientErrors(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the filter that returns an  when
             is invalid is suppressed. .
            

    */
    open var SuppressModelStateInvalidFilter : Bool {
        get {
            return try! get_SuppressModelStateInvalidFilter();
        }
        set(v) {
            return try! set_SuppressModelStateInvalidFilter(value: v);
        }
    }
} // ApiBehaviorOptions


// type: Microsoft.AspNetCore.Mvc.ApiControllerAttribute
    /**
    
            Indicates that a type and all derived types are used to serve HTTP API responses.
            
            Controllers decorated with this attribute are configured with features and behavior targeted at improving the
            developer experience for building APIs.
            
            
            When decorated on an assembly, all controllers in the assembly will be treated as controllers with API behavior.
            For more information, see ApiController attribute.
            
            

    */
open class ApiControllerAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ControllerAttribute,
    Microsoft_AspNetCore_Mvc_Infrastructure_IApiBehaviorMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiControllerAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiControllerAttribute.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiControllerAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ApiControllerAttribute


// type: Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute
    /**
    
            API conventions to be applied to a controller action.
            
            API conventions are used to influence the output of ApiExplorer.
             can be used to specify an exact convention method that applies
            to an action.  for details about applying conventions at
            the assembly or controller level.
            
            

    */
public final class ApiConventionMethodAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiConventionMethodAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute.#ctor(System.Type,System.String)
    /**
    
            Initializes an  instance using  and
            the specified .
            

    - Parameter conventionType: 
            The  of the convention.
            
            Conventions must be static types. Methods in a convention are
            matched to an action method using rules specified by 
            that may be applied to a method name or its parameters and 
            that are applied to parameters.
            
            
    - Parameter methodName: The method name.
    */
    public init(conventionType : dotnet.System.Type_, methodName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiConventionMethodAttribute_ctor_0__2__Type_String(&__thrown, conventionType.get_handle(), methodName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_ConventionType()
// docid: M:Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute.get_ConventionType
    public func get_ConventionType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiConventionMethodAttribute_Type__get_ConventionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            Gets the convention type.
            

    */
    public var ConventionType : dotnet.System.Type_ {
        get {
            return try! get_ConventionType();
        }
    }
} // ApiConventionMethodAttribute


// type: Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute
    /**
    
            API conventions to be applied to an assembly containing MVC controllers or a single controller.
            
            API conventions are used to influence the output of ApiExplorer.
            Conventions must be static types. Methods in a convention are
            matched to an action method using rules specified by 
            that may be applied to a method name or its parameters and 
            that are applied to parameters.
            
            
            When no attributes are found specifying the behavior, MVC matches method names and parameter names are matched
            using  and parameter types are matched
            using .
            
            

    */
public final class ApiConventionTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiConventionTypeAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute.#ctor(System.Type)
    /**
    
            Initializes an  instance using .
            

    - Parameter conventionType: 
            The  of the convention.
            
            Conventions must be static types. Methods in a convention are
            matched to an action method using rules specified by 
            that may be applied to a method name or its parameters and 
            that are applied to parameters.
            
            
    */
    public init(conventionType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiConventionTypeAttribute_ctor_0__1__Type(&__thrown, conventionType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_ConventionType()
// docid: M:Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute.get_ConventionType
    public func get_ConventionType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiConventionTypeAttribute_Type__get_ConventionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            Gets the convention type.
            

    */
    public var ConventionType : dotnet.System.Type_ {
        get {
            return try! get_ConventionType();
        }
    }
} // ApiConventionTypeAttribute


// type: Microsoft.AspNetCore.Mvc.ApiDescriptionActionData
    /**
    
            Represents data used to build an ApiDescription, stored as part of the
            .
            

    */
open class ApiDescriptionActionData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiDescriptionActionData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiDescriptionActionData_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.get_GroupName
    open func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiDescriptionActionData_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_GroupName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.set_GroupName(System.String)
    open func set_GroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiDescriptionActionData_void__set_GroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The ApiDescription.GroupName of ApiDescription objects for the associated
            action.
            

    */
    open var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
        set(v) {
            return try! set_GroupName(value: v!);
        }
    }
} // ApiDescriptionActionData


// type: Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute
    /**
    
            Controls the visibility and group name for an ApiDescription
            of the associated controller class or action method.
            

    */
open class ApiExplorerSettingsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupNameProvider,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionVisibilityProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.get_GroupName
    open /* method final */ func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_GroupName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.set_GroupName(System.String)
    open func set_GroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_void__set_GroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreApi()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.get_IgnoreApi
    open /* method final */ func get_IgnoreApi() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_bool__get_IgnoreApi_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreApi(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.set_IgnoreApi(System.Boolean)
    open func set_IgnoreApi(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorerSettingsAttribute_void__set_IgnoreApi_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
        set(v) {
            return try! set_GroupName(value: v!);
        }
    }
    /**
    */
    public var IgnoreApi : Bool {
        get {
            return try! get_IgnoreApi();
        }
        set(v) {
            return try! set_IgnoreApi(value: v);
        }
    }
} // ApiExplorerSettingsAttribute


// type: Microsoft.AspNetCore.Mvc.AreaAttribute
    /**
    
            Specifies the area containing a controller or action.
            

    */
open class AreaAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AreaAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.AreaAttribute.#ctor(System.String)
    /**
    
            Initializes a new  instance.
            

    - Parameter areaName: The area containing the controller or action.
    */
    public init(areaName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AreaAttribute_ctor_0__1__String(&__thrown, areaName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AreaAttribute


// type: Microsoft.AspNetCore.Mvc.BadRequestObjectResult
    /**
    
            An  that when executed will produce a Bad Request (400) response.
            

    */
open class BadRequestObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_BadRequestObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.BadRequestObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance.
            

    - Parameter error: Contains the errors to be returned to the client.
    */
    public init(error : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BadRequestObjectResult_ctor_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.BadRequestObjectResult.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a new  instance.
            

    - Parameter modelState:  containing the validation errors.
    */
    public init(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BadRequestObjectResult_ctor_0__1__ModelStateDictionary(&__thrown, modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // BadRequestObjectResult


// type: Microsoft.AspNetCore.Mvc.BadRequestResult
    /**
    
            A  that when
            executed will produce a Bad Request (400) response.
            

    */
open class BadRequestResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_BadRequestResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.BadRequestResult.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BadRequestResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // BadRequestResult


// type: Microsoft.AspNetCore.Mvc.BindAttribute
    /**
    
            This attribute can be used on action parameters and types, to indicate model level metadata.
            

    */
open class BindAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_BindAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.BindAttribute.#ctor(System.String[])
    /**
    
            Creates a new instance of .
            

    - Parameter include: Names of parameters to include in binding.
    */
    public init(include : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BindAttribute_ctor_0__1__StringArray(&__thrown, include.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String[] get_Include()
// docid: M:Microsoft.AspNetCore.Mvc.BindAttribute.get_Include
    open func get_Include() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindAttribute_StringArray__get_Include_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:Microsoft.AspNetCore.Mvc.BindAttribute.get_Prefix
    open func get_Prefix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindAttribute_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.BindAttribute.set_Prefix(System.String)
    open func set_Prefix(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindAttribute_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool> get_PropertyFilter()
// docid: M:Microsoft.AspNetCore.Mvc.BindAttribute.get_PropertyFilter
    open /* method final */ func get_PropertyFilter() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindAttribute_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool___get_PropertyFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    /**
    
            Gets the names of properties to include in model binding.
            

    */
    open var Include : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_Include();
        }
    }
    /**
    
            Allows a user to specify a particular prefix to match during model binding.
            

    */
    open var Prefix : Optional<dotnet.System.String> {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v!);
        }
    }
    /**
    */
    public var PropertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool> {
        get {
            return try! get_PropertyFilter();
        }
    }
} // BindAttribute


// type: Microsoft.AspNetCore.Mvc.BindPropertiesAttribute
    /**
    
            An attribute that enables binding for all properties the decorated controller or Razor Page model defines.
            

    */
open class BindPropertiesAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_BindPropertiesAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BindPropertiesAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SupportsGet()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.get_SupportsGet
    open func get_SupportsGet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindPropertiesAttribute_bool__get_SupportsGet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SupportsGet(bool)
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.set_SupportsGet(System.Boolean)
    open func set_SupportsGet(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindPropertiesAttribute_void__set_SupportsGet_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            When true, allows properties to be bound on GET requests. When false, properties
            do not get model bound or validated on GET requests.
            
            Defaults to false.
            
            

    */
    open var SupportsGet : Bool {
        get {
            return try! get_SupportsGet();
        }
        set(v) {
            return try! set_SupportsGet(value: v);
        }
    }
} // BindPropertiesAttribute


// type: Microsoft.AspNetCore.Mvc.BindPropertyAttribute
    /**
    
            An attribute that can specify a model name or type of  to use for binding the
            associated property.
            

    */
open class BindPropertyAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IRequestPredicateProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_BindPropertyAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_BindPropertyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SupportsGet()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.get_SupportsGet
    open func get_SupportsGet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindPropertyAttribute_bool__get_SupportsGet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SupportsGet(bool)
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.set_SupportsGet(System.Boolean)
    open func set_SupportsGet(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindPropertyAttribute_void__set_SupportsGet_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.get_BinderType
    open /* method final */ func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindPropertyAttribute_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.set_BinderType(System.Type)
    open func set_BinderType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindPropertyAttribute_void__set_BinderType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindPropertyAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindPropertyAttribute_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_BindPropertyAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.BindPropertyAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_BindPropertyAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
        set(v) {
            return try! set_BinderType(value: v!);
        }
    }
    /**
    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets or sets an indication the associated property should be bound in HTTP GET requests. If
            , the property should be bound in all requests. Otherwise, the property should not be
            bound in HTTP GET requests.
            

    */
    open var SupportsGet : Bool {
        get {
            return try! get_SupportsGet();
        }
        set(v) {
            return try! set_SupportsGet(value: v);
        }
    }
} // BindPropertyAttribute


// type: Microsoft.AspNetCore.Mvc.CacheProfile
    /**
    
            Defines a set of settings which can be used for response caching.
            

    */
open class CacheProfile
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CacheProfile_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CacheProfile_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Duration()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.get_Duration
    open func get_Duration() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CacheProfile_System_Nullable_i32___get_Duration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Duration(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.set_Duration(System.Nullable{System.Int32})
    open func set_Duration(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CacheProfile_void__set_Duration_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Mvc.ResponseCacheLocation> get_Location()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.get_Location
    open func get_Location() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CacheProfile_System_Nullable_Microsoft_AspNetCore_Mvc_ResponseCacheLocation___get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation(val: System_Int32_unbox(__return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Location(System.Nullable<Microsoft.AspNetCore.Mvc.ResponseCacheLocation>)
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.set_Location(System.Nullable{Microsoft.AspNetCore.Mvc.ResponseCacheLocation})
    open func set_Location(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CacheProfile_void__set_Location_0__1__System_Nullable_Microsoft_AspNetCore_Mvc_ResponseCacheLocation_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_NoStore()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.get_NoStore
    open func get_NoStore() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CacheProfile_System_Nullable_bool___get_NoStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_NoStore(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.set_NoStore(System.Nullable{System.Boolean})
    open func set_NoStore(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CacheProfile_void__set_NoStore_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByHeader()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.get_VaryByHeader
    open func get_VaryByHeader() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CacheProfile_String__get_VaryByHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByHeader(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.set_VaryByHeader(System.String)
    open func set_VaryByHeader(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CacheProfile_void__set_VaryByHeader_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_VaryByQueryKeys()
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.get_VaryByQueryKeys
    open func get_VaryByQueryKeys() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CacheProfile_StringArray__get_VaryByQueryKeys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByQueryKeys(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.CacheProfile.set_VaryByQueryKeys(System.String[])
    open func set_VaryByQueryKeys(value : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CacheProfile_void__set_VaryByQueryKeys_0__1__StringArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the duration in seconds for which the response is cached.
            If this property is set to a non null value,
            the "max-age" in "Cache-control" header is set in the
            .
            

    */
    open var Duration : Optional<Swift.Int32> {
        get {
            return try! get_Duration();
        }
        set(v) {
            return try! set_Duration(value: v!);
        }
    }
    /**
    
            Gets or sets the location where the data from a particular URL must be cached.
            If this property is set to a non null value,
            the "Cache-control" header is set in the .
            

    */
    open var Location : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation> {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v!);
        }
    }
    /**
    
            Gets or sets the value which determines whether the data should be stored or not.
            When set to , it sets "Cache-control" header in
             to "no-store".
            Ignores the "Location" parameter for values other than "None".
            Ignores the "Duration" parameter.
            

    */
    open var NoStore : Optional<Bool> {
        get {
            return try! get_NoStore();
        }
        set(v) {
            return try! set_NoStore(value: v!);
        }
    }
    /**
    
            Gets or sets the value for the Vary header in .
            

    */
    open var VaryByHeader : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByHeader();
        }
        set(v) {
            return try! set_VaryByHeader(value: v!);
        }
    }
    /**
    
            Gets or sets the query keys to vary by.
            

    */
    open var VaryByQueryKeys : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_VaryByQueryKeys();
        }
        set(v) {
            return try! set_VaryByQueryKeys(value: v!);
        }
    }
} // CacheProfile


// type: Microsoft.AspNetCore.Mvc.ChallengeResult
    /**
    
            An  that on execution invokes .
            

    */
open class ChallengeResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ChallengeResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme.
            

    - Parameter authenticationScheme: The authentication scheme to challenge.
    */
    public init(authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__1__String(&__thrown, authenticationScheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor(System.Collections.Generic.IList{System.String})
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__1__System_Collections_Generic_IList_string_(&__thrown, authenticationSchemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__1__AuthenticationProperties(&__thrown, properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor(System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme and .
            

    - Parameter authenticationScheme: The authentication schemes to challenge.
    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(authenticationScheme : dotnet.System.String, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__2__String_AuthenticationProperties(&__thrown, authenticationScheme.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.#ctor(System.Collections.Generic.IList{System.String},Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes and .
            

    - Parameter authenticationSchemes: The authentication scheme to challenge.
    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ChallengeResult_ctor_0__2__System_Collections_Generic_IList_string__AuthenticationProperties(&__thrown, authenticationSchemes.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ChallengeResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ChallengeResult_System_Collections_Generic_IList_string___get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.set_AuthenticationSchemes(System.Collections.Generic.IList{System.String})
    open func set_AuthenticationSchemes(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ChallengeResult_void__set_AuthenticationSchemes_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ChallengeResult_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ChallengeResult.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ChallengeResult_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the authentication schemes that are challenged.
            

    */
    open var AuthenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v);
        }
    }
    /**
    
            Gets or sets the  used to perform the authentication challenge.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // ChallengeResult


// type: Microsoft.AspNetCore.Mvc.ClientErrorData
    /**
    
            Information for producing client errors. This type is used to configure client errors
            produced by consumers of .
            

    */
open class ClientErrorData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ClientErrorData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ClientErrorData.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ClientErrorData_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Link()
// docid: M:Microsoft.AspNetCore.Mvc.ClientErrorData.get_Link
    open func get_Link() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ClientErrorData_String__get_Link_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Link(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ClientErrorData.set_Link(System.String)
    open func set_Link(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ClientErrorData_void__set_Link_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Title()
// docid: M:Microsoft.AspNetCore.Mvc.ClientErrorData.get_Title
    open func get_Title() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ClientErrorData_String__get_Title_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Title(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ClientErrorData.set_Title(System.String)
    open func set_Title(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ClientErrorData_void__set_Title_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a link (URI) that describes the client error.
            

    */
    open var Link : Optional<dotnet.System.String> {
        get {
            return try! get_Link();
        }
        set(v) {
            return try! set_Link(value: v!);
        }
    }
    /**
    
            Gets or sets the summary of the client error.
            

    */
    open var Title : Optional<dotnet.System.String> {
        get {
            return try! get_Title();
        }
        set(v) {
            return try! set_Title(value: v!);
        }
    }
} // ClientErrorData


// type: Microsoft.AspNetCore.Mvc.CompatibilityVersion
    /**
    
             Specifies the version compatibility of runtime behaviors configured by .
             

    */
public struct CompatibilityVersion : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.CompatibilityVersion Version_2_0
    /**
    
            Sets the default value of settings on  to match the behavior of
            ASP.NET Core MVC 2.0.
            

    */
    public static var Version_2_0 : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_Version_2_0());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.CompatibilityVersion Version_2_1
    /**
    
            Sets the default value of settings on  to match the behavior of
            ASP.NET Core MVC 2.1.
            

    */
    public static var Version_2_1 : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_Version_2_1());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.CompatibilityVersion Version_2_2
    /**
    
            Sets the default value of settings on  to match the behavior of
            ASP.NET Core MVC 2.2.
            

    */
    public static var Version_2_2 : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_Version_2_2());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.CompatibilityVersion Version_3_0
    /**
    
            Sets the default value of settings on  and other Options types to match
            the behavior of ASP.NET Core MVC 3.0.
            

    */
    public static var Version_3_0 : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_Version_3_0());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.CompatibilityVersion Latest
    /**
    
            Sets the default value of settings on  to match the latest release. Use this
            value with care, upgrading minor versions will cause breaking changes when using .
            

    */
    public static var Latest : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: Microsoft_AspNetCore_Mvc_CompatibilityVersion_get_Latest());
            return __return;
        }
    }
} // CompatibilityVersion


// type: Microsoft.AspNetCore.Mvc.ConflictObjectResult
    /**
    
            An  that when executed will produce a Conflict (409) response.
            

    */
open class ConflictObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ConflictObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ConflictObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance.
            

    - Parameter error: Contains the errors to be returned to the client.
    */
    public init(error : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ConflictObjectResult_ctor_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ConflictObjectResult.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a new  instance.
            

    - Parameter modelState:  containing the validation errors.
    */
    public init(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ConflictObjectResult_ctor_0__1__ModelStateDictionary(&__thrown, modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ConflictObjectResult


// type: Microsoft.AspNetCore.Mvc.ConflictResult
    /**
    
            A  that when executed will produce a Conflict (409) response.
            

    */
open class ConflictResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ConflictResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ConflictResult.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ConflictResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ConflictResult


// type: Microsoft.AspNetCore.Mvc.ConsumesAttribute
    /**
    
            A filter that specifies the supported request content types.  is used to select an
            action when there would otherwise be multiple matches.
            

    */
open class ConsumesAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IResourceFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestMetadataProvider,
    Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ConsumesAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 ConsumesActionConstraintOrder
    /**
    
            The order for consumes attribute.
            

    */
    open class var ConsumesActionConstraintOrder : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_ConsumesAttribute_get_ConsumesActionConstraintOrder();
            return __return;
        }
    }
    // .ctor(System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.#ctor(System.String,System.String[])
    /**
    
            Creates a new instance of .
            The request content type.
            The additional list of allowed request content types.
            

    */
    public init(contentType : dotnet.System.String, otherContentTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ConsumesAttribute_ctor_0__2__String_StringArray(&__thrown, contentType.get_handle(), otherContentTypes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.#ctor(System.Type,System.String,System.String[])
    /**
    
            Creates a new instance of .
            The type being read from the request.
            The request content type.
            The additional list of allowed request content types.
            

    */
    public init(requestType : dotnet.System.Type_, contentType : dotnet.System.String, otherContentTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ConsumesAttribute_ctor_0__3__Type_String_StringArray(&__thrown, requestType.get_handle(), contentType.get_handle(), otherContentTypes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
    /**
    */
    open /* method final */ func OnResourceExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ConsumesAttribute_void__OnResourceExecuting_0__1__ResourceExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
    /**
    */
    open /* method final */ func OnResourceExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ConsumesAttribute_void__OnResourceExecuted_0__1__ResourceExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
    /**
    */
    open /* method final */ func Accept(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ConsumesAttribute_bool__Accept_0__1__ActionConstraintContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    */
    open /* method final */ func SetContentTypes(contentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ConsumesAttribute_void__SetContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), contentTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection get_ContentTypes()
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.get_ContentTypes
    open func get_ContentTypes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ConsumesAttribute_MediaTypeCollection__get_ContentTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    open func set_ContentTypes(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ConsumesAttribute_void__set_ContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.get_IsOptional
    open /* method final */ func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ConsumesAttribute_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsOptional(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ConsumesAttribute.set_IsOptional(System.Boolean)
    open func set_IsOptional(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ConsumesAttribute_void__set_IsOptional_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the supported request content types. Used to select an action when there would otherwise be
            multiple matches.
            

    */
    open var ContentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        get {
            return try! get_ContentTypes();
        }
        set(v) {
            return try! set_ContentTypes(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the request body is optional.
            This value is only used to specify if the request body is required in API explorer.
            

    */
    public var IsOptional : Bool {
        get {
            return try! get_IsOptional();
        }
        set(v) {
            return try! set_IsOptional(value: v);
        }
    }
} // ConsumesAttribute


// type: Microsoft.AspNetCore.Mvc.ContentResult
    /**
    
            A  that when executed will produce a response with content.
            

    */
open class ContentResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ContentResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ContentResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ContentResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_Content()
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.get_Content
    open func get_Content() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ContentResult_String__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.set_Content(System.String)
    open func set_Content(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ContentResult_void__set_Content_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ContentResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ContentResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ContentResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ContentResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ContentResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or set the content representing the body of the response.
            

    */
    open var Content : Optional<dotnet.System.String> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Type header for the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
} // ContentResult


// type: Microsoft.AspNetCore.Mvc.ControllerAttribute
    /**
    
            Indicates that the type and any derived types that this attribute is applied to
            are considered a controller by the default controller discovery mechanism, unless
             is applied to any type in the hierarchy.
            

    */
open class ControllerAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ControllerAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ControllerAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ControllerAttribute


// type: Microsoft.AspNetCore.Mvc.ControllerBase
    /**
    
            A base class for an MVC controller without view support.
            

    */
open class ControllerBase
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ControllerBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.StatusCodeResult StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter statusCode: The status code to set on the response.
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_StatusCodeResult__StatusCode_0__1__i32(&__thrown, self.get_handle(), statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ObjectResult StatusCode(System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(System.Int32,System.Object)
    /**
    
            Creates a  object by specifying a  and 
            

    - Parameter statusCode: The status code to set on the response.
    - Parameter value: The value to set on the .
    - Returns: The created  object for the response.

    */
    open func StatusCode(statusCode : Swift.Int32, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ObjectResult__StatusCode_0__2__i32_Object(&__thrown, self.get_handle(), statusCode, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String)
    /**
    
            Creates a  object by specifying a  string.
            

    - Parameter content: The content to write to the response.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ContentResult__Content_0__1__String(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String,System.String)
    /**
    
            Creates a  object by specifying a
             string and a content type.
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ContentResult__Content_0__2__String_String(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String,System.String,System.Text.Encoding)
    /**
    
            Creates a  object by specifying a
             string, a , and .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Parameter contentEncoding: The content encoding.
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : dotnet.System.String, contentEncoding : dotnet.System.Text.Encoding) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ContentResult__Content_0__3__String_String_Encoding(&__thrown, self.get_handle(), content.get_handle(), contentType.get_handle(), contentEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ContentResult Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Content(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a  object by specifying a
             string and a .
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    open func Content(content : dotnet.System.String, contentType : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ContentResult__Content_0__2__String_MediaTypeHeaderValue(&__thrown, self.get_handle(), content.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NoContentResult NoContent()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.NoContent
    /**
    
            Creates a  object that produces an empty
             response.
            

    - Returns: The created  object for the response.

    */
    open func NoContent() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NoContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_NoContentResult__NoContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NoContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.OkResult Ok()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Ok
    /**
    
            Creates a  object that produces an empty  response.
            

    - Returns: The created  for the response.

    */
    open func Ok() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.OkResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_OkResult__Ok_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.OkResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.OkObjectResult Ok(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Ok(System.Object)
    /**
    
            Creates an  object that produces an  response.
            

    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func Ok(value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.OkObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_OkObjectResult__Ok_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.OkObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult Redirect(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(System.String)
    /**
    
            Creates a  object that redirects ()
            to the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func Redirect(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectResult__Redirect_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to true
            () using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanent(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectResult__RedirectPermanent_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to false
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectResult__RedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectResult RedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to true
            and  set to true ()
            using the specified .
            

    - Parameter url: The URL to redirect to.
    - Returns: The created  for the response.

    */
    open func RedirectPermanentPreserveMethod(url : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectResult__RedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), url.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirect(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(System.String)
    /**
    
            Creates a  object that redirects
            () to the specified local .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirect(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_LocalRedirectResult__LocalRedirect_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(System.String)
    /**
    
            Creates a  object with  set to
            true () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanent(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_LocalRedirectResult__LocalRedirectPermanent_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            false and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_LocalRedirectResult__LocalRedirectPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.LocalRedirectResult LocalRedirectPermanentPreserveMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(System.String)
    /**
    
            Creates a  object with  set to
            true and  set to true
            () using the specified .
            

    - Parameter localUrl: The local URL to redirect to.
    - Returns: The created  for the response.

    */
    open func LocalRedirectPermanentPreserveMethod(localUrl : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_LocalRedirectResult__LocalRedirectPermanentPreserveMethod_0__1__String(&__thrown, self.get_handle(), localUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction
    /**
    
             Redirects () to an action with the same name as current one.
             The 'controller' and 'action' names are retrieved from the ambient values of the current request.
             

    - Returns: The created  for the response.

    */
    open func RedirectToAction() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String)
    /**
    
            Redirects () to the specified action using the .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String,System.Object)
    /**
    
            Redirects () to the specified action using the
             and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String,System.String)
    /**
    
            Redirects () to the specified action using the
             and the .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action using the specified
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToAction(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToAction_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to false and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified .
            

    - Parameter actionName: The name of the action.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified 
            and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true using the specified ,
            , , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanent(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToActionResult RedirectToActionPermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified action with
             set to true and 
            set to true, using the specified , ,
            , and .
            

    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToActionPermanentPreserveMethod(actionName : Optional<dotnet.System.String> = nil, controllerName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToActionResult__RedirectToActionPermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoute_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.Object)
    /**
    
            Redirects () to the specified route using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoute_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String,System.Object)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoute_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String,System.String)
    /**
    
            Redirects () to the specified route using the specified
             and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoute_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoute(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route using the specified
            , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoute_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeName: The name of the route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanent_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified .
            

    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanent_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified 
            and .
            

    - Parameter routeName: The name of the route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanent_0__2__String_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanent(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true using the specified ,
            , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanent(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanent_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToRoutePermanentPreserveMethod(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToRouteResult__RedirectToRoutePermanentPreserveMethod_0__3__String_Object_String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__1__String(&__thrown, self.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__2__String_Object(&__thrown, self.get_handle(), pageName.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__2__String_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String,System.String,System.Object)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__3__String_String_Object(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__3__String_String_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPage(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The .

    */
    open func RedirectToPage(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPage_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String)
    /**
    
            Redirects () to the specified .
            

    - Parameter pageName: The name of the page.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanent_0__1__String(&__thrown, self.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String,System.Object)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter routeValues: The parameters for a route.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : dotnet.System.String, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanent_0__2__String_Object(&__thrown, self.get_handle(), pageName.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanent_0__2__String_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String,System.String,System.String)
    /**
    
            Redirects () to the specified 
            using the specified .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanent_0__3__String_String_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanent(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified 
            using the specified  and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for a route.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The  with  set.

    */
    open func RedirectToPagePermanent(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanent_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified page with
             set to false and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePreserveMethod(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.RedirectToPageResult RedirectToPagePermanentPreserveMethod(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(System.String,System.String,System.Object,System.String)
    /**
    
            Redirects () to the specified route with
             set to true and 
            set to true, using the specified , , and .
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    open func RedirectToPagePermanentPreserveMethod(pageName : dotnet.System.String, pageHandler : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToPageResult__RedirectToPagePermanentPreserveMethod_0__4__String_String_Object_String(&__thrown, self.get_handle(), pageName.get_handle(), pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String)
    /**
    
            Returns a file with the specified  as content (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__2__u8Array_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.Boolean)
    /**
    
            Returns a file with the specified  as content (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__3__u8Array_String_bool(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.String)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__3__u8Array_String_String(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.String,System.Boolean)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__4__u8Array_String_String_bool(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns a file with the specified  as content (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__4__u8Array_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns a file with the specified  as content (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__5__u8Array_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__5__u8Array_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileContentResult File(System.Byte[], System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.Byte[],System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns a file with the specified  as content (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileContentResult__File_0__6__u8Array_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), fileContents.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String)
    /**
    
            Returns a file in the specified  (), with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__2__Stream_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.Boolean)
    /**
    
            Returns a file in the specified  (), with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__3__Stream_String_bool(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.String)
    /**
    
            Returns a file in the specified  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__3__Stream_String_String(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.String,System.Boolean)
    /**
    
            Returns a file in the specified  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__4__Stream_String_String_bool(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns a file in the specified  (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__4__Stream_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns a file in the specified  (),
            and the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__5__Stream_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns a file in the specified  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__5__Stream_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.FileStreamResult File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns a file in the specified  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_FileStreamResult__File_0__6__Stream_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), fileStream.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__2__String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.Boolean)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__3__String_String_bool(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__3__String_String_String(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.String,System.Boolean)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__4__String_String_String_bool(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns the file specified by  (), and the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__4__String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns the file specified by  (), and the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__5__String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns the file specified by  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__5__String_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.VirtualFileResult File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.File(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns the file specified by  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter virtualPath: The virtual path of the file to be returned.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func File(virtualPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_VirtualFileResult__File_0__6__String_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), virtualPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__2__String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.Boolean)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__3__String_String_bool(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.String)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__3__String_String_String(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.String,System.Boolean)
    /**
    
            Returns the file specified by  () with the
            specified  as the Content-Type and the
            specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__4__String_String_String_bool(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns the file specified by  (), and
            the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__4__String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns the file specified by  (), and
            the specified  as the Content-Type.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__5__String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Returns the file specified by  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__5__String_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PhysicalFileResult PhysicalFile(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Returns the file specified by  (), the
            specified  as the Content-Type, and the specified  as the suggested file name.
            This supports range requests ( or
             if the range is not satisfiable).
            

    - Parameter physicalPath: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    open func PhysicalFile(physicalPath : dotnet.System.String, contentType : dotnet.System.String, fileDownloadName : Optional<dotnet.System.String>, lastModified : Optional<dotnet.System.DateTimeOffset>, entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue, enableRangeProcessing : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_PhysicalFileResult__PhysicalFile_0__6__String_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), physicalPath.get_handle(), contentType.get_handle(), fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag.get_handle(), Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnauthorizedResult Unauthorized()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized
    /**
    
            Creates an  that produces an  response.
            

    - Returns: The created  for the response.

    */
    open func Unauthorized() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_UnauthorizedResult__Unauthorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult Unauthorized(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func Unauthorized(value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_UnauthorizedObjectResult__Unauthorized_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundResult NotFound()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.NotFound
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_NotFoundResult__NotFound_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.NotFoundObjectResult NotFound(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func NotFound(value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_NotFoundObjectResult__NotFound_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.NotFoundObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestResult BadRequest()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func BadRequest() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_BadRequestResult__BadRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter error: An error object to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(error : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_BadRequestObjectResult__BadRequest_0__1__Object(&__thrown, self.get_handle(), error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.BadRequestObjectResult BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter modelState: The  containing errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func BadRequest(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_BadRequestObjectResult__BadRequest_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelState.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.BadRequestObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnprocessableEntityResult UnprocessableEntity()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func UnprocessableEntity() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_UnprocessableEntityResult__UnprocessableEntity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult UnprocessableEntity(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter error: An error object to be returned to the client.
    - Returns: The created  for the response.

    */
    open func UnprocessableEntity(error : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_UnprocessableEntityObjectResult__UnprocessableEntity_0__1__Object(&__thrown, self.get_handle(), error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter modelState: The  containing errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func UnprocessableEntity(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_UnprocessableEntityObjectResult__UnprocessableEntity_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelState.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ConflictResult Conflict()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Conflict
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func Conflict() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ConflictResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ConflictResult__Conflict_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ConflictResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ConflictObjectResult Conflict(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(System.Object)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter error: Contains errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func Conflict(error : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ConflictObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ConflictObjectResult__Conflict_0__1__Object(&__thrown, self.get_handle(), error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ConflictObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ConflictObjectResult Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter modelState: The  containing errors to be returned to the client.
    - Returns: The created  for the response.

    */
    open func Conflict(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ConflictObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ConflictObjectResult__Conflict_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelState.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ConflictObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ObjectResult Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Problem(System.String,System.String,System.Nullable{System.Int32},System.String,System.String)
    /**
    
            Creates an  that produces a  response.
            

    - Parameter statusCode: The value for .
    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Parameter title: The value for .
    - Parameter type: The value for .
    - Returns: The created  for the response.

    */
    open func Problem(detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ObjectResult__Problem_0__5__String_String_System_Nullable_i32__String_String(&__thrown, self.get_handle(), detail?.get_handle() ?? nil, instance?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ActionResult ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails)
    /**
    
            Creates an  that produces a  response.
            

    - Returns: The created  for the response.

    */
    open func ValidationProblem(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.ValidationProblemDetails) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ActionResult__ValidationProblem_0__1__ValidationProblemDetails(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ActionResult ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates an  that produces a  response
            with validation errors from .
            

    - Parameter modelStateDictionary: The .
    - Returns: The created  for the response.

    */
    open func ValidationProblem(modelStateDictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ActionResult__ValidationProblem_0__1__ModelStateDictionary(&__thrown, self.get_handle(), modelStateDictionary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ActionResult ValidationProblem()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem
    /**
    
            Creates an  that produces a  response
            with validation errors from .
            

    - Returns: The created  for the response.

    */
    open func ValidationProblem() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ActionResult__ValidationProblem_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ActionResult ValidationProblem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates an  that produces a  response
            with a  value.
            

    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Parameter statusCode: The status code.
    - Parameter title: The value for .
    - Parameter type: The value for .
    - Parameter modelStateDictionary: The .
            When  uses .
    - Returns: The created  for the response.

    */
    open func ValidationProblem(detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil, modelStateDictionary : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ActionResult__ValidationProblem_0__6__String_String_System_Nullable_i32__String_String_ModelStateDictionary(&__thrown, self.get_handle(), detail?.get_handle() ?? nil, instance?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil, modelStateDictionary?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedResult Created(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.String,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter uri: The URI at which the content has been created.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func Created(uri : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedResult__Created_0__2__String_Object(&__thrown, self.get_handle(), uri.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedResult Created(System.Uri, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter uri: The URI at which the content has been created.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func Created(uri : dotnet.System.Uri, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedResult__Created_0__2__Uri_Object(&__thrown, self.get_handle(), uri.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtActionResult CreatedAtAction(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtAction(actionName : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtActionResult__CreatedAtAction_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtActionResult CreatedAtAction(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtAction(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtActionResult__CreatedAtAction_0__3__String_Object_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtActionResult CreatedAtAction(System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(System.String,System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtActionResult__CreatedAtAction_0__4__String_String_Object_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtRouteResult CreatedAtRoute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtRoute(routeName : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtRouteResult__CreatedAtRoute_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtRouteResult CreatedAtRoute(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.Object,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtRoute(routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtRouteResult__CreatedAtRoute_0__2__Object_Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.CreatedAtRouteResult CreatedAtRoute(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces a  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The content value to format in the entity body.
    - Returns: The created  for the response.

    */
    open func CreatedAtRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_CreatedAtRouteResult__CreatedAtRoute_0__3__String_Object_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CreatedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted
    /**
    
            Creates a  object that produces an  response.
            

    - Returns: The created  for the response.

    */
    open func Accepted() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func Accepted(value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted(System.Uri)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter uri: The optional URI with the location at which the status of requested content can be monitored.
            May be null.
    - Returns: The created  for the response.

    */
    open func Accepted(uri : dotnet.System.Uri) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__1__Uri(&__thrown, self.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter uri: The optional URI with the location at which the status of requested content can be monitored.
            May be null.
    - Returns: The created  for the response.

    */
    open func Accepted(uri : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__1__String(&__thrown, self.get_handle(), uri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.String,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter uri: The URI with the location at which the status of requested content can be monitored.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func Accepted(uri : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__2__String_Object(&__thrown, self.get_handle(), uri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedResult Accepted(System.Uri, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter uri: The URI with the location at which the status of requested content can be monitored.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func Accepted(uri : dotnet.System.Uri, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedResult__Accepted_0__2__Uri_Object(&__thrown, self.get_handle(), uri.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__1__String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String,System.String)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__2__String_String(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__2__String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String,System.String,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__3__String_String_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__3__String_Object_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtActionResult AcceptedAtAction(System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(System.String,System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func AcceptedAtAction(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtActionResult__AcceptedAtAction_0__4__String_String_Object_Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtActionResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult AcceptedAtRoute(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter routeValues: The route data to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtRoute(routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtRouteResult__AcceptedAtRoute_0__1__Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult AcceptedAtRoute(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtRoute(routeName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtRouteResult__AcceptedAtRoute_0__1__String(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult AcceptedAtRoute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String,System.Object)
    /**
    
             Creates a  object that produces an  response.
             

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Returns: The created  for the response.

    */
    open func AcceptedAtRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtRouteResult__AcceptedAtRoute_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult AcceptedAtRoute(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.Object,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func AcceptedAtRoute(routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtRouteResult__AcceptedAtRoute_0__2__Object_Object(&__thrown, self.get_handle(), routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult AcceptedAtRoute(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(System.String,System.Object,System.Object)
    /**
    
            Creates a  object that produces an  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The optional content value to format in the entity body; may be null.
    - Returns: The created  for the response.

    */
    open func AcceptedAtRoute(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_AcceptedAtRouteResult__AcceptedAtRoute_0__3__String_Object_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Challenge
    /**
    
            Creates a .
            

    - Returns: The created  for the response.

    */
    open func Challenge() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ChallengeResult__Challenge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ChallengeResult__Challenge_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  with the specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ChallengeResult__Challenge_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ChallengeResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Challenge(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ChallengeResult__Challenge_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ChallengeResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Forbid
    /**
    
            Creates a  ( by default).
            

    - Returns: The created  for the response.

    */
    open func Forbid() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ForbidResult__Forbid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ForbidResult__Forbid_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  ( by default) with the
            specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ForbidResult__Forbid_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ForbidResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  ( by default) with the
            specified authentication schemes and .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    open func Forbid(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ForbidResult__Forbid_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ForbidResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Creates a .
            

    - Parameter principal: The  containing the user claims.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignInResult__SignIn_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal,System.String)
    /**
    
            Creates a  with the specified authentication scheme.
            

    - Parameter principal: The  containing the user claims.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignInResult__SignIn_0__2__ClaimsPrincipal_String(&__thrown, self.get_handle(), principal.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  with .
            

    - Parameter principal: The  containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignInResult__SignIn_0__2__ClaimsPrincipal_AuthenticationProperties(&__thrown, self.get_handle(), principal.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignInResult SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Creates a  with the specified authentication scheme and
            .
            

    - Parameter principal: The  containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    open func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignInResult__SignIn_0__3__ClaimsPrincipal_AuthenticationProperties_String(&__thrown, self.get_handle(), principal.get_handle(), properties.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignInResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignOut
    /**
    
            Creates a .
            

    - Returns: The created  for the response.

    */
    open func SignOut() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignOutResult__SignOut_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Creates a  with .
            

    - Parameter properties:  used to perform the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignOutResult__SignOut_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(System.String[])
    /**
    
            Creates a  with the specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignOutResult__SignOut_0__1__StringArray(&__thrown, self.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.SignOutResult SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String[])
    /**
    
            Creates a  with the specified authentication schemes and
            .
            

    - Parameter properties:  used to perform the sign-out operation.
    - Parameter authenticationSchemes: The authentication scheme to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    open func SignOut(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, authenticationSchemes : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_SignOutResult__SignOut_0__2__AuthenticationProperties_StringArray(&__thrown, self.get_handle(), properties.get_handle(), authenticationSchemes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.SignOutResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0)
    /**
    
            Updates the specified  instance using values from the controller's current
            .
            

    - Parameter model: The model instance to update.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__1__UTModel(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String)
    /**
    
            Updates the specified  instance using values from the controller's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__2__UTModel_String(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_IValueProvider(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String,System.Linq.Expressions.Expression`1[])
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, includeExpressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__Array(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), includeExpressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using values from the controller's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__3__UTModel_String_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, propertyFilter : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool) async throws -> Bool {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try await TryUpdateModelAsync(model: model, prefix: prefix, propertyFilter: del_propertyFilter);
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>[])
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Linq.Expressions.Expression`1[])
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, includeExpressions : dotnet.System_Arr<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__4__UTModel_String_IValueProvider_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__Array(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle(), includeExpressions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync<TModel>(TModel, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_1__4__UTModel_String_IValueProvider_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval(), prefix.get_handle(), valueProvider.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync<UTModel : SGBridgeGenericValue>(model : UTModel, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool) async throws -> Bool {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try await TryUpdateModelAsync(model: model, prefix: prefix, valueProvider: valueProvider, propertyFilter: del_propertyFilter);
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync(System.Object, System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object,System.Type,System.String)
    /**
    
            Updates the specified  instance using values from the controller's current
             and a .
            

    - Parameter model: The model instance to update.
    - Parameter modelType: The type of model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the current .
            
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_0__3__Object_Type_String(&__thrown, self.get_handle(), model.get_handle(), modelType.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<bool> TryUpdateModelAsync(System.Object, System.Type, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(System.Object,System.Type,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    /**
    
            Updates the specified  instance using the  and a
            .
            

    - Parameter model: The model instance to update.
    - Parameter modelType: The type of model instance to update.
    - Parameter prefix: The prefix to use when looking up values in the .
            
    - Parameter valueProvider: The  used for looking up values.
    - Parameter propertyFilter: A predicate which can be used to filter properties at runtime.
    - Returns: A  that on completion returns true if the update is successful.

    */
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_System_Threading_Tasks_Task_bool___TryUpdateModelAsync_0__5__Object_Type_String_IValueProvider_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(&__thrown, self.get_handle(), model.get_handle(), modelType.get_handle(), prefix.get_handle(), valueProvider.get_handle(), propertyFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func TryUpdateModelAsync(model : dotnet.System.Object, modelType : dotnet.System.Type_, prefix : dotnet.System.String, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, propertyFilter : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool) async throws -> Bool {
        let del_propertyFilter = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(propertyFilter);
        return try await TryUpdateModelAsync(model: model, modelType: modelType, prefix: prefix, valueProvider: valueProvider, propertyFilter: del_propertyFilter);
    }
    // bool TryValidateModel(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Returns: true if the  is valid; false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_bool__TryValidateModel_0__1__Object(&__thrown, self.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryValidateModel(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(System.Object,System.String)
    /**
    
            Validates the specified  instance.
            

    - Parameter model: The model to validate.
    - Parameter prefix: The key to use when looking up information in .
            
    - Returns: true if the  is valid;false otherwise.

    */
    open func TryValidateModel(model : dotnet.System.Object, prefix : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_bool__TryValidateModel_0__2__Object_String(&__thrown, self.get_handle(), model.get_handle(), prefix?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_Response
    open func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_HttpResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ControllerContext get_ControllerContext()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_ControllerContext
    open func get_ControllerContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ControllerContext__get_ControllerContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ControllerContext(Microsoft.AspNetCore.Mvc.ControllerContext)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_ControllerContext(Microsoft.AspNetCore.Mvc.ControllerContext)
    open func set_ControllerContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_ControllerContext_0__1__ControllerContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_MetadataProvider
    open func get_MetadataProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_MetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    open func set_MetadataProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_MetadataProvider_0__1__IModelMetadataProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory get_ModelBinderFactory()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_ModelBinderFactory
    open func get_ModelBinderFactory() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_IModelBinderFactory__get_ModelBinderFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelBinderFactory(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_ModelBinderFactory(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory)
    open func set_ModelBinderFactory(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_ModelBinderFactory_0__1__IModelBinderFactory(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_Url()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_Url
    open func get_Url() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_IUrlHelper__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_Url(value : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_Url_0__1__IUrlHelper(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator get_ObjectValidator()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_ObjectValidator
    open func get_ObjectValidator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_IObjectModelValidator__get_ObjectValidator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ObjectValidator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_ObjectValidator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator)
    open func set_ObjectValidator(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_ObjectValidator_0__1__IObjectModelValidator(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory get_ProblemDetailsFactory()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_ProblemDetailsFactory
    open func get_ProblemDetailsFactory() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ProblemDetailsFactory__get_ProblemDetailsFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProblemDetailsFactory(Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.set_ProblemDetailsFactory(Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)
    open func set_ProblemDetailsFactory(value : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerBase_void__set_ProblemDetailsFactory_0__1__ProblemDetailsFactory(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerBase.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerBase_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ControllerContext : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext {
        get {
            return try! get_ControllerContext();
        }
        set(v) {
            return try! set_ControllerContext(value: v);
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var MetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        get {
            return try! get_MetadataProvider();
        }
        set(v) {
            return try! set_MetadataProvider(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ModelBinderFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory {
        get {
            return try! get_ModelBinderFactory();
        }
        set(v) {
            return try! set_ModelBinderFactory(value: v);
        }
    }
    /**
    
            Gets the  that contains the state of the model and of model-binding validation.
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ObjectValidator : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator {
        get {
            return try! get_ObjectValidator();
        }
        set(v) {
            return try! set_ObjectValidator(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ProblemDetailsFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory {
        get {
            return try! get_ProblemDetailsFactory();
        }
        set(v) {
            return try! set_ProblemDetailsFactory(value: v);
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            Gets the  for the executing action.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Url : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        get {
            return try! get_Url();
        }
        set(v) {
            return try! set_Url(value: v);
        }
    }
    /**
    
            Gets the  for user associated with the executing action.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
} // ControllerBase


// type: Microsoft.AspNetCore.Mvc.ControllerContext
    /**
    
            The context associated with the current request for a controller.
            

    */
open class ControllerContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ControllerContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ControllerContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Creates a new .
            

    - Parameter context: The  associated with the current request.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ControllerContext_ctor_0__1__ActionContext(&__thrown, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.get_ActionDescriptor
    open override func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerContext_ControllerActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    open func set_ActionDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerContext_void__set_ActionDescriptor_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> get_ValueProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.get_ValueProviderFactories
    open func get_ValueProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ControllerContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory___get_ValueProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueProviderFactories(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContext.set_ValueProviderFactories(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})
    open func set_ValueProviderFactories(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ControllerContext_void__set_ValueProviderFactories_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_mutable_with_subclass ) [IsSpecialName] Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor get_ActionDescriptor()
    /**
    
            Gets or sets the list of  instances for the current request.
            

    */
    open var ValueProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        get {
            return try! get_ValueProviderFactories();
        }
        set(v) {
            return try! set_ValueProviderFactories(value: v);
        }
    }
} // ControllerContext


// type: Microsoft.AspNetCore.Mvc.ControllerContextAttribute
    /**
    
            Specifies that a controller property should be set with the current
             when creating the controller. The property must have a public
            set method.
            

    */
open class ControllerContextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ControllerContextAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ControllerContextAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ControllerContextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ControllerContextAttribute


// type: Microsoft.AspNetCore.Mvc.CreatedAtActionResult
    /**
    
            An  that returns a Created (201) response with a Location header.
            

    */
open class CreatedAtActionResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CreatedAtActionResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.#ctor(System.String,System.String,System.Object,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CreatedAtActionResult_ctor_0__4__String_String_Object_Object(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtActionResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtActionResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtActionResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ActionName()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.get_ActionName
    open func get_ActionName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtActionResult_String__get_ActionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.set_ActionName(System.String)
    open func set_ActionName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtActionResult_void__set_ActionName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.get_ControllerName
    open func get_ControllerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtActionResult_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ControllerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.set_ControllerName(System.String)
    open func set_ControllerName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtActionResult_void__set_ControllerName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtActionResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtActionResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtActionResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the action to use for generating the URL.
            

    */
    open var ActionName : Optional<dotnet.System.String> {
        get {
            return try! get_ActionName();
        }
        set(v) {
            return try! set_ActionName(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the controller to use for generating the URL.
            

    */
    open var ControllerName : Optional<dotnet.System.String> {
        get {
            return try! get_ControllerName();
        }
        set(v) {
            return try! set_ControllerName(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // CreatedAtActionResult


// type: Microsoft.AspNetCore.Mvc.CreatedAtRouteResult
    /**
    
            An  that returns a Created (201) response with a Location header.
            

    */
open class CreatedAtRouteResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.#ctor(System.Object,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_ctor_0__2__Object_Object(&__thrown, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.#ctor(System.String,System.Object,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to format in the entity body.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_ctor_0__3__String_Object_Object(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedAtRouteResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the route to use for generating the URL.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // CreatedAtRouteResult


// type: Microsoft.AspNetCore.Mvc.CreatedResult
    /**
    
            An  that returns a Created (201) response with a Location header.
            

    */
open class CreatedResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CreatedResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedResult.#ctor(System.String,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter location: The location at which the content has been created.
    - Parameter value: The value to format in the entity body.
    */
    public init(location : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CreatedResult_ctor_0__2__String_Object(&__thrown, location.get_handle(), value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Uri, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedResult.#ctor(System.Uri,System.Object)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter location: The location at which the content has been created.
    - Parameter value: The value to format in the entity body.
    */
    public init(location : dotnet.System.Uri, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CreatedResult_ctor_0__2__Uri_Object(&__thrown, location.get_handle(), value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Location()
// docid: M:Microsoft.AspNetCore.Mvc.CreatedResult.get_Location
    open func get_Location() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CreatedResult_String__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Location(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.CreatedResult.set_Location(System.String)
    open func set_Location(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CreatedResult_void__set_Location_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the location at which the content has been created.
            

    */
    open var Location : dotnet.System.String {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v);
        }
    }
} // CreatedResult


// type: Microsoft.AspNetCore.Mvc.DefaultApiConventions
public struct DefaultApiConventions {
    // void Get(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Get(System.Object)
    /**
    
            Get convention.
            

    - Parameter id: 
    */
    public static func Get(id : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Get_0__1__Object(&__thrown, id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Find(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Find(System.Object)
    /**
    
            Find convention.
            

    - Parameter id: 
    */
    public static func Find(id : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Find_0__1__Object(&__thrown, id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Post(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Post(System.Object)
    /**
    
            Post convention.
            

    - Parameter model: 
    */
    public static func Post(model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Post_0__1__Object(&__thrown, model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Create(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Create(System.Object)
    /**
    
            Create convention.
            

    - Parameter model: 
    */
    public static func Create(model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Create_0__1__Object(&__thrown, model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Put(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Put(System.Object,System.Object)
    /**
    
            Put convention.
            

    - Parameter id: 
    - Parameter model: 
    */
    public static func Put(id : dotnet.System.Object, model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Put_0__2__Object_Object(&__thrown, id.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Edit(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Edit(System.Object,System.Object)
    /**
    
            Edit convention.
            

    - Parameter id: 
    - Parameter model: 
    */
    public static func Edit(id : dotnet.System.Object, model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Edit_0__2__Object_Object(&__thrown, id.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Update(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Update(System.Object,System.Object)
    /**
    
            Update convention.
            

    - Parameter id: 
    - Parameter model: 
    */
    public static func Update(id : dotnet.System.Object, model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Update_0__2__Object_Object(&__thrown, id.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.DefaultApiConventions.Delete(System.Object)
    /**
    
            Delete convention.
            

    - Parameter id: 
    */
    public static func Delete(id : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DefaultApiConventions_void__Delete_0__1__Object(&__thrown, id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DefaultApiConventions


// type: Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute
    /**
    
            Disables the request body size limit.
            

    */
open class DisableRequestSizeLimitAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_DisableRequestSizeLimitAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // DisableRequestSizeLimitAttribute


// type: Microsoft.AspNetCore.Mvc.EmptyResult
    /**
    
            Represents an  that when executed will
            do nothing.
            

    */
open class EmptyResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_EmptyResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.EmptyResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_EmptyResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.EmptyResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_EmptyResult_void__ExecuteResult_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EmptyResult


// type: Microsoft.AspNetCore.Mvc.FileContentResult
    /**
    
            Represents an  that when executed will
            write a binary file to the response.
            

    */
open class FileContentResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.FileResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FileContentResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Byte[], System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FileContentResult.#ctor(System.Byte[],System.String)
    /**
    
            Creates a new  instance with
            the provided  and the
            provided .
            

    - Parameter fileContents: The bytes that represent the file contents.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FileContentResult_ctor_0__2__u8Array_String(&__thrown, fileContents.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[], Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.FileContentResult.#ctor(System.Byte[],Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a new  instance with
            the provided  and the
            provided .
            

    - Parameter fileContents: The bytes that represent the file contents.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FileContentResult_ctor_0__2__u8Array_MediaTypeHeaderValue(&__thrown, fileContents.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.FileContentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileContentResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Byte[] get_FileContents()
// docid: M:Microsoft.AspNetCore.Mvc.FileContentResult.get_FileContents
    open func get_FileContents() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileContentResult_u8Array__get_FileContents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileContents(System.Byte[])
// docid: M:Microsoft.AspNetCore.Mvc.FileContentResult.set_FileContents(System.Byte[])
    open func set_FileContents(value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileContentResult_void__set_FileContents_0__1__u8Array(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the file contents.
            

    */
    open var FileContents : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_FileContents();
        }
        set(v) {
            return try! set_FileContents(value: v);
        }
    }
} // FileContentResult


// type: Microsoft.AspNetCore.Mvc.FileResult
    /**
    
            Represents an  that when executed will
            write a file as the response.
            

    */
open class FileResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FileResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.get_ContentType
    open func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FileDownloadName()
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.get_FileDownloadName
    open func get_FileDownloadName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileResult_String__get_FileDownloadName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileDownloadName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.set_FileDownloadName(System.String)
    open func set_FileDownloadName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileResult_void__set_FileDownloadName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_LastModified()
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.get_LastModified
    open func get_LastModified() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileResult_System_Nullable_System_DateTimeOffset___get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_LastModified(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.set_LastModified(System.Nullable{System.DateTimeOffset})
    open func set_LastModified(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileResult_void__set_LastModified_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.EntityTagHeaderValue get_EntityTag()
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.get_EntityTag
    open func get_EntityTag() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileResult_EntityTagHeaderValue__get_EntityTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EntityTag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.set_EntityTag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    open func set_EntityTag(value : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileResult_void__set_EntityTag_0__1__EntityTagHeaderValue(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableRangeProcessing()
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.get_EnableRangeProcessing
    open func get_EnableRangeProcessing() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileResult_bool__get_EnableRangeProcessing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableRangeProcessing(bool)
// docid: M:Microsoft.AspNetCore.Mvc.FileResult.set_EnableRangeProcessing(System.Boolean)
    open func set_EnableRangeProcessing(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileResult_void__set_EnableRangeProcessing_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the Content-Type header for the response.
            

    */
    open var ContentType : dotnet.System.String {
        get {
            return try! get_ContentType();
        }
    }
    /**
    
            Gets or sets the value that enables range processing for the .
            

    */
    open var EnableRangeProcessing : Bool {
        get {
            return try! get_EnableRangeProcessing();
        }
        set(v) {
            return try! set_EnableRangeProcessing(value: v);
        }
    }
    /**
    
            Gets or sets the etag associated with the .
            

    */
    open var EntityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_EntityTag();
        }
        set(v) {
            return try! set_EntityTag(value: v!);
        }
    }
    /**
    
            Gets the file name that will be used in the Content-Disposition header of the response.
            

    */
    open var FileDownloadName : dotnet.System.String {
        get {
            return try! get_FileDownloadName();
        }
        set(v) {
            return try! set_FileDownloadName(value: v);
        }
    }
    /**
    
            Gets or sets the last modified information associated with the .
            

    */
    open var LastModified : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_LastModified();
        }
        set(v) {
            return try! set_LastModified(value: v!);
        }
    }
} // FileResult


// type: Microsoft.AspNetCore.Mvc.FileStreamResult
    /**
    
            Represents an  that when executed will
            write a file from a stream to the response.
            

    */
open class FileStreamResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.FileResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FileStreamResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)
    /**
    
            Creates a new  instance with
            the provided  and the
            provided .
            

    - Parameter fileStream: The stream with the file.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileStream : dotnet.System.IO.Stream, contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FileStreamResult_ctor_0__2__Stream_String(&__thrown, fileStream.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.FileStreamResult.#ctor(System.IO.Stream,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a new  instance with
            the provided  and the
            provided .
            

    - Parameter fileStream: The stream with the file.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileStream : dotnet.System.IO.Stream, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FileStreamResult_ctor_0__2__Stream_MediaTypeHeaderValue(&__thrown, fileStream.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.FileStreamResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileStreamResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.IO.Stream get_FileStream()
// docid: M:Microsoft.AspNetCore.Mvc.FileStreamResult.get_FileStream
    open func get_FileStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FileStreamResult_Stream__get_FileStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileStream(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Mvc.FileStreamResult.set_FileStream(System.IO.Stream)
    open func set_FileStream(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FileStreamResult_void__set_FileStream_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the stream with the file that will be sent back as the response.
            

    */
    open var FileStream : dotnet.System.IO.Stream {
        get {
            return try! get_FileStream();
        }
        set(v) {
            return try! set_FileStream(value: v);
        }
    }
} // FileStreamResult


// type: Microsoft.AspNetCore.Mvc.ForbidResult
    /**
    
            An  that on execution invokes .
            

    */
open class ForbidResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ForbidResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme.
            

    - Parameter authenticationScheme: The authentication scheme to challenge.
    */
    public init(authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__1__String(&__thrown, authenticationScheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor(System.Collections.Generic.IList{System.String})
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to challenge.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__1__System_Collections_Generic_IList_string_(&__thrown, authenticationSchemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified .
            

    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__1__AuthenticationProperties(&__thrown, properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor(System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme and .
            

    - Parameter authenticationScheme: The authentication schemes to challenge.
    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(authenticationScheme : dotnet.System.String, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__2__String_AuthenticationProperties(&__thrown, authenticationScheme.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.#ctor(System.Collections.Generic.IList{System.String},Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes and .
            

    - Parameter authenticationSchemes: The authentication scheme to challenge.
    - Parameter properties:  used to perform the authentication
            challenge.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ForbidResult_ctor_0__2__System_Collections_Generic_IList_string__AuthenticationProperties(&__thrown, authenticationSchemes.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ForbidResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ForbidResult_System_Collections_Generic_IList_string___get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.set_AuthenticationSchemes(System.Collections.Generic.IList{System.String})
    open func set_AuthenticationSchemes(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ForbidResult_void__set_AuthenticationSchemes_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ForbidResult_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.ForbidResult.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ForbidResult_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the authentication schemes that are challenged.
            

    */
    open var AuthenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v);
        }
    }
    /**
    
            Gets or sets the  used to perform the authentication challenge.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // ForbidResult


// type: Microsoft.AspNetCore.Mvc.FormatFilterAttribute
    /**
    
            A filter that will use the format value in the route data or query string to set the content type on an
             returned from an action.
            

    */
open class FormatFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FormatFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FormatFilterAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FormatFilterAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.FormatFilterAttribute.CreateInstance(System.IServiceProvider)
    /**
    
            Creates an instance of .
            

    - Parameter serviceProvider: The .
    - Returns: An instance of .

    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FormatFilterAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.FormatFilterAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FormatFilterAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
} // FormatFilterAttribute


// type: Microsoft.AspNetCore.Mvc.FromBodyAttribute
    /**
    
            Specifies that a parameter or property should be bound using the request body.
            

    */
open class FromBodyAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Http_Metadata_IFromBodyMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromBodyAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromBodyAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromBodyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromBodyAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromBodyAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior get_EmptyBodyBehavior()
// docid: M:Microsoft.AspNetCore.Mvc.FromBodyAttribute.get_EmptyBodyBehavior
    open /* method final */ func get_EmptyBodyBehavior() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromBodyAttribute_EmptyBodyBehavior__get_EmptyBodyBehavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior(val: __return);
        }
    }
    // [IsSpecialName] void set_EmptyBodyBehavior(Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior)
// docid: M:Microsoft.AspNetCore.Mvc.FromBodyAttribute.set_EmptyBodyBehavior(Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior)
    open func set_EmptyBodyBehavior(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FromBodyAttribute_void__set_EmptyBodyBehavior_0__1__EmptyBodyBehavior(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    
            Gets or sets a value which decides whether body model binding should treat empty
            input as valid.
            

    */
    public var EmptyBodyBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        get {
            return try! get_EmptyBodyBehavior();
        }
        set(v) {
            return try! set_EmptyBodyBehavior(value: v);
        }
    }
} // FromBodyAttribute


// type: Microsoft.AspNetCore.Mvc.FromFormAttribute
    /**
    
            Specifies that a parameter or property should be bound using form-data in the request body.
            

    */
open class FromFormAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromFormAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromFormAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromFormAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromFormAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromFormAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.FromFormAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromFormAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FromFormAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FromFormAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // FromFormAttribute


// type: Microsoft.AspNetCore.Mvc.FromHeaderAttribute
    /**
    
            Specifies that a parameter or property should be bound using the request headers.
            

    */
open class FromHeaderAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Http_Metadata_IFromHeaderMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromHeaderAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromHeaderAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromHeaderAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromHeaderAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromHeaderAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.FromHeaderAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromHeaderAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FromHeaderAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FromHeaderAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // FromHeaderAttribute


// type: Microsoft.AspNetCore.Mvc.FromQueryAttribute
    /**
    
            Specifies that a parameter or property should be bound using the request query string.
            

    */
open class FromQueryAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Http_Metadata_IFromQueryMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromQueryAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromQueryAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromQueryAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromQueryAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromQueryAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.FromQueryAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromQueryAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FromQueryAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FromQueryAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // FromQueryAttribute


// type: Microsoft.AspNetCore.Mvc.FromRouteAttribute
    /**
    
            Specifies that a parameter or property should be bound using route-data from the current request.
            

    */
open class FromRouteAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Http_Metadata_IFromRouteMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromRouteAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromRouteAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromRouteAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromRouteAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromRouteAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.FromRouteAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromRouteAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.FromRouteAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_FromRouteAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    
            The  name.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // FromRouteAttribute


// type: Microsoft.AspNetCore.Mvc.FromServicesAttribute
    /**
    
             Specifies that an action parameter should be bound using the request services.
             

    */
open class FromServicesAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata,
    Microsoft_AspNetCore_Http_Metadata_IFromServiceMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_FromServicesAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.FromServicesAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_FromServicesAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.FromServicesAttribute.get_BindingSource
    open /* method final */ func get_BindingSource() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_FromServicesAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    /**
    */
    public var BindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_BindingSource();
        }
    }
} // FromServicesAttribute


// type: Microsoft.AspNetCore.Mvc.HttpDeleteAttribute
    /**
    
            Identifies an action that supports the HTTP DELETE method.
            

    */
open class HttpDeleteAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpDeleteAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpDeleteAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpDeleteAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpDeleteAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpDeleteAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpDeleteAttribute


// type: Microsoft.AspNetCore.Mvc.HttpGetAttribute
    /**
    
            Identifies an action that supports the HTTP GET method.
            

    */
open class HttpGetAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpGetAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpGetAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpGetAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpGetAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpGetAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpGetAttribute


// type: Microsoft.AspNetCore.Mvc.HttpHeadAttribute
    /**
    
            Identifies an action that supports the HTTP HEAD method.
            

    */
open class HttpHeadAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpHeadAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpHeadAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpHeadAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpHeadAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpHeadAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpHeadAttribute


// type: Microsoft.AspNetCore.Mvc.HttpOptionsAttribute
    /**
    
            Identifies an action that supports the HTTP OPTIONS method.
            

    */
open class HttpOptionsAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpOptionsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpOptionsAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpOptionsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpOptionsAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpOptionsAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpOptionsAttribute


// type: Microsoft.AspNetCore.Mvc.HttpPatchAttribute
    /**
    
            Identifies an action that supports the HTTP PATCH method.
            

    */
open class HttpPatchAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpPatchAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpPatchAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPatchAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpPatchAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPatchAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpPatchAttribute


// type: Microsoft.AspNetCore.Mvc.HttpPostAttribute
    /**
    
            Identifies an action that supports the HTTP POST method.
            

    */
open class HttpPostAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpPostAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpPostAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPostAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpPostAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPostAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpPostAttribute


// type: Microsoft.AspNetCore.Mvc.HttpPutAttribute
    /**
    
            Identifies an action that supports the HTTP PUT method.
            

    */
open class HttpPutAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_HttpPutAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.HttpPutAttribute.#ctor
    /**
    
            Creates a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPutAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.HttpPutAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_HttpPutAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HttpPutAttribute


// type: Microsoft.AspNetCore.Mvc.IDesignTimeMvcBuilderConfiguration
    /**
    
            Configures the . Implement this interface to enable design-time configuration
            (for instance during pre-compilation of views) of .
            

    */
open class IDesignTimeMvcBuilderConfiguration
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IDesignTimeMvcBuilderConfiguration
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IDesignTimeMvcBuilderConfiguration_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void ConfigureMvc(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.AspNetCore.Mvc.IDesignTimeMvcBuilderConfiguration.ConfigureMvc(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Configures the .
            

    - Parameter builder: The .
    */
    open func ConfigureMvc(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_IDesignTimeMvcBuilderConfiguration_void__ConfigureMvc_0__1__IMvcBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDesignTimeMvcBuilderConfiguration


// type: Microsoft.AspNetCore.Mvc.IRequestFormLimitsPolicy
    /**
    
            A marker interface for filters which define a policy for limits on a request's body read as a form.
            

    */
open class IRequestFormLimitsPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IRequestFormLimitsPolicy,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IRequestFormLimitsPolicy_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IRequestFormLimitsPolicy


// type: Microsoft.AspNetCore.Mvc.IRequestSizePolicy
    /**
    
            A marker interface for filters which define a policy for maximum size for the request body.
            

    */
open class IRequestSizePolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IRequestSizePolicy,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IRequestSizePolicy_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IRequestSizePolicy


// type: Microsoft.AspNetCore.Mvc.JsonOptions
    /**
    
            Options to configure  and .
            

    */
open class JsonOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_JsonOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.JsonOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_JsonOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AllowInputFormatterExceptionMessages()
// docid: M:Microsoft.AspNetCore.Mvc.JsonOptions.get_AllowInputFormatterExceptionMessages
    open func get_AllowInputFormatterExceptionMessages() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonOptions_bool__get_AllowInputFormatterExceptionMessages_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowInputFormatterExceptionMessages(bool)
// docid: M:Microsoft.AspNetCore.Mvc.JsonOptions.set_AllowInputFormatterExceptionMessages(System.Boolean)
    open func set_AllowInputFormatterExceptionMessages(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_JsonOptions_void__set_AllowInputFormatterExceptionMessages_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonSerializerOptions get_JsonSerializerOptions()
// docid: M:Microsoft.AspNetCore.Mvc.JsonOptions.get_JsonSerializerOptions
    open func get_JsonSerializerOptions() throws -> dotnet.System.Text.Json.JsonSerializerOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonOptions_JsonSerializerOptions__get_JsonSerializerOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonSerializerOptions(hndl : __return);
        }
    }
    /**
    
            Gets or sets a flag to determine whether error messages from JSON deserialization by the
             will be added to the . If
            , a generic error message will be used instead.
            

    */
    open var AllowInputFormatterExceptionMessages : Bool {
        get {
            return try! get_AllowInputFormatterExceptionMessages();
        }
        set(v) {
            return try! set_AllowInputFormatterExceptionMessages(value: v);
        }
    }
    /**
    
            Gets the  used by  and
            .
            

    */
    open var JsonSerializerOptions : dotnet.System.Text.Json.JsonSerializerOptions {
        get {
            return try! get_JsonSerializerOptions();
        }
    }
} // JsonOptions


// type: Microsoft.AspNetCore.Mvc.JsonResult
    /**
    
            An action result which formats the given object as JSON.
            

    */
open class JsonResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_JsonResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.#ctor(System.Object)
    /**
    
            Creates a new  with the given .
            

    - Parameter value: The value to format as JSON.
    */
    public init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_JsonResult_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.#ctor(System.Object,System.Object)
    /**
    
            Creates a new  with the given .
            

    - Parameter value: The value to format as JSON.
    - Parameter serializerSettings: 
            The serializer settings to be used by the formatter.
            
            When using System.Text.Json, this should be an instance of .
            
            
            When using Newtonsoft.Json, this should be an instance of JsonSerializerSettings.
            
            
    */
    public init(value : Optional<dotnet.System.Object>, serializerSettings : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_JsonResult_ctor_0__2__Object_Object(&__thrown, value?.get_handle() ?? nil, serializerSettings?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_JsonResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SerializerSettings()
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.get_SerializerSettings
    open func get_SerializerSettings() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonResult_Object__get_SerializerSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SerializerSettings(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.set_SerializerSettings(System.Object)
    open func set_SerializerSettings(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_JsonResult_void__set_SerializerSettings_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_JsonResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_JsonResult_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.JsonResult.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_JsonResult_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  representing the Content-Type header of the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets or sets the serializer settings.
            
            When using System.Text.Json, this should be an instance of 
            
            
            When using Newtonsoft.Json, this should be an instance of JsonSerializerSettings.
            
            

    */
    open var SerializerSettings : Optional<dotnet.System.Object> {
        get {
            return try! get_SerializerSettings();
        }
        set(v) {
            return try! set_SerializerSettings(value: v!);
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            Gets or sets the value to be formatted.
            

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // JsonResult


// type: Microsoft.AspNetCore.Mvc.LocalRedirectResult
    /**
    
            An  that returns a Found (302), Moved Permanently (301), Temporary Redirect (307),
            or Permanent Redirect (308) response with a Location header to the supplied local URL.
            

    */
open class LocalRedirectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_LocalRedirectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter localUrl: The local URL to redirect to.
    */
    public init(localUrl : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_LocalRedirectResult_ctor_0__1__String(&__thrown, localUrl.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.#ctor(System.String,System.Boolean)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter localUrl: The local URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    */
    public init(localUrl : dotnet.System.String, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_LocalRedirectResult_ctor_0__2__String_bool(&__thrown, localUrl.get_handle(), Swift.Int32(permanent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.#ctor(System.String,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter localUrl: The local URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request's method.
    */
    public init(localUrl : dotnet.System.String, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_LocalRedirectResult_ctor_0__3__String_bool_bool(&__thrown, localUrl.get_handle(), Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_LocalRedirectResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_LocalRedirectResult_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_LocalRedirectResult_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveMethod()
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.get_PreserveMethod
    open func get_PreserveMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_LocalRedirectResult_bool__get_PreserveMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMethod(bool)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.set_PreserveMethod(System.Boolean)
    open func set_PreserveMethod(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_LocalRedirectResult_void__set_PreserveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Url()
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.get_Url
    open func get_Url() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_LocalRedirectResult_String__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Url(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.set_Url(System.String)
    open func set_Url(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_LocalRedirectResult_void__set_Url_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_LocalRedirectResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.LocalRedirectResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_LocalRedirectResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the value that specifies that the redirect should be permanent if true or temporary if false.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
    /**
    
            Gets or sets an indication that the redirect preserves the initial request method.
            

    */
    open var PreserveMethod : Bool {
        get {
            return try! get_PreserveMethod();
        }
        set(v) {
            return try! set_PreserveMethod(value: v);
        }
    }
    /**
    
            Gets or sets the local URL to redirect to.
            

    */
    open var Url : dotnet.System.String {
        get {
            return try! get_Url();
        }
        set(v) {
            return try! set_Url(value: v);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // LocalRedirectResult


// type: Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute
    /**
    
            Executes a middleware pipeline provided the by the .
            The middleware pipeline will be treated as an async resource filter.
            

    */
open class MiddlewareFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.#ctor(System.Type)
    /**
    
            Instantiates a new instance of .
            

    - Parameter configurationType: A type which configures a middleware pipeline.
    */
    public init(configurationType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_ctor_0__1__Type(&__thrown, configurationType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ConfigurationType()
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.get_ConfigurationType
    open func get_ConfigurationType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_Type__get_ConfigurationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MiddlewareFilterAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            The type which configures a middleware pipeline.
            

    */
    open var ConfigurationType : dotnet.System.Type_ {
        get {
            return try! get_ConfigurationType();
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // MiddlewareFilterAttribute


// type: Microsoft.AspNetCore.Mvc.ModelBinderAttribute
    /**
    
            An attribute that can specify a model name or type of  to use for binding.
            

    */
open class ModelBinderAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinderAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinderAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.#ctor(System.Type)
    /**
    
            Initializes a new instance of .
            

    - Parameter binderType: A  which implements .
    */
    public init(binderType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinderAttribute_ctor_0__1__Type(&__thrown, binderType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.get_BinderType
    open /* method final */ func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinderAttribute_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.set_BinderType(System.Type)
    open func set_BinderType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinderAttribute_void__set_BinderType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinderAttribute_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinderAttribute_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinderAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinderAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinderAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
        set(v) {
            return try! set_BinderType(value: v!);
        }
    }
    /**
    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // ModelBinderAttribute


// type: Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute
    /**
    
            This attribute specifies the metadata class to associate with a data model class.
            

    */
open class ModelMetadataTypeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelMetadataTypeAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute.#ctor(System.Type)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter type: The type of metadata class that is associated with a data model class.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelMetadataTypeAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_MetadataType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute.get_MetadataType
    open func get_MetadataType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelMetadataTypeAttribute_Type__get_MetadataType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            Gets the type of metadata class that is associated with a data model class.
            

    */
    open var MetadataType : dotnet.System.Type_ {
        get {
            return try! get_MetadataType();
        }
    }
} // ModelMetadataTypeAttribute


// type: Microsoft.AspNetCore.Mvc.MvcOptions
    /**
    
            Provides programmatic configuration for the MVC framework.
            

    */
open class MvcOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_MvcOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.#ctor
    /**
    
            Creates a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_MvcOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_EnableEndpointRouting()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_EnableEndpointRouting
    open func get_EnableEndpointRouting() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_EnableEndpointRouting_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableEndpointRouting(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_EnableEndpointRouting(System.Boolean)
    open func set_EnableEndpointRouting(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_EnableEndpointRouting_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowEmptyInputInBodyModelBinding()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_AllowEmptyInputInBodyModelBinding
    open func get_AllowEmptyInputInBodyModelBinding() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_AllowEmptyInputInBodyModelBinding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowEmptyInputInBodyModelBinding(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_AllowEmptyInputInBodyModelBinding(System.Boolean)
    open func set_AllowEmptyInputInBodyModelBinding(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_AllowEmptyInputInBodyModelBinding_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.CacheProfile> get_CacheProfiles()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_CacheProfiles
    open func get_CacheProfiles() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.CacheProfile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_CacheProfile___get_CacheProfiles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention> get_Conventions()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_Conventions
    open func get_Conventions() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention___get_Conventions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.FilterCollection get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_Filters
    open func get_Filters() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_FilterCollection__get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings get_FormatterMappings()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_FormatterMappings
    open func get_FormatterMappings() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_FormatterMappings__get_FormatterMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter> get_InputFormatters()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_InputFormatters
    open func get_InputFormatters() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter___get_InputFormatters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes
    open func get_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes(System.Boolean)
    open func set_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressInputFormatterBuffering()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_SuppressInputFormatterBuffering
    open func get_SuppressInputFormatterBuffering() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_SuppressInputFormatterBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressInputFormatterBuffering(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_SuppressInputFormatterBuffering(System.Boolean)
    open func set_SuppressInputFormatterBuffering(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_SuppressInputFormatterBuffering_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressOutputFormatterBuffering()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_SuppressOutputFormatterBuffering
    open func get_SuppressOutputFormatterBuffering() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_SuppressOutputFormatterBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressOutputFormatterBuffering(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_SuppressOutputFormatterBuffering(System.Boolean)
    open func set_SuppressOutputFormatterBuffering(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_SuppressOutputFormatterBuffering_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableActionInvokers()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_EnableActionInvokers
    open func get_EnableActionInvokers() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_EnableActionInvokers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableActionInvokers(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_EnableActionInvokers(System.Boolean)
    open func set_EnableActionInvokers(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_EnableActionInvokers_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxModelValidationErrors()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_MaxModelValidationErrors
    open func get_MaxModelValidationErrors() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_i32__get_MaxModelValidationErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxModelValidationErrors(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_MaxModelValidationErrors(System.Int32)
    open func set_MaxModelValidationErrors(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_MaxModelValidationErrors_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider> get_ModelBinderProviders()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ModelBinderProviders
    open func get_ModelBinderProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider___get_ModelBinderProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider get_ModelBindingMessageProvider()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ModelBindingMessageProvider
    open func get_ModelBindingMessageProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_DefaultModelBindingMessageProvider__get_ModelBindingMessageProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider> get_ModelMetadataDetailsProviders()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ModelMetadataDetailsProviders
    open func get_ModelMetadataDetailsProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider___get_ModelMetadataDetailsProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> get_ModelValidatorProviders()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ModelValidatorProviders
    open func get_ModelValidatorProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider___get_ModelValidatorProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> get_OutputFormatters()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_OutputFormatters
    open func get_OutputFormatters() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter___get_OutputFormatters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_RespectBrowserAcceptHeader()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_RespectBrowserAcceptHeader
    open func get_RespectBrowserAcceptHeader() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_RespectBrowserAcceptHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RespectBrowserAcceptHeader(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_RespectBrowserAcceptHeader(System.Boolean)
    open func set_RespectBrowserAcceptHeader(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_RespectBrowserAcceptHeader_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ReturnHttpNotAcceptable()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ReturnHttpNotAcceptable
    open func get_ReturnHttpNotAcceptable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_ReturnHttpNotAcceptable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReturnHttpNotAcceptable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_ReturnHttpNotAcceptable(System.Boolean)
    open func set_ReturnHttpNotAcceptable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_ReturnHttpNotAcceptable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> get_ValueProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ValueProviderFactories
    open func get_ValueProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory___get_ValueProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_SslPort()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_SslPort
    open func get_SslPort() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Nullable_i32___get_SslPort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_SslPort(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_SslPort(System.Nullable{System.Int32})
    open func set_SslPort(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_SslPort_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RequireHttpsPermanent()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_RequireHttpsPermanent
    open func get_RequireHttpsPermanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_RequireHttpsPermanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RequireHttpsPermanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_RequireHttpsPermanent(System.Boolean)
    open func set_RequireHttpsPermanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_RequireHttpsPermanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_MaxValidationDepth()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_MaxValidationDepth
    open func get_MaxValidationDepth() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_System_Nullable_i32___get_MaxValidationDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxValidationDepth(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_MaxValidationDepth(System.Nullable{System.Int32})
    open func set_MaxValidationDepth(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_MaxValidationDepth_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ValidateComplexTypesIfChildValidationFails()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_ValidateComplexTypesIfChildValidationFails
    open func get_ValidateComplexTypesIfChildValidationFails() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_ValidateComplexTypesIfChildValidationFails_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ValidateComplexTypesIfChildValidationFails(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_ValidateComplexTypesIfChildValidationFails(System.Boolean)
    open func set_ValidateComplexTypesIfChildValidationFails(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_ValidateComplexTypesIfChildValidationFails_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressAsyncSuffixInActionNames()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_SuppressAsyncSuffixInActionNames
    open func get_SuppressAsyncSuffixInActionNames() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_bool__get_SuppressAsyncSuffixInActionNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressAsyncSuffixInActionNames(bool)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_SuppressAsyncSuffixInActionNames(System.Boolean)
    open func set_SuppressAsyncSuffixInActionNames(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_SuppressAsyncSuffixInActionNames_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxModelBindingCollectionSize()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_MaxModelBindingCollectionSize
    open func get_MaxModelBindingCollectionSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_i32__get_MaxModelBindingCollectionSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxModelBindingCollectionSize(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_MaxModelBindingCollectionSize(System.Int32)
    open func set_MaxModelBindingCollectionSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_MaxModelBindingCollectionSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxModelBindingRecursionDepth()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_MaxModelBindingRecursionDepth
    open func get_MaxModelBindingRecursionDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_i32__get_MaxModelBindingRecursionDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxModelBindingRecursionDepth(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_MaxModelBindingRecursionDepth(System.Int32)
    open func set_MaxModelBindingRecursionDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_MaxModelBindingRecursionDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxIAsyncEnumerableBufferLimit()
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.get_MaxIAsyncEnumerableBufferLimit
    open func get_MaxIAsyncEnumerableBufferLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcOptions_i32__get_MaxIAsyncEnumerableBufferLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxIAsyncEnumerableBufferLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.MvcOptions.set_MaxIAsyncEnumerableBufferLimit(System.Int32)
    open func set_MaxIAsyncEnumerableBufferLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcOptions_void__set_MaxIAsyncEnumerableBufferLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the flag which decides whether body model binding (for example, on an
            action method parameter with ) should treat empty
            input as valid.  by default.
            

    */
    open var AllowEmptyInputInBodyModelBinding : Bool {
        get {
            return try! get_AllowEmptyInputInBodyModelBinding();
        }
        set(v) {
            return try! set_AllowEmptyInputInBodyModelBinding(value: v);
        }
    }
    /**
    
            Gets a Dictionary of CacheProfile Names,  which are pre-defined settings for
            response caching.
            

    */
    open var CacheProfiles : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.CacheProfile> {
        get {
            return try! get_CacheProfiles();
        }
    }
    /**
    
            Gets a list of  instances that will be applied to
            the  when discovering actions.
            

    */
    open var Conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention> {
        get {
            return try! get_Conventions();
        }
    }
    /**
    
            Gets or sets the flag that determines if MVC should use action invoker extensibility. This will allow
            custom  and  execute during the request pipeline.
            

    */
    open var EnableActionInvokers : Bool {
        get {
            return try! get_EnableActionInvokers();
        }
        set(v) {
            return try! set_EnableActionInvokers(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if routing should use endpoints internally, or if legacy routing
            logic should be used. Endpoint routing is used to match HTTP requests to MVC actions, and to generate
            URLs with .
            

    */
    open var EnableEndpointRouting : Bool {
        get {
            return try! get_EnableEndpointRouting();
        }
        set(v) {
            return try! set_EnableEndpointRouting(value: v);
        }
    }
    /**
    
            Gets a collection of  which are used to construct filters that
            apply to all actions.
            

    */
    open var Filters : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterCollection {
        get {
            return try! get_Filters();
        }
    }
    /**
    
            Used to specify mapping between the URL Format and corresponding media type.
            

    */
    open var FormatterMappings : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings {
        get {
            return try! get_FormatterMappings();
        }
    }
    /**
    
            Gets a list of s that are used by this application.
            

    */
    open var InputFormatters : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter> {
        get {
            return try! get_InputFormatters();
        }
    }
    /**
    
            Gets or sets the most number of entries of an  that
            that  will buffer.
            
            When  is an instance of ,
             will eagerly read the enumeration and add to a synchronous collection
            prior to invoking the selected formatter.
            This property determines the most number of entries that the executor is allowed to buffer.
            
            

    */
    open var MaxIAsyncEnumerableBufferLimit : Swift.Int32 {
        get {
            return try! get_MaxIAsyncEnumerableBufferLimit();
        }
        set(v) {
            return try! set_MaxIAsyncEnumerableBufferLimit(value: v);
        }
    }
    /**
    
            Gets or sets the maximum size of a complex collection to model bind. When this limit is reached, the model
            binding system will throw an .
            

    */
    open var MaxModelBindingCollectionSize : Swift.Int32 {
        get {
            return try! get_MaxModelBindingCollectionSize();
        }
        set(v) {
            return try! set_MaxModelBindingCollectionSize(value: v);
        }
    }
    /**
    
            Gets or sets the maximum recursion depth of the model binding system. The
             will throw an  if more than
            this number of s are on the stack. That is, an attempt to recurse beyond this
            level will fail.
            

    */
    open var MaxModelBindingRecursionDepth : Swift.Int32 {
        get {
            return try! get_MaxModelBindingRecursionDepth();
        }
        set(v) {
            return try! set_MaxModelBindingRecursionDepth(value: v);
        }
    }
    /**
    
            Gets or sets the maximum number of validation errors that are allowed by this application before further
            errors are ignored.
            

    */
    open var MaxModelValidationErrors : Swift.Int32 {
        get {
            return try! get_MaxModelValidationErrors();
        }
        set(v) {
            return try! set_MaxModelValidationErrors(value: v);
        }
    }
    /**
    
            Gets or sets the maximum depth to constrain the validation visitor when validating. Set to 
            to disable this feature.
            
             traverses the object graph of the model being validated. For models
            that are very deep or are infinitely recursive, validation may result in stack overflow.
            
            
            When not ,  will throw if
            traversing an object exceeds the maximum allowed validation depth.
            
            

    */
    open var MaxValidationDepth : Optional<Swift.Int32> {
        get {
            return try! get_MaxValidationDepth();
        }
        set(v) {
            return try! set_MaxValidationDepth(value: v!);
        }
    }
    /**
    
            Gets a list of s used by this application.
            

    */
    open var ModelBinderProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider> {
        get {
            return try! get_ModelBinderProviders();
        }
    }
    /**
    
            Gets the default . Changes here are copied to the
             property of all 
            instances unless overridden in a custom .
            

    */
    open var ModelBindingMessageProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider {
        get {
            return try! get_ModelBindingMessageProvider();
        }
    }
    /**
    
            Gets a list of  instances that will be used to
            create  instances.
            

    */
    open var ModelMetadataDetailsProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider> {
        get {
            return try! get_ModelMetadataDetailsProviders();
        }
    }
    /**
    
            Gets a list of s used by this application.
            

    */
    open var ModelValidatorProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> {
        get {
            return try! get_ModelValidatorProviders();
        }
    }
    /**
    
            Gets a list of s that are used by this application.
            

    */
    open var OutputFormatters : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        get {
            return try! get_OutputFormatters();
        }
    }
    /**
    
            Gets or sets the default value for the Permanent property of .
            

    */
    open var RequireHttpsPermanent : Bool {
        get {
            return try! get_RequireHttpsPermanent();
        }
        set(v) {
            return try! set_RequireHttpsPermanent(value: v);
        }
    }
    /**
    
            Gets or sets the flag which causes content negotiation to ignore Accept header
            when it contains the media type (ASTERISK)/(ASTERISK).  by default.
            

    */
    open var RespectBrowserAcceptHeader : Bool {
        get {
            return try! get_RespectBrowserAcceptHeader();
        }
        set(v) {
            return try! set_RespectBrowserAcceptHeader(value: v);
        }
    }
    /**
    
            Gets or sets the flag which decides whether an HTTP 406 Not Acceptable response
            will be returned if no formatter has been selected to format the response.
             by default.
            

    */
    open var ReturnHttpNotAcceptable : Bool {
        get {
            return try! get_ReturnHttpNotAcceptable();
        }
        set(v) {
            return try! set_ReturnHttpNotAcceptable(value: v);
        }
    }
    /**
    
            Gets or sets the SSL port that is used by this application when 
            is used. If not set the port won't be specified in the secured URL e.g. https://localhost/path.
            

    */
    open var SslPort : Optional<Swift.Int32> {
        get {
            return try! get_SslPort();
        }
        set(v) {
            return try! set_SslPort(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if MVC will remove the suffix "Async" applied to
            controller action names.
            
             is used to construct the route to the action as
            well as in view lookup. When , MVC will trim the suffix "Async" applied
            to action method names.
            For example, the action name for ProductsController.ListProductsAsync will be
            canonicalized as ListProducts.. Consequently, it will be routeable at
            /Products/ListProducts with views looked up at /Views/Products/ListProducts.cshtml.
            
            
            This option does not affect values specified using .
            
            

    */
    open var SuppressAsyncSuffixInActionNames : Bool {
        get {
            return try! get_SuppressAsyncSuffixInActionNames();
        }
        set(v) {
            return try! set_SuppressAsyncSuffixInActionNames(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the inference of  for
            properties and parameters of non-nullable reference types is suppressed. If false
            (the default), then all non-nullable reference types will behave as-if [Required] has
            been applied. If true, this behavior will be suppressed; nullable reference types and
            non-nullable reference types will behave the same for the purposes of validation.
            

    */
    open var SuppressImplicitRequiredAttributeForNonNullableReferenceTypes : Bool {
        get {
            return try! get_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes();
        }
        set(v) {
            return try! set_SuppressImplicitRequiredAttributeForNonNullableReferenceTypes(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if buffering is disabled for input formatters that
            synchronously read from the HTTP request body.
            

    */
    open var SuppressInputFormatterBuffering : Bool {
        get {
            return try! get_SuppressInputFormatterBuffering();
        }
        set(v) {
            return try! set_SuppressInputFormatterBuffering(value: v);
        }
    }
    /**
    
            Gets or sets the flag that determines if buffering is disabled for output formatters that
            synchronously write to the HTTP response body.
            

    */
    open var SuppressOutputFormatterBuffering : Bool {
        get {
            return try! get_SuppressOutputFormatterBuffering();
        }
        set(v) {
            return try! set_SuppressOutputFormatterBuffering(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines whether the validation visitor will perform validation of a complex type
            if validation fails for any of its children.
            
            

    */
    open var ValidateComplexTypesIfChildValidationFails : Bool {
        get {
            return try! get_ValidateComplexTypesIfChildValidationFails();
        }
        set(v) {
            return try! set_ValidateComplexTypesIfChildValidationFails(value: v);
        }
    }
    /**
    
            Gets a list of  used by this application.
            

    */
    open var ValueProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        get {
            return try! get_ValueProviderFactories();
        }
    }
} // MvcOptions


// type: Microsoft.AspNetCore.Mvc.NoContentResult
    /**
    
            A  that when executed will produce a 204 No Content response.
            

    */
open class NoContentResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NoContentResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.NoContentResult.#ctor
    /**
    
            Initializes a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NoContentResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NoContentResult


// type: Microsoft.AspNetCore.Mvc.NonActionAttribute
    /**
    
            Indicates that a controller method is not an action method.
            

    */
public final class NonActionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NonActionAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.NonActionAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NonActionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NonActionAttribute


// type: Microsoft.AspNetCore.Mvc.NonControllerAttribute
    /**
    
            Indicates that the type and any derived types that this attribute is applied to
            is not considered a controller by the default controller discovery mechanism.
            

    */
public final class NonControllerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NonControllerAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.NonControllerAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NonControllerAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NonControllerAttribute


// type: Microsoft.AspNetCore.Mvc.NonViewComponentAttribute
    /**
    
            Indicates that the type and any derived types that this attribute is applied to
            is not considered a view component by the default view component discovery mechanism.
            

    */
open class NonViewComponentAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NonViewComponentAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.NonViewComponentAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NonViewComponentAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NonViewComponentAttribute


// type: Microsoft.AspNetCore.Mvc.NotFoundObjectResult
    /**
    
            An  that when executed will produce a Not Found (404) response.
            

    */
open class NotFoundObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NotFoundObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.NotFoundObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance.
            

    - Parameter value: The value to format in the entity body.
    */
    public override init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NotFoundObjectResult_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NotFoundObjectResult


// type: Microsoft.AspNetCore.Mvc.NotFoundResult
    /**
    
            Represents an  that when
            executed will produce a Not Found (404) response.
            

    */
open class NotFoundResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_NotFoundResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.NotFoundResult.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_NotFoundResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // NotFoundResult


// type: Microsoft.AspNetCore.Mvc.ObjectResult
    /**
    
            An  that on execution will write an object to the response
            using mechanisms provided by the host.
            

    */
open class ObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance with the provided .
            

    - Parameter value: 
    */
    public init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ObjectResult_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            This method is called before the formatter writes to the output stream.
            

    */
    open func OnFormatting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__OnFormatting_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> get_Formatters()
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.get_Formatters
    open func get_Formatters() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter___get_Formatters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Formatters(Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.set_Formatters(Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter})
    open func set_Formatters(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__set_Formatters_0__1__Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection get_ContentTypes()
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.get_ContentTypes
    open func get_ContentTypes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_MediaTypeCollection__get_ContentTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    open func set_ContentTypes(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__set_ContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_DeclaredType()
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.get_DeclaredType
    open func get_DeclaredType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_Type__get_DeclaredType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DeclaredType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.set_DeclaredType(System.Type)
    open func set_DeclaredType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__set_DeclaredType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ObjectResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ObjectResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ObjectResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ContentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        get {
            return try! get_ContentTypes();
        }
        set(v) {
            return try! set_ContentTypes(value: v);
        }
    }
    /**
    
            Gets or sets the declared type.
            

    */
    open var DeclaredType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaredType();
        }
        set(v) {
            return try! set_DeclaredType(value: v!);
        }
    }
    /**
    
            The collection of .
            

    */
    open var Formatters : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        get {
            return try! get_Formatters();
        }
        set(v) {
            return try! set_Formatters(value: v);
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            The object result.
            

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // ObjectResult


// type: Microsoft.AspNetCore.Mvc.OkObjectResult
    /**
    
            An  that when executed performs content negotiation, formats the entity body, and
            will produce a  response if negotiation and formatting succeed.
            

    */
open class OkObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_OkObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.OkObjectResult.#ctor(System.Object)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter value: The content to format into the entity body.
    */
    public override init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_OkObjectResult_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // OkObjectResult


// type: Microsoft.AspNetCore.Mvc.OkResult
    /**
    
            An  that when executed will produce an empty
             response.
            

    */
open class OkResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_OkResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.OkResult.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_OkResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // OkResult


// type: Microsoft.AspNetCore.Mvc.PhysicalFileResult
    /**
    
            A  on execution will write a file from disk to the response
            using mechanisms provided by the host.
            

    */
open class PhysicalFileResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.FileResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_PhysicalFileResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PhysicalFileResult.#ctor(System.String,System.String)
    /**
    
            Creates a new  instance with
            the provided  and the provided .
            

    - Parameter fileName: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileName : dotnet.System.String, contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_PhysicalFileResult_ctor_0__2__String_String(&__thrown, fileName.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.PhysicalFileResult.#ctor(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a new  instance with
            the provided  and the provided .
            

    - Parameter fileName: The path to the file. The path must be an absolute path.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileName : dotnet.System.String, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_PhysicalFileResult_ctor_0__2__String_MediaTypeHeaderValue(&__thrown, fileName.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.PhysicalFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PhysicalFileResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.Mvc.PhysicalFileResult.get_FileName
    open func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PhysicalFileResult_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PhysicalFileResult.set_FileName(System.String)
    open func set_FileName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PhysicalFileResult_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the path to the file that will be sent back as the response.
            

    */
    open var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v);
        }
    }
} // PhysicalFileResult


// type: Microsoft.AspNetCore.Mvc.ProducesAttribute
    /**
    
            A filter that specifies the expected  the action will return and the supported
            response content types. The  value is used to set
            .
            

    */
open class ProducesAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ProducesAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.#ctor(System.Type)
    /**
    
            Initializes an instance of .
            

    - Parameter type: The  of object that is going to be written in the response.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.#ctor(System.String,System.String[])
    /**
    
            Initializes an instance of  with allowed content types.
            

    - Parameter contentType: The allowed content type for a response.
    - Parameter additionalContentTypes: Additional allowed content types for a response.
    */
    public init(contentType : dotnet.System.String, additionalContentTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesAttribute_ctor_0__2__String_StringArray(&__thrown, contentType.get_handle(), additionalContentTypes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
    /**
    */
    open func OnResultExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__OnResultExecuting_0__1__ResultExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
    /**
    */
    open func OnResultExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__OnResultExecuted_0__1__ResultExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    */
    open /* method final */ func SetContentTypes(contentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__SetContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), contentTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.get_Type
    open /* method final */ func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection get_ContentTypes()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.get_ContentTypes
    open func get_ContentTypes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesAttribute_MediaTypeCollection__get_ContentTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.set_ContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    open func set_ContentTypes(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__set_ContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesAttribute_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the supported response content types. Used to set .
            

    */
    open var ContentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        get {
            return try! get_ContentTypes();
        }
        set(v) {
            return try! set_ContentTypes(value: v);
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
    /**
    */
    public var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // ProducesAttribute


// type: Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute
    /**
    
            A filter that specifies the  for all HTTP status codes that are not covered by .
            

    */
public final class ProducesDefaultResponseTypeAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDefaultResponseMetadataProvider,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ProducesDefaultResponseTypeAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.#ctor
    /**
    
            Initializes an instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesDefaultResponseTypeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.#ctor(System.Type)
    /**
    
            Initializes an instance of .
            

    - Parameter type: The  of object that is going to be written in the response.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesDefaultResponseTypeAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.get_Type
    public func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesDefaultResponseTypeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.get_StatusCode
    public func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesDefaultResponseTypeAttribute_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets or sets the HTTP status code of the response.
            

    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
    /**
    
            Gets or sets the type of the value returned by an action.
            

    */
    public var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ProducesDefaultResponseTypeAttribute


// type: Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute
    /**
    
            Specifies the type returned by default by controllers annotated with .
            
             specifies the error model type associated with a 
            for a client error (HTTP Status Code 4xx) when no value is provided. When no value is specified, MVC assumes the
            client error type to be , if mapping client errors ()
            is used.
            
            
            Use this  to configure the default error type if your application uses a custom error type to respond.
            
            

    */
public final class ProducesErrorResponseTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ProducesErrorResponseTypeAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute.#ctor(System.Type)
    /**
    
            Initializes a new instance of .
            

    - Parameter type: The error type. Use  to indicate the absence of a default error type.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesErrorResponseTypeAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute.get_Type
    public func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesErrorResponseTypeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            Gets the default error type.
            

    */
    public var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // ProducesErrorResponseTypeAttribute


// type: Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute
    /**
    
            A filter that specifies the type of the value and status code returned by the action.
            

    */
open class ProducesResponseTypeAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.#ctor(System.Int32)
    /**
    
            Initializes an instance of .
            

    - Parameter statusCode: The HTTP response status code.
    */
    public init(statusCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_ctor_0__1__i32(&__thrown, statusCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.#ctor(System.Type,System.Int32)
    /**
    
            Initializes an instance of .
            

    - Parameter type: The  of object that is going to be written in the response.
    - Parameter statusCode: The HTTP response status code.
    */
    public init(type : dotnet.System.Type_, statusCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_ctor_0__2__Type_i32(&__thrown, type.get_handle(), statusCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Int32, System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.#ctor(System.Type,System.Int32,System.String,System.String[])
    /**
    
            Initializes an instance of .
            

    - Parameter type: The  of object that is going to be written in the response.
    - Parameter statusCode: The HTTP response status code.
    - Parameter contentType: The content type associated with the response.
    - Parameter additionalContentTypes: Additional content types supported by the response.
    */
    public init(type : dotnet.System.Type_, statusCode : Swift.Int32, contentType : dotnet.System.String, additionalContentTypes : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_ctor_0__4__Type_i32_String_StringArray(&__thrown, type.get_handle(), statusCode, contentType.get_handle(), additionalContentTypes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.get_Type
    open /* method final */ func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.set_Type(System.Type)
    open func set_Type(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.set_StatusCode(System.Int32)
    open func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ProducesResponseTypeAttribute_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the HTTP status code of the response.
            

    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
    /**
    
            Gets or sets the type of the value returned by an action.
            

    */
    public var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // ProducesResponseTypeAttribute


// type: Microsoft.AspNetCore.Mvc.RedirectResult
    /**
    
            An  that returns a Found (302), Moved Permanently (301), Temporary Redirect (307),
            or Permanent Redirect (308) response with a Location header to the supplied URL.
            

    */
open class RedirectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RedirectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter url: The local URL to redirect to.
    */
    public init(url : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectResult_ctor_0__1__String(&__thrown, url.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.#ctor(System.String,System.Boolean)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter url: The URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    */
    public init(url : dotnet.System.String, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectResult_ctor_0__2__String_bool(&__thrown, url.get_handle(), Swift.Int32(permanent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.#ctor(System.String,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of the  class with the values
            provided.
            

    - Parameter url: The URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    */
    public init(url : dotnet.System.String, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectResult_ctor_0__3__String_bool_bool(&__thrown, url.get_handle(), Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectResult_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectResult_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.get_PreserveMethod
    open func get_PreserveMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectResult_bool__get_PreserveMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMethod(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.set_PreserveMethod(System.Boolean)
    open func set_PreserveMethod(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectResult_void__set_PreserveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Url()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.get_Url
    open func get_Url() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectResult_String__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Url(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.set_Url(System.String)
    open func set_Url(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectResult_void__set_Url_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the value that specifies that the redirect should be permanent if true or temporary if false.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
    /**
    
            Gets or sets an indication that the redirect preserves the initial request method.
            

    */
    open var PreserveMethod : Bool {
        get {
            return try! get_PreserveMethod();
        }
        set(v) {
            return try! set_PreserveMethod(value: v);
        }
    }
    /**
    
            Gets or sets the URL to redirect to.
            

    */
    open var Url : dotnet.System.String {
        get {
            return try! get_Url();
        }
        set(v) {
            return try! set_Url(value: v);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // RedirectResult


// type: Microsoft.AspNetCore.Mvc.RedirectToActionResult
    /**
    
            An  that returns a Found (302), Moved Permanently (301), Temporary Redirect (307),
            or Permanent Redirect (308) response with a Location header.
            Targets a controller action.
            

    */
open class RedirectToActionResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RedirectToActionResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__3__String_String_Object(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__4__String_String_Object_String(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__4__String_String_Object_bool(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__5__String_String_Object_bool_bool(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__5__String_String_Object_bool_String(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter actionName: The name of the action to use for generating the URL.
    - Parameter controllerName: The name of the controller to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) and permanent redirect (308) preserve the initial request method.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToActionResult_ctor_0__6__String_String_Object_bool_bool_String(&__thrown, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ActionName()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_ActionName
    open func get_ActionName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_String__get_ActionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_ActionName(System.String)
    open func set_ActionName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_ActionName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_ControllerName
    open func get_ControllerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ControllerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_ControllerName(System.String)
    open func set_ControllerName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_ControllerName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_PreserveMethod
    open func get_PreserveMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_bool__get_PreserveMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMethod(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_PreserveMethod(System.Boolean)
    open func set_PreserveMethod(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_PreserveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToActionResult_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToActionResult.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToActionResult_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the action to use for generating the URL.
            

    */
    open var ActionName : Optional<dotnet.System.String> {
        get {
            return try! get_ActionName();
        }
        set(v) {
            return try! set_ActionName(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the controller to use for generating the URL.
            

    */
    open var ControllerName : Optional<dotnet.System.String> {
        get {
            return try! get_ControllerName();
        }
        set(v) {
            return try! set_ControllerName(value: v!);
        }
    }
    /**
    
            Gets or sets the fragment to add to the URL.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the redirect is permanent.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
    /**
    
            Gets or sets an indication that the redirect preserves the initial request method.
            

    */
    open var PreserveMethod : Bool {
        get {
            return try! get_PreserveMethod();
        }
        set(v) {
            return try! set_PreserveMethod(value: v);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // RedirectToActionResult


// type: Microsoft.AspNetCore.Mvc.RedirectToPageResult
    /**
    
            An  that returns a Found (302)
            or Moved Permanently (301) response with a Location header.
            Targets a registered route.
            

    */
open class RedirectToPageResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RedirectToPageResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The page to redirect to.
    */
    public init(pageName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__1__String(&__thrown, pageName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The page to redirect to.
    - Parameter pageHandler: The page handler to redirect to.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__2__String_String(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The page to redirect to.
    - Parameter routeValues: The parameters for the route.
    */
    public init(pageName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__2__String_Object(&__thrown, pageName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The page to redirect to.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the route.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__3__String_String_Object(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the page.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__4__String_String_Object_bool(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values provided.
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the page.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__5__String_String_Object_bool_bool(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the route.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__4__String_String_Object_String(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the page.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__5__String_String_Object_bool_String(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Object, bool, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.#ctor(System.String,System.String,System.Object,System.Boolean,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to redirect to.
    - Parameter routeValues: The parameters for the page.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToPageResult_ctor_0__6__String_String_Object_bool_bool_String(&__thrown, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageName()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_PageName
    open func get_PageName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_String__get_PageName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_PageName(System.String)
    open func set_PageName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_PageName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageHandler()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_PageHandler
    open func get_PageHandler() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_String__get_PageHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageHandler(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_PageHandler(System.String)
    open func set_PageHandler(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_PageHandler_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_PreserveMethod
    open func get_PreserveMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_bool__get_PreserveMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMethod(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_PreserveMethod(System.Boolean)
    open func set_PreserveMethod(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_PreserveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_Protocol
    open func get_Protocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_Protocol(System.String)
    open func set_Protocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.get_Host
    open func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToPageResult_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToPageResult.set_Host(System.String)
    open func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToPageResult_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the fragment to add to the URL.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            Gets or sets the host name of the URL.
            

    */
    open var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    
            Gets or sets the page handler to redirect to.
            

    */
    open var PageHandler : Optional<dotnet.System.String> {
        get {
            return try! get_PageHandler();
        }
        set(v) {
            return try! set_PageHandler(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the page to route to.
            

    */
    open var PageName : Optional<dotnet.System.String> {
        get {
            return try! get_PageName();
        }
        set(v) {
            return try! set_PageName(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the redirect is permanent.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
    /**
    
            Gets or sets an indication that the redirect preserves the initial request method.
            

    */
    open var PreserveMethod : Bool {
        get {
            return try! get_PreserveMethod();
        }
        set(v) {
            return try! set_PreserveMethod(value: v);
        }
    }
    /**
    
            Gets or sets the protocol for the URL, such as "http" or "https".
            

    */
    open var Protocol_ : Optional<dotnet.System.String> {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // RedirectToPageResult


// type: Microsoft.AspNetCore.Mvc.RedirectToRouteResult
    /**
    
            An  that returns a Found (302), Moved Permanently (301), Temporary Redirect (307),
            or Permanent Redirect (308) response with a Location header.
            Targets a registered route.
            

    */
open class RedirectToRouteResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RedirectToRouteResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeValues: The parameters for the route.
    */
    public init(routeValues : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__1__Object(&__thrown, routeValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__2__String_Object(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__3__String_Object_bool(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__4__String_Object_bool_bool(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__3__String_Object_String(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__4__String_Object_bool_String(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, bool, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.#ctor(System.String,System.Object,System.Boolean,System.Boolean,System.String)
    /**
    
            Initializes a new instance of the  with the values
            provided.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for the route.
    - Parameter permanent: If set to true, makes the redirect permanent (301). Otherwise a temporary redirect is used (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    - Parameter fragment: The fragment to add to the URL.
    */
    public init(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, permanent : Bool, preserveMethod : Bool, fragment : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_ctor_0__5__String_Object_bool_bool_String(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_UrlHelper()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_UrlHelper
    open func get_UrlHelper() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_IUrlHelper__get_UrlHelper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_UrlHelper(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_UrlHelper(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_UrlHelper_0__1__IUrlHelper(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_RouteValues
    open func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_PreserveMethod
    open func get_PreserveMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_bool__get_PreserveMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMethod(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_PreserveMethod(System.Boolean)
    open func set_PreserveMethod(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_PreserveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RedirectToRouteResult_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RedirectToRouteResult.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RedirectToRouteResult_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the fragment to add to the URL.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the redirect is permanent.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
    /**
    
            Gets or sets an indication that the redirect preserves the initial request method.
            

    */
    open var PreserveMethod : Bool {
        get {
            return try! get_PreserveMethod();
        }
        set(v) {
            return try! set_PreserveMethod(value: v);
        }
    }
    /**
    
            Gets or sets the name of the route to use for generating the URL.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            Gets or sets the route data to use for generating the URL.
            

    */
    open var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to generate URLs.
            

    */
    open var UrlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper> {
        get {
            return try! get_UrlHelper();
        }
        set(v) {
            return try! set_UrlHelper(value: v!);
        }
    }
} // RedirectToRouteResult


// type: Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute
    /**
    
            Sets the specified limits to the .
            

    */
open class RequestFormLimitsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_BufferBody()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_BufferBody
    open func get_BufferBody() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_bool__get_BufferBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_BufferBody(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_BufferBody(System.Boolean)
    open func set_BufferBody(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_BufferBody_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MemoryBufferThreshold()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_MemoryBufferThreshold
    open func get_MemoryBufferThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_MemoryBufferThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MemoryBufferThreshold(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_MemoryBufferThreshold(System.Int32)
    open func set_MemoryBufferThreshold(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_MemoryBufferThreshold_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_BufferBodyLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_BufferBodyLengthLimit
    open func get_BufferBodyLengthLimit() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i64__get_BufferBodyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BufferBodyLengthLimit(System.Int64)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_BufferBodyLengthLimit(System.Int64)
    open func set_BufferBodyLengthLimit(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_BufferBodyLengthLimit_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCountLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_ValueCountLimit
    open func get_ValueCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_ValueCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_ValueCountLimit(System.Int32)
    open func set_ValueCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_ValueCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_KeyLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_KeyLengthLimit
    open func get_KeyLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_KeyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_KeyLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_KeyLengthLimit(System.Int32)
    open func set_KeyLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_KeyLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_ValueLengthLimit
    open func get_ValueLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_ValueLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_ValueLengthLimit(System.Int32)
    open func set_ValueLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_ValueLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartBoundaryLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_MultipartBoundaryLengthLimit
    open func get_MultipartBoundaryLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_MultipartBoundaryLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartBoundaryLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_MultipartBoundaryLengthLimit(System.Int32)
    open func set_MultipartBoundaryLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_MultipartBoundaryLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartHeadersCountLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_MultipartHeadersCountLimit
    open func get_MultipartHeadersCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_MultipartHeadersCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartHeadersCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_MultipartHeadersCountLimit(System.Int32)
    open func set_MultipartHeadersCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_MultipartHeadersCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MultipartHeadersLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_MultipartHeadersLengthLimit
    open func get_MultipartHeadersLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i32__get_MultipartHeadersLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartHeadersLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_MultipartHeadersLengthLimit(System.Int32)
    open func set_MultipartHeadersLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_MultipartHeadersLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MultipartBodyLengthLimit()
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.get_MultipartBodyLengthLimit
    open func get_MultipartBodyLengthLimit() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_i64__get_MultipartBodyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MultipartBodyLengthLimit(System.Int64)
// docid: M:Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.set_MultipartBodyLengthLimit(System.Int64)
    open func set_MultipartBodyLengthLimit(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestFormLimitsAttribute_void__set_MultipartBodyLengthLimit_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Enables full request body buffering. Use this if multiple components need to read the raw stream.
            The default value is false.
            

    */
    open var BufferBody : Bool {
        get {
            return try! get_BufferBody();
        }
        set(v) {
            return try! set_BufferBody(value: v);
        }
    }
    /**
    
            If  is enabled, this is the limit for the total number of bytes that will
            be buffered. Forms that exceed this limit will throw an  when parsed.
            

    */
    open var BufferBodyLengthLimit : Swift.Int64 {
        get {
            return try! get_BufferBodyLengthLimit();
        }
        set(v) {
            return try! set_BufferBodyLengthLimit(value: v);
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            A limit on the length of individual keys. Forms containing keys that exceed this limit will
            throw an  when parsed.
            

    */
    open var KeyLengthLimit : Swift.Int32 {
        get {
            return try! get_KeyLengthLimit();
        }
        set(v) {
            return try! set_KeyLengthLimit(value: v);
        }
    }
    /**
    
            If  is enabled, this many bytes of the body will be buffered in memory.
            If this threshold is exceeded then the buffer will be moved to a temp file on disk instead.
            This also applies when buffering individual multipart section bodies.
            

    */
    open var MemoryBufferThreshold : Swift.Int32 {
        get {
            return try! get_MemoryBufferThreshold();
        }
        set(v) {
            return try! set_MemoryBufferThreshold(value: v);
        }
    }
    /**
    
            A limit for the length of each multipart body. Forms sections that exceed this limit will throw an
             when parsed.
            

    */
    open var MultipartBodyLengthLimit : Swift.Int64 {
        get {
            return try! get_MultipartBodyLengthLimit();
        }
        set(v) {
            return try! set_MultipartBodyLengthLimit(value: v);
        }
    }
    /**
    
            A limit for the length of the boundary identifier. Forms with boundaries that exceed this
            limit will throw an  when parsed.
            

    */
    open var MultipartBoundaryLengthLimit : Swift.Int32 {
        get {
            return try! get_MultipartBoundaryLengthLimit();
        }
        set(v) {
            return try! set_MultipartBoundaryLengthLimit(value: v);
        }
    }
    /**
    
            A limit for the number of headers to allow in each multipart section. Headers with the same name will
            be combined. Form sections that exceed this limit will throw an 
            when parsed.
            

    */
    open var MultipartHeadersCountLimit : Swift.Int32 {
        get {
            return try! get_MultipartHeadersCountLimit();
        }
        set(v) {
            return try! set_MultipartHeadersCountLimit(value: v);
        }
    }
    /**
    
            A limit for the total length of the header keys and values in each multipart section.
            Form sections that exceed this limit will throw an  when parsed.
            

    */
    open var MultipartHeadersLengthLimit : Swift.Int32 {
        get {
            return try! get_MultipartHeadersLengthLimit();
        }
        set(v) {
            return try! set_MultipartHeadersLengthLimit(value: v);
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            A limit for the number of form entries to allow.
            Forms that exceed this limit will throw an  when parsed.
            

    */
    open var ValueCountLimit : Swift.Int32 {
        get {
            return try! get_ValueCountLimit();
        }
        set(v) {
            return try! set_ValueCountLimit(value: v);
        }
    }
    /**
    
            A limit on the length of individual form values. Forms containing values that exceed this
            limit will throw an  when parsed.
            

    */
    open var ValueLengthLimit : Swift.Int32 {
        get {
            return try! get_ValueLengthLimit();
        }
        set(v) {
            return try! set_ValueLengthLimit(value: v);
        }
    }
} // RequestFormLimitsAttribute


// type: Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute
    /**
    
            Sets the request body size limit to the specified size.
            

    */
open class RequestSizeLimitAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64)
// docid: M:Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.#ctor(System.Int64)
    /**
    
            Creates a new instance of .
            

    - Parameter bytes: The request body size limit.
    */
    public init(bytes : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_ctor_0__1__i64(&__thrown, bytes);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequestSizeLimitAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // RequestSizeLimitAttribute


// type: Microsoft.AspNetCore.Mvc.RequireHttpsAttribute
    /**
    
            An authorization filter that confirms requests are received over HTTPS.
            

    */
open class RequireHttpsAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IAuthorizationFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
    /**
    
            Called early in the filter pipeline to confirm request is authorized. Confirms requests are received over
            HTTPS. Takes no action for HTTPS requests. Otherwise if it was a GET request, sets
             to a result which will redirect the client to the HTTPS
            version of the request URI. Otherwise, sets  to a result
            which will set the status code to 403 (Forbidden).
            

    */
    open func OnAuthorization(filterContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_void__OnAuthorization_0__1__AuthorizationFilterContext(&__thrown, self.get_handle(), filterContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Permanent()
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.get_Permanent
    open func get_Permanent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_bool__get_Permanent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Permanent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.set_Permanent(System.Boolean)
    open func set_Permanent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_void__set_Permanent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RequireHttpsAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Specifies whether a permanent redirect, 301 Moved Permanently,
            should be used instead of a temporary redirect, 302 Found.
            

    */
    open var Permanent : Bool {
        get {
            return try! get_Permanent();
        }
        set(v) {
            return try! set_Permanent(value: v);
        }
    }
} // RequireHttpsAttribute


// type: Microsoft.AspNetCore.Mvc.ResponseCacheAttribute
    /**
    
            Specifies the parameters necessary for setting appropriate headers in response caching.
            

    */
open class ResponseCacheAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.CacheProfile GetCacheProfile(Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.GetCacheProfile(Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Gets the  for this attribute.
            

    - Returns: 

    */
    open func GetCacheProfile(options : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CacheProfile {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_CacheProfile__GetCacheProfile_0__1__MvcOptions(&__thrown, self.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CacheProfile(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Duration()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_Duration
    open func get_Duration() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_i32__get_Duration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Duration(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_Duration(System.Int32)
    open func set_Duration(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_Duration_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ResponseCacheLocation get_Location()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_Location
    open func get_Location() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_ResponseCacheLocation__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation(val: __return);
        }
    }
    // [IsSpecialName] void set_Location(Microsoft.AspNetCore.Mvc.ResponseCacheLocation)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_Location(Microsoft.AspNetCore.Mvc.ResponseCacheLocation)
    open func set_Location(value : aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_Location_0__1__ResponseCacheLocation(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_NoStore()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_NoStore
    open func get_NoStore() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_bool__get_NoStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoStore(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_NoStore(System.Boolean)
    open func set_NoStore(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_NoStore_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByHeader()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_VaryByHeader
    open func get_VaryByHeader() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_String__get_VaryByHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByHeader(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_VaryByHeader(System.String)
    open func set_VaryByHeader(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_VaryByHeader_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_VaryByQueryKeys()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_VaryByQueryKeys
    open func get_VaryByQueryKeys() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_StringArray__get_VaryByQueryKeys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByQueryKeys(System.String[])
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_VaryByQueryKeys(System.String[])
    open func set_VaryByQueryKeys(value : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_VaryByQueryKeys_0__1__StringArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CacheProfileName()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_CacheProfileName
    open func get_CacheProfileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_String__get_CacheProfileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheProfileName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_CacheProfileName(System.String)
    open func set_CacheProfileName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_CacheProfileName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ResponseCacheAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets or sets the value of the cache profile name.
            

    */
    open var CacheProfileName : Optional<dotnet.System.String> {
        get {
            return try! get_CacheProfileName();
        }
        set(v) {
            return try! set_CacheProfileName(value: v!);
        }
    }
    /**
    
            Gets or sets the duration in seconds for which the response is cached.
            This sets "max-age" in "Cache-control" header.
            

    */
    open var Duration : Swift.Int32 {
        get {
            return try! get_Duration();
        }
        set(v) {
            return try! set_Duration(value: v);
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets or sets the location where the data from a particular URL must be cached.
            

    */
    open var Location : aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v);
        }
    }
    /**
    
            Gets or sets the value which determines whether the data should be stored or not.
            When set to , it sets "Cache-control" header to "no-store".
            Ignores the "Location" parameter for values other than "None".
            Ignores the "duration" parameter.
            

    */
    open var NoStore : Bool {
        get {
            return try! get_NoStore();
        }
        set(v) {
            return try! set_NoStore(value: v);
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets the value for the Vary response header.
            

    */
    open var VaryByHeader : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByHeader();
        }
        set(v) {
            return try! set_VaryByHeader(value: v!);
        }
    }
    /**
    
            Gets or sets the query keys to vary by.
            

    */
    open var VaryByQueryKeys : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_VaryByQueryKeys();
        }
        set(v) {
            return try! set_VaryByQueryKeys(value: v!);
        }
    }
} // ResponseCacheAttribute


// type: Microsoft.AspNetCore.Mvc.ResponseCacheLocation
    /**
    
            Determines the value for the "Cache-control" header in the response.
            

    */
public struct ResponseCacheLocation : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ResponseCacheLocation_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ResponseCacheLocation Any
    /**
    
            Cached in both proxies and client.
            Sets "Cache-control" header to "public".
            

    */
    public static var Any_ : aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation(val: Microsoft_AspNetCore_Mvc_ResponseCacheLocation_get_Any());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ResponseCacheLocation Client
    /**
    
            Cached only in the client.
            Sets "Cache-control" header to "private".
            

    */
    public static var Client : aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation(val: Microsoft_AspNetCore_Mvc_ResponseCacheLocation_get_Client());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ResponseCacheLocation None
    /**
    
            "Cache-control" and "Pragma" headers are set to "no-cache".
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ResponseCacheLocation(val: Microsoft_AspNetCore_Mvc_ResponseCacheLocation_get_None());
            return __return;
        }
    }
} // ResponseCacheLocation


// type: Microsoft.AspNetCore.Mvc.RouteAttribute
    /**
    
            Specifies an attribute route on a controller.
            

    */
open class RouteAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RouteAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.#ctor(System.String)
    /**
    
            Creates a new  with the given route template.
            

    - Parameter template: The route template. May not be null.
    */
    public init(template : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RouteAttribute_ctor_0__1__String(&__thrown, template.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.get_Template
    open /* method final */ func get_Template() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RouteAttribute_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RouteAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RouteAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RouteAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RouteAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RouteAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets the route order. The order determines the order of route execution. Routes with a lower order
            value are tried first. If an action defines a route by providing an 
            with a non null order, that order is used instead of this value. If neither the action nor the
            controller defines an order, a default value of 0 is used.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    */
    public var Template : dotnet.System.String {
        get {
            return try! get_Template();
        }
    }
} // RouteAttribute


// type: Microsoft.AspNetCore.Mvc.SerializableError
    /**
    
            Defines a serializable container for storing ModelState information.
            This information is stored as key/value pairs.
            

    */
public final class SerializableError
    :
    dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,dotnet.System.Object>
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_SerializableError_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.SerializableError.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SerializableError_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.SerializableError.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a new instance of .
            

    - Parameter modelState:  containing the validation errors.
    */
    public init(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SerializableError_ctor_0__1__ModelStateDictionary(&__thrown, modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SerializableError


// type: Microsoft.AspNetCore.Mvc.ServiceFilterAttribute
    /**
    
            A filter that finds another filter in an .
            

    */
open class ServiceFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.#ctor(System.Type)
    /**
    
            Instantiates a new  instance.
            

    - Parameter type: The  of filter to find.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ServiceType()
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.get_ServiceType
    open func get_ServiceType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_Type__get_ServiceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ServiceFilterAttribute_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets the  of filter to find.
            

    */
    open var ServiceType : dotnet.System.Type_ {
        get {
            return try! get_ServiceType();
        }
    }
} // ServiceFilterAttribute


// type: Microsoft.AspNetCore.Mvc.SignInResult
    /**
    
            An  that on execution invokes .
            

    */
open class SignInResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_SignInResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.#ctor(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Initializes a new instance of  with the
            default authentication scheme.
            

    - Parameter principal: The claims principal containing the user claims.
    */
    public init(principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignInResult_ctor_0__1__ClaimsPrincipal(&__thrown, principal.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.#ctor(System.String,System.Security.Claims.ClaimsPrincipal)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme.
            

    - Parameter authenticationScheme: The authentication scheme to use when signing in the user.
    - Parameter principal: The claims principal containing the user claims.
    */
    public init(authenticationScheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignInResult_ctor_0__2__String_ClaimsPrincipal(&__thrown, authenticationScheme?.get_handle() ?? nil, principal.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.#ctor(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            default authentication scheme and .
            

    - Parameter principal: The claims principal containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    */
    public init(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignInResult_ctor_0__2__ClaimsPrincipal_AuthenticationProperties(&__thrown, principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.#ctor(System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme and .
            

    - Parameter authenticationScheme: The authentication schemes to use when signing in the user.
    - Parameter principal: The claims principal containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    */
    public init(authenticationScheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignInResult_ctor_0__3__String_ClaimsPrincipal_AuthenticationProperties(&__thrown, authenticationScheme?.get_handle() ?? nil, principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignInResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_AuthenticationScheme()
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.get_AuthenticationScheme
    open func get_AuthenticationScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignInResult_String__get_AuthenticationScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticationScheme(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.set_AuthenticationScheme(System.String)
    open func set_AuthenticationScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SignInResult_void__set_AuthenticationScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.get_Principal
    open func get_Principal() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignInResult_ClaimsPrincipal__get_Principal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Principal(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.set_Principal(System.Security.Claims.ClaimsPrincipal)
    open func set_Principal(value : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SignInResult_void__set_Principal_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignInResult_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignInResult.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SignInResult_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the authentication scheme that is used to perform the sign-in operation.
            

    */
    open var AuthenticationScheme : Optional<dotnet.System.String> {
        get {
            return try! get_AuthenticationScheme();
        }
        set(v) {
            return try! set_AuthenticationScheme(value: v!);
        }
    }
    /**
    
            Gets or sets the  containing the user claims.
            

    */
    open var Principal : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_Principal();
        }
        set(v) {
            return try! set_Principal(value: v);
        }
    }
    /**
    
            Gets or sets the  used to perform the sign-in operation.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // SignInResult


// type: Microsoft.AspNetCore.Mvc.SignOutResult
    /**
    
            An  that on execution invokes .
            

    */
open class SignOutResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Http_IResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_SignOutResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor
    /**
    
            Initializes a new instance of  with the default sign out scheme.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the default sign out scheme.
            specified authentication scheme and .
            

    - Parameter properties:  used to perform the sign-out operation.
    */
    public init(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__1__AuthenticationProperties(&__thrown, properties.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme.
            

    - Parameter authenticationScheme: The authentication scheme to use when signing out the user.
    */
    public init(authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__1__String(&__thrown, authenticationScheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor(System.Collections.Generic.IList{System.String})
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes.
            

    - Parameter authenticationSchemes: The authentication schemes to use when signing out the user.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__1__System_Collections_Generic_IList_string_(&__thrown, authenticationSchemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor(System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication scheme and .
            

    - Parameter authenticationScheme: The authentication schemes to use when signing out the user.
    - Parameter properties:  used to perform the sign-out operation.
    */
    public init(authenticationScheme : dotnet.System.String, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__2__String_AuthenticationProperties(&__thrown, authenticationScheme.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<System.String>, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.#ctor(System.Collections.Generic.IList{System.String},Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Initializes a new instance of  with the
            specified authentication schemes and .
            

    - Parameter authenticationSchemes: The authentication scheme to use when signing out the user.
    - Parameter properties:  used to perform the sign-out operation.
    */
    public init(authenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SignOutResult_ctor_0__2__System_Collections_Generic_IList_string__AuthenticationProperties(&__thrown, authenticationSchemes.get_handle(), properties?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignOutResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AuthenticationSchemes()
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.get_AuthenticationSchemes
    open func get_AuthenticationSchemes() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignOutResult_System_Collections_Generic_IList_string___get_AuthenticationSchemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationSchemes(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.set_AuthenticationSchemes(System.Collections.Generic.IList{System.String})
    open func set_AuthenticationSchemes(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SignOutResult_void__set_AuthenticationSchemes_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_SignOutResult_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Mvc.SignOutResult.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SignOutResult_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the authentication schemes that are challenged.
            

    */
    open var AuthenticationSchemes : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AuthenticationSchemes();
        }
        set(v) {
            return try! set_AuthenticationSchemes(value: v);
        }
    }
    /**
    
            Gets or sets the  used to perform the sign-out operation.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
} // SignOutResult


// type: Microsoft.AspNetCore.Mvc.StatusCodeResult
    /**
    
            Represents an  that when executed will
            produce an HTTP response with the given response status code.
            

    */
open class StatusCodeResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_StatusCodeResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.StatusCodeResult.#ctor(System.Int32)
    /**
    
            Initializes a new instance of the  class
            with the given .
            

    - Parameter statusCode: The HTTP status code of the response.
    */
    public init(statusCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_StatusCodeResult_ctor_0__1__i32(&__thrown, statusCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.StatusCodeResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_StatusCodeResult_void__ExecuteResult_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.StatusCodeResult.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_StatusCodeResult_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the HTTP status code.
            

    */
    open var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
} // StatusCodeResult


// type: Microsoft.AspNetCore.Mvc.TypeFilterAttribute
    /**
    
            A filter that creates another filter of type , retrieving missing constructor
            arguments from dependency injection if available there.
            

    */
open class TypeFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TypeFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.#ctor(System.Type)
    /**
    
            Instantiates a new  instance.
            

    - Parameter type: The  of filter to create.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object[] get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.get_Arguments
    open func get_Arguments() throws -> Optional<dotnet.System_Arr<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_ObjectArray__get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Object>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Arguments(System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.set_Arguments(System.Object[])
    open func set_Arguments(value : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TypeFilterAttribute_void__set_Arguments_0__1__ObjectArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ImplementationType()
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.get_ImplementationType
    open func get_ImplementationType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_Type__get_ImplementationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TypeFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TypeFilterAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TypeFilterAttribute.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TypeFilterAttribute_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the non-service arguments to pass to the  constructor.
            

    */
    open var Arguments : Optional<dotnet.System_Arr<dotnet.System.Object>> {
        get {
            return try! get_Arguments();
        }
        set(v) {
            return try! set_Arguments(value: v!);
        }
    }
    /**
    
            Gets the  of filter to create.
            

    */
    open var ImplementationType : dotnet.System.Type_ {
        get {
            return try! get_ImplementationType();
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // TypeFilterAttribute


// type: Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult
    /**
    
            An  that when executed will produce a Unauthorized (401) response.
            

    */
open class UnauthorizedObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_UnauthorizedObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance.
            

    */
    public override init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnauthorizedObjectResult_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnauthorizedObjectResult


// type: Microsoft.AspNetCore.Mvc.UnauthorizedResult
    /**
    
            Represents an  that when
            executed will produce an Unauthorized (401) response.
            

    */
open class UnauthorizedResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_UnauthorizedResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.UnauthorizedResult.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnauthorizedResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnauthorizedResult


// type: Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult
    /**
    
            An  that when executed will produce a Unprocessable Entity (422) response.
            

    */
open class UnprocessableEntityObjectResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_UnprocessableEntityObjectResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a new  instance.
            

    - Parameter modelState:  containing the validation errors.
    */
    public init(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnprocessableEntityObjectResult_ctor_0__1__ModelStateDictionary(&__thrown, modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult.#ctor(System.Object)
    /**
    
            Creates a new  instance.
            

    - Parameter error: Contains errors to be returned to the client.
    */
    public init(error : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnprocessableEntityObjectResult_ctor_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnprocessableEntityObjectResult


// type: Microsoft.AspNetCore.Mvc.UnprocessableEntityResult
    /**
    
            A  that when
            executed will produce a Unprocessable Entity (422) response.
            

    */
open class UnprocessableEntityResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_UnprocessableEntityResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.UnprocessableEntityResult.#ctor
    /**
    
            Creates a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnprocessableEntityResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnprocessableEntityResult


// type: Microsoft.AspNetCore.Mvc.UnsupportedMediaTypeResult
    /**
    
            A  that when
            executed will produce a UnsupportedMediaType (415) response.
            

    */
open class UnsupportedMediaTypeResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.StatusCodeResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_UnsupportedMediaTypeResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.UnsupportedMediaTypeResult.#ctor
    /**
    
            Creates a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_UnsupportedMediaTypeResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnsupportedMediaTypeResult


// type: Microsoft.AspNetCore.Mvc.UrlHelperExtensions
public struct UrlHelperExtensions {
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper)
    /**
    
            Generates a URL with a path for an action method.
            

    - Parameter helper: The .
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__1__IUrlHelper(&__thrown, helper.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__2__IUrlHelper_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name and route .
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__3__IUrlHelper_String_Object(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             and  names.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter controller: The name of the controller.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__3__IUrlHelper_String_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name,  name, and route .
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter controller: The name of the controller.
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__4__IUrlHelper_String_String_Object(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name,  name, route , and
             to use. See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter controller: The name of the controller.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__5__IUrlHelper_String_String_Object_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name,  name, route ,
             to use, and  name.
            Generates an absolute URL if the  and  are
            non-null. See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter controller: The name of the controller.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__6__IUrlHelper_String_String_Object_String_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)
    /**
    
            Generates a URL with a path for an action method, which contains the specified
             name,  name, route ,
             to use,  name, and .
            Generates an absolute URL if the  and  are
            non-null. See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method.
    - Parameter controller: The name of the controller.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Parameter fragment: The fragment for the URL.
    - Returns: The generated URL.

    */
    public static func Action(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Action_0__7__IUrlHelper_String_String_Object_String_String_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.Object)
    /**
    
            Generates a URL with an absolute path for the specified route .
            

    - Parameter helper: The .
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__2__IUrlHelper_Object(&__thrown, helper.get_handle(), values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)
    /**
    
            Generates a URL with an absolute path for the specified .
            

    - Parameter helper: The .
    - Parameter routeName: The name of the route that is used to generate URL.
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, routeName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__2__IUrlHelper_String(&__thrown, helper.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)
    /**
    
            Generates a URL with an absolute path for the specified  and route
            .
            

    - Parameter helper: The .
    - Parameter routeName: The name of the route that is used to generate URL.
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__3__IUrlHelper_String_Object(&__thrown, helper.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String)
    /**
    
            Generates a URL with an absolute path for the specified route  and route
            , which contains the specified  to use. See the
            remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter routeName: The name of the route that is used to generate URL.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__4__IUrlHelper_String_Object_String(&__thrown, helper.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String)
    /**
    
            Generates a URL with an absolute path for the specified route  and route
            , which contains the specified  to use and
             name. Generates an absolute URL if
             and  are non-null.
            See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter routeName: The name of the route that is used to generate URL.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__5__IUrlHelper_String_Object_String_String(&__thrown, helper.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String,System.String)
    /**
    
            Generates a URL with an absolute path for the specified route  and route
            , which contains the specified  to use,
             name and . Generates an absolute URL if
             and  are non-null.
            See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter routeName: The name of the route that is used to generate URL.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Parameter fragment: The fragment for the URL.
    - Returns: The generated URL.

    */
    public static func RouteUrl(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__RouteUrl_0__6__IUrlHelper_String_Object_String_String_String(&__thrown, helper.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)
    /**
    
            Generates a URL with a relative path for the specified .
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__2__IUrlHelper_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)
    /**
    
            Generates a URL with a relative path for the specified .
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter pageHandler: The handler to generate the url for.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__3__IUrlHelper_String_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)
    /**
    
            Generates a URL with a relative path for the specified .
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__3__IUrlHelper_String_Object(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)
    /**
    
            Generates a URL with a relative path for the specified .
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter pageHandler: The handler to generate the url for.
    - Parameter values: An object that contains route values.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__4__IUrlHelper_String_String_Object(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)
    /**
    
            Generates a URL with an absolute path for the specified . See the remarks section
            for important security information.
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter pageHandler: The handler to generate the url for.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__5__IUrlHelper_String_String_Object_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)
    /**
    
            Generates a URL with an absolute path for the specified . See the remarks section for
            important security information.
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter pageHandler: The handler to generate the url for.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__6__IUrlHelper_String_String_Object_String_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)
    /**
    
            Generates a URL with an absolute path for the specified . See the remarks section for
            important security information.
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for.
    - Parameter pageHandler: The handler to generate the url for.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Parameter fragment: The fragment for the URL.
    - Returns: The generated URL.

    */
    public static func Page(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__Page_0__7__IUrlHelper_String_String_Object_String_String_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ActionLink(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.ActionLink(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)
    /**
    
            Generates an absolute URL for an action method, which contains the specified
             name,  name, route ,
             to use,  name, and .
            Generates an absolute URL if the  and  are
            non-null. See the remarks section for important security information.
            

    - Parameter helper: The .
    - Parameter action: The name of the action method. When , defaults to the current executing action.
    - Parameter controller: The name of the controller. When , defaults to the current executing controller.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Parameter fragment: The fragment for the URL.
    - Returns: The generated URL.

    */
    public static func ActionLink(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, protocol_ : Optional<dotnet.System.String> = nil, host : Optional<dotnet.System.String> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__ActionLink_0__7__IUrlHelper_String_String_Object_String_String_String(&__thrown, helper.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PageLink(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.PageLink(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)
    /**
    
            Generates an absolute URL for a page, which contains the specified
            , , route ,
             to use,  name, and .
            Generates an absolute URL if the  and  are
            non-null. See the remarks section for important security information.
            

    - Parameter urlHelper: The .
    - Parameter pageName: The page name to generate the url for. When , defaults to the current executing page.
    - Parameter pageHandler: The handler to generate the url for. When , defaults to the current executing handler.
    - Parameter values: An object that contains route values.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter host: The host name for the URL.
    - Parameter fragment: The fragment for the URL.
    - Returns: The generated URL.

    */
    public static func PageLink(urlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper, pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, protocol_ : Optional<dotnet.System.String> = nil, host : Optional<dotnet.System.String> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_UrlHelperExtensions_String__PageLink_0__7__IUrlHelper_String_String_Object_String_String_String(&__thrown, urlHelper.get_handle(), pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, values?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, host?.get_handle() ?? nil, fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // UrlHelperExtensions


// type: Microsoft.AspNetCore.Mvc.ValidationProblemDetails
    /**
    
            A  for validation errors.
            

    */
open class ValidationProblemDetails
    :
    aspnetcore.Microsoft.AspNetCore.Http.HttpValidationProblemDetails
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ValidationProblemDetails_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ValidationProblemDetails_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter modelState:  containing the validation errors.
    */
    public init(modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ValidationProblemDetails_ctor_0__1__ModelStateDictionary(&__thrown, modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String[]>)
// docid: M:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter errors: The validation errors.
    */
    public override init(errors : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ValidationProblemDetails_ctor_0__1__System_Collections_Generic_IDictionary_string_stringArray_(&__thrown, errors.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String[]> get_Errors()
// docid: M:Microsoft.AspNetCore.Mvc.ValidationProblemDetails.get_Errors
    open override func get_Errors() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ValidationProblemDetails_System_Collections_Generic_IDictionary_string_stringArray___get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets the validation errors associated with this instance of .
            

    */
    open override var Errors : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_Errors();
        }
    }
} // ValidationProblemDetails


// type: Microsoft.AspNetCore.Mvc.VirtualFileResult
    /**
    
            A  that on execution writes the file specified using a virtual path to the response
            using mechanisms provided by the host.
            

    */
open class VirtualFileResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.FileResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_VirtualFileResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.#ctor(System.String,System.String)
    /**
    
            Creates a new  instance with the provided 
            and the provided .
            

    - Parameter fileName: The path to the file. The path must be relative/virtual.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileName : dotnet.System.String, contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_VirtualFileResult_ctor_0__2__String_String(&__thrown, fileName.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.#ctor(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Creates a new  instance with
            the provided  and the
            provided .
            

    - Parameter fileName: The path to the file. The path must be relative/virtual.
    - Parameter contentType: The Content-Type header of the response.
    */
    public init(fileName : dotnet.System.String, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_VirtualFileResult_ctor_0__2__String_MediaTypeHeaderValue(&__thrown, fileName.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_VirtualFileResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.get_FileName
    open func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_VirtualFileResult_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.set_FileName(System.String)
    open func set_FileName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_VirtualFileResult_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_FileProvider()
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.get_FileProvider
    open func get_FileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_VirtualFileResult_IFileProvider__get_FileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Mvc.VirtualFileResult.set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_FileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_VirtualFileResult_void__set_FileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the path to the file that will be sent back as the response.
            

    */
    open var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v);
        }
    }
    /**
    
            Gets or sets the  used to resolve paths.
            

    */
    open var FileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        get {
            return try! get_FileProvider();
        }
        set(v) {
            return try! set_FileProvider(value: v!);
        }
    }
} // VirtualFileResult


}
// Microsoft.AspNetCore.Mvc.ActionConstraints
extension Microsoft.AspNetCore.Mvc.ActionConstraints {
// type: Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute
    /**
    
            Base class for attributes which can implement conditional logic to enable or disable an action
            for a given request. See .
            

    */
open class ActionMethodSelectorAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_ActionMethodSelectorAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
    /**
    */
    open /* method final */ func Accept(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionMethodSelectorAttribute_bool__Accept_0__1__ActionConstraintContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValidForRequest(Microsoft.AspNetCore.Routing.RouteContext, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.IsValidForRequest(Microsoft.AspNetCore.Routing.RouteContext,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
    /**
    
            Determines whether the action selection is valid for the specified route context.
            

    - Parameter routeContext: The route context.
    - Parameter action: Information about the action.
    - Returns: 
             if the action  selection is valid for the specified context;
            otherwise, .
            

    */
    open func IsValidForRequest(routeContext : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext, action : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionMethodSelectorAttribute_bool__IsValidForRequest_0__2__RouteContext_ActionDescriptor(&__thrown, self.get_handle(), routeContext.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionMethodSelectorAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionMethodSelectorAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // ActionMethodSelectorAttribute


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint
    /**
    
            The implementation of  used to enforce
            HTTP method filtering when MVC is used with legacy 
            support. The  can be used to determine
            the set of HTTP methods supported by an action.
            

    */
open class HttpMethodActionConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 HttpMethodConstraintOrder
    /**
    
            The  value used by .
            

    */
    open class var HttpMethodConstraintOrder : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_get_HttpMethodConstraintOrder();
            return __return;
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.#ctor(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Creates a new instance of .
            

    - Parameter httpMethods: 
            The list of HTTP methods to allow. Providing an empty list will allow
            any HTTP method.
            
    */
    public init(httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_ctor_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, httpMethods.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
    /**
    */
    open func Accept(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_bool__Accept_0__1__ActionConstraintContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.get_HttpMethods
    open func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_System_Collections_Generic_IEnumerable_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_HttpMethodActionConstraint_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the list of allowed HTTP methods. Will return an empty list if all HTTP methods are allowed.
            

    */
    open var HttpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_HttpMethods();
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // HttpMethodActionConstraint


}

// Microsoft.AspNetCore.Mvc.ApiExplorer
extension Microsoft.AspNetCore.Mvc.ApiExplorer {
// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute
    /**
    
            Determines the matching behavior an API convention method or parameter by name.
             for supported options.
            .
            

    */
public final class ApiConventionNameMatchAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute.#ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior)
    /**
    
            Initializes a new instance of .
            

    - Parameter matchBehavior: The .
    */
    public init(matchBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchAttribute_ctor_0__1__ApiConventionNameMatchBehavior(&__thrown, matchBehavior.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior get_MatchBehavior()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute.get_MatchBehavior
    public func get_MatchBehavior() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchAttribute_ApiConventionNameMatchBehavior__get_MatchBehavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior(val: __return);
        }
    }
    /**
    
            Gets the .
            

    */
    public var MatchBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        get {
            return try! get_MatchBehavior();
        }
    }
} // ApiConventionNameMatchAttribute


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
    /**
    
            The behavior for matching the name of a convention parameter or method.
            

    */
public struct ApiConventionNameMatchBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior Any
    /**
    
            Matches any name. Use this if the parameter does not need to be matched.
            

    */
    public static var Any_ : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchBehavior_get_Any());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior Exact
    /**
    
            The parameter or method name must exactly match the convention.
            

    */
    public static var Exact : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchBehavior_get_Exact());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior Prefix
    /**
    
            The parameter or method name in the convention is a proper prefix.
            
            Casing is used to delineate words in a given name. For instance, with this behavior
            the convention name "Get" will match "Get", "GetPerson" or "GetById", but not "getById", "Getaway".
            
            

    */
    public static var Prefix : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchBehavior_get_Prefix());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior Suffix
    /**
    
            The parameter or method name in the convention is a proper suffix.
            
            Casing is used to delineate words in a given name. For instance, with this behavior
            the convention name "id" will match "id", or "personId" but not "grid" or "personid".
            
            

    */
    public static var Suffix : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionNameMatchBehavior_get_Suffix());
            return __return;
        }
    }
} // ApiConventionNameMatchBehavior


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult
    /**
    
            Metadata associated with an action method via API convention.
            

    */
public final class ApiConventionResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionResult_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider})
    /**
    
            Initializes a new instance of .
            

    - Parameter responseMetadataProviders: The sequence of  that are associated with the action.
    */
    public init(responseMetadataProviders : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionResult_ctor_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider_(&__thrown, responseMetadataProviders.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider> get_ResponseMetadataProviders()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult.get_ResponseMetadataProviders
    public func get_ResponseMetadataProviders() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionResult_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider___get_ResponseMetadataProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Gets the sequence of  that are associated with the action.
            

    */
    public var ResponseMetadataProviders : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider> {
        get {
            return try! get_ResponseMetadataProviders();
        }
    }
} // ApiConventionResult


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute
    /**
    
            Determines the matching behavior an API convention parameter by type.
             for supported options.
            .
            

    */
public final class ApiConventionTypeMatchAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute.#ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior)
    /**
    
            Initialzes a new instance of  with the specified .
            

    - Parameter matchBehavior: The .
    */
    public init(matchBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchAttribute_ctor_0__1__ApiConventionTypeMatchBehavior(&__thrown, matchBehavior.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior get_MatchBehavior()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute.get_MatchBehavior
    public func get_MatchBehavior() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchAttribute_ApiConventionTypeMatchBehavior__get_MatchBehavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior(val: __return);
        }
    }
    /**
    
            Gets the .
            

    */
    public var MatchBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior {
        get {
            return try! get_MatchBehavior();
        }
    }
} // ApiConventionTypeMatchAttribute


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior
    /**
    
            The behavior for matching the type of a convention parameter.
            

    */
public struct ApiConventionTypeMatchBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior Any
    /**
    
            Matches any type. Use this if the parameter does not need to be matched.
            

    */
    public static var Any_ : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchBehavior_get_Any());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior AssignableFrom
    /**
    
            The parameter in the convention is the exact type or a subclass of the type
            specified in the convention.
            

    */
    public static var AssignableFrom : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior(val: Microsoft_AspNetCore_Mvc_ApiExplorer_ApiConventionTypeMatchBehavior_get_AssignableFrom());
            return __return;
        }
    }
} // ApiConventionTypeMatchBehavior


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDefaultResponseMetadataProvider
    /**
    
            Provides a return type for all HTTP status codes that are not covered by other  instances.
            

    */
open class IApiDefaultResponseMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDefaultResponseMetadataProvider,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDefaultResponseMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IApiDefaultResponseMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupNameProvider
    /**
    
            Represents group name metadata for an ApiDescription.
            

    */
open class IApiDescriptionGroupNameProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupNameProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupNameProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupNameProvider.get_GroupName
    open func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupNameProvider_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IApiDescriptionGroupNameProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionVisibilityProvider
    /**
    
            Represents visibility metadata for an ApiDescription.
            

    */
open class IApiDescriptionVisibilityProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionVisibilityProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionVisibilityProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IgnoreApi()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionVisibilityProvider.get_IgnoreApi
    open func get_IgnoreApi() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionVisibilityProvider_bool__get_IgnoreApi_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IApiDescriptionVisibilityProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
    /**
    
            Provides metadata information about the request format to an IApiDescriptionProvider.
            

    */
open class IApiRequestFormatMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestFormatMetadataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestFormatMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IReadOnlyList<System.String> GetSupportedContentTypes(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
    /**
    
            Gets a filtered list of content types which are supported by the 
            for the  and .
            

    - Parameter contentType: 
            The content type for which the supported content types are desired, or null if any content
            type can be used.
            
    - Parameter objectType: 
            The  for which the supported content types are desired.
            
    - Returns: Content types which are supported by the .

    */
    open func GetSupportedContentTypes(contentType : dotnet.System.String, objectType : dotnet.System.Type_) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestFormatMetadataProvider_System_Collections_Generic_IReadOnlyList_string___GetSupportedContentTypes_0__2__String_Type(&__thrown, self.get_handle(), contentType.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IApiRequestFormatMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestMetadataProvider
    /**
    
            Provides a set of possible content types than can be consumed by the action.
            

    */
open class IApiRequestMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestMetadataProvider,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestMetadataProvider.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    
            Configures a collection of allowed content types which can be consumed by the action.
            

    - Parameter contentTypes: The 
    */
    open func SetContentTypes(contentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestMetadataProvider_void__SetContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), contentTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IApiRequestMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider
    /**
    
            Provides a return type, status code and a set of possible content types returned by a
            successful execution of the action.
            

    */
open class IApiResponseMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    
            Configures a collection of allowed content types which can be produced by the action.
            

    */
    open func SetContentTypes(contentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider_void__SetContentTypes_0__1__MediaTypeCollection(&__thrown, self.get_handle(), contentTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IApiResponseMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider
    /**
    
            Provides metadata information about the response format to an IApiDescriptionProvider.
            

    */
open class IApiResponseTypeMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseTypeMetadataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseTypeMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IReadOnlyList<System.String> GetSupportedContentTypes(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
    /**
    
            Gets a filtered list of content types which are supported by the 
            for the  and .
            

    - Parameter contentType: 
            The content type for which the supported content types are desired, or null if any content
            type can be used.
            
    - Parameter objectType: 
            The  for which the supported content types are desired.
            
    - Returns: Content types which are supported by the .

    */
    open func GetSupportedContentTypes(contentType : dotnet.System.String, objectType : dotnet.System.Type_) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseTypeMetadataProvider_System_Collections_Generic_IReadOnlyList_string___GetSupportedContentTypes_0__2__String_Type(&__thrown, self.get_handle(), contentType.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IApiResponseTypeMetadataProvider


}

// Microsoft.AspNetCore.Mvc.ApplicationModels
extension Microsoft.AspNetCore.Mvc.ApplicationModels {
// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel
    /**
    
            An application model for controller actions.
            

    */
open class ActionModel
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.MethodInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.#ctor(System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new instance of .
            

    - Parameter actionMethod: The action .
    - Parameter attributes: The attributes associated with the action.
    */
    public init(actionMethod : dotnet.System.Reflection.MethodInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_ctor_0__2__MethodInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, actionMethod.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    
            Copy constructor for .
            

    - Parameter other: The  to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_ctor_0__1__ActionModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_ActionMethod()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_ActionMethod
    open func get_ActionMethod() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_MethodInfo__get_ActionMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ActionName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_ActionName
    open func get_ActionName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_String__get_ActionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.set_ActionName(System.String)
    open func set_ActionName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_void__set_ActionName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel get_ApiExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_ApiExplorer
    open /* method final */ func get_ApiExplorer() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_ApiExplorerModel__get_ApiExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
    open /* method final */ func set_ApiExplorer(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_void__set_ApiExplorer_0__1__ApiExplorerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Attributes
    open /* method final */ func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Controller
    open func get_Controller() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_ControllerModel__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Controller(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.set_Controller(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
    open func set_Controller(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_void__set_Controller_0__1__ControllerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Filters
    open /* method final */ func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IOutboundParameterTransformer get_RouteParameterTransformer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_RouteParameterTransformer
    open func get_RouteParameterTransformer() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_IOutboundParameterTransformer__get_RouteParameterTransformer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteParameterTransformer(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.set_RouteParameterTransformer(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
    open func set_RouteParameterTransformer(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_void__set_RouteParameterTransformer_0__1__IOutboundParameterTransformer(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_RouteValues
    open func get_RouteValues() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Properties
    open /* method final */ func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> get_Selectors()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_Selectors
    open func get_Selectors() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel___get_Selectors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the action .
            

    */
    open var ActionMethod : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_ActionMethod();
        }
    }
    /**
    
            Gets the action name.
            

    */
    open var ActionName : dotnet.System.String {
        get {
            return try! get_ActionName();
        }
        set(v) {
            return try! set_ActionName(value: v);
        }
    }
    /**
    
             Gets or sets the  for this action.
             

    */
    public var ApiExplorer : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        get {
            return try! get_ApiExplorer();
        }
        set(v) {
            return try! set_ApiExplorer(value: v);
        }
    }
    /**
    
            Gets the attributes associated with the action.
            

    */
    public var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Controller : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v);
        }
    }
    /**
    
            Gets the action display name.
            

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            Gets the  instances associated with the action.
            

    */
    public var Filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filters();
        }
    }
    /**
    
            Gets the parameters associated with this action.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets a set of properties associated with the action.
            These properties will be copied to .
            

    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets or sets an  that will be used to transform
            built-in route parameters such as action, controller, and area as well as
            additional parameters specified by  into static segments in the route template.
            

    */
    open var RouteParameterTransformer : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer> {
        get {
            return try! get_RouteParameterTransformer();
        }
        set(v) {
            return try! set_RouteParameterTransformer(value: v!);
        }
    }
    /**
    
            Gets a collection of route values that must be present in the
             for the corresponding action to be selected.
            

    */
    open var RouteValues : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_RouteValues();
        }
    }
    /**
    
            Gets the  instances.
            

    */
    open var Selectors : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        get {
            return try! get_Selectors();
        }
    }
} // ActionModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention
    /**
    
            An  that discovers
            
             from applied  or .
             that applies to the action.
            
            

    */
open class ApiConventionApplicationModelConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ApiConventionApplicationModelConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.#ctor(Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute)
    /**
    
            Initializes a new instance of .
            

    - Parameter defaultErrorResponseType: The error type to be used. Use 
            when no default error type is to be inferred.
            
    */
    public init(defaultErrorResponseType : aspnetcore.Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiConventionApplicationModelConvention_ctor_0__1__ProducesErrorResponseTypeAttribute(&__thrown, defaultErrorResponseType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ApiConventionApplicationModelConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute get_DefaultErrorResponseType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.get_DefaultErrorResponseType
    open func get_DefaultErrorResponseType() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiConventionApplicationModelConvention_ProducesErrorResponseTypeAttribute__get_DefaultErrorResponseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute(hndl : __return);
        }
    }
    /**
    
            Gets the default  that is associated with an action
            when no attribute is discovered.
            

    */
    open var DefaultErrorResponseType : aspnetcore.Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute {
        get {
            return try! get_DefaultErrorResponseType();
        }
    }
} // ApiConventionApplicationModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel
    /**
    
            A model for ApiExplorer properties associated with a controller or action.
            

    */
open class ApiExplorerModel
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
    /**
    
            Creates a new  with properties copied from .
            

    - Parameter other: The  to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_ctor_0__1__ApiExplorerModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsVisible()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.get_IsVisible
    open func get_IsVisible() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_System_Nullable_bool___get_IsVisible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsVisible(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.set_IsVisible(System.Nullable{System.Boolean})
    open func set_IsVisible(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_void__set_IsVisible_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.get_GroupName
    open func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_GroupName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.set_GroupName(System.String)
    open func set_GroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ApiExplorerModel_void__set_GroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The value for APIExplorer.ApiDescription.GroupName of
            APIExplorer.ApiDescription objects created for the associated controller or action.
            

    */
    open var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
        set(v) {
            return try! set_GroupName(value: v!);
        }
    }
    /**
    
            If true, APIExplorer.ApiDescription objects will be created for the associated
            controller or action.
            

    */
    open var IsVisible : Optional<Bool> {
        get {
            return try! get_IsVisible();
        }
        set(v) {
            return try! set_IsVisible(value: v!);
        }
    }
} // ApiExplorerModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention
    /**
    
            A  that sets Api Explorer visibility.
            

    */
open class ApiVisibilityConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ApiVisibilityConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApiVisibilityConvention_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ApiVisibilityConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ApiVisibilityConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel
    /**
    
            A model for configuring controllers in an MVC application.
            

    */
open class ApplicationModel
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel get_ApiExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.get_ApiExplorer
    open /* method final */ func get_ApiExplorer() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_ApiExplorerModel__get_ApiExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
    open /* method final */ func set_ApiExplorer(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_void__set_ApiExplorer_0__1__ApiExplorerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel> get_Controllers()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.get_Controllers
    open func get_Controllers() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel___get_Controllers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.get_Filters
    open /* method final */ func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.get_Properties
    open /* method final */ func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
             Gets or sets the  for the application.
             

    */
    public var ApiExplorer : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        get {
            return try! get_ApiExplorer();
        }
        set(v) {
            return try! set_ApiExplorer(value: v);
        }
    }
    /**
    
            Gets the  instances.
            

    */
    open var Controllers : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel> {
        get {
            return try! get_Controllers();
        }
    }
    /**
    
            Gets the global  instances.
            

    */
    public var Filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filters();
        }
    }
    /**
    
            Gets a set of properties associated with all actions.
            These properties will be copied to .
            

    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
} // ApplicationModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext
    /**
    
            A context object for .
            

    */
open class ApplicationModelProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModelProviderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})
    /**
    
            Initializes a new instance of .
            

    - Parameter controllerTypes: The discovered controller  instances.
    */
    public init(controllerTypes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModelProviderContext_ctor_0__1__System_Collections_Generic_IEnumerable_System_Reflection_TypeInfo_(&__thrown, controllerTypes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> get_ControllerTypes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.get_ControllerTypes
    open func get_ControllerTypes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModelProviderContext_System_Collections_Generic_IEnumerable_System_Reflection_TypeInfo___get_ControllerTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModelProviderContext_ApplicationModel__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel(hndl : __return);
        }
    }
    /**
    
            Gets the discovered controller  instances.
            

    */
    open var ControllerTypes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_ControllerTypes();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel {
        get {
            return try! get_Result();
        }
    }
} // ApplicationModelProviderContext


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel
    /**
    
            A model for attribute routes.
            

    */
open class AttributeRouteModel
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
    /**
    
            Initializes a new instance of  using the specified .
            

    - Parameter templateProvider: The .
    */
    public init(templateProvider : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_ctor_0__1__IRouteTemplateProvider(&__thrown, templateProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
    /**
    
            Copy constructor for .
            

    - Parameter other: The  to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_ctor_0__1__AttributeRouteModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel CombineAttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel, Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.CombineAttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel,Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
    /**
    
            Combines two  instances and returns
            a new  instance with the result.
            

    - Parameter left: The left .
    - Parameter right: The right .
    - Returns: A new instance of  that represents the
            combination of the two  instances or null if both
            parameters are null.

    */
    open class func CombineAttributeRouteModel(left : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel>, right : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_AttributeRouteModel__CombineAttributeRouteModel_0__2__AttributeRouteModel_AttributeRouteModel(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String CombineTemplates(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.CombineTemplates(System.String,System.String)
    /**
    
            Combines the prefix and route template for an attribute route.
            

    - Parameter prefix: The prefix.
    - Parameter template: The route template.
    - Returns: The combined pattern.

    */
    open class func CombineTemplates(prefix : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_String__CombineTemplates_0__2__String_String(&__thrown, prefix?.get_handle() ?? nil, template?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsOverridePattern(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.IsOverridePattern(System.String)
    /**
    
            Determines if a template pattern can be used to override a prefix.
            

    - Parameter template: The template.
    - Returns: true if this is an overriding template, false otherwise.

    */
    open class func IsOverridePattern(template : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_bool__IsOverridePattern_0__1__String(&__thrown, template?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ReplaceTokens(System.String, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.ReplaceTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Replaces the tokens in the template with the provided values.
            

    - Parameter template: The template.
    - Parameter values: The token values to use.
    - Returns: A new string with the replaced values.

    */
    open class func ReplaceTokens(template : dotnet.System.String, values : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_String__ReplaceTokens_0__2__String_System_Collections_Generic_IDictionary_string_string_(&__thrown, template.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReplaceTokens(System.String, System.Collections.Generic.IDictionary<System.String,System.String>, Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.ReplaceTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
    /**
    
            Replaces the tokens in the template with the provided values and route token transformer.
            

    - Parameter template: The template.
    - Parameter values: The token values to use.
    - Parameter routeTokenTransformer: The route token transformer.
    - Returns: A new string with the replaced values.

    */
    open class func ReplaceTokens(template : dotnet.System.String, values : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>, routeTokenTransformer : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_String__ReplaceTokens_0__3__String_System_Collections_Generic_IDictionary_string_string__IOutboundParameterTransformer(&__thrown, template.get_handle(), values.get_handle(), routeTokenTransformer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider get_Attribute()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_Attribute
    open func get_Attribute() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_IRouteTemplateProvider__get_Attribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_Template
    open func get_Template() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Template(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.set_Template(System.String)
    open func set_Template(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_void__set_Template_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_Order
    open func get_Order() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_System_Nullable_i32___get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Order(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.set_Order(System.Nullable{System.Int32})
    open func set_Order(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_void__set_Order_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressLinkGeneration()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_SuppressLinkGeneration
    open func get_SuppressLinkGeneration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_bool__get_SuppressLinkGeneration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressLinkGeneration(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.set_SuppressLinkGeneration(System.Boolean)
    open func set_SuppressLinkGeneration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_void__set_SuppressLinkGeneration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressPathMatching()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_SuppressPathMatching
    open func get_SuppressPathMatching() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_bool__get_SuppressPathMatching_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressPathMatching(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.set_SuppressPathMatching(System.Boolean)
    open func set_SuppressPathMatching(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_void__set_SuppressPathMatching_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsAbsoluteTemplate()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.get_IsAbsoluteTemplate
    open func get_IsAbsoluteTemplate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_AttributeRouteModel_bool__get_IsAbsoluteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the .
            

    */
    open var Attribute : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider> {
        get {
            return try! get_Attribute();
        }
    }
    /**
    
            Gets or sets a value that determines if this route template for this model overrides the route template at the parent scope.
            

    */
    open var IsAbsoluteTemplate : Bool {
        get {
            return try! get_IsAbsoluteTemplate();
        }
    }
    /**
    
            Gets or sets the route name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets or sets the route order.
            

    */
    open var Order : Optional<Swift.Int32> {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if this model participates in link generation.
            

    */
    open var SuppressLinkGeneration : Bool {
        get {
            return try! get_SuppressLinkGeneration();
        }
        set(v) {
            return try! set_SuppressLinkGeneration(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if this model participates in path matching (inbound routing).
            

    */
    open var SuppressPathMatching : Bool {
        get {
            return try! get_SuppressPathMatching();
        }
        set(v) {
            return try! set_SuppressPathMatching(value: v);
        }
    }
    /**
    
            Gets or sets the attribute route template.
            

    */
    open var Template : Optional<dotnet.System.String> {
        get {
            return try! get_Template();
        }
        set(v) {
            return try! set_Template(value: v!);
        }
    }
} // AttributeRouteModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention
    /**
    
            An  that adds a 
            to  that transforms .
            

    */
open class ClientErrorResultFilterConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ClientErrorResultFilterConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ClientErrorResultFilterConvention_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ClientErrorResultFilterConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ClientErrorResultFilterConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention
    /**
    
            An  that adds a  with multipart/form-data
            to controllers containing form file () parameters.
            

    */
open class ConsumesConstraintForFormFileParameterConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ConsumesConstraintForFormFileParameterConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ConsumesConstraintForFormFileParameterConvention_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ConsumesConstraintForFormFileParameterConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConsumesConstraintForFormFileParameterConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel
    /**
    
            A model for configuring controllers.
            

    */
open class ControllerModel
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.TypeInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.#ctor(System.Reflection.TypeInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new instance of .
            

    - Parameter controllerType: The type of the controller.
    - Parameter attributes: The attributes.
    */
    public init(controllerType : dotnet.System.Reflection.TypeInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_ctor_0__2__TypeInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, controllerType.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
    /**
    
            Initializes a new instance of .
            

    - Parameter other: The other controller model.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_ctor_0__1__ControllerModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel> get_Actions()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Actions
    open func get_Actions() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_ActionModel___get_Actions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel get_ApiExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_ApiExplorer
    open /* method final */ func get_ApiExplorer() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_ApiExplorerModel__get_ApiExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
    open /* method final */ func set_ApiExplorer(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_void__set_ApiExplorer_0__1__ApiExplorerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel get_Application()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Application
    open func get_Application() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_ApplicationModel__get_Application_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Application(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.set_Application(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
    open func set_Application(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_void__set_Application_0__1__ApplicationModel(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Attributes
    open /* method final */ func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_ControllerName
    open func get_ControllerName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ControllerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.set_ControllerName(System.String)
    open func set_ControllerName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_void__set_ControllerName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_ControllerType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_ControllerType
    open func get_ControllerType() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_TypeInfo__get_ControllerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel> get_ControllerProperties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_ControllerProperties
    open func get_ControllerProperties() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel___get_ControllerProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Filters
    open /* method final */ func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_RouteValues
    open func get_RouteValues() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Properties
    open /* method final */ func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> get_Selectors()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_Selectors
    open func get_Selectors() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel___get_Selectors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The actions on this controller.
            

    */
    open var Actions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel> {
        get {
            return try! get_Actions();
        }
    }
    /**
    
             Gets or sets the  for this controller.
             

    */
    public var ApiExplorer : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        get {
            return try! get_ApiExplorer();
        }
        set(v) {
            return try! set_ApiExplorer(value: v);
        }
    }
    /**
    
            Gets or sets the  of this controller.
            

    */
    open var Application : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel> {
        get {
            return try! get_Application();
        }
        set(v) {
            return try! set_Application(value: v!);
        }
    }
    /**
    
            The attributes of this controller.
            

    */
    public var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets or sets the name of this controller.
            

    */
    open var ControllerName : dotnet.System.String {
        get {
            return try! get_ControllerName();
        }
        set(v) {
            return try! set_ControllerName(value: v);
        }
    }
    /**
    
            The properties of this controller.
            

    */
    open var ControllerProperties : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel> {
        get {
            return try! get_ControllerProperties();
        }
    }
    /**
    
            The type of this controller.
            

    */
    open var ControllerType : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_ControllerType();
        }
    }
    /**
    
            The DisplayName of this controller.
            

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            The filter metadata of this controller.
            

    */
    public var Filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filters();
        }
    }
    /**
    
            Gets a set of properties associated with the controller.
            These properties will be copied to .
            

    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets a collection of route values that must be present in the
             for the corresponding action to be selected.
            

    */
    open var RouteValues : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_RouteValues();
        }
    }
    /**
    
            The selector models of this controller.
            

    */
    open var Selectors : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel> {
        get {
            return try! get_Selectors();
        }
    }
} // ControllerModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention
    /**
    
             Allows customization of the .
             

    */
open class IActionModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter action: The .
    */
    open func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IActionModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel
    /**
    
            An interface that allows access to an ApiExplorerModel.
            

    */
open class IApiExplorerModel
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel get_ApiExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel.get_ApiExplorer
    open func get_ApiExplorer() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel_ApiExplorerModel__get_ApiExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel.set_ApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel)
    open func set_ApiExplorer(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel_void__set_ApiExplorer_0__1__ApiExplorerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IApiExplorerModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention
    /**
    
             Allows customization of the .
             

    */
open class IApplicationModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter application: The .
    */
    open func Apply(application : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention_void__Apply_0__1__ApplicationModel(&__thrown, self.get_handle(), application.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IApplicationModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider
    /**
    
            Builds or modifies an  for action discovery.
            

    */
open class IApplicationModelProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext)
    /**
    
            Executed for the first pass of  building. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider_void__OnProvidersExecuting_0__1__ApplicationModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext)
    /**
    
            Executed for the second pass of  building. See .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider_void__OnProvidersExecuted_0__1__ApplicationModelProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IApplicationModelProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel
    /**
    
            An interface which is used to represent a something with a .
            

    */
open class IBindingModel
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel.get_BindingInfo
    open func get_BindingInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel.set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    open func set_BindingInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel_void__set_BindingInfo_0__1__BindingInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IBindingModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel
    /**
    
            ICommonModel interface.
            

    */
open class ICommonModel
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MemberInfo get_MemberInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo
    open func get_MemberInfo() throws -> dotnet.System.Reflection.MemberInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel_MemberInfo__get_MemberInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MemberInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ICommonModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention
    /**
    
             Allows customization of the .
             

    */
open class IControllerModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IControllerModelConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IControllerModelConvention_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter controller: The .
    */
    open func Apply(controller : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IControllerModelConvention_void__Apply_0__1__ControllerModel(&__thrown, self.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IControllerModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IFilterModel
    /**
    
            Model that has a list of .
            

    */
open class IFilterModel
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IFilterModel.get_Filters
    open func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
} // IFilterModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention
    /**
    
            Allows customization of the properties and parameters on controllers and Razor Pages.
            

    */
open class IParameterModelBaseConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelBaseConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelBaseConvention_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase)
    /**
    
            Called to apply the convention to the .
            

    - Parameter parameter: The .
    */
    open func Apply(parameter : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelBaseConvention_void__Apply_0__1__ParameterModelBase(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IParameterModelBaseConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention
    /**
    
             Allows customization of the .
             

    */
open class IParameterModelConvention
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelConvention
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelConvention_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter parameter: The  .
    */
    open func Apply(parameter : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelConvention_void__Apply_0__1__ParameterModel(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IParameterModelConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel
    /**
    
            An interface which is used to represent something with properties.
            

    */
open class IPropertyModel
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
} // IPropertyModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention
    /**
    
            An  that infers  for parameters.
            

    */
open class InferParameterBindingInfoConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_InferParameterBindingInfoConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter modelMetadataProvider: The model metadata provider.
    */
    public init(modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_InferParameterBindingInfoConvention_ctor_0__1__IModelMetadataProvider(&__thrown, modelMetadataProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    
            Called to apply the convention to the .
            

    - Parameter action: The .
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_InferParameterBindingInfoConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // InferParameterBindingInfoConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention
    /**
    
            An  that adds a 
            to  that responds to invalid 
            

    */
open class InvalidModelStateFilterConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_InvalidModelStateFilterConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_InvalidModelStateFilterConvention_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_InvalidModelStateFilterConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // InvalidModelStateFilterConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel
    /**
    
            A type that represents a paramater.
            

    */
open class ParameterModel
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.ParameterInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.#ctor(System.Reflection.ParameterInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Initializes a new .
            

    - Parameter parameterInfo: The parameter info.
    - Parameter attributes: The attributes.
    */
    public init(parameterInfo : dotnet.System.Reflection.ParameterInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_ctor_0__2__ParameterInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, parameterInfo.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel)
    /**
    
            Initializes a new .
            

    - Parameter other: The parameter model to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_ctor_0__1__ParameterModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_Action
    open func get_Action() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_ActionModel__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Action(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.set_Action(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    open func set_Action(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_void__set_Action_0__1__ActionModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_Properties
    open /* method final */ override func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_Attributes
    open /* method final */ override func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_ParameterInfo
    open func get_ParameterInfo() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ParameterName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_ParameterName
    open func get_ParameterName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_String__get_ParameterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.set_ParameterName(System.String)
    open func set_ParameterName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_void__set_ParameterName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModel_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    open var Action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel {
        get {
            return try! get_Action();
        }
        set(v) {
            return try! set_Action(value: v);
        }
    }
    /**
    
            The attributes.
            

    */
    public override var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            The display name.
            

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            The .
            

    */
    open var ParameterInfo : dotnet.System.Reflection.ParameterInfo {
        get {
            return try! get_ParameterInfo();
        }
    }
    /**
    
            The parameter name.
            

    */
    open var ParameterName : dotnet.System.String {
        get {
            return try! get_ParameterName();
        }
        set(v) {
            return try! set_ParameterName(value: v);
        }
    }
    /**
    
            The properties.
            

    */
    public override var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
} // ParameterModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase
    /**
    
            A model type for reading and manipulation properties and parameters.
            
            Derived instances of this type represent properties and parameters for controllers, and Razor Pages.
            
            

    */
open class ParameterModelBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ParameterType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.get_ParameterType
    open func get_ParameterType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_Type__get_ParameterType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.get_Name
    open /* method final */ func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.get_BindingInfo
    open /* method final */ func get_BindingInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    open /* method final */ func set_BindingInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_ParameterModelBase_void__set_BindingInfo_0__1__BindingInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The attributes.
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            The .
            

    */
    public var BindingInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        get {
            return try! get_BindingInfo();
        }
        set(v) {
            return try! set_BindingInfo(value: v!);
        }
    }
    /**
    
            The name.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            The type.
            

    */
    open var ParameterType : dotnet.System.Type_ {
        get {
            return try! get_ParameterType();
        }
    }
    /**
    
            The properties.
            

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
} // ParameterModelBase


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel
    /**
    
            A type which is used to represent a property in a .
            

    */
open class PropertyModel
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase,
    Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.PropertyInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.#ctor(System.Reflection.PropertyInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Creates a new instance of .
            

    - Parameter propertyInfo: The  for the underlying property.
    - Parameter attributes: Any attributes which are annotated on the property.
    */
    public init(propertyInfo : dotnet.System.Reflection.PropertyInfo, attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_ctor_0__2__PropertyInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, propertyInfo.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel)
    /**
    
            Creates a new instance of  from a given .
            

    - Parameter other: The  which needs to be copied.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_ctor_0__1__PropertyModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.get_Controller
    open func get_Controller() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_ControllerModel__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Controller(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.set_Controller(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
    open func set_Controller(value : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_void__set_Controller_0__1__ControllerModel(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.get_Properties
    open /* method final */ override func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.get_Attributes
    open /* method final */ override func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.get_PropertyInfo
    open func get_PropertyInfo() throws -> dotnet.System.Reflection.PropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.get_PropertyName
    open func get_PropertyName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PropertyName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.set_PropertyName(System.String)
    open func set_PropertyName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_PropertyModel_void__set_PropertyName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public override var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets or sets the  this  is associated with.
            

    */
    open var Controller : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v);
        }
    }
    /**
    */
    public override var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            The .
            

    */
    open var PropertyInfo : dotnet.System.Reflection.PropertyInfo {
        get {
            return try! get_PropertyInfo();
        }
    }
    /**
    
            The name of the property.
            

    */
    open var PropertyName : dotnet.System.String {
        get {
            return try! get_PropertyName();
        }
        set(v) {
            return try! set_PropertyName(value: v);
        }
    }
} // PropertyModel


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention
    /**
    
            An  that sets attribute routing token replacement
            to use the specified  on .
            This convention does not effect Razor page routes.
            

    */
open class RouteTokenTransformerConvention
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_RouteTokenTransformerConvention_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention.#ctor(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer)
    /**
    
            Creates a new instance of  with the specified .
            

    - Parameter parameterTransformer: The  to use with attribute routing token replacement.
    */
    public init(parameterTransformer : aspnetcore.Microsoft.AspNetCore.Routing.IOutboundParameterTransformer) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_RouteTokenTransformerConvention_ctor_0__1__IOutboundParameterTransformer(&__thrown, parameterTransformer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)
    /**
    */
    open /* method final */ func Apply(action : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_RouteTokenTransformerConvention_void__Apply_0__1__ActionModel(&__thrown, self.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RouteTokenTransformerConvention


// type: Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel
    /**
    
            A type that represents a selector.
            

    */
open class SelectorModel
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.#ctor
    /**
    
            Intializes a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.#ctor(Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel)
    /**
    
            Intializes a new .
            

    - Parameter other: The  to copy from.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_ctor_0__1__SelectorModel(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel get_AttributeRouteModel()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.get_AttributeRouteModel
    open func get_AttributeRouteModel() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_AttributeRouteModel__get_AttributeRouteModel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.set_AttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel)
    open func set_AttributeRouteModel(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_void__set_AttributeRouteModel_0__1__AttributeRouteModel(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata> get_ActionConstraints()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.get_ActionConstraints
    open func get_ActionConstraints() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata___get_ActionConstraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Object> get_EndpointMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.get_EndpointMetadata
    open func get_EndpointMetadata() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationModels_SelectorModel_System_Collections_Generic_IList_object___get_EndpointMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            The list of .
            

    */
    open var ActionConstraints : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata> {
        get {
            return try! get_ActionConstraints();
        }
    }
    /**
    
            The .
            

    */
    open var AttributeRouteModel : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel> {
        get {
            return try! get_AttributeRouteModel();
        }
        set(v) {
            return try! set_AttributeRouteModel(value: v!);
        }
    }
    /**
    
            Gets the  associated with the .
            

    */
    open var EndpointMetadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        get {
            return try! get_EndpointMetadata();
        }
    }
} // SelectorModel


}

// Microsoft.AspNetCore.Mvc.ApplicationParts
extension Microsoft.AspNetCore.Mvc.ApplicationParts {
// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart
    /**
    
            A part of an MVC application.
            

    */
open class ApplicationPart
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the  name.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // ApplicationPart


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute
    /**
    
            Specifies an assembly to be added as an .
            
            In the ordinary case, MVC will generate 
            instances on the entry assembly for each dependency that references MVC.
            Each of these assemblies is treated as an .
            
            

    */
public final class ApplicationPartAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter assemblyName: The assembly name.
    */
    public init(assemblyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartAttribute_ctor_0__1__String(&__thrown, assemblyName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_AssemblyName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute.get_AssemblyName
    public func get_AssemblyName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartAttribute_String__get_AssemblyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the assembly name.
            

    */
    public var AssemblyName : dotnet.System.String {
        get {
            return try! get_AssemblyName();
        }
    }
} // ApplicationPartAttribute


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
    /**
    
            Specifies a contract for synthesizing one or more  instances
            from an .
            
            By default, Mvc registers each application assembly that it discovers as an .
            Assemblies can optionally specify an  to configure parts for the assembly
            by using .
            
            

    */
open class ApplicationPartFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly)
    /**
    
            Gets one or more  instances for the specified .
            

    - Parameter assembly: The .
    */
    open func GetApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetApplicationParts_0__1__Assembly(&__thrown, self.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory GetApplicationPartFactory(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory.GetApplicationPartFactory(System.Reflection.Assembly)
    /**
    
            Gets the  for the specified assembly.
            
            An assembly may specify an  using .
            Otherwise,  is used.
            
            

    - Parameter assembly: The .
    - Returns: An instance of .

    */
    open class func GetApplicationPartFactory(assembly : dotnet.System.Reflection.Assembly) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartFactory_ApplicationPartFactory__GetApplicationPartFactory_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory(hndl : __return);
        }
    }
} // ApplicationPartFactory


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager
    /**
    
            Manages the parts and features of an MVC application.
            

    */
open class ApplicationPartManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PopulateFeature<TFeature>(TFeature)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature``1(``0)
    /**
    
            Populates the given  using the list of
            s configured on the
            .
            

    - Parameter feature: The feature instance to populate.
    */
    open func PopulateFeature<UTFeature : SGBridgeGenericValue>(feature : UTFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_void__PopulateFeature_1__1__UTFeature(UTFeature.get_type_handle(), &__thrown, self.get_handle(), feature.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider> get_FeatureProviders()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.get_FeatureProviders
    open func get_FeatureProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider___get_FeatureProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> get_ApplicationParts()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.get_ApplicationParts
    open func get_ApplicationParts() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___get_ApplicationParts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of  instances.
            
            Instances in this collection are stored in precedence order. An  that appears
            earlier in the list has a higher precedence.
            An  may choose to use this an interface as a way to resolve conflicts when
            multiple  instances resolve equivalent feature values.
            
            

    */
    open var ApplicationParts : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        get {
            return try! get_ApplicationParts();
        }
    }
    /**
    
            Gets the list of s.
            

    */
    open var FeatureProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider> {
        get {
            return try! get_FeatureProviders();
        }
    }
} // ApplicationPartManager


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart
    /**
    
            An  backed by an .
            

    */
open class AssemblyPart
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationPartTypeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_AssemblyPart_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.#ctor(System.Reflection.Assembly)
    /**
    
            Initializes a new  instance.
            

    - Parameter assembly: The backing .
    */
    public init(assembly : dotnet.System.Reflection.Assembly) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_AssemblyPart_ctor_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Assembly
    open func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_AssemblyPart_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_AssemblyPart_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> get_Types()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types
    open /* method final */ func get_Types() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_AssemblyPart_System_Collections_Generic_IEnumerable_System_Reflection_TypeInfo___get_Types_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    
            Gets the  of the .
            

    */
    open var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    
            Gets the name of the .
            

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    */
    public var Types : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_Types();
        }
    }
} // AssemblyPart


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory
    /**
    
            Default .
            

    */
open class DefaultApplicationPartFactory
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_DefaultApplicationPartFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_DefaultApplicationPartFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetDefaultApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.GetDefaultApplicationParts(System.Reflection.Assembly)
    /**
    
            Gets the sequence of  instances that are created by this instance of .
            
            Applications may use this method to get the same behavior as this factory produces during MVC's default part discovery.
            
            

    - Parameter assembly: The .
    - Returns: The sequence of  instances.

    */
    open class func GetDefaultApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_DefaultApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetDefaultApplicationParts_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly)
    /**
    */
    open override func GetApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_DefaultApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetApplicationParts_0__1__Assembly(&__thrown, self.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory get_Instance()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.get_Instance
    open class func get_Instance() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_DefaultApplicationPartFactory_DefaultApplicationPartFactory__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory(hndl : __return);
        }
    }
    /**
    
            Gets an instance of .
            

    */
    public static var Instance : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory {
        get {
            return try! get_Instance();
        }
    }
} // DefaultApplicationPartFactory


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider
    /**
    
            Marker interface for 
            implementations.
            

    */
open class IApplicationFeatureProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IApplicationFeatureProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider`1
    /**
    
            A provider for a given  feature.
            

    */
open class IApplicationFeatureProvider_1<TFeature : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider_1,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    public typealias TFeature_IApplicationFeatureProvider_1 = TFeature;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider_1_get_type_handle(TFeature.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, TFeature)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider`1.PopulateFeature(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart},`0)
    /**
    
            Updates the  instance.
            

    - Parameter parts: The list of  instances in the application.
            
    - Parameter feature: The feature instance to populate.
    */
    open func PopulateFeature(parts : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, feature : TFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider_1_void__PopulateFeature_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart__TFeature(TFeature.get_type_handle(), &__thrown, self.get_handle(), parts.get_handle(), feature.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IApplicationFeatureProvider_1


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationPartTypeProvider
    /**
    
            Exposes a set of types from an .
            

    */
open class IApplicationPartTypeProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationPartTypeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationPartTypeProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> get_Types()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationPartTypeProvider.get_Types
    open func get_Types() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationPartTypeProvider_System_Collections_Generic_IEnumerable_System_Reflection_TypeInfo___get_Types_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IApplicationPartTypeProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider
    /**
    
            Exposes one or more reference paths from an .
            

    */
open class ICompilationReferencesProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationParts_ICompilationReferencesProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ICompilationReferencesProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<System.String> GetReferencePaths()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider.GetReferencePaths
    /**
    
            Gets reference paths used to perform runtime compilation.
            

    */
    open func GetReferencePaths() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ICompilationReferencesProvider_System_Collections_Generic_IEnumerable_string___GetReferencePaths_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ICompilationReferencesProvider


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory
    /**
    
            An  that produces no parts.
            
            This factory may be used to to preempt Mvc's default part discovery allowing for custom configuration at a later stage.
            
            

    */
open class NullApplicationPartFactory
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_NullApplicationPartFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_NullApplicationPartFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly)
    /**
    */
    open override func GetApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_NullApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetApplicationParts_0__1__Assembly(&__thrown, self.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // NullApplicationPartFactory


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute
    /**
    
            Provides a  type.
            

    */
public final class ProvideApplicationPartFactoryAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ProvideApplicationPartFactoryAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.#ctor(System.Type)
    /**
    
            Creates a new instance of  with the specified type.
            

    - Parameter factoryType: The factory type.
    */
    public init(factoryType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_ProvideApplicationPartFactoryAttribute_ctor_0__1__Type(&__thrown, factoryType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.#ctor(System.String)
    /**
    
            Creates a new instance of  with the specified type name.
            

    - Parameter factoryTypeName: The assembly qualified type name.
    */
    public init(factoryTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_ProvideApplicationPartFactoryAttribute_ctor_0__1__String(&__thrown, factoryTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Type GetFactoryType()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.GetFactoryType
    /**
    
            Gets the factory type.
            

    - Returns: 

    */
    public func GetFactoryType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ProvideApplicationPartFactoryAttribute_Type__GetFactoryType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
} // ProvideApplicationPartFactoryAttribute


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute
    /**
    
            Specifies a assembly to load as part of MVC's assembly discovery mechanism.
            

    */
public final class RelatedAssemblyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_RelatedAssemblyAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter assemblyFileName: The file name, without extension, of the related assembly.
    */
    public init(assemblyFileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_RelatedAssemblyAttribute_ctor_0__1__String(&__thrown, assemblyFileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<System.Reflection.Assembly> GetRelatedAssemblies(System.Reflection.Assembly, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(System.Reflection.Assembly,System.Boolean)
    /**
    
            Gets  instances specified by .
            

    - Parameter assembly: The assembly containing  instances.
    - Parameter throwOnError: Determines if the method throws if a related assembly could not be located.
    - Returns: Related  instances.

    */
    public class func GetRelatedAssemblies(assembly : dotnet.System.Reflection.Assembly, throwOnError : Bool) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Reflection.Assembly> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_RelatedAssemblyAttribute_System_Collections_Generic_IReadOnlyList_System_Reflection_Assembly___GetRelatedAssemblies_0__2__Assembly_bool(&__thrown, assembly.get_handle(), Swift.Int32(throwOnError ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AssemblyFileName()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.get_AssemblyFileName
    public func get_AssemblyFileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_RelatedAssemblyAttribute_String__get_AssemblyFileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the assembly file name without extension.
            

    */
    public var AssemblyFileName : dotnet.System.String {
        get {
            return try! get_AssemblyFileName();
        }
    }
} // RelatedAssemblyAttribute


}

// Microsoft.AspNetCore.Mvc.Authorization
extension Microsoft.AspNetCore.Mvc.Authorization {
// type: Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter
    /**
    
            An implementation of 
            

    */
open class AllowAnonymousFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Authorization_IAllowAnonymousFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Authorization_AllowAnonymousFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AllowAnonymousFilter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AllowAnonymousFilter


// type: Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter
    /**
    
            An implementation of  which applies a specific
            . MVC recognizes the  and adds an instance of
            this filter to the associated action or controller.
            

    */
open class AuthorizeFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.#ctor
    /**
    
            Initializes a new  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.#ctor(Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
    /**
    
            Initialize a new  instance.
            

    - Parameter policy: Authorization policy to be used.
    */
    public init(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_ctor_0__1__AuthorizationPolicy(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData>)
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.#ctor(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizeData})
    /**
    
            Initialize a new  instance.
            

    - Parameter policyProvider: The  to use to resolve policy names.
    - Parameter authorizeData: The  to combine into an .
    */
    public init(policyProvider : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider, authorizeData : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_ctor_0__2__IAuthorizationPolicyProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizeData_(&__thrown, policyProvider.get_handle(), authorizeData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData>)
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authorization.IAuthorizeData})
    /**
    
            Initializes a new instance of .
            

    - Parameter authorizeData: The  to combine into an .
    */
    public init(authorizeData : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizeData_(&__thrown, authorizeData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.#ctor(System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter policy: The name of the policy to require for authorization.
    */
    public init(policy : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_ctor_0__1__String(&__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
    /**
    */
    open func OnAuthorizationAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_Task__OnAuthorizationAsync_0__1__AuthorizationFilterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider get_PolicyProvider()
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.get_PolicyProvider
    open func get_PolicyProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_IAuthorizationPolicyProvider__get_PolicyProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData> get_AuthorizeData()
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.get_AuthorizeData
    open func get_AuthorizeData() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authorization_IAuthorizeData___get_AuthorizeData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.AuthorizationPolicy get_Policy()
// docid: M:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.get_Policy
    open func get_Policy() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Authorization_AuthorizeFilter_AuthorizationPolicy__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The  to combine into an .
            

    */
    open var AuthorizeData : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>> {
        get {
            return try! get_AuthorizeData();
        }
    }
    /**
    
            Gets the authorization policy to be used.
            

    */
    open var Policy : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy> {
        get {
            return try! get_Policy();
        }
    }
    /**
    
            The  to use to resolve policy names.
            

    */
    open var PolicyProvider : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider> {
        get {
            return try! get_PolicyProvider();
        }
    }
} // AuthorizeFilter


}

// Microsoft.AspNetCore.Mvc.Controllers
extension Microsoft.AspNetCore.Mvc.Controllers {
// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor
    /**
    
            A descriptor for an action of a controller.
            

    */
open class ControllerActionDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.get_ControllerName
    open func get_ControllerName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ControllerName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.set_ControllerName(System.String)
    open func set_ControllerName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_void__set_ControllerName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ActionName()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.get_ActionName
    open func get_ActionName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_String__get_ActionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.set_ActionName(System.String)
    open func set_ActionName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_void__set_ActionName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_MethodInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.get_MethodInfo
    open func get_MethodInfo() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_MethodInfo__get_MethodInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MethodInfo(System.Reflection.MethodInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.set_MethodInfo(System.Reflection.MethodInfo)
    open func set_MethodInfo(value : dotnet.System.Reflection.MethodInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_void__set_MethodInfo_0__1__MethodInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_ControllerTypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.get_ControllerTypeInfo
    open func get_ControllerTypeInfo() throws -> dotnet.System.Reflection.TypeInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_TypeInfo__get_ControllerTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.TypeInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ControllerTypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.set_ControllerTypeInfo(System.Reflection.TypeInfo)
    open func set_ControllerTypeInfo(value : dotnet.System.Reflection.TypeInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_void__set_ControllerTypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.get_DisplayName
    open override func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.set_DisplayName(System.String)
    open override func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerActionDescriptor_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the action.
            

    */
    open var ActionName : dotnet.System.String {
        get {
            return try! get_ActionName();
        }
        set(v) {
            return try! set_ActionName(value: v);
        }
    }
    /**
    
            The name of the controller.
            

    */
    open var ControllerName : dotnet.System.String {
        get {
            return try! get_ControllerName();
        }
        set(v) {
            return try! set_ControllerName(value: v);
        }
    }
    /**
    
            The  of the controller..
            

    */
    open var ControllerTypeInfo : dotnet.System.Reflection.TypeInfo {
        get {
            return try! get_ControllerTypeInfo();
        }
        set(v) {
            return try! set_ControllerTypeInfo(value: v);
        }
    }
    /**
    */
    open override var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            The .
            

    */
    open var MethodInfo : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_MethodInfo();
        }
        set(v) {
            return try! set_MethodInfo(value: v);
        }
    }
} // ControllerActionDescriptor


// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider
    /**
    
            Provides methods to create an MVC controller.
            

    */
open class ControllerActivatorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerActivatorProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.#ctor(Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator)
    /**
    
            Initializes a new instance of .
            

    - Parameter controllerActivator: A  which is delegated to when not the default implementation.
    */
    public init(controllerActivator : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerActivatorProvider_ctor_0__1__IControllerActivator(&__thrown, controllerActivator.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    */
    open /* method final */ func CreateActivator(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateActivator_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    */
    open /* method final */ func CreateReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActivatorProvider_System_Action_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    */
    open /* method final */ func CreateAsyncReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object_System_Threading_Tasks_ValueTask___CreateAsyncReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ControllerActivatorProvider


// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor
    /**
    
            A descriptor for model bound properties of a controller.
            

    */
open class ControllerBoundPropertyDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,
    Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerBoundPropertyDescriptor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerBoundPropertyDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.get_PropertyInfo
    open /* method final */ func get_PropertyInfo() throws -> dotnet.System.Reflection.PropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerBoundPropertyDescriptor_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PropertyInfo(System.Reflection.PropertyInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.set_PropertyInfo(System.Reflection.PropertyInfo)
    open func set_PropertyInfo(value : dotnet.System.Reflection.PropertyInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerBoundPropertyDescriptor_void__set_PropertyInfo_0__1__PropertyInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  for this property.
            

    */
    public var PropertyInfo : dotnet.System.Reflection.PropertyInfo {
        get {
            return try! get_PropertyInfo();
        }
        set(v) {
            return try! set_PropertyInfo(value: v);
        }
    }
} // ControllerBoundPropertyDescriptor


// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature
    /**
    
            The list of controllers types in an MVC application. The  can be populated
            using the  that is available during startup at 
            and  or at a later stage by requiring the 
            as a dependency in a component.
            

    */
open class ControllerFeature
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Reflection.TypeInfo> get_Controllers()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature.get_Controllers
    open func get_Controllers() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerFeature_System_Collections_Generic_IList_System_Reflection_TypeInfo___get_Controllers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of controller types in an MVC application.
            

    */
    open var Controllers : dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_Controllers();
        }
    }
} // ControllerFeature


// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider
    /**
    
            Discovers controllers from a list of  instances.
            

    */
open class ControllerFeatureProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerFeatureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerFeatureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart},Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature)
    /**
    */
    open /* method final */ func PopulateFeature(parts : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, feature : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerFeatureProvider_void__PopulateFeature_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart__ControllerFeature(&__thrown, self.get_handle(), parts.get_handle(), feature.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ControllerFeatureProvider


// type: Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor
    /**
    
            A descriptor for method parameters of an action method.
            

    */
open class ControllerParameterDescriptor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,
    Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ControllerParameterDescriptor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ControllerParameterDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.get_ParameterInfo
    open /* method final */ func get_ParameterInfo() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ControllerParameterDescriptor_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterInfo(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.set_ParameterInfo(System.Reflection.ParameterInfo)
    open func set_ParameterInfo(value : dotnet.System.Reflection.ParameterInfo) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ControllerParameterDescriptor_void__set_ParameterInfo_0__1__ParameterInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    public var ParameterInfo : dotnet.System.Reflection.ParameterInfo {
        get {
            return try! get_ParameterInfo();
        }
        set(v) {
            return try! set_ParameterInfo(value: v);
        }
    }
} // ControllerParameterDescriptor


// type: Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator
    /**
    
            Provides methods to create a controller.
            

    */
open class IControllerActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Create(Microsoft.AspNetCore.Mvc.ControllerContext)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.Create(Microsoft.AspNetCore.Mvc.ControllerContext)
    /**
    
            Creates a controller.
            

    - Parameter context: The  for the executing action.
    */
    open func Create(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator_Object__Create_0__1__ControllerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void Release(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.Release(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    
            Releases a controller.
            

    - Parameter context: The  for the executing action.
    - Parameter controller: The controller to release.
    */
    open func Release(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator_void__Release_0__2__ControllerContext_Object(&__thrown, self.get_handle(), context.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask ReleaseAsync(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.ReleaseAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    
            Releases a controller asynchronously.
            

    - Parameter context: The  for the executing action.
    - Parameter controller: The controller to release.
    */
    open func ReleaseAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext, controller : dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator_ValueTask__ReleaseAsync_0__2__ControllerContext_Object(&__thrown, self.get_handle(), context.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // IControllerActivator


// type: Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider
    /**
    
            Provides methods to create a MVC controller.
            

    */
open class IControllerActivatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Creates a  that creates a controller.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to activate the controller.

    */
    open func CreateActivator(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateActivator_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Creates an  that releases a controller.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated controller.

    */
    open func CreateReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider_System_Action_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Creates an  that releases a controller.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to dispose the activated controller.

    */
    open func CreateAsyncReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object_System_Threading_Tasks_ValueTask___CreateAsyncReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IControllerActivatorProvider


// type: Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory
    /**
    
            Provides methods for creation and disposal of controllers.
            

    */
open class IControllerFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object CreateController(Microsoft.AspNetCore.Mvc.ControllerContext)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.CreateController(Microsoft.AspNetCore.Mvc.ControllerContext)
    /**
    
            Creates a new controller for the specified .
            

    - Parameter context:  for the action to execute.
    - Returns: The controller.

    */
    open func CreateController(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory_Object__CreateController_0__1__ControllerContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void ReleaseController(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.ReleaseController(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    
            Releases a controller instance.
            

    - Parameter context:  for the executing action.
    - Parameter controller: The controller.
    */
    open func ReleaseController(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory_void__ReleaseController_0__2__ControllerContext_Object(&__thrown, self.get_handle(), context.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask ReleaseControllerAsync(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.ReleaseControllerAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    
            Releases a controller instance asynchronously.
            

    - Parameter context:  for the executing action.
    - Parameter controller: The controller.
    */
    open func ReleaseControllerAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext, controller : dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory_ValueTask__ReleaseControllerAsync_0__2__ControllerContext_Object(&__thrown, self.get_handle(), context.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // IControllerFactory


// type: Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider
    /**
    
            Provides methods to create and release a controller.
            

    */
open class IControllerFactoryProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateControllerFactory(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateControllerFactory(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Creates a factory for producing controllers for the specified .
            

    - Parameter descriptor: The .
    - Returns: The controller factory.

    */
    open func CreateControllerFactory(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateControllerFactory_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> CreateControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Releases a controller.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created controller.

    */
    open func CreateControllerReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider_System_Action_Microsoft_AspNetCore_Mvc_ControllerContext_object___CreateControllerReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Func<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Threading.Tasks.ValueTask> CreateAsyncControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateAsyncControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    
            Releases a controller asynchronously.
            

    - Parameter descriptor: The .
    - Returns: The delegate used to release the created controller asynchronously.

    */
    open func CreateAsyncControllerReleaser(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor) throws -> Optional<dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object,dotnet.System.Threading.Tasks.ValueTask>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider_System_Func_Microsoft_AspNetCore_Mvc_ControllerContext_object_System_Threading_Tasks_ValueTask___CreateAsyncControllerReleaser_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), descriptor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IControllerFactoryProvider


// type: Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator
    /**
    
            A  that retrieves controllers as services from the request's
            .
            

    */
open class ServiceBasedControllerActivator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controllers_ServiceBasedControllerActivator_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Controllers_ServiceBasedControllerActivator_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Create(Microsoft.AspNetCore.Mvc.ControllerContext)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.Create(Microsoft.AspNetCore.Mvc.ControllerContext)
    /**
    */
    open /* method final */ func Create(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controllers_ServiceBasedControllerActivator_Object__Create_0__1__ControllerContext(&__thrown, self.get_handle(), actionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void Release(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.Release(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    */
    open func Release(context : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controllers_ServiceBasedControllerActivator_void__Release_0__2__ControllerContext_Object(&__thrown, self.get_handle(), context.get_handle(), controller.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ServiceBasedControllerActivator


}

// Microsoft.AspNetCore.Mvc.Core
// Microsoft.AspNetCore.Mvc.Core.Infrastructure
extension Microsoft.AspNetCore.Mvc.Core.Infrastructure {
// type: Microsoft.AspNetCore.Mvc.Core.Infrastructure.IAntiforgeryValidationFailedResult
    /**
    
            Represents an  that is used when the
            antiforgery validation failed. This can be matched inside MVC result
            filters to process the validation failure.
            

    */
open class IAntiforgeryValidationFailedResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Core_Infrastructure_IAntiforgeryValidationFailedResult,
    Microsoft_AspNetCore_Mvc_IActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Core_Infrastructure_IAntiforgeryValidationFailedResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IAntiforgeryValidationFailedResult


}


// Microsoft.AspNetCore.Mvc.Diagnostics
extension Microsoft.AspNetCore.Mvc.Diagnostics {
// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData
    /**
    
            An  that occurs after an action.
            

    */
public final class AfterActionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter httpContext: The .
    - Parameter routeData: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_ctor_0__3__ActionDescriptor_HttpContext_RouteData(&__thrown, actionDescriptor.get_handle(), httpContext.get_handle(), routeData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.get_HttpContext
    public func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.get_RouteData
    public func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionEventData_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            The route data.
            

    */
    public var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
} // AfterActionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterActionFilterOnActionExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_ctor_0__3__ActionDescriptor_ActionExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext get_ActionExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.get_ActionExecutedContext
    public func get_ActionExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_ActionExecutedContext__get_ActionExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var ActionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        get {
            return try! get_ActionExecutedContext();
        }
    }
    /**
    
            The action filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // AfterActionFilterOnActionExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterActionFilterOnActionExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_ctor_0__3__ActionDescriptor_ActionExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext get_ActionExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.get_ActionExecutingContext
    public func get_ActionExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_ActionExecutingContext__get_ActionExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var ActionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        get {
            return try! get_ActionExecutingContext();
        }
    }
    /**
    
            The action filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // AfterActionFilterOnActionExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData
    /**
    
            An  that occurs after  execution.
            

    */
public final class AfterActionFilterOnActionExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_ctor_0__3__ActionDescriptor_ActionExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext get_ActionExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.get_ActionExecutedContext
    public func get_ActionExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_ActionExecutedContext__get_ActionExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionFilterOnActionExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action that ran.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The action executed context.
            

    */
    public var ActionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        get {
            return try! get_ActionExecutedContext();
        }
    }
    /**
    
            The action filter that ran.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // AfterActionFilterOnActionExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData
    /**
    
            An  that occurs after an action result is invoked.
            

    */
public final class AfterActionResultEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionResultEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionResultEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter result: The .
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionResultEventData_ctor_0__2__ActionContext_IActionResult(&__thrown, actionContext.get_handle(), result.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionResultEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.get_Result
    public func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterActionResultEventData_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
    /**
    
            The action context.
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The result.
            

    */
    public var Result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        get {
            return try! get_Result();
        }
    }
} // AfterActionResultEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterAuthorizationFilterOnAuthorizationEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter authorizationContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, authorizationContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_ctor_0__3__ActionDescriptor_AuthorizationFilterContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), authorizationContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext get_AuthorizationContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.get_AuthorizationContext
    public func get_AuthorizationContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_AuthorizationFilterContext__get_AuthorizationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterAuthorizationFilterOnAuthorizationEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The authorization context.
            

    */
    public var AuthorizationContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext {
        get {
            return try! get_AuthorizationContext();
        }
    }
    /**
    
            The authorization filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // AfterAuthorizationFilterOnAuthorizationEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData
    /**
    
            An  that occurs after an controller action method.
            

    */
public final class AfterControllerActionMethodEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>, System.Object, Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Object,Microsoft.AspNetCore.Mvc.IActionResult)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter arguments: The arguments to the action.
    - Parameter controller: The controller.
    - Parameter result: The .
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>, controller : dotnet.System.Object, result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_ctor_0__4__ActionContext_System_Collections_Generic_IReadOnlyDictionary_string_object__Object_IActionResult(&__thrown, actionContext.get_handle(), arguments.get_handle(), controller.get_handle(), result.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.get_Controller
    public func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.get_Result
    public func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterControllerActionMethodEventData_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
    /**
    
            The context.
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The arguments.
            

    */
    public var Arguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Arguments();
        }
    }
    /**
    
            The controller.
            

    */
    public var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
    /**
    
            The result.
            

    */
    public var Result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        get {
            return try! get_Result();
        }
    }
} // AfterControllerActionMethodEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterExceptionFilterOnExceptionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter exceptionContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, exceptionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_ctor_0__3__ActionDescriptor_ExceptionContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), exceptionContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ExceptionContext get_ExceptionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.get_ExceptionContext
    public func get_ExceptionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_ExceptionContext__get_ExceptionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterExceptionFilterOnExceptionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The exception context.
            

    */
    public var ExceptionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext {
        get {
            return try! get_ExceptionContext();
        }
    }
    /**
    
            The exception filter that ran.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // AfterExceptionFilterOnExceptionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterResourceFilterOnResourceExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_ctor_0__3__ActionDescriptor_ResourceExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext get_ResourceExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.get_ResourceExecutedContext
    public func get_ResourceExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_ResourceExecutedContext__get_ResourceExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The resource context.
            

    */
    public var ResourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        get {
            return try! get_ResourceExecutedContext();
        }
    }
} // AfterResourceFilterOnResourceExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterResourceFilterOnResourceExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_ctor_0__3__ActionDescriptor_ResourceExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext get_ResourceExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.get_ResourceExecutingContext
    public func get_ResourceExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_ResourceExecutingContext__get_ResourceExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The resource filter that ran.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        get {
            return try! get_ResourceExecutingContext();
        }
    }
} // AfterResourceFilterOnResourceExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData
    /**
    
            An  that occurs after  execution.
            

    */
public final class AfterResourceFilterOnResourceExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_ctor_0__3__ActionDescriptor_ResourceExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext get_ResourceExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.get_ResourceExecutedContext
    public func get_ResourceExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_ResourceExecutedContext__get_ResourceExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResourceFilterOnResourceExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The resource filter that will be run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        get {
            return try! get_ResourceExecutedContext();
        }
    }
} // AfterResourceFilterOnResourceExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterResultFilterOnResultExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_ctor_0__3__ActionDescriptor_ResultExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext get_ResultExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.get_ResultExecutedContext
    public func get_ResultExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_ResultExecutedContext__get_ResultExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The filter that ran.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The result executed context.
            

    */
    public var ResultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        get {
            return try! get_ResultExecutedContext();
        }
    }
} // AfterResultFilterOnResultExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData
    /**
    
            An  that occurs after .
            

    */
public final class AfterResultFilterOnResultExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_ctor_0__3__ActionDescriptor_ResultExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext get_ResultExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.get_ResultExecutingContext
    public func get_ResultExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_ResultExecutingContext__get_ResultExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        get {
            return try! get_ResultExecutingContext();
        }
    }
} // AfterResultFilterOnResultExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData
    /**
    
            An  that occurs after a ResultFilter's OnResultExecution
            

    */
public final class AfterResultFilterOnResultExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_ctor_0__3__ActionDescriptor_ResultExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext get_ResultExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.get_ResultExecutedContext
    public func get_ResultExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_ResultExecutedContext__get_ResultExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterResultFilterOnResultExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The result filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        get {
            return try! get_ResultExecutedContext();
        }
    }
} // AfterResultFilterOnResultExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData
    /**
    
            An  that occurs before an action.
            

    */
public final class BeforeActionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter httpContext: The .
    - Parameter routeData: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_ctor_0__3__ActionDescriptor_HttpContext_RouteData(&__thrown, actionDescriptor.get_handle(), httpContext.get_handle(), routeData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.get_HttpContext
    public func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.get_RouteData
    public func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionEventData_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            The route data.
            

    */
    public var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
} // BeforeActionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeActionFilterOnActionExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_ctor_0__3__ActionDescriptor_ActionExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext get_ActionExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.get_ActionExecutedContext
    public func get_ActionExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_ActionExecutedContext__get_ActionExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var ActionExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext {
        get {
            return try! get_ActionExecutedContext();
        }
    }
    /**
    
            The action filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // BeforeActionFilterOnActionExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeActionFilterOnActionExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_ctor_0__3__ActionDescriptor_ActionExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext get_ActionExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.get_ActionExecutingContext
    public func get_ActionExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_ActionExecutingContext__get_ActionExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The action context.
            

    */
    public var ActionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        get {
            return try! get_ActionExecutingContext();
        }
    }
    /**
    
            The action filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // BeforeActionFilterOnActionExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData
    /**
    
            An  that occurs before  execution.
            

    */
public final class BeforeActionFilterOnActionExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter actionExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, actionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_ctor_0__3__ActionDescriptor_ActionExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), actionExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext get_ActionExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.get_ActionExecutingContext
    public func get_ActionExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_ActionExecutingContext__get_ActionExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionFilterOnActionExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action that will run..
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The action context.
            

    */
    public var ActionExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext {
        get {
            return try! get_ActionExecutingContext();
        }
    }
    /**
    
            The action filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // BeforeActionFilterOnActionExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData
    /**
    
            An  that occurs before an action result is invoked.
            

    */
public final class BeforeActionResultEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionResultEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionResultEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter result: The .
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionResultEventData_ctor_0__2__ActionContext_IActionResult(&__thrown, actionContext.get_handle(), result.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionResultEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.get_Result
    public func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeActionResultEventData_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
    /**
    
            The action context.
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The action result.
            

    */
    public var Result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        get {
            return try! get_Result();
        }
    }
} // BeforeActionResultEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeAuthorizationFilterOnAuthorizationEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter authorizationContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, authorizationContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_ctor_0__3__ActionDescriptor_AuthorizationFilterContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), authorizationContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext get_AuthorizationContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.get_AuthorizationContext
    public func get_AuthorizationContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_AuthorizationFilterContext__get_AuthorizationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeAuthorizationFilterOnAuthorizationEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The authorization context.
            

    */
    public var AuthorizationContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext {
        get {
            return try! get_AuthorizationContext();
        }
    }
    /**
    
            The authorization filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // BeforeAuthorizationFilterOnAuthorizationEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData
    /**
    
            An  that occurs before an controller action method.
            

    */
public final class BeforeControllerActionMethodEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Object)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter actionArguments: The arguments to the action.
    - Parameter controller: The controller.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, actionArguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_ctor_0__3__ActionContext_System_Collections_Generic_IReadOnlyDictionary_string_object__Object(&__thrown, actionContext.get_handle(), actionArguments.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.get_ActionContext
    public func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_ActionArguments()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.get_ActionArguments
    public func get_ActionArguments() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_System_Collections_Generic_IReadOnlyDictionary_string_object___get_ActionArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.get_Controller
    public func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeControllerActionMethodEventData_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            The action arguments.
            

    */
    public var ActionArguments : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_ActionArguments();
        }
    }
    /**
    
            The action context.
            

    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            The controller.
            

    */
    public var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
} // BeforeControllerActionMethodEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException
    /**
    
            An  that occurs before .
            

    */
public final class BeforeExceptionFilterOnException
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter exceptionContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, exceptionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_ctor_0__3__ActionDescriptor_ExceptionContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), exceptionContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ExceptionContext get_ExceptionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.get_ExceptionContext
    public func get_ExceptionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_ExceptionContext__get_ExceptionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeExceptionFilterOnException_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The context.
            

    */
    public var ExceptionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext {
        get {
            return try! get_ExceptionContext();
        }
    }
    /**
    
            The exception filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
} // BeforeExceptionFilterOnException


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeResourceFilterOnResourceExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_ctor_0__3__ActionDescriptor_ResourceExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext get_ResourceExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.get_ResourceExecutedContext
    public func get_ResourceExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_ResourceExecutedContext__get_ResourceExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The resource filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResourceExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext {
        get {
            return try! get_ResourceExecutedContext();
        }
    }
} // BeforeResourceFilterOnResourceExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeResourceFilterOnResourceExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_ctor_0__3__ActionDescriptor_ResourceExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext get_ResourceExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.get_ResourceExecutingContext
    public func get_ResourceExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_ResourceExecutingContext__get_ResourceExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The resource filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        get {
            return try! get_ResourceExecutingContext();
        }
    }
} // BeforeResourceFilterOnResourceExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData
    /**
    
            An  that occurs before  execution.
            

    */
public final class BeforeResourceFilterOnResourceExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resourceExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_ctor_0__3__ActionDescriptor_ResourceExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resourceExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext get_ResourceExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.get_ResourceExecutingContext
    public func get_ResourceExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_ResourceExecutingContext__get_ResourceExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResourceFilterOnResourceExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The resource filter that will run.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResourceExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext {
        get {
            return try! get_ResourceExecutingContext();
        }
    }
} // BeforeResourceFilterOnResourceExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeResultFilterOnResultExecutedEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutedContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_ctor_0__3__ActionDescriptor_ResultExecutedContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutedContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext get_ResultExecutedContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.get_ResultExecutedContext
    public func get_ResultExecutedContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_ResultExecutedContext__get_ResultExecutedContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutedEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The result filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResultExecutedContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext {
        get {
            return try! get_ResultExecutedContext();
        }
    }
} // BeforeResultFilterOnResultExecutedEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData
    /**
    
            An  that occurs before .
            

    */
public final class BeforeResultFilterOnResultExecutingEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_ctor_0__3__ActionDescriptor_ResultExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext get_ResultExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.get_ResultExecutingContext
    public func get_ResultExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_ResultExecutingContext__get_ResultExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutingEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The result filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        get {
            return try! get_ResultExecutingContext();
        }
    }
} // BeforeResultFilterOnResultExecutingEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData
    /**
    
            An  that occurs before a ResultFilter's OnResultExecution
            

    */
public final class BeforeResultFilterOnResultExecutionEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter resultExecutingContext: The .
    - Parameter filter: The .
    */
    public init(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, resultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_ctor_0__3__ActionDescriptor_ResultExecutingContext_IFilterMetadata(&__thrown, actionDescriptor.get_handle(), resultExecutingContext.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext get_ResultExecutingContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.get_ResultExecutingContext
    public func get_ResultExecutingContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_ResultExecutingContext__get_ResultExecutingContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.get_Filter
    public func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeResultFilterOnResultExecutionEventData_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    /**
    
            The action.
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The result filter.
            

    */
    public var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The context.
            

    */
    public var ResultExecutingContext : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext {
        get {
            return try! get_ResultExecutingContext();
        }
    }
} // BeforeResultFilterOnResultExecutionEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.EventData
    /**
    
            A base class that for an event.
            

    */
open class EventData
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_EventData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.EventData+Enumerator
// boxed value type
    /**
    
            A struct that represents an Enumerator
            

    */
public final class EventData_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_EventData_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Current keyvalue pair.
            

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_EventData_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_EventData_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Diagnostics_EventData_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Object> get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_EventData_Enumerator_System_Collections_Generic_KeyValuePair_string_object___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // EventData_Enumerator


}

// Microsoft.AspNetCore.Mvc.Filters
extension Microsoft.AspNetCore.Mvc.Filters {
// type: Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute
    /**
    
            An abstract filter that asynchronously surrounds execution of the action and the action result. Subclasses
            should override ,  or
             but not  and either of the other two.
            Similarly subclasses should override ,  or
             but not  and either of the other two.
            

    */
open class ActionFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    /**
    */
    open func OnActionExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_void__OnActionExecuting_0__1__ActionExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
    /**
    */
    open func OnActionExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_void__OnActionExecuted_0__1__ActionExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
    /**
    */
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_Task__OnActionExecutionAsync_0__2__ActionExecutingContext_ActionExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : @escaping () async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate(next);
        return try await OnActionExecutionAsync(context: context, next: del_next);
    }
    // void OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
    /**
    */
    open func OnResultExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_void__OnResultExecuting_0__1__ResultExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
    /**
    */
    open func OnResultExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_void__OnResultExecuted_0__1__ResultExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
    /**
    */
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_Task__OnResultExecutionAsync_0__2__ResultExecutingContext_ResultExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : @escaping () async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate(next);
        return try await OnResultExecutionAsync(context: context, next: del_next);
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // ActionFilterAttribute


// type: Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute
    /**
    
            An abstract filter that runs asynchronously after an action has thrown an . Subclasses
            must override  or  but not both.
            

    */
open class ExceptionFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncExceptionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IExceptionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ExceptionFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
    /**
    */
    open func OnExceptionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionFilterAttribute_Task__OnExceptionAsync_0__1__ExceptionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
    /**
    */
    open func OnException(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionFilterAttribute_void__OnException_0__1__ExceptionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // ExceptionFilterAttribute


// type: Microsoft.AspNetCore.Mvc.Filters.FilterCollection
    /**
    
            A collection of .
            

    */
open class FilterCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_FilterCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add<TFilterType>()
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)
    /**
    
            Adds a type representing a .
            

    - Parameter filterType: Type representing a .
    - Returns: A  representing the added type.

    */
    open func Add(filterType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterCollection_IFilterMetadata__Add_0__1__Type(&__thrown, self.get_handle(), filterType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add<TFilterType>(System.Int32)
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add(System.Type, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type,System.Int32)
    /**
    
            Adds a type representing a .
            

    - Parameter filterType: Type representing a .
    - Parameter order: The order of the added filter.
    - Returns: A  representing the added type.

    */
    open func Add(filterType : dotnet.System.Type_, order : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterCollection_IFilterMetadata__Add_0__2__Type_i32(&__thrown, self.get_handle(), filterType.get_handle(), order);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService<TFilterType>()
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)
    /**
    
            Adds a type representing a .
            

    - Parameter filterType: Type representing a .
    - Returns: A  representing the added service type.

    */
    open func AddService(filterType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterCollection_IFilterMetadata__AddService_0__1__Type(&__thrown, self.get_handle(), filterType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService<TFilterType>(System.Int32)
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService(System.Type, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type,System.Int32)
    /**
    
            Adds a type representing a .
            

    - Parameter filterType: Type representing a .
    - Parameter order: The order of the added filter.
    - Returns: A  representing the added service type.

    */
    open func AddService(filterType : dotnet.System.Type_, order : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterCollection_IFilterMetadata__AddService_0__2__Type_i32(&__thrown, self.get_handle(), filterType.get_handle(), order);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
} // FilterCollection


// type: Microsoft.AspNetCore.Mvc.Filters.FilterScope
public struct FilterScope {
    // static field: System.Int32 First
    /**
    
            First filter scope.
            

    */
    public static var First : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterScope_get_First();
            return __return;
        }
    }
    // static field: System.Int32 Global
    /**
    
            Global filter scope.
            

    */
    public static var Global : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterScope_get_Global();
            return __return;
        }
    }
    // static field: System.Int32 Controller
    /**
    
            Controller filter scope.
            

    */
    public static var Controller : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterScope_get_Controller();
            return __return;
        }
    }
    // static field: System.Int32 Action
    /**
    
            Action filter scope.
            

    */
    public static var Action : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterScope_get_Action();
            return __return;
        }
    }
    // static field: System.Int32 Last
    /**
    
            Last filter scope.
            

    */
    public static var Last : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterScope_get_Last();
            return __return;
        }
    }
} // FilterScope


// type: Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute
    /**
    
            An abstract filter that asynchronously surrounds execution of the action result. Subclasses
            must override ,  or
             but not  and either of the other two.
            

    */
open class ResultFilterAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
    /**
    */
    open func OnResultExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_void__OnResultExecuting_0__1__ResultExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
    /**
    */
    open func OnResultExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_void__OnResultExecuted_0__1__ResultExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
    /**
    */
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_Task__OnResultExecutionAsync_0__2__ResultExecutingContext_ResultExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : @escaping () async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate(next);
        return try await OnResultExecutionAsync(context: context, next: del_next);
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultFilterAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // ResultFilterAttribute


}

// Microsoft.AspNetCore.Mvc.Formatters
extension Microsoft.AspNetCore.Mvc.Formatters {
// type: Microsoft.AspNetCore.Mvc.Formatters.FormatFilter
    /**
    
            A filter that will use the format value in the route data or query string to set the content type on an
             returned from an action.
            

    */
open class FormatFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IResourceFilter,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes an instance of .
            

    - Parameter options: The 
    - Parameter loggerFactory: The .
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_ctor_0__2__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__ILoggerFactory(&__thrown, options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetFormat(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.GetFormat(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open func GetFormat(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_String__GetFormat_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
    /**
    
            As a , this filter looks at the request and rejects it before going ahead if
            1. The format in the request does not match any format in the map.
            2. If there is a conflicting producesFilter.
            

    - Parameter context: The .
    */
    open /* method final */ func OnResourceExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_void__OnResourceExecuting_0__1__ResourceExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
    /**
    */
    open /* method final */ func OnResourceExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_void__OnResourceExecuted_0__1__ResourceExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
    /**
    
            Sets a Content Type on an    using a format value from the request.
            

    - Parameter context: The .
    */
    open /* method final */ func OnResultExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_void__OnResultExecuting_0__1__ResultExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
    /**
    */
    open /* method final */ func OnResultExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatFilter_void__OnResultExecuted_0__1__ResultExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // FormatFilter


// type: Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings
    /**
    
            Used to specify mapping between the URL Format and corresponding media type.
            

    */
open class FormatterMappings
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetMediaTypeMappingForFormat(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.SetMediaTypeMappingForFormat(System.String,System.String)
    /**
    
            Sets mapping for the format to specified media type.
            If the format already exists, the media type will be overwritten with the new value.
            

    - Parameter format: The format value.
    - Parameter contentType: The media type for the format value.
    */
    open func SetMediaTypeMappingForFormat(format : dotnet.System.String, contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_void__SetMediaTypeMappingForFormat_0__2__String_String(&__thrown, self.get_handle(), format.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetMediaTypeMappingForFormat(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.SetMediaTypeMappingForFormat(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Sets mapping for the format to specified media type.
            If the format already exists, the media type will be overwritten with the new value.
            

    - Parameter format: The format value.
    - Parameter contentType: The media type for the format value.
    */
    open func SetMediaTypeMappingForFormat(format : dotnet.System.String, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_void__SetMediaTypeMappingForFormat_0__2__String_MediaTypeHeaderValue(&__thrown, self.get_handle(), format.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetMediaTypeMappingForFormat(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.GetMediaTypeMappingForFormat(System.String)
    /**
    
            Gets the media type for the specified format.
            

    - Parameter format: The format value.
    - Returns: The media type for input format.

    */
    open func GetMediaTypeMappingForFormat(format : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_String__GetMediaTypeMappingForFormat_0__1__String(&__thrown, self.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool ClearMediaTypeMappingForFormat(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.ClearMediaTypeMappingForFormat(System.String)
    /**
    
            Clears the media type mapping for the format.
            

    - Parameter format: The format value.
    - Returns: true if the format is successfully found and cleared; otherwise, false.

    */
    open func ClearMediaTypeMappingForFormat(format : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_bool__ClearMediaTypeMappingForFormat_0__1__String(&__thrown, self.get_handle(), format.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // FormatterMappings


// type: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter
    /**
    
            Sets the status code to 204 if the content is null.
            

    */
open class HttpNoContentOutputFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
    /**
    */
    open /* method final */ func CanWriteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_bool__CanWriteResult_0__1__OutputFormatterCanWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    */
    open /* method final */ func WriteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_Task__WriteAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_TreatNullValueAsNoContent()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.get_TreatNullValueAsNoContent
    open func get_TreatNullValueAsNoContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_bool__get_TreatNullValueAsNoContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_TreatNullValueAsNoContent(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.set_TreatNullValueAsNoContent(System.Boolean)
    open func set_TreatNullValueAsNoContent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_HttpNoContentOutputFormatter_void__set_TreatNullValueAsNoContent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Indicates whether to select this formatter if the returned value from the action
            is null.
            

    */
    open var TreatNullValueAsNoContent : Bool {
        get {
            return try! get_TreatNullValueAsNoContent();
        }
        set(v) {
            return try! set_TreatNullValueAsNoContent(value: v);
        }
    }
} // HttpNoContentOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
    /**
    
            Reads an object from the request body.
            

    */
open class InputFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestFormatMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    */
    open func CanRead(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_bool__CanRead_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    */
    open func ReadAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadAsync_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    
            Reads an object from the request body.
            

    - Parameter context: The .
    - Returns: A  that on completion deserializes the request body.

    */
    open func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Collections.Generic.IReadOnlyList<System.String> GetSupportedContentTypes(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String,System.Type)
    /**
    */
    open func GetSupportedContentTypes(contentType : dotnet.System.String, objectType : dotnet.System.Type_) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_System_Collections_Generic_IReadOnlyList_string___GetSupportedContentTypes_0__2__String_Type(&__thrown, self.get_handle(), contentType.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection get_SupportedMediaTypes()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.get_SupportedMediaTypes
    open func get_SupportedMediaTypes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatter_MediaTypeCollection__get_SupportedMediaTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection(hndl : __return);
        }
    }
    /**
    
            Gets the mutable collection of media type elements supported by
            this .
            

    */
    open var SupportedMediaTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        get {
            return try! get_SupportedMediaTypes();
        }
    }
} // InputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.MediaType
// boxed value type
    /**
    
            A media type value.
            

    */
public final class MediaType
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_MediaType_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the charset parameter of the  if it has one.
            

    */
    public var Charset : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Charset();
        }
    }
    /**
    
            Gets the  of the  if it has one.
            

    */
    public var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
    }
    /**
    
            Determines whether the current  contains a wildcard.
            

    */
    public var HasWildcard : Bool {
        get {
            return try! get_HasWildcard();
        }
    }
    /**
    
            Gets whether this  matches all subtypes.
            

    */
    public var MatchesAllSubTypes : Bool {
        get {
            return try! get_MatchesAllSubTypes();
        }
    }
    /**
    
            Gets whether this  matches all subtypes, ignoring any structured syntax suffix.
            

    */
    public var MatchesAllSubTypesWithoutSuffix : Bool {
        get {
            return try! get_MatchesAllSubTypesWithoutSuffix();
        }
    }
    /**
    
            Gets whether this  matches all types.
            

    */
    public var MatchesAllTypes : Bool {
        get {
            return try! get_MatchesAllTypes();
        }
    }
    /**
    
            Gets the subtype of the .
            

    */
    public var SubType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_SubType();
        }
    }
    /**
    
            Gets the structured syntax suffix of the  if it has one.
            

    */
    public var SubTypeSuffix : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_SubTypeSuffix();
        }
    }
    /**
    
            Gets the subtype of the , excluding any structured syntax suffix.
            

    */
    public var SubTypeWithoutSuffix : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_SubTypeWithoutSuffix();
        }
    }
    /**
    
            Gets the type of the .
            

    */
    public var Type_ : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Type();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.#ctor(System.String)
    /**
    
            Initializes a  instance.
            

    - Parameter mediaType: The  with the media type.
    */
    public init(mediaType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaType_ctor_0__1__String(&__thrown, mediaType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a  instance.
            

    - Parameter mediaType: The  with the media type.
    */
    public init(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaType_ctor_0__1__StringSegment(&__thrown, mediaType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.#ctor(System.String,System.Int32,System.Nullable{System.Int32})
    /**
    
            Initializes a  instance.
            

    - Parameter mediaType: The  with the media type.
    - Parameter offset: The offset in the  where the parsing starts.
    - Parameter length: The length of the media type to parse if provided.
    */
    public init(mediaType : dotnet.System.String, offset : Swift.Int32, length : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaType_ctor_0__3__String_i32_System_Nullable_i32_(&__thrown, mediaType.get_handle(), offset, (length != nil) ? System_Int32_box(length!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaType_implicit_ctor();
            super.init(hndl: h);
    }
    // bool IsSubsetOf(Microsoft.AspNetCore.Mvc.Formatters.MediaType)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.IsSubsetOf(Microsoft.AspNetCore.Mvc.Formatters.MediaType)
    /**
    
            Determines whether the current  is a subset of the 
            .
            

    - Parameter set: The set .
    - Returns: 
            true if this  is a subset of ; otherwise false.
            

    */
    public func IsSubsetOf(set : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_bool__IsSubsetOf_0__1__MediaType(&__thrown, self.get_handle(), set.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment GetParameter(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetParameter(System.String)
    /**
    
            Gets the parameter  of the media type.
            

    - Parameter parameterName: The name of the parameter to retrieve.
    - Returns: 
            The for the given  if found; otherwise
            null.
            

    */
    public func GetParameter(parameterName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__GetParameter_0__1__String(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment GetParameter(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetParameter(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Gets the parameter  of the media type.
            

    - Parameter parameterName: The name of the parameter to retrieve.
    - Returns: 
            The for the given  if found; otherwise
            null.
            

    */
    public func GetParameter(parameterName : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__GetParameter_0__1__StringSegment(&__thrown, self.get_handle(), parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // System.String ReplaceEncoding(System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.ReplaceEncoding(System.String,System.Text.Encoding)
    /**
    
            Replaces the encoding of the given  with the provided
            .
            

    - Parameter mediaType: The media type whose encoding will be replaced.
    - Parameter encoding: The encoding that will replace the encoding in the .
            
    - Returns: A media type with the replaced encoding.

    */
    public class func ReplaceEncoding(mediaType : dotnet.System.String, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_String__ReplaceEncoding_0__2__String_Encoding(&__thrown, mediaType.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReplaceEncoding(Microsoft.Extensions.Primitives.StringSegment, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.ReplaceEncoding(Microsoft.Extensions.Primitives.StringSegment,System.Text.Encoding)
    /**
    
            Replaces the encoding of the given  with the provided
            .
            

    - Parameter mediaType: The media type whose encoding will be replaced.
    - Parameter encoding: The encoding that will replace the encoding in the .
            
    - Returns: A media type with the replaced encoding.

    */
    public class func ReplaceEncoding(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_String__ReplaceEncoding_0__2__StringSegment_Encoding(&__thrown, mediaType.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Text.Encoding GetEncoding(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetEncoding(System.String)
    /**
    
            Get an encoding for a mediaType.
            

    - Parameter mediaType: The mediaType.
    - Returns: The encoding.

    */
    public class func GetEncoding(mediaType : dotnet.System.String) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_Encoding__GetEncoding_0__1__String(&__thrown, mediaType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Encoding GetEncoding(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetEncoding(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Get an encoding for a mediaType.
            

    - Parameter mediaType: The mediaType.
    - Returns: The encoding.

    */
    public class func GetEncoding(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_Encoding__GetEncoding_0__1__StringSegment(&__thrown, mediaType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality CreateMediaTypeSegmentWithQuality(System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.CreateMediaTypeSegmentWithQuality(System.String,System.Int32)
    /**
    
            Creates an  containing the media type in 
            and its associated quality.
            

    - Parameter mediaType: The media type to parse.
    - Parameter start: The position at which the parsing starts.
    - Returns: The parsed media type with its associated quality.

    */
    public class func CreateMediaTypeSegmentWithQuality(mediaType : dotnet.System.String, start : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_MediaTypeSegmentWithQuality__CreateMediaTypeSegmentWithQuality_0__2__String_i32(&__thrown, mediaType.get_handle(), start);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_Type
    public func get_Type() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_MatchesAllTypes()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_MatchesAllTypes
    public func get_MatchesAllTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_bool__get_MatchesAllTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_SubType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_SubType
    public func get_SubType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__get_SubType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_SubTypeWithoutSuffix()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_SubTypeWithoutSuffix
    public func get_SubTypeWithoutSuffix() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__get_SubTypeWithoutSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_SubTypeSuffix()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_SubTypeSuffix
    public func get_SubTypeSuffix() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__get_SubTypeSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_MatchesAllSubTypes()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_MatchesAllSubTypes
    public func get_MatchesAllSubTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_bool__get_MatchesAllSubTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_MatchesAllSubTypesWithoutSuffix()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_MatchesAllSubTypesWithoutSuffix
    public func get_MatchesAllSubTypesWithoutSuffix() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_bool__get_MatchesAllSubTypesWithoutSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_Encoding
    public func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Charset()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_Charset
    public func get_Charset() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_StringSegment__get_Charset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasWildcard()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaType.get_HasWildcard
    public func get_HasWildcard() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaType_bool__get_HasWildcard_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // MediaType


// type: Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
    /**
    
            A collection of media types.
            

    */
open class MediaTypeCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_MediaTypeCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Add(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Adds an object to the end of the .
            

    - Parameter item: The media type to be added to the end of the .
    */
    open func Add(item : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_MediaTypeCollection_void__Add_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Insert(System.Int32,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Inserts an element into the  at the specified index.
            

    - Parameter index: The zero-based index at which  should be inserted.
    - Parameter item: The media type to insert.
    */
    open func Insert(index : Swift.Int32, item : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_MediaTypeCollection_void__Insert_0__2__i32_MediaTypeHeaderValue(&__thrown, self.get_handle(), index, item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Remove(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Removes the first occurrence of a specific media type from the .
            

    - Parameter item: 
    - Returns:  if  is successfully removed; otherwise, .
            This method also returns  if  was not found in the original
            .

    */
    open func Remove(item : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeCollection_bool__Remove_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // MediaTypeCollection


// type: Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality
// boxed value type
    /**
    
            A media type with its associated quality.
            

    */
public final class MediaTypeSegmentWithQuality
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the media type of this .
            

    */
    public var MediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_MediaType();
        }
    }
    /**
    
            Gets the quality of this .
            

    */
    public var Quality : Swift.Double {
        get {
            return try! get_Quality();
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, System.Double)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Double)
    /**
    
            Initializes an instance of .
            

    - Parameter mediaType: The  containing the media type.
    - Parameter quality: The quality parameter of the media type or 1 in the case it does not exist.
    */
    public init(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_ctor_0__2__StringSegment_f64(&__thrown, mediaType.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.ToString
    /**
    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_MediaType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.get_MediaType
    public func get_MediaType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_StringSegment__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_Quality()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.get_Quality
    public func get_Quality() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_MediaTypeSegmentWithQuality_f64__get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // MediaTypeSegmentWithQuality


// type: Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter
    /**
    
            Writes an object to the output stream.
            

    */
open class OutputFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseTypeMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IReadOnlyList<System.String> GetSupportedContentTypes(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.GetSupportedContentTypes(System.String,System.Type)
    /**
    */
    open func GetSupportedContentTypes(contentType : dotnet.System.String, objectType : dotnet.System.Type_) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_System_Collections_Generic_IReadOnlyList_string___GetSupportedContentTypes_0__2__String_Type(&__thrown, self.get_handle(), contentType.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
    /**
    */
    open func CanWriteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_bool__CanWriteResult_0__1__OutputFormatterCanWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    */
    open func WriteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_Task__WriteAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void WriteResponseHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    
            Sets the headers on  object.
            

    - Parameter context: The formatter context associated with the call.
    */
    open func WriteResponseHeaders(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_void__WriteResponseHeaders_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    
            Writes the response body.
            

    - Parameter context: The formatter context associated with the call.
    - Returns: A task which can write the response body.

    */
    open func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_Task__WriteResponseBodyAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection get_SupportedMediaTypes()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.get_SupportedMediaTypes
    open func get_SupportedMediaTypes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatter_MediaTypeCollection__get_SupportedMediaTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection(hndl : __return);
        }
    }
    /**
    
            Gets the mutable collection of media type elements supported by
            this .
            

    */
    open var SupportedMediaTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection {
        get {
            return try! get_SupportedMediaTypes();
        }
    }
} // OutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter
    /**
    
            Always copies the stream to the response, regardless of requested content type.
            

    */
open class StreamOutputFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_StreamOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_StreamOutputFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
    /**
    */
    open /* method final */ func CanWriteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_StreamOutputFormatter_bool__CanWriteResult_0__1__OutputFormatterCanWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    */
    open /* method final */ func WriteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_StreamOutputFormatter_Task__WriteAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // StreamOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter
    /**
    
            A  for simple text content.
            

    */
open class StringOutputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_StringOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.#ctor
    /**
    
            Initializes a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_StringOutputFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
    /**
    */
    open override func CanWriteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_StringOutputFormatter_bool__CanWriteResult_0__1__OutputFormatterCanWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)
    /**
    */
    open func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, encoding : dotnet.System.Text.Encoding) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_StringOutputFormatter_Task__WriteResponseBodyAsync_0__2__OutputFormatterWriteContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // StringOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter
    /**
    
            A  for JSON content that uses .
            

    */
open class SystemTextJsonInputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonInputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.JsonOptions, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.#ctor(Microsoft.AspNetCore.Mvc.JsonOptions,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter})
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The .
    - Parameter logger: The .
    */
    public init(options : aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonInputFormatter_ctor_0__2__JsonOptions_Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonInputFormatter_(&__thrown, options.get_handle(), logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)
    /**
    */
    open /* method final */ override func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, encoding : dotnet.System.Text.Encoding) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__2__InputFormatterContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Text.Json.JsonSerializerOptions get_SerializerOptions()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.get_SerializerOptions
    open func get_SerializerOptions() throws -> dotnet.System.Text.Json.JsonSerializerOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonInputFormatter_JsonSerializerOptions__get_SerializerOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonSerializerOptions(hndl : __return);
        }
    }
    /**
    
            Gets the  used to configure the .
            

    */
    open var SerializerOptions : dotnet.System.Text.Json.JsonSerializerOptions {
        get {
            return try! get_SerializerOptions();
        }
    }
} // SystemTextJsonInputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter
    /**
    
            A  for JSON content that uses .
            

    */
open class SystemTextJsonOutputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Text.Json.JsonSerializerOptions)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.#ctor(System.Text.Json.JsonSerializerOptions)
    /**
    
            Initializes a new  instance.
            

    - Parameter jsonSerializerOptions: The .
    */
    public init(jsonSerializerOptions : dotnet.System.Text.Json.JsonSerializerOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonOutputFormatter_ctor_0__1__JsonSerializerOptions(&__thrown, jsonSerializerOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)
    /**
    */
    open /* method final */ override func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, selectedEncoding : dotnet.System.Text.Encoding) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonOutputFormatter_Task__WriteResponseBodyAsync_0__2__OutputFormatterWriteContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), selectedEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Text.Json.JsonSerializerOptions get_SerializerOptions()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.get_SerializerOptions
    open func get_SerializerOptions() throws -> dotnet.System.Text.Json.JsonSerializerOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_SystemTextJsonOutputFormatter_JsonSerializerOptions__get_SerializerOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonSerializerOptions(hndl : __return);
        }
    }
    /**
    
            Gets the  used to configure the .
            

    */
    open var SerializerOptions : dotnet.System.Text.Json.JsonSerializerOptions {
        get {
            return try! get_SerializerOptions();
        }
    }
} // SystemTextJsonOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter
    /**
    
            Reads an object from a request body with a text format.
            

    */
open class TextInputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_TextInputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    */
    open override func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)
    /**
    
            Reads an object from the request body.
            

    - Parameter context: The .
    - Parameter encoding: The  used to read the request body.
    - Returns: A  that on completion deserializes the request body.

    */
    open func ReadRequestBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext, encoding : dotnet.System.Text.Encoding) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadRequestBodyAsync_0__2__InputFormatterContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Text.Encoding> get_SupportedEncodings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.get_SupportedEncodings
    open func get_SupportedEncodings() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextInputFormatter_System_Collections_Generic_IList_System_Text_Encoding___get_SupportedEncodings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the mutable collection of character encodings supported by
            this . The encodings are
            used when reading the data.
            

    */
    open var SupportedEncodings : dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Encoding> {
        get {
            return try! get_SupportedEncodings();
        }
    }
} // TextInputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
    /**
    
            Writes an object in a given text format to the output stream.
            

    */
open class TextOutputFormatter
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Encoding SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    
            Determines the best  amongst the supported encodings
            for reading or writing an HTTP entity body based on the provided content type.
            

    - Parameter context: The formatter context associated with the call.
            
    - Returns: The  to use when reading the request or writing the response.

    */
    open func SelectCharacterEncoding(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_Encoding__SelectCharacterEncoding_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    */
    open override func WriteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_Task__WriteAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    */
    open /* method final */ override func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_Task__WriteResponseBodyAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)
    /**
    
            Writes the response body.
            

    - Parameter context: The formatter context associated with the call.
    - Parameter selectedEncoding: The  that should be used to write the response.
    - Returns: A task which can write the response body.

    */
    open func WriteResponseBodyAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext, selectedEncoding : dotnet.System.Text.Encoding) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_Task__WriteResponseBodyAsync_0__2__OutputFormatterWriteContext_Encoding(&__thrown, self.get_handle(), context.get_handle(), selectedEncoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Text.Encoding> get_SupportedEncodings()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.get_SupportedEncodings
    open func get_SupportedEncodings() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_TextOutputFormatter_System_Collections_Generic_IList_System_Text_Encoding___get_SupportedEncodings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the mutable collection of character encodings supported by
            this . The encodings are
            used when writing the data.
            

    */
    open var SupportedEncodings : dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Encoding> {
        get {
            return try! get_SupportedEncodings();
        }
    }
} // TextOutputFormatter


}

// Microsoft.AspNetCore.Mvc.Infrastructure
extension Microsoft.AspNetCore.Mvc.Infrastructure {
// type: Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor
    /**
    
            Type that provides access to an .
            

    */
open class ActionContextAccessor
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ActionContextAccessor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ActionContextAccessor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.get_ActionContext
    open /* method final */ func get_ActionContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ActionContextAccessor_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
    open /* method final */ func set_ActionContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_ActionContextAccessor_void__set_ActionContext_0__1__ActionContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var ActionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        get {
            return try! get_ActionContext();
        }
        set(v) {
            return try! set_ActionContext(value: v!);
        }
    }
} // ActionContextAccessor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection
    /**
    
            A cached collection of .
            

    */
open class ActionDescriptorCollection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor},System.Int32)
    /**
    
            Initializes a new instance of the .
            

    - Parameter items: The result of action discovery
    - Parameter version: The unique version of discovered actions.
    */
    public init(items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, version : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollection_ctor_0__2__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor__i32(&__thrown, items.get_handle(), version);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollection_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Version()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.get_Version
    open func get_Version() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollection_i32__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Returns the cached .
            

    */
    open var Items : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Returns the unique version of the currently cached items.
            

    */
    open var Version : Swift.Int32 {
        get {
            return try! get_Version();
        }
    }
} // ActionDescriptorCollection


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider
    /**
    
            A base class for  which also provides an 
            for reactive notifications of  changes.
            

    */
open class ActionDescriptorCollectionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorCollectionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollectionProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider.GetChangeToken
    /**
    
            Gets an  that will be signaled after the 
            collection has changed.
            

    - Returns: The .

    */
    open func GetChangeToken() throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollectionProvider_IChangeToken__GetChangeToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection get_ActionDescriptors()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider.get_ActionDescriptors
    open func get_ActionDescriptors() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ActionDescriptorCollectionProvider_ActionDescriptorCollection__get_ActionDescriptors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection(hndl : __return);
        }
    }
    /**
    
            Returns the current cached 
            

    */
    open var ActionDescriptors : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection {
        get {
            return try! get_ActionDescriptors();
        }
    }
} // ActionDescriptorCollectionProvider


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultObjectValueAttribute
    /**
    
            Attribute annotated on ActionResult constructor, helper method parameters, and properties to indicate
            that the parameter or property is used to set the "value" for ActionResult.
            
            Analyzers match this parameter by type name. This allows users to annotate custom results \ custom helpers
            with a user-defined attribute without having to expose this type.
            
            
            This attribute is intentionally marked Inherited=false since the analyzer does not walk the inheritance graph.
            
            

    */
public final class ActionResultObjectValueAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ActionResultObjectValueAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultObjectValueAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ActionResultObjectValueAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ActionResultObjectValueAttribute


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultStatusCodeAttribute
    /**
    
            Attribute annotated on ActionResult constructor and helper method parameters to indicate
            that the parameter is used to set the "statusCode" for the ActionResult.
            
            Analyzers match this parameter by type name. This allows users to annotate custom results \ custom helpers
            with a user-defined attribute without having to expose this type.
            
            
            This attribute is intentionally marked Inherited=false since the analyzer does not walk the inheritance graph.
            
            

    */
public final class ActionResultStatusCodeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ActionResultStatusCodeAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultStatusCodeAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ActionResultStatusCodeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ActionResultStatusCodeAttribute


// type: Microsoft.AspNetCore.Mvc.Infrastructure.AmbiguousActionException
    /**
    
            An exception which indicates multiple matches in action selection.
            

    */
open class AmbiguousActionException
    :
    dotnet.System.InvalidOperationException
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_AmbiguousActionException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.AmbiguousActionException.#ctor(System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter message: The exception message.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_AmbiguousActionException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AmbiguousActionException


// type: Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1
    /**
    
            Infrastructure supporting the implementation of . This is an
            implementation of  suitable for use with the 
            pattern. This is framework infrastructure and should not be used by application code.
            

    */
open class CompatibilitySwitch_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.#ctor(System.String)
    /**
    
            Creates a new compatibility switch with the provided name.
            

    - Parameter name: 
            The compatibility switch name. The name must match a property name on an options type.
            
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_ctor_0__1__String(TValue.get_type_handle(), &__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, TValue)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.#ctor(System.String,`0)
    /**
    
            Creates a new compatibility switch with the provided name and initial value.
            

    - Parameter name: 
            The compatibility switch name. The name must match a property name on an options type.
            
    - Parameter initialValue: 
            The initial value to assign to the switch.
            
    */
    public init(name : dotnet.System.String, initialValue : TValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_ctor_0__2__String_TValue(TValue.get_type_handle(), &__thrown, name.get_handle(), initialValue.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_IsValueSet()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.get_IsValueSet
    open /* method final */ func get_IsValueSet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_bool__get_IsValueSet_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.get_Name
    open /* method final */ func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_String__get_Name_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.get_Value
    open func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Value(TValue)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1.set_Value(`0)
    open func set_Value(value : TValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_CompatibilitySwitch_1_void__set_Value_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a value indicating whether the  property has been set.
            

    */
    public var IsValueSet : Bool {
        get {
            return try! get_IsValueSet();
        }
    }
    /**
    
            Gets the name of the compatibility switch.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets or set the value associated with the compatibility switch.
            

    */
    open var Value : TValue {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // CompatibilitySwitch_1


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions`1
    /**
    
            A base class for infrastructure that implements ASP.NET Core MVC's support for
            . This is framework infrastructure and should not be used
            by application code.
            

    */
open class ConfigureCompatibilityOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ConfigureCompatibilityOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void PostConfigure(System.String, TOptions)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions`1.PostConfigure(System.String,`0)
    /**
    */
    open func PostConfigure(name : dotnet.System.String, options : TOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_ConfigureCompatibilityOptions_1_void__PostConfigure_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConfigureCompatibilityOptions_1


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor
    /**
    
            A  that is responsible for 
            

    */
open class ContentResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ContentResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter logger: The logger to use.
    - Parameter httpResponseStreamWriterFactory: The stream writer factory.
    */
    public init(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor>, httpResponseStreamWriterFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ContentResultExecutor_ctor_0__2__Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_Mvc_Infrastructure_ContentResultExecutor__IHttpResponseStreamWriterFactory(&__thrown, logger.get_handle(), httpResponseStreamWriterFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ContentResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ContentResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.ContentResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ContentResultExecutor_Task__ExecuteAsync_0__2__ActionContext_ContentResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // ContentResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector
    /**
    
            The default implementation of .
            

    */
open class DefaultOutputFormatterSelector
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_DefaultOutputFormatterSelector_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of 
            

    - Parameter options: Used to access .
    - Parameter loggerFactory: The logger factory.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_DefaultOutputFormatterSelector_ctor_0__2__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__ILoggerFactory(&__thrown, options.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector.SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter},Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    */
    open func SelectFormatter(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext, formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>, contentTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_DefaultOutputFormatterSelector_IOutputFormatter__SelectFormatter_0__3__OutputFormatterCanWriteContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter__MediaTypeCollection(&__thrown, self.get_handle(), context.get_handle(), formatters.get_handle(), contentTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultOutputFormatterSelector


// type: Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute
    /**
    
            Specifies the default status code associated with an .
            

    */
public final class DefaultStatusCodeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_DefaultStatusCodeAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute.#ctor(System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter statusCode: The default status code.
    */
    public init(statusCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_DefaultStatusCodeAttribute_ctor_0__1__i32(&__thrown, statusCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute.get_StatusCode
    public func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_DefaultStatusCodeAttribute_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the default status code.
            

    */
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
} // DefaultStatusCodeAttribute


// type: Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor
    /**
    
            A 
            

    */
open class FileContentResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_FileContentResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Intializes a new .
            

    - Parameter loggerFactory: The factory used to create loggers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_FileContentResultExecutor_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.FileContentResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.FileContentResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.FileContentResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_FileContentResultExecutor_Task__ExecuteAsync_0__2__ActionContext_FileContentResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FileContentResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
    /**
    
            Base class for executing a file result.
            

    */
open class FileResultExecutorBase
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_FileResultExecutorBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.#ctor(Microsoft.Extensions.Logging.ILogger)
    /**
    
            Intializes a new .
            

    - Parameter logger: The logger.
    */
    public init(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_FileResultExecutorBase_ctor_0__1__ILogger(&__thrown, logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // FileResultExecutorBase


// type: Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor
    /**
    
            An  for a file stream result.
            

    */
open class FileStreamResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_FileStreamResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new .
            

    - Parameter loggerFactory: The factory used to create loggers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_FileStreamResultExecutor_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.FileStreamResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.FileStreamResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.FileStreamResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_FileStreamResultExecutor_Task__ExecuteAsync_0__2__ActionContext_FileStreamResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FileStreamResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor
    /**
    
            Defines an interface for exposing an .
            

    */
open class IActionContextAccessor
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor.get_ActionContext
    open func get_ActionContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor.set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
    open func set_ActionContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor_void__set_ActionContext_0__1__ActionContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IActionContextAccessor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorChangeProvider
    /**
    
            Provides a way to signal invalidation of the cached collection of  from an
            .
            

    */
open class IActionDescriptorChangeProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorChangeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorChangeProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorChangeProvider.GetChangeToken
    /**
    
            Gets a  used to signal invalidation of cached 
            instances.
            

    - Returns: The .

    */
    open func GetChangeToken() throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorChangeProvider_IChangeToken__GetChangeToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __return);
        }
    }
} // IActionDescriptorChangeProvider


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider
    /**
    
             Provides the currently cached collection of .
             

    */
open class IActionDescriptorCollectionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorCollectionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorCollectionProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection get_ActionDescriptors()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider.get_ActionDescriptors
    open func get_ActionDescriptors() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorCollectionProvider_ActionDescriptorCollection__get_ActionDescriptors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection(hndl : __return);
        }
    }
} // IActionDescriptorCollectionProvider


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory
    /**
    
            Defines an interface for creating an  for the current request.
            

    */
open class IActionInvokerFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionInvokerFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionInvokerFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker CreateInvoker(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory.CreateInvoker(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Creates an  for the current request associated with
            .
            

    - Parameter actionContext: 
            The  associated with the current request.
            
    - Returns: An  or null.

    */
    open func CreateInvoker(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionInvokerFactory_IActionInvoker__CreateInvoker_0__1__ActionContext(&__thrown, self.get_handle(), actionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IActionInvokerFactory


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor`1
    /**
    
            Defines an interface for a service which can execute a particular kind of  by
            manipulating the .
            

    */
open class IActionResultExecutor_1<TResult : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultExecutor_1
{
    public typealias TResult_IActionResultExecutor_1 = TResult;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultExecutor_1_get_type_handle(TResult.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, TResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor`1.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,`0)
    /**
    
            Asynchronously executes the action result, by modifying the .
            

    - Parameter context: The  associated with the current request."/>
    - Parameter result: The action result to execute.
    - Returns: A  which represents the asynchronous operation.

    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : TResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultExecutor_1_Task__ExecuteAsync_0__2__ActionContext_TResult(TResult.get_type_handle(), &__thrown, self.get_handle(), context.get_handle(), result.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IActionResultExecutor_1


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper
    /**
    
            Provides a mapping from the return value of an action to an 
            for request processing.
            

    */
open class IActionResultTypeMapper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultTypeMapper
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultTypeMapper_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Type GetResultDataType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper.GetResultDataType(System.Type)
    /**
    
            Gets the result data type that corresponds to . This
            method will not be called for actions that return void or an 
            type.
            

    - Parameter returnType: The declared return type of an action.
    - Returns: A  that represents the response data.

    */
    open func GetResultDataType(returnType : dotnet.System.Type_) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultTypeMapper_Type__GetResultDataType_0__1__Type(&__thrown, self.get_handle(), returnType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.IActionResult Convert(System.Object, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper.Convert(System.Object,System.Type)
    /**
    
            Converts the result of an action to an  for response processing.
            This method will be not be called when a method returns void or an
             value.
            

    - Parameter value: The action return value. May be null.
    - Parameter returnType: The declared return type.
    - Returns: An  for response processing.

    */
    open func Convert(value : Optional<dotnet.System.Object>, returnType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultTypeMapper_IActionResult__Convert_0__2__Object_Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil, returnType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
} // IActionResultTypeMapper


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector
    /**
    
            Defines an interface for selecting an MVC action to invoke for the current request.
            

    */
open class IActionSelector
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IActionSelector
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IActionSelector_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> SelectCandidates(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector.SelectCandidates(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    
            Selects a set of  candidates for the current request associated with
            .
            

    - Parameter context: The  associated with the current request.
    - Returns: A set of  candidates or null.

    */
    open func SelectCandidates(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionSelector_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor___SelectCandidates_0__1__RouteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor SelectBestCandidate(Microsoft.AspNetCore.Routing.RouteContext, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector.SelectBestCandidate(Microsoft.AspNetCore.Routing.RouteContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor})
    /**
    
            Selects the best  candidate from  for the
            current request associated with .
            

    - Parameter context: The  associated with the current request.
    - Parameter candidates: The set of  candidates.
    - Returns: The best  candidate for the current request or null.

    */
    open func SelectBestCandidate(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext, candidates : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IActionSelector_ActionDescriptor__SelectBestCandidate_0__2__RouteContext_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_(&__thrown, self.get_handle(), context.get_handle(), candidates.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IActionSelector


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IApiBehaviorMetadata
    /**
    
            A  that indicates that a type and all derived types are used to serve HTTP API responses.
            
            Controllers decorated with this attribute () are configured with
            features and behavior targeted at improving the developer experience for building APIs.
            
            

    */
open class IApiBehaviorMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IApiBehaviorMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IApiBehaviorMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IApiBehaviorMetadata


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult
    /**
    
            An  that can be transformed to a more descriptive client error.
            

    */
open class IClientErrorActionResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorActionResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IClientErrorActionResult


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorFactory
    /**
    
            A factory for producing client errors. This contract is used by controllers annotated
            with  to transform .
            

    */
open class IClientErrorFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.IActionResult GetClientError(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorFactory.GetClientError(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult)
    /**
    
            Transforms  for the specified .
            

    - Parameter actionContext: The .
    - Parameter clientError: The .
    - Returns: The  that would be returned to the client.

    */
    open func GetClientError(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, clientError : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorFactory_IActionResult__GetClientError_0__2__ActionContext_IClientErrorActionResult(&__thrown, self.get_handle(), actionContext.get_handle(), clientError.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IClientErrorFactory


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch
    /**
    
            Defines a compatibility switch. This is framework infrastructure and should not be used
            by application code.
            

    */
open class ICompatibilitySwitch
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsValueSet()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.get_IsValueSet
    open func get_IsValueSet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch_bool__get_IsValueSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.get_Value
    open func get_Value() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.set_Value(System.Object)
    open func set_Value(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ICompatibilitySwitch


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult
    /**
    
            Defines the contract to convert a type to an  during action invocation.
            

    */
open class IConvertToActionResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IConvertToActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IConvertToActionResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.IActionResult Convert()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult.Convert
    /**
    
            Converts the current instance to an instance of .
            

    - Returns: The converted .

    */
    open func Convert() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IConvertToActionResult_IActionResult__Convert_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
} // IConvertToActionResult


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory
    /**
    
            Creates  instances for reading from .
            

    */
open class IHttpRequestStreamReaderFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IHttpRequestStreamReaderFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IHttpRequestStreamReaderFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.TextReader CreateReader(System.IO.Stream, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory.CreateReader(System.IO.Stream,System.Text.Encoding)
    /**
    
            Creates a new .
            

    - Parameter stream: The , usually .
    - Parameter encoding: The , usually .
    - Returns: A .

    */
    open func CreateReader(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.IO.TextReader {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IHttpRequestStreamReaderFactory_TextReader__CreateReader_0__2__Stream_Encoding(&__thrown, self.get_handle(), stream.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextReader(hndl : __return);
        }
    }
} // IHttpRequestStreamReaderFactory


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory
    /**
    
            Creates  instances for writing to .
            

    */
open class IHttpResponseStreamWriterFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IHttpResponseStreamWriterFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IHttpResponseStreamWriterFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.TextWriter CreateWriter(System.IO.Stream, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory.CreateWriter(System.IO.Stream,System.Text.Encoding)
    /**
    
            Creates a new .
            

    - Parameter stream: The , usually .
    - Parameter encoding: The , usually .
    - Returns: A .

    */
    open func CreateWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IHttpResponseStreamWriterFactory_TextWriter__CreateWriter_0__2__Stream_Encoding(&__thrown, self.get_handle(), stream.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
} // IHttpResponseStreamWriterFactory


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IParameterInfoParameterDescriptor
    /**
    
            A  for action parameters.
            

    */
open class IParameterInfoParameterDescriptor
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IParameterInfoParameterDescriptor.get_ParameterInfo
    open func get_ParameterInfo() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
} // IParameterInfoParameterDescriptor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor
    /**
    
            A  for bound properties.
            

    */
open class IPropertyInfoParameterDescriptor
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor.get_PropertyInfo
    open func get_PropertyInfo() throws -> dotnet.System.Reflection.PropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyInfo(hndl : __return);
        }
    }
} // IPropertyInfoParameterDescriptor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.IStatusCodeActionResult
    /**
    
            Represents an  that when executed will
            produce an HTTP response with the specified .
            

    */
open class IStatusCodeActionResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult,
    Microsoft_AspNetCore_Mvc_IActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.IStatusCodeActionResult.get_StatusCode
    open func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
} // IStatusCodeActionResult


// type: Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor
    /**
    
            A  that handles .
            

    */
open class LocalRedirectResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_LocalRedirectResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: Used to create loggers.
    - Parameter urlHelperFactory: Used to create url helpers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_LocalRedirectResultExecutor_ctor_0__2__ILoggerFactory_IUrlHelperFactory(&__thrown, loggerFactory.get_handle(), urlHelperFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.LocalRedirectResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.LocalRedirectResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.LocalRedirectResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_LocalRedirectResultExecutor_Task__ExecuteAsync_0__2__ActionContext_LocalRedirectResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // LocalRedirectResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter
    /**
    
            A  that responds to invalid . This filter is
            added to all types and actions annotated with .
            See  for ways to configure this filter.
            

    */
open class ModelStateInvalidFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ApiBehaviorOptions, Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.#ctor(Microsoft.AspNetCore.Mvc.ApiBehaviorOptions,Microsoft.Extensions.Logging.ILogger)
    /**
    
            Initializes a new instance of .
            

    - Parameter apiBehaviorOptions: The api behavior options.
    - Parameter logger: The logger.
    */
    public init(apiBehaviorOptions : aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_ctor_0__2__ApiBehaviorOptions_ILogger(&__thrown, apiBehaviorOptions.get_handle(), logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
    /**
    
            Invoked when an action is executed.
            

    - Parameter context: The .
    */
    open /* method final */ func OnActionExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_void__OnActionExecuted_0__1__ActionExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    /**
    
            Invoked when an action is executing.
            

    - Parameter context: The .
    */
    open /* method final */ func OnActionExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_void__OnActionExecuting_0__1__ActionExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ModelStateInvalidFilter_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    open var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // ModelStateInvalidFilter


// type: Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions
    /**
    
            An options type for configuring the application .
            

    */
open class MvcCompatibilityOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_MvcCompatibilityOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_MvcCompatibilityOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.CompatibilityVersion get_CompatibilityVersion()
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.get_CompatibilityVersion
    open func get_CompatibilityVersion() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_MvcCompatibilityOptions_CompatibilityVersion__get_CompatibilityVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion(val: __return);
        }
    }
    // [IsSpecialName] void set_CompatibilityVersion(Microsoft.AspNetCore.Mvc.CompatibilityVersion)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.set_CompatibilityVersion(Microsoft.AspNetCore.Mvc.CompatibilityVersion)
    open func set_CompatibilityVersion(value : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Infrastructure_MvcCompatibilityOptions_void__set_CompatibilityVersion_0__1__CompatibilityVersion(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the application's configured .
            

    */
    open var CompatibilityVersion : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion {
        get {
            return try! get_CompatibilityVersion();
        }
        set(v) {
            return try! set_CompatibilityVersion(value: v);
        }
    }
} // MvcCompatibilityOptions


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
    /**
    
            Executes an  to write to the response.
            

    */
open class ObjectResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ObjectResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector,Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Creates a new .
            

    - Parameter formatterSelector: The .
    - Parameter writerFactory: The .
    - Parameter loggerFactory: The .
    - Parameter mvcOptions: Accessor to .
    */
    public init(formatterSelector : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector, writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, mvcOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_ObjectResultExecutor_ctor_0__4__OutputFormatterSelector_IHttpResponseStreamWriterFactory_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, formatterSelector.get_handle(), writerFactory.get_handle(), loggerFactory.get_handle(), mvcOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ObjectResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ObjectResult)
    /**
    
            Executes the .
            

    - Parameter context: The  for the current request.
    - Parameter result: The .
    - Returns: 
            A  which will complete once the  is written to the response.
            

    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.ObjectResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ObjectResultExecutor_Task__ExecuteAsync_0__2__ActionContext_ObjectResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // ObjectResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector
    /**
    
            Selects an  to write a response to the current request.
            

    */
open class OutputFormatterSelector
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_OutputFormatterSelector_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector.SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter},Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)
    /**
    
            Selects an  to write the response based on the provided values and the current request.
            

    - Parameter context: The  associated with the current request.
    - Parameter formatters: A list of formatters to use; this acts as an override to .
    - Parameter mediaTypes: A list of media types to use; this acts as an override to the Accept header. 
    - Returns: The selected , or null if one could not be selected.

    */
    open func SelectFormatter(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext, formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter>, mediaTypes : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_OutputFormatterSelector_IOutputFormatter__SelectFormatter_0__3__OutputFormatterCanWriteContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter__MediaTypeCollection(&__thrown, self.get_handle(), context.get_handle(), formatters.get_handle(), mediaTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // OutputFormatterSelector


// type: Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor
    /**
    
            A  for .
            

    */
open class PhysicalFileResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_PhysicalFileResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_PhysicalFileResultExecutor_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.PhysicalFileResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.PhysicalFileResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.PhysicalFileResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_PhysicalFileResultExecutor_Task__ExecuteAsync_0__2__ActionContext_PhysicalFileResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // PhysicalFileResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory
    /**
    
            Factory to produce  and .
            

    */
open class ProblemDetailsFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_ProblemDetailsFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ProblemDetails CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext, System.Nullable<System.Int32>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory.CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
    /**
    
            Creates a  instance that configures defaults based on values specified in .
            

    - Parameter httpContext: The .
    - Parameter statusCode: The value for .
    - Parameter title: The value for .
    - Parameter type: The value for .
    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Returns: The  instance.

    */
    open func CreateProblemDetails(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil, detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ProblemDetails {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ProblemDetailsFactory_ProblemDetails__CreateProblemDetails_0__6__HttpContext_System_Nullable_i32__String_String_String_String(&__thrown, self.get_handle(), httpContext.get_handle(), (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil, detail?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ProblemDetails(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ValidationProblemDetails CreateValidationProblemDetails(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Nullable<System.Int32>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory.CreateValidationProblemDetails(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
    /**
    
            Creates a  instance that configures defaults based on values specified in .
            

    - Parameter httpContext: The .
    - Parameter modelStateDictionary: The .
    - Parameter statusCode: The value for .
    - Parameter title: The value for .
    - Parameter type: The value for .
    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Returns: The  instance.

    */
    open func CreateValidationProblemDetails(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, modelStateDictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil, detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ValidationProblemDetails {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_ProblemDetailsFactory_ValidationProblemDetails__CreateValidationProblemDetails_0__7__HttpContext_ModelStateDictionary_System_Nullable_i32__String_String_String_String(&__thrown, self.get_handle(), httpContext.get_handle(), modelStateDictionary.get_handle(), (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil, detail?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ValidationProblemDetails(hndl : __return);
        }
    }
} // ProblemDetailsFactory


// type: Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor
    /**
    
            A  for .
            

    */
open class RedirectResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_RedirectResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    - Parameter urlHelperFactory: The factory used to create url helpers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectResultExecutor_ctor_0__2__ILoggerFactory_IUrlHelperFactory(&__thrown, loggerFactory.get_handle(), urlHelperFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.RedirectResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RedirectResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.RedirectResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectResultExecutor_Task__ExecuteAsync_0__2__ActionContext_RedirectResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // RedirectResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor
    /**
    
            A  for .
            

    */
open class RedirectToActionResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToActionResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    - Parameter urlHelperFactory: The factory used to create url helpers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToActionResultExecutor_ctor_0__2__ILoggerFactory_IUrlHelperFactory(&__thrown, loggerFactory.get_handle(), urlHelperFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.RedirectToActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RedirectToActionResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToActionResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToActionResultExecutor_Task__ExecuteAsync_0__2__ActionContext_RedirectToActionResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // RedirectToActionResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor
    /**
    
            A  for .
            

    */
open class RedirectToPageResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToPageResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    - Parameter urlHelperFactory: The factory used to create url helpers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToPageResultExecutor_ctor_0__2__ILoggerFactory_IUrlHelperFactory(&__thrown, loggerFactory.get_handle(), urlHelperFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.RedirectToPageResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RedirectToPageResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToPageResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToPageResultExecutor_Task__ExecuteAsync_0__2__ActionContext_RedirectToPageResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // RedirectToPageResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor
    /**
    
            A  for .
            

    */
open class RedirectToRouteResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToRouteResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    - Parameter urlHelperFactory: The factory used to create url helpers.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToRouteResultExecutor_ctor_0__2__ILoggerFactory_IUrlHelperFactory(&__thrown, loggerFactory.get_handle(), urlHelperFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.RedirectToRouteResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RedirectToRouteResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.RedirectToRouteResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_RedirectToRouteResultExecutor_Task__ExecuteAsync_0__2__ActionContext_RedirectToRouteResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // RedirectToRouteResultExecutor


// type: Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor
    /**
    
            A  for .
            

    */
open class VirtualFileResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Infrastructure_VirtualFileResultExecutor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The factory used to create loggers.
    - Parameter hostingEnvironment: The hosting enviornment
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Infrastructure_VirtualFileResultExecutor_ctor_0__2__ILoggerFactory_IWebHostEnvironment(&__thrown, loggerFactory.get_handle(), hostingEnvironment.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.VirtualFileResult)
// docid: M:Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.VirtualFileResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.VirtualFileResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Infrastructure_VirtualFileResultExecutor_Task__ExecuteAsync_0__2__ActionContext_VirtualFileResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // VirtualFileResultExecutor


}

// Microsoft.AspNetCore.Mvc.ModelBinding
extension Microsoft.AspNetCore.Mvc.ModelBinding {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindNeverAttribute
    /**
    
            Indicates that a property should be excluded from model binding. When applied to a property, the model binding
            system excludes that property. When applied to a type, the model binding system excludes all properties that
            type defines.
            

    */
public final class BindNeverAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindNeverAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindNeverAttribute.#ctor
    /**
    
            Initializes a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindNeverAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // BindNeverAttribute


// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindRequiredAttribute
    /**
    
            Indicates that a property is required for model binding. When applied to a property, the model binding system
            requires a value for that property. When applied to a type, the model binding system requires values for all
            properties that type defines.
            

    */
public final class BindRequiredAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindRequiredAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindRequiredAttribute.#ctor
    /**
    
            Initializes a new  instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindRequiredAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // BindRequiredAttribute


// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
    /**
    
            Enumerates behavior options of the model binding system.
            

    */
public struct BindingBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior Optional
    /**
    
            The property should be model bound if a value is available from the value provider.
            

    */
    public static var Optional : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehavior_get_Optional());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior Never
    /**
    
            The property should be excluded from model binding.
            

    */
    public static var Never : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehavior_get_Never());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior Required
    /**
    
            The property is required for model binding.
            

    */
    public static var Required : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehavior_get_Required());
            return __return;
        }
    }
} // BindingBehavior


// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute
    /**
    
            Specifies the  that should be applied.
            

    */
open class BindingBehaviorAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehaviorAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior)
    /**
    
            Initializes a new  instance.
            

    - Parameter behavior: The  to apply.
    */
    public init(behavior : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehaviorAttribute_ctor_0__1__BindingBehavior(&__thrown, behavior.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior get_Behavior()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute.get_Behavior
    open func get_Behavior() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingBehaviorAttribute_BindingBehavior__get_Behavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior(val: __return);
        }
    }
    /**
    
            Gets the  to apply.
            

    */
    open var Behavior : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior {
        get {
            return try! get_Behavior();
        }
    }
} // BindingBehaviorAttribute


// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider
    /**
    
            A value provider which provides data from a specific .
            

    */
open class BindingSourceValueProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindingSourceValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    
            Creates a new .
            

    - Parameter bindingSource: 
            The . Must be a single-source (non-composite) with
             equal to false.
            
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSourceValueProvider_ctor_0__1__BindingSource(&__thrown, bindingSource.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.ContainsPrefix(System.String)
    /**
    */
    open func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSourceValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.GetValue(System.String)
    /**
    */
    open func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSourceValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open func Filter(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSourceValueProvider_IValueProvider__Filter_0__1__BindingSource(&__thrown, self.get_handle(), bindingSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // BindingSourceValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider
    /**
    
            Represents a  whose values come from a collection of s.
            

    */
open class CompositeValueProvider
    :
    dotnet.System.Collections.ObjectModel.Collection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider>,
    Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider})
    /**
    
            Initializes a new instance of .
            

    - Parameter valueProviders: The sequence of  to add to this instance of
            .
    */
    public init(valueProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_ctor_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider_(&__thrown, valueProviders.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider> CreateAsync(Microsoft.AspNetCore.Mvc.ControllerContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CreateAsync(Microsoft.AspNetCore.Mvc.ControllerContext)
    /**
    
            Asynchronously creates a  using the provided
            .
            

    - Parameter controllerContext: The  associated with the current request.
    - Returns: 
            A  which, when completed, asynchronously returns a
            .
            

    */
    open class func CreateAsync(controllerContext : aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider___CreateAsync_0__1__ControllerContext(&__thrown, controllerContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider> CreateAsync(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CreateAsync(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})
    /**
    
            Asynchronously creates a  using the provided
            .
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter factories: The  to be applied to the context.
    - Returns: 
            A  which, when completed, asynchronously returns a
            .
            

    */
    open class func CreateAsync(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, factories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider___CreateAsync_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_(&__thrown, actionContext.get_handle(), factories.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.ContainsPrefix(System.String)
    /**
    */
    open func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.GetValue(System.String)
    /**
    */
    open func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.GetKeysFromPrefix(System.String)
    /**
    */
    open func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open /* method final */ func Filter(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_IValueProvider__Filter_0__1__BindingSource(&__thrown, self.get_handle(), bindingSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.Filter
    /**
    */
    open /* method final */ func Filter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeValueProvider_IValueProvider__Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CompositeValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext
    /**
    
            A context that contains operating information for model binding and validation.
            

    */
open class DefaultModelBindingContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext CreateBindingContext(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.CreateBindingContext(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo,System.String)
    /**
    
            Creates a new  for top-level model binding operation.
            

    - Parameter actionContext: 
            The  associated with the binding operation.
            
    - Parameter valueProvider: The  to use for binding.
    - Parameter metadata:  associated with the model.
    - Parameter bindingInfo:  associated with the model.
    - Parameter modelName: The name of the property or parameter being bound.
    - Returns: A new instance of .

    */
    open class func CreateBindingContext(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, bindingInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>, modelName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelBindingContext__CreateBindingContext_0__5__ActionContext_IValueProvider_ModelMetadata_BindingInfo_String(&__thrown, actionContext.get_handle(), valueProvider.get_handle(), metadata.get_handle(), bindingInfo?.get_handle() ?? nil, modelName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope EnterNestedScope(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.EnterNestedScope(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.String,System.Object)
    /**
    */
    open override func EnterNestedScope(modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, fieldName : dotnet.System.String, modelName : dotnet.System.String, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelBindingContext_NestedScope__EnterNestedScope_0__4__ModelMetadata_String_String_Object(&__thrown, self.get_handle(), modelMetadata.get_handle(), fieldName.get_handle(), modelName.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope EnterNestedScope()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.EnterNestedScope
    /**
    */
    open override func EnterNestedScope() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelBindingContext_NestedScope__EnterNestedScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ActionContext
    open override func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
    open override func set_ActionContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ActionContext_0__1__ActionContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FieldName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_FieldName
    open override func get_FieldName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_String__get_FieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FieldName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_FieldName(System.String)
    open override func set_FieldName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_FieldName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_Model
    open override func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_Model(System.Object)
    open override func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ModelMetadata
    open override func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open override func set_ModelMetadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ModelMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ModelName
    open override func get_ModelName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_String__get_ModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ModelName(System.String)
    open override func set_ModelName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ModelName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ModelState
    open override func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    open override func set_ModelState(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ModelState_0__1__ModelStateDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_BinderModelName
    open override func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_BinderModelName(System.String)
    open override func set_BinderModelName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_BinderModelName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_BindingSource
    open override func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open override func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsTopLevelObject()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_IsTopLevelObject
    open override func get_IsTopLevelObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_bool__get_IsTopLevelObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsTopLevelObject(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_IsTopLevelObject(System.Boolean)
    open override func set_IsTopLevelObject(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_IsTopLevelObject_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider get_OriginalValueProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_OriginalValueProvider
    open func get_OriginalValueProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_IValueProvider__get_OriginalValueProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_OriginalValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
    open func set_OriginalValueProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_OriginalValueProvider_0__1__IValueProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider get_ValueProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ValueProvider
    open override func get_ValueProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_IValueProvider__get_ValueProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
    open override func set_ValueProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ValueProvider_0__1__IValueProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool> get_PropertyFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_PropertyFilter
    open override func get_PropertyFilter() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool___get_PropertyFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyFilter(System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_PropertyFilter(System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    open override func set_PropertyFilter(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_PropertyFilter_0__1__System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open override func set_PropertyFilter(value : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(value);
        return try set_PropertyFilter(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary get_ValidationState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_ValidationState
    open override func get_ValidationState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ValidationStateDictionary__get_ValidationState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
    open override func set_ValidationState(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_ValidationState_0__1__ValidationStateDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.get_Result
    open override func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_ModelBindingResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.set_Result(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
    open override func set_Result(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_DefaultModelBindingContext_void__set_Result_0__1__ModelBindingResult(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
        set(v) {
            return try! set_ActionContext(value: v);
        }
    }
    /**
    */
    open override var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
        set(v) {
            return try! set_BinderModelName(value: v!);
        }
    }
    /**
    */
    open override var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    */
    open override var FieldName : dotnet.System.String {
        get {
            return try! get_FieldName();
        }
        set(v) {
            return try! set_FieldName(value: v);
        }
    }
    /**
    */
    open override var IsTopLevelObject : Bool {
        get {
            return try! get_IsTopLevelObject();
        }
        set(v) {
            return try! set_IsTopLevelObject(value: v);
        }
    }
    /**
    */
    open override var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
    /**
    */
    open override var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
        set(v) {
            return try! set_ModelMetadata(value: v);
        }
    }
    /**
    */
    open override var ModelName : dotnet.System.String {
        get {
            return try! get_ModelName();
        }
        set(v) {
            return try! set_ModelName(value: v);
        }
    }
    /**
    */
    open override var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
        set(v) {
            return try! set_ModelState(value: v);
        }
    }
    /**
    
            Gets or sets the original value provider to be used when value providers are not filtered.
            

    */
    open var OriginalValueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        get {
            return try! get_OriginalValueProvider();
        }
        set(v) {
            return try! set_OriginalValueProvider(value: v);
        }
    }
    /**
    */
    open override var PropertyFilter : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>> {
        get {
            return try! get_PropertyFilter();
        }
        set(v) {
            return try! set_PropertyFilter(value: v!);
        }
    }
    /**
    */
    open override var Result : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v);
        }
    }
    /**
    */
    open override var ValidationState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary {
        get {
            return try! get_ValidationState();
        }
        set(v) {
            return try! set_ValidationState(value: v);
        }
    }
    /**
    */
    open override var ValueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        get {
            return try! get_ValueProvider();
        }
        set(v) {
            return try! set_ValueProvider(value: v);
        }
    }
} // DefaultModelBindingContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1
    /**
    
            Default implementation for .
            Provides a expression based way to provide include properties.
            

    */
open class DefaultPropertyFilterProvider_1<TModel : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_DefaultPropertyFilterProvider_1_get_type_handle(TModel.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultPropertyFilterProvider_1_ctor_0__0(TModel.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1.get_Prefix
    open func get_Prefix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultPropertyFilterProvider_1_String__get_Prefix_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>> get_PropertyIncludeExpressions()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1.get_PropertyIncludeExpressions
    open func get_PropertyIncludeExpressions() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,dotnet.System.Object>>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultPropertyFilterProvider_1_System_Collections_Generic_IEnumerable_System_Linq_Expressions_System_Linq_Expressions_Expression_System_System_Func_TModel_object_____get_PropertyIncludeExpressions_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool> get_PropertyFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1.get_PropertyFilter
    open func get_PropertyFilter() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_DefaultPropertyFilterProvider_1_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool___get_PropertyFilter_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    /**
    
            The prefix which is used while generating the property filter.
            

    */
    open var Prefix : dotnet.System.String {
        get {
            return try! get_Prefix();
        }
    }
    /**
    */
    open var PropertyFilter : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool> {
        get {
            return try! get_PropertyFilter();
        }
    }
    /**
    
            Expressions which can be used to generate property filter which can filter model
            properties.
            

    */
    open var PropertyIncludeExpressions : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,dotnet.System.Object>>>> {
        get {
            return try! get_PropertyIncludeExpressions();
        }
    }
} // DefaultPropertyFilterProvider_1


// type: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider
    /**
    
            A  that represents an empty model.
            

    */
open class EmptyModelMetadataProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_EmptyModelMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider.#ctor
    /**
    
            Initializes a new .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_EmptyModelMetadataProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EmptyModelMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider
    /**
    
            An  adapter for data stored in an .
            

    */
public final class FormFileValueProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProvider_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.IFormFileCollection)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.#ctor(Microsoft.AspNetCore.Http.IFormFileCollection)
    /**
    
            Creates a value provider for .
            

    - Parameter files: The .
    */
    public init(files : aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProvider_ctor_0__1__IFormFileCollection(&__thrown, files.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.ContainsPrefix(System.String)
    /**
    */
    public func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.GetValue(System.String)
    /**
    */
    public func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
} // FormFileValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory
    /**
    
            A  for .
            

    */
public final class FormFileValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProviderFactory_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    public func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormFileValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FormFileValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider
    /**
    
            An  adapter for data stored in an .
            

    */
open class FormValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Http.IFormCollection, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Http.IFormCollection,System.Globalization.CultureInfo)
    /**
    
            Creates a value provider for .
            

    - Parameter bindingSource: The  for the data.
    - Parameter values: The key value pairs to wrap.
    - Parameter culture: The culture to return with ValueProviderResult instances.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : aspnetcore.Microsoft.AspNetCore.Http.IFormCollection, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_ctor_0__3__BindingSource_IFormCollection_CultureInfo(&__thrown, bindingSource.get_handle(), values.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.ContainsPrefix(System.String)
    /**
    */
    open override func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.GetKeysFromPrefix(System.String)
    /**
    */
    open func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.GetValue(System.String)
    /**
    */
    open override func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.get_Culture
    open func get_Culture() throws -> Optional<dotnet.System.Globalization.CultureInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProvider_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Globalization.CultureInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The culture to use.
            

    */
    open var Culture : Optional<dotnet.System.Globalization.CultureInfo> {
        get {
            return try! get_Culture();
        }
    }
} // FormValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory
    /**
    
            A  for .
            

    */
open class FormValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    open /* method final */ func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_FormValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FormValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceValueProvider
    /**
    
            A value provider which can filter its contents based on .
            

    */
open class IBindingSourceValueProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    
            Filters the value provider based on .
            

    - Parameter bindingSource: The  associated with a model.
    - Returns: 
            The filtered value provider, or null if the value provider does not match
            .
            

    */
    open func Filter(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider_IValueProvider__Filter_0__1__BindingSource(&__thrown, self.get_handle(), bindingSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IBindingSourceValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
    /**
    
            Interface for model binding collections.
            

    */
open class ICollectionModelBinder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_ICollectionModelBinder,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ICollectionModelBinder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool CanCreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
    /**
    
            Gets an indication whether or not this  implementation can create
            an  assignable to .
            

    - Parameter targetType:  of the model.
    - Returns: 
            true if this  implementation can create an 
            assignable to ; false otherwise.
            

    */
    open func CanCreateInstance(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ICollectionModelBinder_bool__CanCreateInstance_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ICollectionModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IEnumerableValueProvider
    /**
    
            Interface representing an enumerable .
            

    */
open class IEnumerableValueProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IEnumerableValueProvider.GetKeysFromPrefix(System.String)
    /**
    
            Gets the keys for a specific prefix.
            

    - Parameter prefix: The prefix to enumerate.
    - Returns: The keys for the prefix.

    */
    open func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
} // IEnumerableValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IKeyRewriterValueProvider
    /**
    
            A value provider which can filter its contents to remove keys rewritten compared to the request data.
            

    */
open class IKeyRewriterValueProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IKeyRewriterValueProvider.Filter
    /**
    
            Filters the value provider to remove keys rewritten compared to the request data.
            

    - Returns: 
            The filtered value provider or  if the value provider only contains rewritten keys.
            

    */
    open func Filter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider_IValueProvider__Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IKeyRewriterValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory
    /**
    
            A factory abstraction for creating  instances.
            

    */
open class IModelBinderFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext)
    /**
    
            Creates a new .
            

    - Parameter context: The .
    - Returns: An  instance.

    */
    open func CreateBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderFactory_IModelBinder__CreateBinder_0__1__ModelBinderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __return);
        }
    }
} // IModelBinderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider
    /**
    
            An  for jQuery formatted form data.
            

    */
open class JQueryFormValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_JQueryFormValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Primitives.StringValues},System.Globalization.CultureInfo)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter bindingSource: The  of the data.
    - Parameter values: The values.
    - Parameter culture: The culture to return with ValueProviderResult instances.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryFormValueProvider_ctor_0__3__BindingSource_System_Collections_Generic_IDictionary_string_Microsoft_Extensions_Primitives_StringValues__CultureInfo(&__thrown, bindingSource.get_handle(), values.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JQueryFormValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory
    /**
    
            An  for .
            

    */
open class JQueryFormValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_JQueryFormValueProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryFormValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    open /* method final */ func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryFormValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // JQueryFormValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProvider
    /**
    
            An  for jQuery formatted query string data.
            

    */
open class JQueryQueryStringValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_JQueryQueryStringValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Primitives.StringValues},System.Globalization.CultureInfo)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter bindingSource: The  of the data.
    - Parameter values: The values.
    - Parameter culture: The culture to return with ValueProviderResult instances.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryQueryStringValueProvider_ctor_0__3__BindingSource_System_Collections_Generic_IDictionary_string_Microsoft_Extensions_Primitives_StringValues__CultureInfo(&__thrown, bindingSource.get_handle(), values.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JQueryQueryStringValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory
    /**
    
            An  for .
            

    */
open class JQueryQueryStringValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_JQueryQueryStringValueProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryQueryStringValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    open /* method final */ func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryQueryStringValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // JQueryQueryStringValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider
    /**
    
            An  for jQuery formatted data.
            

    */
open class JQueryValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.ContainsPrefix(System.String)
    /**
    */
    open override func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.GetKeysFromPrefix(System.String)
    /**
    */
    open /* method final */ func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.GetValue(System.String)
    /**
    */
    open override func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider Filter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.Filter
    /**
    */
    open /* method final */ func Filter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_IValueProvider__Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.get_Culture
    open func get_Culture() throws -> Optional<dotnet.System.Globalization.CultureInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_JQueryValueProvider_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Globalization.CultureInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the  associated with the values.
            

    */
    open var Culture : Optional<dotnet.System.Globalization.CultureInfo> {
        get {
            return try! get_Culture();
        }
    }
} // JQueryValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes
    /**
    
            Provides access to the combined list of attributes associated with a , property, or parameter.
            

    */
open class ModelAttributes
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes GetAttributesForProperty(System.Type, System.Reflection.PropertyInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForProperty(System.Type,System.Reflection.PropertyInfo)
    /**
    
            Gets the attributes for the given .
            

    - Parameter type: The  in which caller found .
            
    - Parameter property: A  for which attributes need to be resolved.
            
    - Returns: 
            A  instance with the attributes of the property and its .
            

    */
    open class func GetAttributesForProperty(type : dotnet.System.Type_, property : dotnet.System.Reflection.PropertyInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_ModelAttributes__GetAttributesForProperty_0__2__Type_PropertyInfo(&__thrown, type.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes GetAttributesForProperty(System.Type, System.Reflection.PropertyInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForProperty(System.Type,System.Reflection.PropertyInfo,System.Type)
    /**
    
            Gets the attributes for the given  with the specified .
            

    - Parameter containerType: The  in which caller found .
            
    - Parameter property: A  for which attributes need to be resolved.
            
    - Parameter modelType: The model type
    - Returns: 
            A  instance with the attributes of the property and its .
            

    */
    open class func GetAttributesForProperty(containerType : dotnet.System.Type_, property : dotnet.System.Reflection.PropertyInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_ModelAttributes__GetAttributesForProperty_0__3__Type_PropertyInfo_Type(&__thrown, containerType.get_handle(), property.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes GetAttributesForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForType(System.Type)
    /**
    
            Gets the attributes for the given .
            

    - Parameter type: The  for which attributes need to be resolved.
            
    - Returns: A  instance with the attributes of the .

    */
    open class func GetAttributesForType(type : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_ModelAttributes__GetAttributesForType_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes GetAttributesForParameter(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForParameter(System.Reflection.ParameterInfo)
    /**
    
            Gets the attributes for the given .
            

    - Parameter parameterInfo: 
            The  for which attributes need to be resolved.
            
    - Returns: 
            A  instance with the attributes of the parameter and its .
            

    */
    open class func GetAttributesForParameter(parameterInfo : dotnet.System.Reflection.ParameterInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_ModelAttributes__GetAttributesForParameter_0__1__ParameterInfo(&__thrown, parameterInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes GetAttributesForParameter(System.Reflection.ParameterInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForParameter(System.Reflection.ParameterInfo,System.Type)
    /**
    
            Gets the attributes for the given  with the specified .
            

    - Parameter parameterInfo: 
            The  for which attributes need to be resolved.
            
    - Parameter modelType: The model type.
    - Returns: 
            A  instance with the attributes of the parameter and its .
            

    */
    open class func GetAttributesForParameter(parameterInfo : dotnet.System.Reflection.ParameterInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_ModelAttributes__GetAttributesForParameter_0__2__ParameterInfo_Type(&__thrown, parameterInfo.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_PropertyAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.get_PropertyAttributes
    open func get_PropertyAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_System_Collections_Generic_IReadOnlyList_object___get_PropertyAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ParameterAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.get_ParameterAttributes
    open func get_ParameterAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_System_Collections_Generic_IReadOnlyList_object___get_ParameterAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_TypeAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.get_TypeAttributes
    open func get_TypeAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelAttributes_System_Collections_Generic_IReadOnlyList_object___get_TypeAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the set of all attributes. If this instance represents the attributes for a property, the attributes
            on the property definition are before those on the property's . If this instance
            represents the attributes for a parameter, the attributes on the parameter definition are before those on
            the parameter's .
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets the set of attributes on the parameter, or null if this instance does not represent the attributes
            for a parameter.
            

    */
    open var ParameterAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_ParameterAttributes();
        }
    }
    /**
    
            Gets the set of attributes on the property, or null if this instance does not represent the attributes
            for a property.
            

    */
    open var PropertyAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_PropertyAttributes();
        }
    }
    /**
    
            Gets the set of attributes on the . If this instance represents a property, then
             contains attributes retrieved from .
            If this instance represents a parameter, then contains attributes retrieved from
            .
            

    */
    open var TypeAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_TypeAttributes();
        }
    }
} // ModelAttributes


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory
    /**
    
            A factory for  instances.
            

    */
open class ModelBinderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},System.IServiceProvider)
    /**
    
            Creates a new .
            

    - Parameter metadataProvider: The .
    - Parameter options: The  for .
    - Parameter serviceProvider: The .
    */
    public init(metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactory_ctor_0__3__IModelMetadataProvider_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__IServiceProvider(&__thrown, metadataProvider.get_handle(), options.get_handle(), serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext)
    /**
    */
    open /* method final */ func CreateBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactory_IModelBinder__CreateBinder_0__1__ModelBinderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __return);
        }
    }
} // ModelBinderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext
    /**
    
            A context object for .
            

    */
open class ModelBinderFactoryContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.get_BindingInfo
    open func get_BindingInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    open func set_BindingInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_void__set_BindingInfo_0__1__BindingInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Metadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.set_Metadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_Metadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_void__set_Metadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_CacheToken()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.get_CacheToken
    open func get_CacheToken() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_Object__get_CacheToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CacheToken(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.set_CacheToken(System.Object)
    open func set_CacheToken(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderFactoryContext_void__set_CacheToken_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var BindingInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        get {
            return try! get_BindingInfo();
        }
        set(v) {
            return try! set_BindingInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the cache token. If non-null the resulting 
            will be cached.
            

    */
    open var CacheToken : Optional<dotnet.System.Object> {
        get {
            return try! get_CacheToken();
        }
        set(v) {
            return try! set_CacheToken(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_Metadata();
        }
        set(v) {
            return try! set_Metadata(value: v);
        }
    }
} // ModelBinderFactoryContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions
public struct ModelBinderProviderExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TModelBinderProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>)
    // void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider},System.Type)
    /**
    
            Removes all model binder providers of the specified type.
            

    - Parameter list: The list of s.
    - Parameter type: The type to remove.
    */
    public static func RemoveType(list : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderExtensions_void__RemoveType_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider__Type(&__thrown, list.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ModelBinderProviderExtensions


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions
public struct ModelMetadataProviderExtensions {
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions.GetMetadataForProperty(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.String)
    /**
    
            Gets a  for property identified by the provided
             and .
            

    - Parameter provider: The .
    - Parameter containerType: The  for which the property is defined.
    - Parameter propertyName: The property name.
    - Returns: A  for the property.

    */
    public static func GetMetadataForProperty(provider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, containerType : dotnet.System.Type_, propertyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProviderExtensions_ModelMetadata__GetMetadataForProperty_0__3__IModelMetadataProvider_Type_String(&__thrown, provider.get_handle(), containerType.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
} // ModelMetadataProviderExtensions


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames
public struct ModelNames {
    // System.String CreateIndexModelName(System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreateIndexModelName(System.String,System.Int32)
    /**
    
            Create an index model name from the parent name.
            

    - Parameter parentName: The parent name.
    - Parameter index: The index.
    - Returns: The index model name.

    */
    public static func CreateIndexModelName(parentName : dotnet.System.String, index : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelNames_String__CreateIndexModelName_0__2__String_i32(&__thrown, parentName.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String CreateIndexModelName(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreateIndexModelName(System.String,System.String)
    /**
    
            Create an index model name from the parent name.
            

    - Parameter parentName: The parent name.
    - Parameter index: The index.
    - Returns: The index model name.

    */
    public static func CreateIndexModelName(parentName : dotnet.System.String, index : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelNames_String__CreateIndexModelName_0__2__String_String(&__thrown, parentName.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String CreatePropertyModelName(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreatePropertyModelName(System.String,System.String)
    /**
    
            Create an property model name with a prefix.
            

    - Parameter prefix: The prefix to use.
    - Parameter propertyName: The property name.
    - Returns: The property model name.

    */
    public static func CreatePropertyModelName(prefix : Optional<dotnet.System.String>, propertyName : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelNames_String__CreatePropertyModelName_0__2__String_String(&__thrown, prefix?.get_handle() ?? nil, propertyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ModelNames


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator
    /**
    
            Provides a base  implementation for validating an object graph.
            

    */
open class ObjectModelValidator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IObjectModelValidator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider})
    /**
    
            Initializes a new instance of .
            

    - Parameter modelMetadataProvider: The .
    - Parameter validatorProviders: The list of .
    */
    public init(modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, validatorProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_ctor_0__2__IModelMetadataProvider_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider_(&__thrown, modelMetadataProvider.get_handle(), validatorProviders.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Validate(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary,System.String,System.Object)
    /**
    */
    open func Validate(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>, prefix : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_void__Validate_0__4__ActionContext_ValidationStateDictionary_String_Object(&__thrown, self.get_handle(), actionContext.get_handle(), validationState?.get_handle() ?? nil, prefix?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary, System.String, System.Object, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary,System.String,System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Validates the provided object model.
            If  is  and the 's
             is , will add one or more
            model state errors that 
            would not.
            

    - Parameter actionContext: The .
    - Parameter validationState: The .
    - Parameter prefix: The model prefix key.
    - Parameter model: The model object.
    - Parameter metadata: The .
    */
    open func Validate(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>, prefix : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_void__Validate_0__5__ActionContext_ValidationStateDictionary_String_Object_ModelMetadata(&__thrown, self.get_handle(), actionContext.get_handle(), validationState?.get_handle() ?? nil, prefix?.get_handle() ?? nil, model?.get_handle() ?? nil, metadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary, System.String, System.Object, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary,System.String,System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object)
    /**
    
            Validates the provided object model.
            If  is  and the 's
             is , will add one or more
            model state errors that 
            would not.
            

    - Parameter actionContext: The .
    - Parameter validationState: The .
    - Parameter prefix: The model prefix key.
    - Parameter model: The model object.
    - Parameter metadata: The .
    - Parameter container: The model container
    */
    open func Validate(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>, prefix : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, container : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_void__Validate_0__6__ActionContext_ValidationStateDictionary_String_Object_ModelMetadata_Object(&__thrown, self.get_handle(), actionContext.get_handle(), validationState?.get_handle() ?? nil, prefix?.get_handle() ?? nil, model?.get_handle() ?? nil, metadata.get_handle(), container?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor GetValidationVisitor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.GetValidationVisitor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
    /**
    
            Gets a  that traverses the object model graph and performs validation.
            

    - Parameter actionContext: The .
    - Parameter validatorProvider: The .
    - Parameter validatorCache: The .
    - Parameter metadataProvider: The .
    - Parameter validationState: The .
    - Returns: A  which traverses the object model graph.

    */
    open func GetValidationVisitor(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validatorProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider, validatorCache : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache, metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ObjectModelValidator_ValidationVisitor__GetValidationVisitor_0__5__ActionContext_IModelValidatorProvider_ValidatorCache_IModelMetadataProvider_ValidationStateDictionary(&__thrown, self.get_handle(), actionContext.get_handle(), validatorProvider.get_handle(), validatorCache.get_handle(), metadataProvider.get_handle(), validationState?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor(hndl : __return);
        }
    }
} // ObjectModelValidator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder
    /**
    
            Binds and validates models specified by a .
            

    */
open class ParameterBinder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ParameterBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter modelMetadataProvider: The .
    - Parameter modelBinderFactory: The .
    - Parameter validator: The .
    - Parameter mvcOptions: The  accessor.
    - Parameter loggerFactory: The .
    */
    public init(modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, modelBinderFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory, validator : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator, mvcOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ParameterBinder_ctor_0__5__IModelMetadataProvider_IModelBinderFactory_IObjectModelValidator_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions__ILoggerFactory(&__thrown, modelMetadataProvider.get_handle(), modelBinderFactory.get_handle(), validator.get_handle(), mvcOptions.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult> BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object)
    /**
    
            Binds a model specified by  using  as the initial value.
            

    - Parameter actionContext: The .
    - Parameter modelBinder: The .
    - Parameter valueProvider: The .
    - Parameter parameter: The 
    - Parameter metadata: The .
    - Parameter value: The initial model value.
    - Returns: The result of model binding.

    */
    open func BindModelAsync(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, modelBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, parameter : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, value : Optional<dotnet.System.Object>) async throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ParameterBinder_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult___BindModelAsync_0__6__ActionContext_IModelBinder_IValueProvider_ParameterDescriptor_ModelMetadata_Object(&__thrown, self.get_handle(), actionContext.get_handle(), modelBinder.get_handle(), valueProvider.get_handle(), parameter.get_handle(), metadata.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult> BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider,Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object,System.Object)
    /**
    
            Binds a model specified by  using  as the initial value.
            

    - Parameter actionContext: The .
    - Parameter modelBinder: The .
    - Parameter valueProvider: The .
    - Parameter parameter: The 
    - Parameter metadata: The .
    - Parameter value: The initial model value.
    - Parameter container: The container for the model.
    - Returns: The result of model binding.

    */
    open func BindModelAsync(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, modelBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider, parameter : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, value : Optional<dotnet.System.Object>, container : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ParameterBinder_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult___BindModelAsync_0__7__ActionContext_IModelBinder_IValueProvider_ParameterDescriptor_ModelMetadata_Object_Object(&__thrown, self.get_handle(), actionContext.get_handle(), modelBinder.get_handle(), valueProvider.get_handle(), parameter.get_handle(), metadata.get_handle(), value?.get_handle() ?? nil, container?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
} // ParameterBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer
    /**
    
            This is a container for prefix values. It normalizes all the values into dotted-form and then stores
            them in a sorted array. All queries for prefixes are also normalized to dotted-form, and searches
            for ContainsPrefix are done with a binary search.
            

    */
open class PrefixContainer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_PrefixContainer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.ICollection<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.#ctor(System.Collections.Generic.ICollection{System.String})
    /**
    
            Initializes a new instance of .
            

    - Parameter values: The values for the container.
    */
    public init(values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_PrefixContainer_ctor_0__1__System_Collections_Generic_ICollection_string_(&__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.ContainsPrefix(System.String)
    /**
    
            Checks if a prefix is in the container.
            

    - Parameter prefix: The prefix to check.
    - Returns: True if the prefix is present.

    */
    open func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_PrefixContainer_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.GetKeysFromPrefix(System.String)
    /**
    
            Gets the keys from a prefix.
            

    - Parameter prefix: The prefix to enumerate.
    - Returns: The keys for the prefix.

    */
    open func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_PrefixContainer_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
} // PrefixContainer


// type: Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider
    /**
    
            An  adapter for data stored in an .
            

    */
open class QueryStringValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Http.IQueryCollection, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Http.IQueryCollection,System.Globalization.CultureInfo)
    /**
    
            Creates a value provider for .
            

    - Parameter bindingSource: The  for the data.
    - Parameter values: The key value pairs to wrap.
    - Parameter culture: The culture to return with ValueProviderResult instances.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_ctor_0__3__BindingSource_IQueryCollection_CultureInfo(&__thrown, bindingSource.get_handle(), values.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.ContainsPrefix(System.String)
    /**
    */
    open override func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> GetKeysFromPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.GetKeysFromPrefix(System.String)
    /**
    */
    open func GetKeysFromPrefix(prefix : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_System_Collections_Generic_IDictionary_string_string___GetKeysFromPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.GetValue(System.String)
    /**
    */
    open override func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.get_Culture
    open func get_Culture() throws -> Optional<dotnet.System.Globalization.CultureInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProvider_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Globalization.CultureInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The culture for the provider.
            

    */
    open var Culture : Optional<dotnet.System.Globalization.CultureInfo> {
        get {
            return try! get_Culture();
        }
    }
} // QueryStringValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory
    /**
    
            A  that creates  instances that
            read values from the request query-string.
            

    */
open class QueryStringValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    open /* method final */ func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_QueryStringValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // QueryStringValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider
    /**
    
            An  adapter for data stored in an .
            

    */
open class RouteValueProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new .
            

    - Parameter bindingSource: The  of the data.
    - Parameter values: The values.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProvider_ctor_0__2__BindingSource_RouteValueDictionary(&__thrown, bindingSource.get_handle(), values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Globalization.CultureInfo)
    /**
    
            Creates a new .
            

    - Parameter bindingSource: The  of the data.
    - Parameter values: The values.
    - Parameter culture: The culture for route value.
    */
    public init(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, culture : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProvider_ctor_0__3__BindingSource_RouteValueDictionary_CultureInfo(&__thrown, bindingSource.get_handle(), values.get_handle(), culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.ContainsPrefix(System.String)
    /**
    */
    open func ContainsPrefix(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.GetValue(System.String)
    /**
    */
    open override func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
} // RouteValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory
    /**
    
            A  for creating  instances.
            

    */
open class RouteValueProviderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProviderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProviderFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    */
    open /* method final */ func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_RouteValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // RouteValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider
    /**
    
            An  which configures  to
            false for matching types.
            

    */
open class SuppressChildValidationMetadataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.#ctor(System.Type)
    /**
    
            Creates a new  for the given .
            

    - Parameter type: 
            The . This  and all assignable values will have
             set to false.
            
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.#ctor(System.String)
    /**
    
            Creates a new  for the given .
            

    - Parameter fullTypeName: 
            The type full name. This type and all of its subclasses will have
             set to false.
            
    */
    public init(fullTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_ctor_0__1__String(&__thrown, fullTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext)
    /**
    */
    open /* method final */ func CreateValidationMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_void__CreateValidationMetadata_0__1__ValidationMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FullTypeName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.get_FullTypeName
    open func get_FullTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_SuppressChildValidationMetadataProvider_String__get_FullTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the full name of a type for which to suppress validation of children.
            

    */
    open var FullTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_FullTypeName();
        }
    }
    /**
    
            Gets the  for which to suppress validation of children.
            

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
    }
} // SuppressChildValidationMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeException
    /**
    
            The  that is added to model state when a model binder for the body of the request is
            unable to understand the request content type header.
            

    */
open class UnsupportedContentTypeException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeException.#ctor(System.String)
    /**
    
            Creates a new instance of  with the specified
            exception .
            

    - Parameter message: The message that describes the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnsupportedContentTypeException


// type: Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter
    /**
    
            A filter that scans for  in the
             and short-circuits the pipeline
            with an Unsupported Media Type (415) response.
            

    */
open class UnsupportedContentTypeFilter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Filters_IActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    /**
    */
    open /* method final */ func OnActionExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_void__OnActionExecuting_0__1__ActionExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
    /**
    */
    open /* method final */ func OnActionExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_void__OnActionExecuted_0__1__ActionExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_UnsupportedContentTypeFilter_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the filter order. .
            
            Defaults to -3000 to ensure it executes before .
            
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // UnsupportedContentTypeFilter


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions
public struct ValueProviderFactoryExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TValueProviderFactory>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
    // void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory},System.Type)
    /**
    
            Removes all value provider factories of the specified type.
            

    - Parameter list: The list of .
    - Parameter type: The type to remove.
    */
    public static func RemoveType(list : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderFactoryExtensions_void__RemoveType_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory__Type(&__thrown, list.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ValueProviderFactoryExtensions


}
// Microsoft.AspNetCore.Mvc.ModelBinding.Binders
extension Microsoft.AspNetCore.Mvc.ModelBinding.Binders {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider
    /**
    
            An  for arrays.
            

    */
open class ArrayModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ArrayModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1
    /**
    
             implementation for binding array values.
            

    */
open class ArrayModelBinder_1<TElement : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder_1<TElement>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinder_1_get_type_handle(TElement.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    */
    public override init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinder_1_ctor_0__2__IModelBinder_ILoggerFactory(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    */
    public override init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinder_1_ctor_0__3__IModelBinder_ILoggerFactory_bool(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool, Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    - Parameter mvcOptions: The .
    */
    public override init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool, mvcOptions : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinder_1_ctor_0__4__IModelBinder_ILoggerFactory_bool_MvcOptions(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0), mvcOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanCreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1.CanCreateInstance(System.Type)
    /**
    */
    open override func CanCreateInstance(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ArrayModelBinder_1_bool__CanCreateInstance_0__1__Type(TElement.get_type_handle(), &__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ArrayModelBinder_1


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder
    /**
    
            An  for models which specify an  using
            .
            

    */
open class BinderTypeModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder.#ctor(System.Type)
    /**
    
            Creates a new .
            

    - Parameter binderType: The  of the .
    */
    public init(binderType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinder_ctor_0__1__Type(&__thrown, binderType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // BinderTypeModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider
    /**
    
            An  for models which specify an 
            using .
            

    */
open class BinderTypeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BinderTypeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // BinderTypeModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder
    /**
    
            An  which binds models from the request body using an 
            when a model has the binding source .
            

    */
open class BodyModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: 
            The , used to create 
            instances for reading the request body.
            
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinder_ctor_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory(&__thrown, formatters.get_handle(), readerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: 
            The , used to create 
            instances for reading the request body.
            
    - Parameter loggerFactory: The .
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinder_ctor_0__3__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory_ILoggerFactory(&__thrown, formatters.get_handle(), readerFactory.get_handle(), loggerFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: 
            The , used to create 
            instances for reading the request body.
            
    - Parameter loggerFactory: The .
    - Parameter options: The .
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>, options : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinder_ctor_0__4__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory_ILoggerFactory_MvcOptions(&__thrown, formatters.get_handle(), readerFactory.get_handle(), loggerFactory?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // BodyModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider
    /**
    
            An  for deserializing the request body using a formatter.
            

    */
open class BodyModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: The .
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinderProvider_ctor_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory(&__thrown, formatters.get_handle(), readerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: The .
    - Parameter loggerFactory: The .
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinderProvider_ctor_0__3__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory_ILoggerFactory(&__thrown, formatters.get_handle(), readerFactory.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Creates a new .
            

    - Parameter formatters: The list of .
    - Parameter readerFactory: The .
    - Parameter loggerFactory: The .
    - Parameter options: The .
    */
    public init(formatters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter>, readerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinderProvider_ctor_0__4__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter__IHttpRequestStreamReaderFactory_ILoggerFactory_MvcOptions(&__thrown, formatters.get_handle(), readerFactory.get_handle(), loggerFactory.get_handle(), options?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_BodyModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // BodyModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder
    /**
    
            ModelBinder to bind byte Arrays.
            

    */
open class ByteArrayModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinder_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // ByteArrayModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider
    /**
    
            An  for binding base64 encoded byte arrays.
            

    */
open class ByteArrayModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ByteArrayModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ByteArrayModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder
    /**
    
             implementation to bind models of type .
            

    */
open class CancellationTokenModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // CancellationTokenModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider
    /**
    
            An  for .
            

    */
open class CancellationTokenModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CancellationTokenModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CancellationTokenModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider
    /**
    
            An  for .
            

    */
open class CollectionModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CollectionModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
    /**
    
             implementation for binding collection values.
            

    */
open class CollectionModelBinder_1<TElement : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_ICollectionModelBinder,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_get_type_handle(TElement.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    */
    public init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_ctor_0__2__IModelBinder_ILoggerFactory(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    */
    public init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_ctor_0__3__IModelBinder_ILoggerFactory_bool(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool, Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Creates a new .
            

    - Parameter elementBinder: 
            The  for binding .
            
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    - Parameter mvcOptions: The .
    */
    public init(elementBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool, mvcOptions : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_ctor_0__4__IModelBinder_ILoggerFactory_bool_MvcOptions(TElement.get_type_handle(), &__thrown, elementBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0), mvcOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_Task__BindModelAsync_0__1__ModelBindingContext(TElement.get_type_handle(), &__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // bool CanCreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CanCreateInstance(System.Type)
    /**
    */
    open func CanCreateInstance(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_CollectionModelBinder_1_bool__CanCreateInstance_0__1__Type(TElement.get_type_handle(), &__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // CollectionModelBinder_1


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinder
    /**
    
             implementation for binding complex types.
            

    */
public final class ComplexObjectModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexObjectModelBinder_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    public func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexObjectModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // ComplexObjectModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider
    /**
    
            An  for complex types.
            

    */
open class ComplexObjectModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexObjectModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexObjectModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexObjectModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ComplexObjectModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
    /**
    
             implementation for binding complex types.
            

    */
open class ComplexTypeModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter propertyBinders: 
            The  of binders to use for binding properties.
            
    - Parameter loggerFactory: The .
    */
    public init(propertyBinders : Optional<dotnet.System.Collections.Generic.IDictionary_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>>, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinder_ctor_0__2__System_Collections_Generic_IDictionary_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder__ILoggerFactory(&__thrown, (propertyBinders?.get_handle()), loggerFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>, Microsoft.Extensions.Logging.ILoggerFactory, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder},Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
    /**
    
            Creates a new .
            

    - Parameter propertyBinders: 
            The  of binders to use for binding properties.
            
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    */
    public init(propertyBinders : Optional<dotnet.System.Collections.Generic.IDictionary_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>>, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>, allowValidatingTopLevelNodes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinder_ctor_0__3__System_Collections_Generic_IDictionary_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder__ILoggerFactory_bool(&__thrown, (propertyBinders?.get_handle()), loggerFactory?.get_handle() ?? nil, Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ComplexTypeModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider
    /**
    
            An  for complex types.
            

    */
open class ComplexTypeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ComplexTypeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ComplexTypeModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder
    /**
    
            An  for  and nullable  models.
            

    */
open class DateTimeModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Globalization.DateTimeStyles, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder.#ctor(System.Globalization.DateTimeStyles,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter supportedStyles: The .
    - Parameter loggerFactory: The .
    */
    public init(supportedStyles : dotnet.System.Globalization.DateTimeStyles, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinder_ctor_0__2__DateTimeStyles_ILoggerFactory(&__thrown, supportedStyles.get_value(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // DateTimeModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider
    /**
    
            An  for binding  and nullable  models.
            

    */
open class DateTimeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DateTimeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DateTimeModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder
    /**
    
            An  for  and  where T is
            .
            

    */
open class DecimalModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DecimalModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Globalization.NumberStyles, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder.#ctor(System.Globalization.NumberStyles,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter supportedStyles: The .
    - Parameter loggerFactory: The .
    */
    public init(supportedStyles : dotnet.System.Globalization.NumberStyles, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DecimalModelBinder_ctor_0__2__NumberStyles_ILoggerFactory(&__thrown, supportedStyles.get_value(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DecimalModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // DecimalModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider
    /**
    
            An  for binding .
            

    */
open class DictionaryModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DictionaryModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2
    /**
    
             implementation for binding dictionary values.
            

    */
open class DictionaryModelBinder_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter keyBinder: The  for .
    - Parameter valueBinder: The  for .
    - Parameter loggerFactory: The .
    */
    public init(keyBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_ctor_0__3__IModelBinder_IModelBinder_ILoggerFactory(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, keyBinder.get_handle(), valueBinder.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
    /**
    
            Creates a new .
            

    - Parameter keyBinder: The  for .
    - Parameter valueBinder: The  for .
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    */
    public init(keyBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_ctor_0__4__IModelBinder_IModelBinder_ILoggerFactory_bool(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, keyBinder.get_handle(), valueBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory, bool, Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Creates a new .
            

    - Parameter keyBinder: The  for .
    - Parameter valueBinder: The  for .
    - Parameter loggerFactory: The .
    - Parameter allowValidatingTopLevelNodes: 
            Indication that validation of top-level models is enabled. If  and
             is  for a top-level model, the binder
            adds a  error when the model is not bound.
            
    - Parameter mvcOptions: The .
    */
    public init(keyBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, allowValidatingTopLevelNodes : Bool, mvcOptions : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_ctor_0__5__IModelBinder_IModelBinder_ILoggerFactory_bool_MvcOptions(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, keyBinder.get_handle(), valueBinder.get_handle(), loggerFactory.get_handle(), Swift.Int32(allowValidatingTopLevelNodes ? 1 : 0), mvcOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open override func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_Task__BindModelAsync_0__1__ModelBindingContext(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // bool CanCreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2.CanCreateInstance(System.Type)
    /**
    */
    open override func CanCreateInstance(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DictionaryModelBinder_2_bool__CanCreateInstance_0__1__Type(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DictionaryModelBinder_2


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder
    /**
    
            An  for  and  where T is
            .
            

    */
open class DoubleModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DoubleModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Globalization.NumberStyles, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder.#ctor(System.Globalization.NumberStyles,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter supportedStyles: The .
    - Parameter loggerFactory: The .
    */
    public init(supportedStyles : dotnet.System.Globalization.NumberStyles, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DoubleModelBinder_ctor_0__2__NumberStyles_ILoggerFactory(&__thrown, supportedStyles.get_value(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_DoubleModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // DoubleModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder
    /**
    
             implementation to bind models for types deriving from .
            

    */
open class EnumTypeModelBinder
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_EnumTypeModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool, System.Type, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder.#ctor(System.Boolean,System.Type,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter suppressBindingUndefinedValueToEnumType: 
            Flag to determine if binding to undefined should be suppressed or not.
            
    - Parameter modelType: The model type.
    - Parameter loggerFactory: The ,
    */
    public init(suppressBindingUndefinedValueToEnumType : Bool, modelType : dotnet.System.Type_, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_EnumTypeModelBinder_ctor_0__3__bool_Type_ILoggerFactory(&__thrown, Swift.Int32(suppressBindingUndefinedValueToEnumType ? 1 : 0), modelType.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EnumTypeModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider
    /**
    
            A  for types deriving from .
            

    */
open class EnumTypeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_EnumTypeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider.#ctor(Microsoft.AspNetCore.Mvc.MvcOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: The .
    */
    public init(options : aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_EnumTypeModelBinderProvider_ctor_0__1__MvcOptions(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_EnumTypeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EnumTypeModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder
    /**
    
            An  for  and  where T is
            .
            

    */
open class FloatModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Globalization.NumberStyles, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder.#ctor(System.Globalization.NumberStyles,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter supportedStyles: The .
    - Parameter loggerFactory: The .
    */
    public init(supportedStyles : dotnet.System.Globalization.NumberStyles, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatModelBinder_ctor_0__2__NumberStyles_ILoggerFactory(&__thrown, supportedStyles.get_value(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FloatModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider
    /**
    
            An  for binding , ,
            , and their  wrappers.
            

    */
open class FloatingPointTypeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatingPointTypeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatingPointTypeModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FloatingPointTypeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // FloatingPointTypeModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder
    /**
    
             implementation to bind form values to .
            

    */
open class FormCollectionModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinder_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FormCollectionModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider
    /**
    
            An  for .
            

    */
open class FormCollectionModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormCollectionModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // FormCollectionModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder
    /**
    
             implementation to bind posted files to .
            

    */
open class FormFileModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinder_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // FormFileModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider
    /**
    
            An  for , collections
            of , and .
            

    */
open class FormFileModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_FormFileModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // FormFileModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder
    /**
    
            An  which binds models from the request headers when a model
            has the binding source .
            

    */
open class HeaderModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The .
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinder_ctor_0__1__ILoggerFactory(&__thrown, loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
    /**
    
            Initializes a new instance of .
            

    - Parameter loggerFactory: The .
    - Parameter innerModelBinder: The  which does the actual
            binding of values.
    */
    public init(loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, innerModelBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinder_ctor_0__2__ILoggerFactory_IModelBinder(&__thrown, loggerFactory.get_handle(), innerModelBinder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // HeaderModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider
    /**
    
            An  for binding header values.
            

    */
open class HeaderModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_HeaderModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HeaderModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider
    /**
    
            An  for .
            

    */
open class KeyValuePairModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // KeyValuePairModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2
    /**
    
            An  for .
            

    */
open class KeyValuePairModelBinder_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinder_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter keyBinder: The  for .
    - Parameter valueBinder: The  for .
    - Parameter loggerFactory: The .
    */
    public init(keyBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, valueBinder : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinder_2_ctor_0__3__IModelBinder_IModelBinder_ILoggerFactory(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, keyBinder.get_handle(), valueBinder.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_KeyValuePairModelBinder_2_Task__BindModelAsync_0__1__ModelBindingContext(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // KeyValuePairModelBinder_2


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder
    /**
    
            An  which binds models from the request services when a model
            has the binding source .
            

    */
open class ServicesModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // ServicesModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider
    /**
    
            An  for binding from the .
            

    */
open class ServicesModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_ServicesModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ServicesModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder
    /**
    
            An  for simple types.
            

    */
open class SimpleTypeModelBinder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder.#ctor(System.Type,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter type: The type to create binder for.
    - Parameter loggerFactory: The .
    */
    public init(type : dotnet.System.Type_, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinder_ctor_0__2__Type_ILoggerFactory(&__thrown, type.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    */
    open /* method final */ func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // SimpleTypeModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider
    /**
    
            An  for binding simple data types.
            

    */
open class SimpleTypeModelBinderProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinderProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinderProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    */
    open /* method final */ func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Binders_SimpleTypeModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // SimpleTypeModelBinderProvider


}

// Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
extension Microsoft.AspNetCore.Mvc.ModelBinding.Metadata {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata
    /**
    
            Binding metadata details for a .
            

    */
open class BindingMetadata
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_BinderModelName
    open func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_BinderModelName(System.String)
    open func set_BinderModelName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_BinderModelName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_BinderType
    open func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_BinderType(System.Type)
    open func set_BinderType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_BinderType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsBindingAllowed()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_IsBindingAllowed
    open func get_IsBindingAllowed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_bool__get_IsBindingAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsBindingAllowed(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_IsBindingAllowed(System.Boolean)
    open func set_IsBindingAllowed(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_IsBindingAllowed_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsBindingRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_IsBindingRequired
    open func get_IsBindingRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_bool__get_IsBindingRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsBindingRequired(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_IsBindingRequired(System.Boolean)
    open func set_IsBindingRequired(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_IsBindingRequired_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_IsReadOnly
    open func get_IsReadOnly() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_System_Nullable_bool___get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsReadOnly(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_IsReadOnly(System.Nullable{System.Boolean})
    open func set_IsReadOnly(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_IsReadOnly_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider get_ModelBindingMessageProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_ModelBindingMessageProvider
    open func get_ModelBindingMessageProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_DefaultModelBindingMessageProvider__get_ModelBindingMessageProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ModelBindingMessageProvider(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_ModelBindingMessageProvider(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
    open func set_ModelBindingMessageProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_ModelBindingMessageProvider_0__1__DefaultModelBindingMessageProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider get_PropertyFilterProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_PropertyFilterProvider
    open func get_PropertyFilterProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_IPropertyFilterProvider__get_PropertyFilterProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyFilterProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_PropertyFilterProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider)
    open func set_PropertyFilterProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_PropertyFilterProvider_0__1__IPropertyFilterProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.ConstructorInfo get_BoundConstructor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.get_BoundConstructor
    open func get_BoundConstructor() throws -> Optional<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_ConstructorInfo__get_BoundConstructor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ConstructorInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BoundConstructor(System.Reflection.ConstructorInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.set_BoundConstructor(System.Reflection.ConstructorInfo)
    open func set_BoundConstructor(value : Optional<dotnet.System.Reflection.ConstructorInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadata_void__set_BoundConstructor_0__1__ConstructorInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the binder model name. If null the property or parameter name will be used.
            See .
            

    */
    open var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
        set(v) {
            return try! set_BinderModelName(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the  implementation used to bind the
            model. See .
            

    */
    open var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
        set(v) {
            return try! set_BinderType(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            See .
            

    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    
            Gets or sets the  used to model bind and validate the model type.
            

    */
    open var BoundConstructor : Optional<dotnet.System.Reflection.ConstructorInfo> {
        get {
            return try! get_BoundConstructor();
        }
        set(v) {
            return try! set_BoundConstructor(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not the property can be model bound.
            Will be ignored if the model metadata being created does not represent a property.
            See .
            

    */
    open var IsBindingAllowed : Bool {
        get {
            return try! get_IsBindingAllowed();
        }
        set(v) {
            return try! set_IsBindingAllowed(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not the request must contain a value for the model.
            Will be ignored if the model metadata being created does not represent a property.
            See .
            

    */
    open var IsBindingRequired : Bool {
        get {
            return try! get_IsBindingRequired();
        }
        set(v) {
            return try! set_IsBindingRequired(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not the model is read-only. Will be ignored
            if the model metadata being created is not a property. If null then
             will be  computed based on the accessibility
            of the property accessor and model . See .
            

    */
    open var IsReadOnly : Optional<Bool> {
        get {
            return try! get_IsReadOnly();
        }
        set(v) {
            return try! set_IsReadOnly(value: v!);
        }
    }
    /**
    
            Gets the  instance. See
            .
            

    */
    open var ModelBindingMessageProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider> {
        get {
            return try! get_ModelBindingMessageProvider();
        }
        set(v) {
            return try! set_ModelBindingMessageProvider(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            See .
            

    */
    open var PropertyFilterProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        get {
            return try! get_PropertyFilterProvider();
        }
        set(v) {
            return try! set_PropertyFilterProvider(value: v!);
        }
    }
} // BindingMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext
    /**
    
            A context for an .
            

    */
open class BindingMetadataProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity,Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
    /**
    
            Creates a new .
            

    - Parameter key: The  for the .
    - Parameter attributes: The attributes for the .
    */
    public init(key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_ctor_0__2__ModelMetadataIdentity_ModelAttributes(&__thrown, key.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_Key
    open func get_Key() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_ModelMetadataIdentity__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ParameterAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_ParameterAttributes
    open func get_ParameterAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_ParameterAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_PropertyAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_PropertyAttributes
    open func get_PropertyAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_PropertyAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_TypeAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_TypeAttributes
    open func get_TypeAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_TypeAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata get_BindingMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.get_BindingMetadata
    open func get_BindingMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingMetadataProviderContext_BindingMetadata__get_BindingMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata(hndl : __return);
        }
    }
    /**
    
            Gets the attributes.
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets the .
            

    */
    open var BindingMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata {
        get {
            return try! get_BindingMetadata();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets the parameter attributes.
            

    */
    open var ParameterAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_ParameterAttributes();
        }
    }
    /**
    
            Gets the property attributes.
            

    */
    open var PropertyAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_PropertyAttributes();
        }
    }
    /**
    
            Gets the type attributes.
            

    */
    open var TypeAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_TypeAttributes();
        }
    }
} // BindingMetadataProviderContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider
    /**
    
            Provides  for a .
            

    */
open class BindingSourceMetadataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingSourceMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.#ctor(System.Type,Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    
            Creates a new  for the given .
            

    - Parameter type: 
            The . The provider sets  of the given  or
            anything assignable to the given .
            
    - Parameter bindingSource: 
            The  to assign to the given .
            
    */
    public init(type : dotnet.System.Type_, bindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingSourceMetadataProvider_ctor_0__2__Type_BindingSource(&__thrown, type.get_handle(), bindingSource?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
    /**
    */
    open /* method final */ func CreateBindingMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingSourceMetadataProvider_void__CreateBindingMetadata_0__1__BindingMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingSourceMetadataProvider_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_BindingSourceMetadataProvider_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The  to assign to the Type.
            

    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    
            The . The provider sets  of the given  or
            anything assignable to the given .
            

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
    }
} // BindingSourceMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails
    /**
    
            Holds associated metadata objects for a .
            

    */
open class DefaultMetadataDetails
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity,Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
    /**
    
            Creates a new .
            

    - Parameter key: The .
    - Parameter attributes: The set of model attributes.
    */
    public init(key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ctor_0__2__ModelMetadataIdentity_ModelAttributes(&__thrown, key.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes get_ModelAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_ModelAttributes
    open func get_ModelAttributes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ModelAttributes__get_ModelAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata get_BindingMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_BindingMetadata
    open func get_BindingMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_BindingMetadata__get_BindingMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_BindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata)
    open func set_BindingMetadata(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_BindingMetadata_0__1__BindingMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata get_DisplayMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_DisplayMetadata
    open func get_DisplayMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_DisplayMetadata__get_DisplayMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_DisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata)
    open func set_DisplayMetadata(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_DisplayMetadata_0__1__DisplayMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_Key
    open func get_Key() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ModelMetadataIdentity__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[] get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ModelMetadataArray__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[])
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_Properties(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[])
    open func set_Properties(value : Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_Properties_0__1__ModelMetadataArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[] get_BoundConstructorParameters()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_BoundConstructorParameters
    open func get_BoundConstructorParameters() throws -> Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ModelMetadataArray__get_BoundConstructorParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BoundConstructorParameters(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[])
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_BoundConstructorParameters(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata[])
    open func set_BoundConstructorParameters(value : Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_BoundConstructorParameters_0__1__ModelMetadataArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Object,System.Object> get_PropertyGetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_PropertyGetter
    open func get_PropertyGetter() throws -> Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_System_Func_object_object___get_PropertyGetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyGetter(System.Func<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_PropertyGetter(System.Func{System.Object,System.Object})
    open func set_PropertyGetter(value : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_PropertyGetter_0__1__System_Func_object_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_PropertyGetter(value : @escaping (dotnet.System.Object) throws -> dotnet.System.Object) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>(value);
        return try set_PropertyGetter(value: del_value);
    }
    // [IsSpecialName] System.Action<System.Object,System.Object> get_PropertySetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_PropertySetter
    open func get_PropertySetter() throws -> Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_System_Action_object_object___get_PropertySetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertySetter(System.Action<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_PropertySetter(System.Action{System.Object,System.Object})
    open func set_PropertySetter(value : Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_PropertySetter_0__1__System_Action_object_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_PropertySetter(value : @escaping (dotnet.System.Object, Optional<dotnet.System.Object>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>(value);
        return try set_PropertySetter(value: del_value);
    }
    // [IsSpecialName] System.Func<System.Object[],System.Object> get_BoundConstructorInvoker()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_BoundConstructorInvoker
    open func get_BoundConstructorInvoker() throws -> Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_System_Func_objectArray_object___get_BoundConstructorInvoker_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BoundConstructorInvoker(System.Func<System.Object[],System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_BoundConstructorInvoker(System.Func{System.Object[],System.Object})
    open func set_BoundConstructorInvoker(value : Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_BoundConstructorInvoker_0__1__System_Func_objectArray_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_BoundConstructorInvoker(value : @escaping (dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System.Object) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>(value);
        return try set_BoundConstructorInvoker(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata get_ValidationMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_ValidationMetadata
    open func get_ValidationMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ValidationMetadata__get_ValidationMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_ValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata)
    open func set_ValidationMetadata(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_ValidationMetadata_0__1__ValidationMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ContainerMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.get_ContainerMetadata
    open func get_ContainerMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_ModelMetadata__get_ContainerMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContainerMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.set_ContainerMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_ContainerMetadata(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultMetadataDetails_void__set_ContainerMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var BindingMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata> {
        get {
            return try! get_BindingMetadata();
        }
        set(v) {
            return try! set_BindingMetadata(value: v!);
        }
    }
    /**
    
            Gets or sets a delegate used to invoke the bound constructor for record types.
            

    */
    open var BoundConstructorInvoker : Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        get {
            return try! get_BoundConstructorInvoker();
        }
        set(v) {
            return try! set_BoundConstructorInvoker(value: v!);
        }
    }
    /**
    
            Gets or sets the  entries for constructor parameters.
            

    */
    open var BoundConstructorParameters : Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        get {
            return try! get_BoundConstructorParameters();
        }
        set(v) {
            return try! set_BoundConstructorParameters(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the container type.
            

    */
    open var ContainerMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ContainerMetadata();
        }
        set(v) {
            return try! set_ContainerMetadata(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var DisplayMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata> {
        get {
            return try! get_DisplayMetadata();
        }
        set(v) {
            return try! set_DisplayMetadata(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets or sets the set of model attributes.
            

    */
    open var ModelAttributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        get {
            return try! get_ModelAttributes();
        }
    }
    /**
    
            Gets or sets the  entries for the model properties.
            

    */
    open var Properties : Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
    /**
    
            Gets or sets a property getter delegate to get the property value from a model object.
            

    */
    open var PropertyGetter : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertyGetter();
        }
        set(v) {
            return try! set_PropertyGetter(value: v!);
        }
    }
    /**
    
            Gets or sets a property setter delegate to set the property value on a model object.
            

    */
    open var PropertySetter : Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertySetter();
        }
        set(v) {
            return try! set_PropertySetter(value: v!);
        }
    }
    /**
    
            Gets or sets the 
            

    */
    open var ValidationMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata> {
        get {
            return try! get_ValidationMetadata();
        }
        set(v) {
            return try! set_ValidationMetadata(value: v!);
        }
    }
} // DefaultMetadataDetails


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider
    /**
    
            Read / write  implementation.
            

    */
open class DefaultModelBindingMessageProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
    /**
    
            Initializes a new instance of the  class based on
            .
            

    - Parameter originalProvider: The  to duplicate.
    */
    public init(originalProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_ctor_0__1__DefaultModelBindingMessageProvider(&__thrown, originalProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetMissingBindRequiredValueAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingBindRequiredValueAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter missingBindRequiredValueAccessor: The value to set.
    */
    open func SetMissingBindRequiredValueAccessor(missingBindRequiredValueAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetMissingBindRequiredValueAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), missingBindRequiredValueAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetMissingBindRequiredValueAccessor(missingBindRequiredValueAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_missingBindRequiredValueAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(missingBindRequiredValueAccessor);
        return try SetMissingBindRequiredValueAccessor(missingBindRequiredValueAccessor: del_missingBindRequiredValueAccessor);
    }
    // void SetMissingKeyOrValueAccessor(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingKeyOrValueAccessor(System.Func{System.String})
    /**
    
            Sets the  property.
            

    - Parameter missingKeyOrValueAccessor: The value to set.
    */
    open func SetMissingKeyOrValueAccessor(missingKeyOrValueAccessor : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetMissingKeyOrValueAccessor_0__1__System_Func_string_(&__thrown, self.get_handle(), missingKeyOrValueAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetMissingKeyOrValueAccessor(missingKeyOrValueAccessor : @escaping () throws -> dotnet.System.String) throws {
        let del_missingKeyOrValueAccessor = try dotnet.System.Func_1<dotnet.System.String>(missingKeyOrValueAccessor);
        return try SetMissingKeyOrValueAccessor(missingKeyOrValueAccessor: del_missingKeyOrValueAccessor);
    }
    // void SetMissingRequestBodyRequiredValueAccessor(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingRequestBodyRequiredValueAccessor(System.Func{System.String})
    /**
    
            Sets the  property.
            

    - Parameter missingRequestBodyRequiredValueAccessor: The value to set.
    */
    open func SetMissingRequestBodyRequiredValueAccessor(missingRequestBodyRequiredValueAccessor : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetMissingRequestBodyRequiredValueAccessor_0__1__System_Func_string_(&__thrown, self.get_handle(), missingRequestBodyRequiredValueAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetMissingRequestBodyRequiredValueAccessor(missingRequestBodyRequiredValueAccessor : @escaping () throws -> dotnet.System.String) throws {
        let del_missingRequestBodyRequiredValueAccessor = try dotnet.System.Func_1<dotnet.System.String>(missingRequestBodyRequiredValueAccessor);
        return try SetMissingRequestBodyRequiredValueAccessor(missingRequestBodyRequiredValueAccessor: del_missingRequestBodyRequiredValueAccessor);
    }
    // void SetValueMustNotBeNullAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueMustNotBeNullAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter valueMustNotBeNullAccessor: The value to set.
    */
    open func SetValueMustNotBeNullAccessor(valueMustNotBeNullAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetValueMustNotBeNullAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), valueMustNotBeNullAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetValueMustNotBeNullAccessor(valueMustNotBeNullAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_valueMustNotBeNullAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(valueMustNotBeNullAccessor);
        return try SetValueMustNotBeNullAccessor(valueMustNotBeNullAccessor: del_valueMustNotBeNullAccessor);
    }
    // void SetAttemptedValueIsInvalidAccessor(System.Func<System.String,System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetAttemptedValueIsInvalidAccessor(System.Func{System.String,System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter attemptedValueIsInvalidAccessor: The value to set.
    */
    open func SetAttemptedValueIsInvalidAccessor(attemptedValueIsInvalidAccessor : dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetAttemptedValueIsInvalidAccessor_0__1__System_Func_string_string_string_(&__thrown, self.get_handle(), attemptedValueIsInvalidAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetAttemptedValueIsInvalidAccessor(attemptedValueIsInvalidAccessor : @escaping (dotnet.System.String, dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_attemptedValueIsInvalidAccessor = try dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String>(attemptedValueIsInvalidAccessor);
        return try SetAttemptedValueIsInvalidAccessor(attemptedValueIsInvalidAccessor: del_attemptedValueIsInvalidAccessor);
    }
    // void SetNonPropertyAttemptedValueIsInvalidAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyAttemptedValueIsInvalidAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter nonPropertyAttemptedValueIsInvalidAccessor: The value to set.
    */
    open func SetNonPropertyAttemptedValueIsInvalidAccessor(nonPropertyAttemptedValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetNonPropertyAttemptedValueIsInvalidAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), nonPropertyAttemptedValueIsInvalidAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetNonPropertyAttemptedValueIsInvalidAccessor(nonPropertyAttemptedValueIsInvalidAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_nonPropertyAttemptedValueIsInvalidAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(nonPropertyAttemptedValueIsInvalidAccessor);
        return try SetNonPropertyAttemptedValueIsInvalidAccessor(nonPropertyAttemptedValueIsInvalidAccessor: del_nonPropertyAttemptedValueIsInvalidAccessor);
    }
    // void SetUnknownValueIsInvalidAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetUnknownValueIsInvalidAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter unknownValueIsInvalidAccessor: The value to set.
    */
    open func SetUnknownValueIsInvalidAccessor(unknownValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetUnknownValueIsInvalidAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), unknownValueIsInvalidAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetUnknownValueIsInvalidAccessor(unknownValueIsInvalidAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_unknownValueIsInvalidAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(unknownValueIsInvalidAccessor);
        return try SetUnknownValueIsInvalidAccessor(unknownValueIsInvalidAccessor: del_unknownValueIsInvalidAccessor);
    }
    // void SetNonPropertyUnknownValueIsInvalidAccessor(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyUnknownValueIsInvalidAccessor(System.Func{System.String})
    /**
    
            Sets the  property.
            

    - Parameter nonPropertyUnknownValueIsInvalidAccessor: The value to set.
    */
    open func SetNonPropertyUnknownValueIsInvalidAccessor(nonPropertyUnknownValueIsInvalidAccessor : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetNonPropertyUnknownValueIsInvalidAccessor_0__1__System_Func_string_(&__thrown, self.get_handle(), nonPropertyUnknownValueIsInvalidAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetNonPropertyUnknownValueIsInvalidAccessor(nonPropertyUnknownValueIsInvalidAccessor : @escaping () throws -> dotnet.System.String) throws {
        let del_nonPropertyUnknownValueIsInvalidAccessor = try dotnet.System.Func_1<dotnet.System.String>(nonPropertyUnknownValueIsInvalidAccessor);
        return try SetNonPropertyUnknownValueIsInvalidAccessor(nonPropertyUnknownValueIsInvalidAccessor: del_nonPropertyUnknownValueIsInvalidAccessor);
    }
    // void SetValueIsInvalidAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueIsInvalidAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter valueIsInvalidAccessor: The value to set.
    */
    open func SetValueIsInvalidAccessor(valueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetValueIsInvalidAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), valueIsInvalidAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetValueIsInvalidAccessor(valueIsInvalidAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_valueIsInvalidAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(valueIsInvalidAccessor);
        return try SetValueIsInvalidAccessor(valueIsInvalidAccessor: del_valueIsInvalidAccessor);
    }
    // void SetValueMustBeANumberAccessor(System.Func<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueMustBeANumberAccessor(System.Func{System.String,System.String})
    /**
    
            Sets the  property.
            

    - Parameter valueMustBeANumberAccessor: The value to set.
    */
    open func SetValueMustBeANumberAccessor(valueMustBeANumberAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetValueMustBeANumberAccessor_0__1__System_Func_string_string_(&__thrown, self.get_handle(), valueMustBeANumberAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetValueMustBeANumberAccessor(valueMustBeANumberAccessor : @escaping (dotnet.System.String) throws -> dotnet.System.String) throws {
        let del_valueMustBeANumberAccessor = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.String>(valueMustBeANumberAccessor);
        return try SetValueMustBeANumberAccessor(valueMustBeANumberAccessor: del_valueMustBeANumberAccessor);
    }
    // void SetNonPropertyValueMustBeANumberAccessor(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyValueMustBeANumberAccessor(System.Func{System.String})
    /**
    
            Sets the  property.
            

    - Parameter nonPropertyValueMustBeANumberAccessor: The value to set.
    */
    open func SetNonPropertyValueMustBeANumberAccessor(nonPropertyValueMustBeANumberAccessor : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_void__SetNonPropertyValueMustBeANumberAccessor_0__1__System_Func_string_(&__thrown, self.get_handle(), nonPropertyValueMustBeANumberAccessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetNonPropertyValueMustBeANumberAccessor(nonPropertyValueMustBeANumberAccessor : @escaping () throws -> dotnet.System.String) throws {
        let del_nonPropertyValueMustBeANumberAccessor = try dotnet.System.Func_1<dotnet.System.String>(nonPropertyValueMustBeANumberAccessor);
        return try SetNonPropertyValueMustBeANumberAccessor(nonPropertyValueMustBeANumberAccessor: del_nonPropertyValueMustBeANumberAccessor);
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_MissingBindRequiredValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_MissingBindRequiredValueAccessor
    open override func get_MissingBindRequiredValueAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_MissingBindRequiredValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_MissingKeyOrValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_MissingKeyOrValueAccessor
    open override func get_MissingKeyOrValueAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string___get_MissingKeyOrValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_MissingRequestBodyRequiredValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_MissingRequestBodyRequiredValueAccessor
    open override func get_MissingRequestBodyRequiredValueAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string___get_MissingRequestBodyRequiredValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueMustNotBeNullAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_ValueMustNotBeNullAccessor
    open override func get_ValueMustNotBeNullAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_ValueMustNotBeNullAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String,System.String> get_AttemptedValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_AttemptedValueIsInvalidAccessor
    open override func get_AttemptedValueIsInvalidAccessor() throws -> dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string_string___get_AttemptedValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_NonPropertyAttemptedValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_NonPropertyAttemptedValueIsInvalidAccessor
    open override func get_NonPropertyAttemptedValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_NonPropertyAttemptedValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_UnknownValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_UnknownValueIsInvalidAccessor
    open override func get_UnknownValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_UnknownValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_NonPropertyUnknownValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_NonPropertyUnknownValueIsInvalidAccessor
    open override func get_NonPropertyUnknownValueIsInvalidAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string___get_NonPropertyUnknownValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_ValueIsInvalidAccessor
    open override func get_ValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_ValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueMustBeANumberAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_ValueMustBeANumberAccessor
    open override func get_ValueMustBeANumberAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string_string___get_ValueMustBeANumberAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_NonPropertyValueMustBeANumberAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.get_NonPropertyValueMustBeANumberAccessor
    open override func get_NonPropertyValueMustBeANumberAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelBindingMessageProvider_System_Func_string___get_NonPropertyValueMustBeANumberAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    /**
    */
    open override var AttemptedValueIsInvalidAccessor : dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_AttemptedValueIsInvalidAccessor();
        }
    }
    /**
    */
    open override var MissingBindRequiredValueAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_MissingBindRequiredValueAccessor();
        }
    }
    /**
    */
    open override var MissingKeyOrValueAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_MissingKeyOrValueAccessor();
        }
    }
    /**
    */
    open override var MissingRequestBodyRequiredValueAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_MissingRequestBodyRequiredValueAccessor();
        }
    }
    /**
    */
    open override var NonPropertyAttemptedValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_NonPropertyAttemptedValueIsInvalidAccessor();
        }
    }
    /**
    */
    open override var NonPropertyUnknownValueIsInvalidAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_NonPropertyUnknownValueIsInvalidAccessor();
        }
    }
    /**
    */
    open override var NonPropertyValueMustBeANumberAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_NonPropertyValueMustBeANumberAccessor();
        }
    }
    /**
    */
    open override var UnknownValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_UnknownValueIsInvalidAccessor();
        }
    }
    /**
    */
    open override var ValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueIsInvalidAccessor();
        }
    }
    /**
    */
    open override var ValueMustBeANumberAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueMustBeANumberAccessor();
        }
    }
    /**
    */
    open override var ValueMustNotBeNullAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueMustNotBeNullAccessor();
        }
    }
} // DefaultModelBindingMessageProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata
    /**
    
            A default  implementation.
            

    */
open class DefaultModelMetadata
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails)
    /**
    
            Creates a new .
            

    - Parameter provider: The .
    - Parameter detailsProvider: The .
    - Parameter details: The .
    */
    public init(provider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, detailsProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, details : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ctor_0__3__IModelMetadataProvider_ICompositeMetadataDetailsProvider_DefaultMetadataDetails(&__thrown, provider.get_handle(), detailsProvider.get_handle(), details.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider)
    /**
    
            Creates a new .
            

    - Parameter provider: The .
    - Parameter detailsProvider: The .
    - Parameter details: The .
    - Parameter modelBindingMessageProvider: The .
    */
    public init(provider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, detailsProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, details : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails, modelBindingMessageProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ctor_0__4__IModelMetadataProvider_ICompositeMetadataDetailsProvider_DefaultMetadataDetails_DefaultModelBindingMessageProvider(&__thrown, provider.get_handle(), detailsProvider.get_handle(), details.get_handle(), modelBindingMessageProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.GetMetadataForType(System.Type)
    /**
    */
    open override func GetMetadataForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelMetadata__GetMetadataForType_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> GetMetadataForProperties(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.GetMetadataForProperties(System.Type)
    /**
    */
    open override func GetMetadataForProperties(modelType : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___GetMetadataForProperties_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_Attributes
    open func get_Attributes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ContainerMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ContainerMetadata
    open override func get_ContainerMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelMetadata__get_ContainerMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata get_BindingMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BindingMetadata
    open func get_BindingMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_BindingMetadata__get_BindingMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata get_DisplayMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_DisplayMetadata
    open func get_DisplayMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_DisplayMetadata__get_DisplayMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata get_ValidationMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ValidationMetadata
    open func get_ValidationMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ValidationMetadata__get_ValidationMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.Object,System.Object> get_AdditionalValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_AdditionalValues
    open override func get_AdditionalValues() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IReadOnlyDictionary_object_object___get_AdditionalValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BindingSource
    open override func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BinderModelName
    open override func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BinderType
    open override func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ConvertEmptyStringToNull()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ConvertEmptyStringToNull
    open override func get_ConvertEmptyStringToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_ConvertEmptyStringToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_DataTypeName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_DataTypeName
    open override func get_DataTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_DataTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_Description
    open override func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_DisplayFormatString
    open override func get_DisplayFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_DisplayFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_DisplayName
    open override func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_EditFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_EditFormatString
    open override func get_EditFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_EditFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ElementMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ElementMetadata
    open override func get_ElementMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelMetadata__get_ElementMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String>> get_EnumGroupedDisplayNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_EnumGroupedDisplayNamesAndValues
    open override func get_EnumGroupedDisplayNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_string____get_EnumGroupedDisplayNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.String> get_EnumNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_EnumNamesAndValues
    open override func get_EnumNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IReadOnlyDictionary_string_string___get_EnumNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasNonDefaultEditFormat()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_HasNonDefaultEditFormat
    open override func get_HasNonDefaultEditFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_HasNonDefaultEditFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HideSurroundingHtml()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_HideSurroundingHtml
    open override func get_HideSurroundingHtml() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_HideSurroundingHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HtmlEncode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_HtmlEncode
    open override func get_HtmlEncode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_HtmlEncode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBindingAllowed()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsBindingAllowed
    open override func get_IsBindingAllowed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsBindingAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBindingRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsBindingRequired
    open override func get_IsBindingRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsBindingRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsEnum
    open override func get_IsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsFlagsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsFlagsEnum
    open override func get_IsFlagsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsFlagsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsReadOnly
    open override func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_IsRequired
    open override func get_IsRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_IsRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider get_ModelBindingMessageProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ModelBindingMessageProvider
    open override func get_ModelBindingMessageProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelBindingMessageProvider__get_ModelBindingMessageProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NullDisplayText()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_NullDisplayText
    open override func get_NullDisplayText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_NullDisplayText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Placeholder()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_Placeholder
    open override func get_Placeholder() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_Placeholder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_Properties
    open override func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelPropertyCollection__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_BoundConstructor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BoundConstructor
    open override func get_BoundConstructor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_ModelMetadata__get_BoundConstructor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> get_BoundConstructorParameters()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BoundConstructorParameters
    open override func get_BoundConstructorParameters() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___get_BoundConstructorParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider get_PropertyFilterProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_PropertyFilterProvider
    open override func get_PropertyFilterProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_IPropertyFilterProvider__get_PropertyFilterProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ShowForDisplay()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ShowForDisplay
    open override func get_ShowForDisplay() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_ShowForDisplay_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_ShowForEdit()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ShowForEdit
    open override func get_ShowForEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_ShowForEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_SimpleDisplayProperty()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_SimpleDisplayProperty
    open override func get_SimpleDisplayProperty() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_SimpleDisplayProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TemplateHint()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_TemplateHint
    open override func get_TemplateHint() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_String__get_TemplateHint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter get_PropertyValidationFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_PropertyValidationFilter
    open override func get_PropertyValidationFilter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_IPropertyValidationFilter__get_PropertyValidationFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ValidateChildren()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ValidateChildren
    open override func get_ValidateChildren() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_bool__get_ValidateChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_HasValidators()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_HasValidators
    open override func get_HasValidators() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Nullable_bool___get_HasValidators_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_ValidatorMetadata
    open override func get_ValidatorMetadata() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Collections_Generic_IReadOnlyList_object___get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.Object,System.Object> get_PropertyGetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_PropertyGetter
    open override func get_PropertyGetter() throws -> Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Func_object_object___get_PropertyGetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Action<System.Object,System.Object> get_PropertySetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_PropertySetter
    open override func get_PropertySetter() throws -> Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Action_object_object___get_PropertySetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<System.Object[],System.Object> get_BoundConstructorInvoker()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.get_BoundConstructorInvoker
    open override func get_BoundConstructorInvoker() throws -> Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadata_System_Func_objectArray_object___get_BoundConstructorInvoker_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    open override var AdditionalValues : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_AdditionalValues();
        }
    }
    /**
    
            Gets the set of attributes for the current instance.
            

    */
    open var Attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    */
    open override var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
    }
    /**
    */
    open override var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
    }
    /**
    
            Gets the  for the current instance.
            

    */
    open var BindingMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata {
        get {
            return try! get_BindingMetadata();
        }
    }
    /**
    */
    open override var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    */
    open override var BoundConstructor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_BoundConstructor();
        }
    }
    /**
    */
    open override var BoundConstructorInvoker : Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        get {
            return try! get_BoundConstructorInvoker();
        }
    }
    /**
    */
    open override var BoundConstructorParameters : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        get {
            return try! get_BoundConstructorParameters();
        }
    }
    /**
    */
    open override var ContainerMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ContainerMetadata();
        }
    }
    /**
    */
    open override var ConvertEmptyStringToNull : Bool {
        get {
            return try! get_ConvertEmptyStringToNull();
        }
    }
    /**
    */
    open override var DataTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_DataTypeName();
        }
    }
    /**
    */
    open override var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    /**
    */
    open override var DisplayFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayFormatString();
        }
    }
    /**
    
            Gets the  for the current instance.
            

    */
    open var DisplayMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata {
        get {
            return try! get_DisplayMetadata();
        }
    }
    /**
    */
    open override var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    */
    open override var EditFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_EditFormatString();
        }
    }
    /**
    */
    open override var ElementMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ElementMetadata();
        }
    }
    /**
    */
    open override var EnumGroupedDisplayNamesAndValues : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        get {
            return try! get_EnumGroupedDisplayNamesAndValues();
        }
    }
    /**
    */
    open override var EnumNamesAndValues : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_EnumNamesAndValues();
        }
    }
    /**
    */
    open override var HasNonDefaultEditFormat : Bool {
        get {
            return try! get_HasNonDefaultEditFormat();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<bool> get_HasValidators()
    /**
    */
    open override var HideSurroundingHtml : Bool {
        get {
            return try! get_HideSurroundingHtml();
        }
    }
    /**
    */
    open override var HtmlEncode : Bool {
        get {
            return try! get_HtmlEncode();
        }
    }
    /**
    */
    open override var IsBindingAllowed : Bool {
        get {
            return try! get_IsBindingAllowed();
        }
    }
    /**
    */
    open override var IsBindingRequired : Bool {
        get {
            return try! get_IsBindingRequired();
        }
    }
    /**
    */
    open override var IsEnum : Bool {
        get {
            return try! get_IsEnum();
        }
    }
    /**
    */
    open override var IsFlagsEnum : Bool {
        get {
            return try! get_IsFlagsEnum();
        }
    }
    /**
    */
    open override var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    */
    open override var IsRequired : Bool {
        get {
            return try! get_IsRequired();
        }
    }
    /**
    */
    open override var ModelBindingMessageProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider {
        get {
            return try! get_ModelBindingMessageProvider();
        }
    }
    /**
    */
    open override var NullDisplayText : Optional<dotnet.System.String> {
        get {
            return try! get_NullDisplayText();
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    */
    open override var Placeholder : Optional<dotnet.System.String> {
        get {
            return try! get_Placeholder();
        }
    }
    /**
    */
    open override var Properties : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection {
        get {
            return try! get_Properties();
        }
    }
    /**
    */
    open override var PropertyFilterProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        get {
            return try! get_PropertyFilterProvider();
        }
    }
    /**
    */
    open override var PropertyGetter : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertyGetter();
        }
    }
    /**
    */
    open override var PropertySetter : Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertySetter();
        }
    }
    /**
    */
    open override var PropertyValidationFilter : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        get {
            return try! get_PropertyValidationFilter();
        }
    }
    /**
    */
    open override var ShowForDisplay : Bool {
        get {
            return try! get_ShowForDisplay();
        }
    }
    /**
    */
    open override var ShowForEdit : Bool {
        get {
            return try! get_ShowForEdit();
        }
    }
    /**
    */
    open override var SimpleDisplayProperty : Optional<dotnet.System.String> {
        get {
            return try! get_SimpleDisplayProperty();
        }
    }
    /**
    */
    open override var TemplateHint : Optional<dotnet.System.String> {
        get {
            return try! get_TemplateHint();
        }
    }
    /**
    */
    open override var ValidateChildren : Bool {
        get {
            return try! get_ValidateChildren();
        }
    }
    /**
    
            Gets the  for the current instance.
            

    */
    open var ValidationMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata {
        get {
            return try! get_ValidationMetadata();
        }
    }
    /**
    */
    open override var ValidatorMetadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // DefaultModelMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider
    /**
    
            A default implementation of  based on reflection.
            

    */
open class DefaultModelMetadataProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider)
    /**
    
            Creates a new .
            

    - Parameter detailsProvider: The .
    */
    public init(detailsProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ctor_0__1__ICompositeMetadataDetailsProvider(&__thrown, detailsProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Creates a new .
            

    - Parameter detailsProvider: The .
    - Parameter optionsAccessor: The accessor for .
    */
    public init(detailsProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider, optionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ctor_0__2__ICompositeMetadataDetailsProvider_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, detailsProvider.get_handle(), optionsAccessor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> GetMetadataForProperties(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForProperties(System.Type)
    /**
    */
    open override func GetMetadataForProperties(modelType : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___GetMetadataForProperties_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForParameter(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo)
    /**
    */
    open override func GetMetadataForParameter(parameter : dotnet.System.Reflection.ParameterInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ModelMetadata__GetMetadataForParameter_0__1__ParameterInfo(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForParameter(System.Reflection.ParameterInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo,System.Type)
    /**
    */
    open override func GetMetadataForParameter(parameter : dotnet.System.Reflection.ParameterInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ModelMetadata__GetMetadataForParameter_0__2__ParameterInfo_Type(&__thrown, self.get_handle(), parameter.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForType(System.Type)
    /**
    */
    open override func GetMetadataForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ModelMetadata__GetMetadataForType_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty(System.Reflection.PropertyInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForProperty(System.Reflection.PropertyInfo,System.Type)
    /**
    */
    open override func GetMetadataForProperty(propertyInfo : dotnet.System.Reflection.PropertyInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ModelMetadata__GetMetadataForProperty_0__2__PropertyInfo_Type(&__thrown, self.get_handle(), propertyInfo.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForConstructor(System.Reflection.ConstructorInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForConstructor(System.Reflection.ConstructorInfo,System.Type)
    /**
    */
    open func GetMetadataForConstructor(constructorInfo : dotnet.System.Reflection.ConstructorInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DefaultModelMetadataProvider_ModelMetadata__GetMetadataForConstructor_0__2__ConstructorInfo_Type(&__thrown, self.get_handle(), constructorInfo.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
} // DefaultModelMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata
    /**
    
            Display metadata details for a .
            

    */
open class DisplayMetadata
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_AdditionalValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_AdditionalValues
    open func get_AdditionalValues() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Collections_Generic_IDictionary_object_object___get_AdditionalValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ConvertEmptyStringToNull()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_ConvertEmptyStringToNull
    open func get_ConvertEmptyStringToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_ConvertEmptyStringToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ConvertEmptyStringToNull(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_ConvertEmptyStringToNull(System.Boolean)
    open func set_ConvertEmptyStringToNull(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_ConvertEmptyStringToNull_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DataTypeName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_DataTypeName
    open func get_DataTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_DataTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataTypeName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_DataTypeName(System.String)
    open func set_DataTypeName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_DataTypeName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.String> get_Description()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_Description
    open func get_Description() throws -> Optional<dotnet.System.Func_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Description(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_Description(System.Func{System.String})
    open func set_Description(value : Optional<dotnet.System.Func_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_Description_0__1__System_Func_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Description(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_Description(value: del_value);
    }
    // [IsSpecialName] System.String get_DisplayFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_DisplayFormatString
    open func get_DisplayFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_DisplayFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayFormatString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_DisplayFormatString(System.String)
    open func set_DisplayFormatString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_DisplayFormatString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.String> get_DisplayFormatStringProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_DisplayFormatStringProvider
    open func get_DisplayFormatStringProvider() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_DisplayFormatStringProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayFormatStringProvider(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_DisplayFormatStringProvider(System.Func{System.String})
    open func set_DisplayFormatStringProvider(value : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_DisplayFormatStringProvider_0__1__System_Func_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_DisplayFormatStringProvider(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_DisplayFormatStringProvider(value: del_value);
    }
    // [IsSpecialName] System.Func<System.String> get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.Func_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_DisplayName(System.Func{System.String})
    open func set_DisplayName(value : Optional<dotnet.System.Func_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_DisplayName_0__1__System_Func_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_DisplayName(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_DisplayName(value: del_value);
    }
    // [IsSpecialName] System.String get_EditFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_EditFormatString
    open func get_EditFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_EditFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EditFormatString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_EditFormatString(System.String)
    open func set_EditFormatString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_EditFormatString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.String> get_EditFormatStringProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_EditFormatStringProvider
    open func get_EditFormatStringProvider() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_EditFormatStringProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_EditFormatStringProvider(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_EditFormatStringProvider(System.Func{System.String})
    open func set_EditFormatStringProvider(value : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_EditFormatStringProvider_0__1__System_Func_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_EditFormatStringProvider(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_EditFormatStringProvider(value: del_value);
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String>> get_EnumGroupedDisplayNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_EnumGroupedDisplayNamesAndValues
    open func get_EnumGroupedDisplayNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_string____get_EnumGroupedDisplayNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EnumGroupedDisplayNamesAndValues(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String>>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_EnumGroupedDisplayNamesAndValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String}})
    open func set_EnumGroupedDisplayNamesAndValues(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_EnumGroupedDisplayNamesAndValues_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_string__(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.String> get_EnumNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_EnumNamesAndValues
    open func get_EnumNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Collections_Generic_IReadOnlyDictionary_string_string___get_EnumNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EnumNamesAndValues(System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_EnumNamesAndValues(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})
    open func set_EnumNamesAndValues(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_EnumNamesAndValues_0__1__System_Collections_Generic_IReadOnlyDictionary_string_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasNonDefaultEditFormat()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_HasNonDefaultEditFormat
    open func get_HasNonDefaultEditFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_HasNonDefaultEditFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HasNonDefaultEditFormat(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_HasNonDefaultEditFormat(System.Boolean)
    open func set_HasNonDefaultEditFormat(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_HasNonDefaultEditFormat_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HideSurroundingHtml()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_HideSurroundingHtml
    open func get_HideSurroundingHtml() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_HideSurroundingHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HideSurroundingHtml(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_HideSurroundingHtml(System.Boolean)
    open func set_HideSurroundingHtml(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_HideSurroundingHtml_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HtmlEncode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_HtmlEncode
    open func get_HtmlEncode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_HtmlEncode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HtmlEncode(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_HtmlEncode(System.Boolean)
    open func set_HtmlEncode(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_HtmlEncode_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_IsEnum
    open func get_IsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_IsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsEnum(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_IsEnum(System.Boolean)
    open func set_IsEnum(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_IsEnum_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsFlagsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_IsFlagsEnum
    open func get_IsFlagsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_IsFlagsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsFlagsEnum(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_IsFlagsEnum(System.Boolean)
    open func set_IsFlagsEnum(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_IsFlagsEnum_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NullDisplayText()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_NullDisplayText
    open func get_NullDisplayText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_NullDisplayText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NullDisplayText(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_NullDisplayText(System.String)
    open func set_NullDisplayText(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_NullDisplayText_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.String> get_NullDisplayTextProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_NullDisplayTextProvider
    open func get_NullDisplayTextProvider() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_NullDisplayTextProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_NullDisplayTextProvider(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_NullDisplayTextProvider(System.Func{System.String})
    open func set_NullDisplayTextProvider(value : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_NullDisplayTextProvider_0__1__System_Func_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_NullDisplayTextProvider(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_NullDisplayTextProvider(value: del_value);
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.String> get_Placeholder()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_Placeholder
    open func get_Placeholder() throws -> Optional<dotnet.System.Func_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_System_Func_string___get_Placeholder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Placeholder(System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_Placeholder(System.Func{System.String})
    open func set_Placeholder(value : Optional<dotnet.System.Func_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_Placeholder_0__1__System_Func_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Placeholder(value : @escaping () throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.String>(value);
        return try set_Placeholder(value: del_value);
    }
    // [IsSpecialName] bool get_ShowForDisplay()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_ShowForDisplay
    open func get_ShowForDisplay() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_ShowForDisplay_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShowForDisplay(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_ShowForDisplay(System.Boolean)
    open func set_ShowForDisplay(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_ShowForDisplay_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShowForEdit()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_ShowForEdit
    open func get_ShowForEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_bool__get_ShowForEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShowForEdit(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_ShowForEdit(System.Boolean)
    open func set_ShowForEdit(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_ShowForEdit_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SimpleDisplayProperty()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_SimpleDisplayProperty
    open func get_SimpleDisplayProperty() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_SimpleDisplayProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SimpleDisplayProperty(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_SimpleDisplayProperty(System.String)
    open func set_SimpleDisplayProperty(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_SimpleDisplayProperty_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TemplateHint()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.get_TemplateHint
    open func get_TemplateHint() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_String__get_TemplateHint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TemplateHint(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.set_TemplateHint(System.String)
    open func set_TemplateHint(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadata_void__set_TemplateHint_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a set of additional values. See 
            

    */
    open var AdditionalValues : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_AdditionalValues();
        }
    }
    /**
    
            Gets or sets a value indicating whether or not to convert an empty string value or one containing only
            whitespace characters to  when representing a model as text. See
            
            

    */
    open var ConvertEmptyStringToNull : Bool {
        get {
            return try! get_ConvertEmptyStringToNull();
        }
        set(v) {
            return try! set_ConvertEmptyStringToNull(value: v);
        }
    }
    /**
    
            Gets or sets the name of the data type.
            See 
            

    */
    open var DataTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_DataTypeName();
        }
        set(v) {
            return try! set_DataTypeName(value: v!);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get a value for the
            model description. See .
            

    */
    open var Description : Optional<dotnet.System.Func_1<dotnet.System.String>> {
        get {
            return try! get_Description();
        }
        set(v) {
            return try! set_Description(value: v!);
        }
    }
    /**
    
            Gets or sets a display format string for the model.
            See 
            

    */
    open var DisplayFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayFormatString();
        }
        set(v) {
            return try! set_DisplayFormatString(value: v!);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get the display format string for the model. See
            .
            

    */
    open var DisplayFormatStringProvider : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_DisplayFormatStringProvider();
        }
        set(v) {
            return try! set_DisplayFormatStringProvider(value: v);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get a value for the
            display name of the model. See .
            

    */
    open var DisplayName : Optional<dotnet.System.Func_1<dotnet.System.String>> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets an edit format string for the model.
            See 
            

    */
    open var EditFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_EditFormatString();
        }
        set(v) {
            return try! set_EditFormatString(value: v!);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get the edit format string for the model. See
            .
            

    */
    open var EditFormatStringProvider : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_EditFormatStringProvider();
        }
        set(v) {
            return try! set_EditFormatStringProvider(value: v);
        }
    }
    /**
    
            Gets the ordered and grouped display names and values of all  values in
            . See
            .
            

    */
    open var EnumGroupedDisplayNamesAndValues : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        get {
            return try! get_EnumGroupedDisplayNamesAndValues();
        }
        set(v) {
            return try! set_EnumGroupedDisplayNamesAndValues(value: v!);
        }
    }
    /**
    
            Gets the names and values of all  values in
            . See .
            

    */
    open var EnumNamesAndValues : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_EnumNamesAndValues();
        }
        set(v) {
            return try! set_EnumNamesAndValues(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not the model has a non-default edit format.
            See 
            

    */
    open var HasNonDefaultEditFormat : Bool {
        get {
            return try! get_HasNonDefaultEditFormat();
        }
        set(v) {
            return try! set_HasNonDefaultEditFormat(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating if the surrounding HTML should be hidden.
            See 
            

    */
    open var HideSurroundingHtml : Bool {
        get {
            return try! get_HideSurroundingHtml();
        }
        set(v) {
            return try! set_HideSurroundingHtml(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating if the model value should be HTML encoded.
            See 
            

    */
    open var HtmlEncode : Bool {
        get {
            return try! get_HtmlEncode();
        }
        set(v) {
            return try! set_HtmlEncode(value: v);
        }
    }
    /**
    
            Gets a value indicating whether  is for an
            . See .
            

    */
    open var IsEnum : Bool {
        get {
            return try! get_IsEnum();
        }
        set(v) {
            return try! set_IsEnum(value: v);
        }
    }
    /**
    
            Gets a value indicating whether  is for an
             with an associated . See
            .
            

    */
    open var IsFlagsEnum : Bool {
        get {
            return try! get_IsFlagsEnum();
        }
        set(v) {
            return try! set_IsFlagsEnum(value: v);
        }
    }
    /**
    
            Gets or sets the text to display when the model value is .
            See 
            

    */
    open var NullDisplayText : Optional<dotnet.System.String> {
        get {
            return try! get_NullDisplayText();
        }
        set(v) {
            return try! set_NullDisplayText(value: v!);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get the text to display when the model is .
            See .
            

    */
    open var NullDisplayTextProvider : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_NullDisplayTextProvider();
        }
        set(v) {
            return try! set_NullDisplayTextProvider(value: v);
        }
    }
    /**
    
            Gets or sets the order.
            See 
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets a delegate which is used to get a value for the
            model's placeholder text. See .
            

    */
    open var Placeholder : Optional<dotnet.System.Func_1<dotnet.System.String>> {
        get {
            return try! get_Placeholder();
        }
        set(v) {
            return try! set_Placeholder(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not to include in the model value in display.
            See 
            

    */
    open var ShowForDisplay : Bool {
        get {
            return try! get_ShowForDisplay();
        }
        set(v) {
            return try! set_ShowForDisplay(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not to include in the model value in an editor.
            See 
            

    */
    open var ShowForEdit : Bool {
        get {
            return try! get_ShowForEdit();
        }
        set(v) {
            return try! set_ShowForEdit(value: v);
        }
    }
    /**
    
            Gets or sets a the property name of a model property to use for display.
            See 
            

    */
    open var SimpleDisplayProperty : Optional<dotnet.System.String> {
        get {
            return try! get_SimpleDisplayProperty();
        }
        set(v) {
            return try! set_SimpleDisplayProperty(value: v!);
        }
    }
    /**
    
            Gets or sets a hint for location of a display or editor template.
            See 
            

    */
    open var TemplateHint : Optional<dotnet.System.String> {
        get {
            return try! get_TemplateHint();
        }
        set(v) {
            return try! set_TemplateHint(value: v!);
        }
    }
} // DisplayMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext
    /**
    
            A context for and .
            

    */
open class DisplayMetadataProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity,Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
    /**
    
            Creates a new .
            

    - Parameter key: The  for the .
    - Parameter attributes: The attributes for the .
    */
    public init(key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_ctor_0__2__ModelMetadataIdentity_ModelAttributes(&__thrown, key.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata get_DisplayMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.get_DisplayMetadata
    open func get_DisplayMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_DisplayMetadata__get_DisplayMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.get_Key
    open func get_Key() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_ModelMetadataIdentity__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_PropertyAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.get_PropertyAttributes
    open func get_PropertyAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_PropertyAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_TypeAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.get_TypeAttributes
    open func get_TypeAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_DisplayMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_TypeAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the attributes.
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets the .
            

    */
    open var DisplayMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata {
        get {
            return try! get_DisplayMetadata();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets the property attributes.
            

    */
    open var PropertyAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_PropertyAttributes();
        }
    }
    /**
    
            Gets the type attributes.
            

    */
    open var TypeAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_TypeAttributes();
        }
    }
} // DisplayMetadataProviderContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider
    /**
    
            An  which configures  to
            false for matching types.
            

    */
open class ExcludeBindingMetadataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ExcludeBindingMetadataProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider.#ctor(System.Type)
    /**
    
            Creates a new  for the given .
            

    - Parameter type: 
            The . All properties with this  will have
             set to false.
            
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ExcludeBindingMetadataProvider_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
    /**
    */
    open /* method final */ func CreateBindingMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ExcludeBindingMetadataProvider_void__CreateBindingMetadata_0__1__BindingMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ExcludeBindingMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IBindingMetadataProvider
    /**
    
            Provides  for a .
            

    */
open class IBindingMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext)
    /**
    
            Sets the values for properties of .
            

    - Parameter context: The .
    */
    open func CreateBindingMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider_void__CreateBindingMetadata_0__1__BindingMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IBindingMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider
    /**
    
            A composite .
            

    */
open class ICompositeMetadataDetailsProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ICompositeMetadataDetailsProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ICompositeMetadataDetailsProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // ICompositeMetadataDetailsProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider
    /**
    
            Provides  for a .
            

    */
open class IDisplayMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CreateDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider.CreateDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext)
    /**
    
            Sets the values for properties of .
            

    - Parameter context: The .
    */
    open func CreateDisplayMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider_void__CreateDisplayMetadata_0__1__DisplayMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDisplayMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider
    /**
    
            Marker interface for a provider of metadata details about model objects. Implementations should
            implement one or more of , ,
            and .
            

    */
open class IMetadataDetailsProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IMetadataDetailsProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IValidationMetadataProvider
    /**
    
            Provides  for a .
            

    */
open class IValidationMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IValidationMetadataProvider.CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext)
    /**
    
            Gets the values for properties of .
            

    - Parameter context: The .
    */
    open func CreateValidationMetadata(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider_void__CreateValidationMetadata_0__1__ValidationMetadataProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IValidationMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions
public struct MetadataDetailsProviderExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TMetadataDetailsProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>)
    // void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider},System.Type)
    /**
    
            Removes all metadata details providers of the specified type.
            

    - Parameter list: The list of s.
    - Parameter type: The type to remove.
    */
    public static func RemoveType(list : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_MetadataDetailsProviderExtensions_void__RemoveType_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider__Type(&__thrown, list.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MetadataDetailsProviderExtensions


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata
    /**
    
            Validation metadata details for a .
            

    */
open class ValidationMetadata
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.get_IsRequired
    open func get_IsRequired() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_System_Nullable_bool___get_IsRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_IsRequired(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.set_IsRequired(System.Nullable{System.Boolean})
    open func set_IsRequired(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_void__set_IsRequired_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter get_PropertyValidationFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.get_PropertyValidationFilter
    open func get_PropertyValidationFilter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_IPropertyValidationFilter__get_PropertyValidationFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyValidationFilter(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.set_PropertyValidationFilter(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter)
    open func set_PropertyValidationFilter(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_void__set_PropertyValidationFilter_0__1__IPropertyValidationFilter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_ValidateChildren()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.get_ValidateChildren
    open func get_ValidateChildren() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_System_Nullable_bool___get_ValidateChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_ValidateChildren(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.set_ValidateChildren(System.Nullable{System.Boolean})
    open func set_ValidateChildren(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_void__set_ValidateChildren_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Object> get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_System_Collections_Generic_IList_object___get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_HasValidators()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.get_HasValidators
    open func get_HasValidators() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_System_Nullable_bool___get_HasValidators_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_HasValidators(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.set_HasValidators(System.Nullable{System.Boolean})
    open func set_HasValidators(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadata_void__set_HasValidators_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a value that indicates if the model has validators .
            

    */
    open var HasValidators : Optional<Bool> {
        get {
            return try! get_HasValidators();
        }
        set(v) {
            return try! set_HasValidators(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not the model is a required value. Will be ignored
            if the model metadata being created is not a property. If null then
             will be computed based on the model .
            See .
            

    */
    open var IsRequired : Optional<Bool> {
        get {
            return try! get_IsRequired();
        }
        set(v) {
            return try! set_IsRequired(value: v!);
        }
    }
    /**
    
            Gets or sets an  implementation that indicates whether this model
            should be validated. See .
            

    */
    open var PropertyValidationFilter : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        get {
            return try! get_PropertyValidationFilter();
        }
        set(v) {
            return try! set_PropertyValidationFilter(value: v!);
        }
    }
    /**
    
            Gets or sets a value that indicates whether children of the model should be validated. If null
            then  will be true if either of
             or  is true;
            false otherwise.
            

    */
    open var ValidateChildren : Optional<Bool> {
        get {
            return try! get_ValidateChildren();
        }
        set(v) {
            return try! set_ValidateChildren(value: v!);
        }
    }
    /**
    
            Gets a list of metadata items for validators.
            

    */
    open var ValidatorMetadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ValidationMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext
    /**
    
            A context for an .
            

    */
open class ValidationMetadataProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity,Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes)
    /**
    
            Creates a new .
            

    - Parameter key: The  for the .
    - Parameter attributes: The attributes for the .
    */
    public init(key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity, attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_ctor_0__2__ModelMetadataIdentity_ModelAttributes(&__thrown, key.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_Key
    open func get_Key() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_ModelMetadataIdentity__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ParameterAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_ParameterAttributes
    open func get_ParameterAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_ParameterAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_PropertyAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_PropertyAttributes
    open func get_PropertyAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_PropertyAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_TypeAttributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_TypeAttributes
    open func get_TypeAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_System_Collections_Generic_IReadOnlyList_object___get_TypeAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata get_ValidationMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.get_ValidationMetadata
    open func get_ValidationMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ValidationMetadataProviderContext_ValidationMetadata__get_ValidationMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata(hndl : __return);
        }
    }
    /**
    
            Gets the attributes.
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Key : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets the parameter attributes.
            

    */
    open var ParameterAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_ParameterAttributes();
        }
    }
    /**
    
            Gets the property attributes.
            

    */
    open var PropertyAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_PropertyAttributes();
        }
    }
    /**
    
            Gets the type attributes.
            

    */
    open var TypeAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>> {
        get {
            return try! get_TypeAttributes();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ValidationMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata {
        get {
            return try! get_ValidationMetadata();
        }
    }
} // ValidationMetadataProviderContext


}

// Microsoft.AspNetCore.Mvc.ModelBinding.Validation
extension Microsoft.AspNetCore.Mvc.ModelBinding.Validation {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache
    /**
    
            Cache for s.
            

    */
open class ClientValidatorCache
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorCache_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorCache_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator> GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache.GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider)
    /**
    
            Gets the  for the metadata from the cache, using the validatorProvider to create when needed.
            

    - Parameter metadata: The  being validated.
    - Parameter validatorProvider: The  which will be used to create validators when needed.
    - Returns: The list of s.

    */
    open func GetValidators(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, validatorProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorCache_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator___GetValidators_0__2__ModelMetadata_IClientModelValidatorProvider(&__thrown, self.get_handle(), metadata.get_handle(), validatorProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // ClientValidatorCache


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider
    /**
    
            Aggregate of s that delegates to its underlying providers.
            

    */
open class CompositeClientModelValidatorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeClientModelValidatorProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider})
    /**
    
            Initializes a new instance of .
            

    - Parameter providers: 
            A collection of  instances.
            
    */
    public init(providers : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeClientModelValidatorProvider_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider_(&__thrown, providers.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext)
    /**
    */
    open /* method final */ func CreateValidators(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeClientModelValidatorProvider_void__CreateValidators_0__1__ClientValidatorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> get_ValidatorProviders()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.get_ValidatorProviders
    open func get_ValidatorProviders() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeClientModelValidatorProvider_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider___get_ValidatorProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Gets a list of  instances.
            

    */
    open var ValidatorProviders : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> {
        get {
            return try! get_ValidatorProviders();
        }
    }
} // CompositeClientModelValidatorProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider
    /**
    
            Aggregate of s that delegates to its underlying providers.
            

    */
open class CompositeModelValidatorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeModelValidatorProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider})
    /**
    
            Initializes a new instance of .
            

    - Parameter providers: 
            A collection of  instances.
            
    */
    public init(providers : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeModelValidatorProvider_ctor_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider_(&__thrown, providers.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext)
    /**
    */
    open /* method final */ func CreateValidators(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeModelValidatorProvider_void__CreateValidators_0__1__ModelValidatorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> get_ValidatorProviders()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.get_ValidatorProviders
    open func get_ValidatorProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_CompositeModelValidatorProvider_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider___get_ValidatorProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of  instances.
            

    */
    open var ValidatorProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider> {
        get {
            return try! get_ValidatorProviders();
        }
    }
} // CompositeModelValidatorProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IMetadataBasedModelValidatorProvider
    /**
    
            An  that provides  instances
            exclusively using values in  or the model type.
            
             can be used to statically determine if a given
             instance can incur any validation. The value for 
            can be calculated if all instances in  are .
            
            

    */
open class IMetadataBasedModelValidatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IMetadataBasedModelValidatorProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IMetadataBasedModelValidatorProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool HasValidators(System.Type, System.Collections.Generic.IList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IMetadataBasedModelValidatorProvider.HasValidators(System.Type,System.Collections.Generic.IList{System.Object})
    /**
    
            Gets a value that determines if the  can
            produce any validators given the  and .
            

    - Parameter modelType: The  of the model.
    - Parameter validatorMetadata: The list of metadata items for validators. .
    - Returns: 

    */
    open func HasValidators(modelType : dotnet.System.Type_, validatorMetadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IMetadataBasedModelValidatorProvider_bool__HasValidators_0__2__Type_System_Collections_Generic_IList_object_(&__thrown, self.get_handle(), modelType.get_handle(), validatorMetadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IMetadataBasedModelValidatorProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator
    /**
    
            Provides methods to validate an object graph.
            

    */
open class IObjectModelValidator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IObjectModelValidator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IObjectModelValidator_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Validate(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary,System.String,System.Object)
    /**
    
            Validates the provided object.
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter validationState: The . May be null.
    - Parameter prefix: 
            The model prefix. Used to map the model object to entries in .
            
    - Parameter model: The model object.
    */
    open func Validate(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>, prefix : dotnet.System.String, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IObjectModelValidator_void__Validate_0__4__ActionContext_ValidationStateDictionary_String_Object(&__thrown, self.get_handle(), actionContext.get_handle(), validationState?.get_handle() ?? nil, prefix.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IObjectModelValidator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions
public struct ModelValidatorProviderExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TModelValidatorProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>)
    // void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider},System.Type)
    /**
    
            Removes all model validator providers of the specified type.
            

    - Parameter list: This list of s.
    - Parameter type: The type to remove.
    */
    public static func RemoveType(list : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderExtensions_void__RemoveType_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider__Type(&__thrown, list.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ModelValidatorProviderExtensions


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute
    /**
    
            Indicates that a property or parameter should be excluded from validation.
            When applied to a property, the validation system excludes that property.
            When applied to a parameter, the validation system excludes that parameter.
            When applied to a type, the validation system excludes all properties within that type.
            

    */
public final class ValidateNeverAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IPropertyValidationFilter
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidateNeverAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidateNeverAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ShouldValidateEntry(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute.ShouldValidateEntry(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry)
    /**
    */
    public func ShouldValidateEntry(entry : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry, parentEntry : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidateNeverAttribute_bool__ShouldValidateEntry_0__2__ValidationEntry_ValidationEntry(&__thrown, self.get_handle(), entry.get_handle(), parentEntry.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ValidateNeverAttribute


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor
    /**
    
            A visitor implementation that interprets  to traverse
            a model object graph and perform validation.
            

    */
open class ValidationVisitor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
    /**
    
            Creates a new .
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter validatorProvider: The .
    - Parameter validatorCache: The  that provides a list of s.
    - Parameter metadataProvider: The provider used for reading metadata for the model type.
    - Parameter validationState: The .
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, validatorProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider, validatorCache : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache, metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, validationState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_ctor_0__5__ActionContext_IModelValidatorProvider_ValidatorCache_IModelMetadataProvider_ValidationStateDictionary(&__thrown, actionContext.get_handle(), validatorProvider.get_handle(), validatorCache.get_handle(), metadataProvider.get_handle(), validationState?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Object)
    /**
    
            Validates a object.
            

    - Parameter metadata: The  associated with the model.
    - Parameter key: The model prefix key.
    - Parameter model: The model object.
    - Returns: true if the object is valid, otherwise false.

    */
    open func Validate(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, key : dotnet.System.String, model : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_bool__Validate_0__3__ModelMetadata_String_Object(&__thrown, self.get_handle(), metadata.get_handle(), key.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Object, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.Boolean)
    /**
    
            Validates a object.
            

    - Parameter metadata: The  associated with the model.
    - Parameter key: The model prefix key.
    - Parameter model: The model object.
    - Parameter alwaysValidateAtTopLevel: If true, applies validation rules even if the top-level value is null.
    - Returns: true if the object is valid, otherwise false.

    */
    open func Validate(metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, key : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, alwaysValidateAtTopLevel : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_bool__Validate_0__4__ModelMetadata_String_Object_bool(&__thrown, self.get_handle(), metadata?.get_handle() ?? nil, key?.get_handle() ?? nil, model?.get_handle() ?? nil, Swift.Int32(alwaysValidateAtTopLevel ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Object, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.Boolean,System.Object)
    /**
    
            Validates a object.
            

    - Parameter metadata: The  associated with the model.
    - Parameter key: The model prefix key.
    - Parameter model: The model object.
    - Parameter alwaysValidateAtTopLevel: If true, applies validation rules even if the top-level value is null.
    - Parameter container: The model container.
    - Returns: true if the object is valid, otherwise false.

    */
    open func Validate(metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, key : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, alwaysValidateAtTopLevel : Bool, container : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_bool__Validate_0__5__ModelMetadata_String_Object_bool_Object(&__thrown, self.get_handle(), metadata?.get_handle() ?? nil, key?.get_handle() ?? nil, model?.get_handle() ?? nil, Swift.Int32(alwaysValidateAtTopLevel ? 1 : 0), container?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_MaxValidationDepth()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.get_MaxValidationDepth
    open func get_MaxValidationDepth() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_System_Nullable_i32___get_MaxValidationDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxValidationDepth(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.set_MaxValidationDepth(System.Nullable{System.Int32})
    open func set_MaxValidationDepth(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_void__set_MaxValidationDepth_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ValidateComplexTypesIfChildValidationFails()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.get_ValidateComplexTypesIfChildValidationFails
    open func get_ValidateComplexTypesIfChildValidationFails() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_bool__get_ValidateComplexTypesIfChildValidationFails_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ValidateComplexTypesIfChildValidationFails(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.set_ValidateComplexTypesIfChildValidationFails(System.Boolean)
    open func set_ValidateComplexTypesIfChildValidationFails(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationVisitor_void__set_ValidateComplexTypesIfChildValidationFails_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the maximum depth to constrain the validation visitor when validating.
            
             traverses the object graph of the model being validated. For models
            that are very deep or are infinitely recursive, validation may result in stack overflow.
            
            
            When not ,  will throw if
            current traversal depth exceeds the specified value.
            
            

    */
    open var MaxValidationDepth : Optional<Swift.Int32> {
        get {
            return try! get_MaxValidationDepth();
        }
        set(v) {
            return try! set_MaxValidationDepth(value: v!);
        }
    }
    /**
    
            Indicates whether validation of a complex type should be performed if validation fails for any of its children. The default behavior is false.
            

    */
    open var ValidateComplexTypesIfChildValidationFails : Bool {
        get {
            return try! get_ValidateComplexTypesIfChildValidationFails();
        }
        set(v) {
            return try! set_ValidateComplexTypesIfChildValidationFails(value: v);
        }
    }
} // ValidationVisitor


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache
    /**
    
            A cache for 
            

    */
open class ValidatorCache
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorCache_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorCache_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator> GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache.GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider)
    /**
    
            Get the validators for a model.
            

    - Parameter metadata: The model metadata.
    - Parameter validatorProvider: The validator provider.
    - Returns: A list of model validators.

    */
    open func GetValidators(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, validatorProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorCache_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidator___GetValidators_0__2__ModelMetadata_IModelValidatorProvider(&__thrown, self.get_handle(), metadata.get_handle(), validatorProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // ValidatorCache


}


// Microsoft.AspNetCore.Mvc.Routing
extension Microsoft.AspNetCore.Mvc.Routing {
// type: Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer
    /**
    
             Provides an abstraction for dynamically manipulating route value to select a controller action or page.
             

    */
open class DynamicRouteValueTransformer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_DynamicRouteValueTransformer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Routing.RouteValueDictionary> TransformAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a set of transformed route values that will be used to select an action.
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter values: The route values associated with the current match. Implementations should not modify .
    - Returns: A task which asynchronously returns a set of route values.

    */
    open func TransformAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_DynamicRouteValueTransformer_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Routing_RouteValueDictionary___TransformAsync_0__2__HttpContext_RouteValueDictionary(&__thrown, self.get_handle(), httpContext.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>> FilterAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Filters the set of endpoints that were chosen as a result of lookup based on the route values returned by
            .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter values: The route values returned from .
    - Parameter endpoints: 
            The endpoints that were chosen as a result of lookup based on the route values returned by
            .
            
    - Returns: Asynchronously returns a list of endpoints to apply to the matches collection.

    */
    open func FilterAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_DynamicRouteValueTransformer_System_Threading_Tasks_ValueTask_System_Collections_Generic_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint____FilterAsync_0__3__HttpContext_RouteValueDictionary_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), httpContext.get_handle(), values.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_State()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.get_State
    open func get_State() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_DynamicRouteValueTransformer_Object__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_State(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.set_State(System.Object)
    open func set_State(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_DynamicRouteValueTransformer_void__set_State_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a state value. An arbitrary value passed to the transformer from where it was registered.
            

    */
    open var State : Optional<dotnet.System.Object> {
        get {
            return try! get_State();
        }
        set(v) {
            return try! set_State(value: v!);
        }
    }
} // DynamicRouteValueTransformer


// type: Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
    /**
    
            Identifies an action that supports a given set of HTTP methods.
            

    */
open class HttpMethodAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider,
    Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Creates a new  with the given
            set of HTTP methods.
            The set of supported HTTP methods. May not be null.
            

    */
    public init(httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_ctor_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, httpMethods.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)
    /**
    
            Creates a new  with the given
            set of HTTP methods an the given route template.
            

    - Parameter httpMethods: The set of supported methods. May not be null.
    - Parameter template: The route template.
    */
    public init(httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, template : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_ctor_0__2__System_Collections_Generic_IEnumerable_string__String(&__thrown, httpMethods.get_handle(), template?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.get_HttpMethods
    open /* method final */ func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_System_Collections_Generic_IEnumerable_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.get_Template
    open /* method final */ func get_Template() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.get_Name
    open /* method final */ func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_HttpMethodAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var HttpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_HttpMethods();
        }
    }
    /**
    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets the value of the
             or a default value of 0 if the 
            doesn't define a value on the controller.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    */
    public var Template : Optional<dotnet.System.String> {
        get {
            return try! get_Template();
        }
    }
} // HttpMethodAttribute


// type: Microsoft.AspNetCore.Mvc.Routing.IActionHttpMethodProvider
    /**
    
            Interface that exposes a list of http methods that are supported by an provider.
            

    */
open class IActionHttpMethodProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IActionHttpMethodProvider.get_HttpMethods
    open func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider_System_Collections_Generic_IEnumerable_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IActionHttpMethodProvider


// type: Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider
    /**
    
            Interface for attributes which can supply a route template for attribute routing.
            

    */
open class IRouteTemplateProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Template
    open func get_Template() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Order
    open func get_Order() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_System_Nullable_i32___get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRouteTemplateProvider


// type: Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider
    /**
    
             
             A metadata interface which specifies a route value which is required for the action selector to
             choose an action. When applied to an action using attribute routing, the route value will be added
             to the  when the action is selected.
             
             
             When an  is used to provide a new route value to an action, all
             actions in the application must also have a value associated with that key, or have an implicit value
             of null. See remarks for more details.
             
             

    */
open class IRouteValueProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_RouteKey()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.get_RouteKey
    open func get_RouteKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider_String__get_RouteKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RouteValue()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.get_RouteValue
    open func get_RouteValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider_String__get_RouteValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRouteValueProvider


// type: Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory
    /**
    
            A factory for creating  instances.
            

    */
open class IUrlHelperFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Routing_IUrlHelperFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_IUrlHelperFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.IUrlHelper GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory.GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Gets an  for the request associated with .
            

    - Parameter context: The  associated with the current request.
    - Returns: An  for the request associated with 

    */
    open func GetUrlHelper(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_IUrlHelperFactory_IUrlHelper__GetUrlHelper_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __return);
        }
    }
} // IUrlHelperFactory


// type: Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint
    /**
    
            A  that represents a known route value.
            

    */
open class KnownRouteValueConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_KnownRouteValueConstraint_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)
    /**
    
            Initializes an instance of .
            

    - Parameter actionDescriptorCollectionProvider: The .
    */
    public init(actionDescriptorCollectionProvider : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_KnownRouteValueConstraint_ctor_0__1__IActionDescriptorCollectionProvider(&__thrown, actionDescriptorCollectionProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_KnownRouteValueConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // KnownRouteValueConstraint


// type: Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute
    /**
    
            
            An attribute which specifies a required route value for an action or controller.
            
            
            When placed on an action, the route data of a request must match the expectations of the required route data
            in order for the action to be selected. All other actions without a route value for the given key cannot be
            selected unless the route data of the request does omits a value matching the key.
            See  for more details and examples.
            
            
            When placed on a controller, unless overridden by the action, the constraint applies to all
            actions defined by the controller.
            
            

    */
open class RouteValueAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_RouteValueAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_RouteKey()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute.get_RouteKey
    open /* method final */ func get_RouteKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_RouteValueAttribute_String__get_RouteKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RouteValue()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute.get_RouteValue
    open /* method final */ func get_RouteValue() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_RouteValueAttribute_String__get_RouteValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    */
    public var RouteKey : dotnet.System.String {
        get {
            return try! get_RouteKey();
        }
    }
    /**
    */
    public var RouteValue : dotnet.System.String {
        get {
            return try! get_RouteValue();
        }
    }
} // RouteValueAttribute


// type: Microsoft.AspNetCore.Mvc.Routing.UrlHelper
    /**
    
            An implementation of  that contains methods to
            build URLs for ASP.NET MVC within an application.
            

    */
open class UrlHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_UrlHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelper.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Initializes a new instance of the  class using the specified
            .
            

    - Parameter actionContext: The  for the current request.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_UrlHelper_ctor_0__1__ActionContext(&__thrown, actionContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelper.Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
    /**
    */
    open override func Action(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlActionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelper_String__Action_0__1__UrlActionContext(&__thrown, self.get_handle(), actionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelper.RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
    /**
    */
    open override func RouteUrl(routeContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelper_String__RouteUrl_0__1__UrlRouteContext(&__thrown, self.get_handle(), routeContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // UrlHelper


// type: Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase
    /**
    
            An abstraction for .
            

    */
open class UrlHelperBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IUrlHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool IsLocalUrl(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.IsLocalUrl(System.String)
    /**
    */
    open func IsLocalUrl(url : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_bool__IsLocalUrl_0__1__String(&__thrown, self.get_handle(), url?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Content(System.String)
    /**
    */
    open func Content(contentPath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_String__Content_0__1__String(&__thrown, self.get_handle(), contentPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Link(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Link(System.String,System.Object)
    /**
    */
    open func Link(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_String__Link_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
    /**
    */
    open func Action(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlActionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_String__Action_0__1__UrlActionContext(&__thrown, self.get_handle(), actionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
    /**
    */
    open func RouteUrl(routeContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_String__RouteUrl_0__1__UrlRouteContext(&__thrown, self.get_handle(), routeContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.get_ActionContext
    open /* method final */ func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperBase_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    /**
    */
    public var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
} // UrlHelperBase


// type: Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory
    /**
    
            A default implementation of .
            

    */
open class UrlHelperFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Routing_IUrlHelperFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_UrlHelperFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_UrlHelperFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.IUrlHelper GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory.GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open /* method final */ func GetUrlHelper(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlHelperFactory_IUrlHelper__GetUrlHelper_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __return);
        }
    }
} // UrlHelperFactory


}

// Microsoft.AspNetCore.Mvc.ViewFeatures
extension Microsoft.AspNetCore.Mvc.ViewFeatures {
// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IKeepTempDataResult
    /**
    
            A marker interface for  types which need to have temp data saved.
            

    */
open class IKeepTempDataResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult,
    Microsoft_AspNetCore_Mvc_IActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IKeepTempDataResult


}


// Microsoft.AspNetCore.Routing
extension Microsoft.AspNetCore.Routing {
// type: Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions
public struct ControllerLinkGeneratorExtensions {
    // System.String GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Object,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter action: 
            The action name. Used to resolve endpoints. Optional. If null is provided, the current action route value
            will be used.
            
    - Parameter controller: 
            The controller name. Used to resolve endpoints. Optional. If null is provided, the current controller route value
            will be used.
            
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null if a URI cannot be created.

    */
    public static func GetPathByAction(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ControllerLinkGeneratorExtensions_String__GetPathByAction_0__8__LinkGenerator_HttpContext_String_String_Object_System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.String,System.Object,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter action: The action name. Used to resolve endpoints.
    - Parameter controller: The controller name. Used to resolve endpoints.
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null if a URI cannot be created.

    */
    public static func GetPathByAction(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, action : dotnet.System.String, controller : dotnet.System.String, values : Optional<dotnet.System.Object> = nil, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ControllerLinkGeneratorExtensions_String__GetPathByAction_0__7__LinkGenerator_String_String_Object_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), action.get_handle(), controller.get_handle(), values?.get_handle() ?? nil, pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Object,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter action: 
            The action name. Used to resolve endpoints. Optional. If null is provided, the current action route value
            will be used.
            
    - Parameter controller: 
            The controller name. Used to resolve endpoints. Optional. If null is provided, the current controller route value
            will be used.
            
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter scheme: 
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of  will be used.
            
    - Parameter host: 
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value  will be used.
            
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A absolute URI, or null if a URI cannot be created.

    */
    public static func GetUriByAction(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ControllerLinkGeneratorExtensions_String__GetUriByAction_0__10__LinkGenerator_HttpContext_String_String_Object_String_System_Nullable_Microsoft_AspNetCore_Http_HostString__System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), action?.get_handle() ?? nil, controller?.get_handle() ?? nil, values?.get_handle() ?? nil, scheme?.get_handle() ?? nil, (host != nil) ? host!.get_handle() : nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.String,System.Object,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter action: The action name. Used to resolve endpoints.
    - Parameter controller: The controller name. Used to resolve endpoints.
    - Parameter values: The route values. May be null. Used to resolve endpoints and expand parameters in the route template.
    - Parameter scheme: The URI scheme, applied to the resulting URI.
    - Parameter host: The URI host/authority, applied to the resulting URI.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A absolute URI, or null if a URI cannot be created.

    */
    public static func GetUriByAction(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, action : dotnet.System.String, controller : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String>, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ControllerLinkGeneratorExtensions_String__GetUriByAction_0__9__LinkGenerator_String_String_Object_String_HostString_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), action.get_handle(), controller.get_handle(), values?.get_handle() ?? nil, scheme?.get_handle() ?? nil, host.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ControllerLinkGeneratorExtensions


// type: Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions
public struct PageLinkGeneratorExtensions {
    // System.String GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Object,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter page: 
            The page name. Used to resolve endpoints. Optional. If null is provided, the current page route value
            will be used.
            
    - Parameter handler: 
            The page handler name. Used to resolve endpoints. Optional.
            
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null if a URI cannot be created.

    */
    public static func GetPathByPage(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, page : Optional<dotnet.System.String> = nil, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_PageLinkGeneratorExtensions_String__GetPathByPage_0__8__LinkGenerator_HttpContext_String_String_Object_System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), page?.get_handle() ?? nil, handler?.get_handle() ?? nil, values?.get_handle() ?? nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.String,System.Object,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter page: 
            The page name. Used to resolve endpoints.
            
    - Parameter handler: 
            The page handler name. Used to resolve endpoints. Optional.
            
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null if a URI cannot be created.

    */
    public static func GetPathByPage(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, page : dotnet.System.String, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_PageLinkGeneratorExtensions_String__GetPathByPage_0__7__LinkGenerator_String_String_Object_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), page.get_handle(), handler?.get_handle() ?? nil, values?.get_handle() ?? nil, pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Object,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter page: 
            The page name. Used to resolve endpoints. Optional. If null is provided, the current page route value
            will be used.
            
    - Parameter handler: 
            The page handler name. Used to resolve endpoints. Optional.
            
    - Parameter values: The route values. Optional. Used to resolve endpoints and expand parameters in the route template.
    - Parameter scheme: 
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of  will be used.
            
    - Parameter host: 
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value  will be used.
            
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A absolute URI, or null if a URI cannot be created.

    */
    public static func GetUriByPage(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, page : Optional<dotnet.System.String> = nil, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_PageLinkGeneratorExtensions_String__GetUriByPage_0__10__LinkGenerator_HttpContext_String_String_Object_String_System_Nullable_Microsoft_AspNetCore_Http_HostString__System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), page?.get_handle() ?? nil, handler?.get_handle() ?? nil, values?.get_handle() ?? nil, scheme?.get_handle() ?? nil, (host != nil) ? host!.get_handle() : nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.String,System.Object,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter page: The page name. Used to resolve endpoints.
    - Parameter handler: The page handler name. May be null.
    - Parameter values: The route values. May be null. Used to resolve endpoints and expand parameters in the route template.
    - Parameter scheme: The URI scheme, applied to the resulting URI.
    - Parameter host: The URI host/authority, applied to the resulting URI.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: A URI fragment. Optional. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A absolute URI, or null if a URI cannot be created.

    */
    public static func GetUriByPage(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, page : dotnet.System.String, handler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_PageLinkGeneratorExtensions_String__GetUriByPage_0__9__LinkGenerator_String_String_Object_String_HostString_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), page.get_handle(), handler?.get_handle() ?? nil, values?.get_handle() ?? nil, scheme.get_handle(), host.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // PageLinkGeneratorExtensions


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions
public struct ApplicationModelConventionExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<TApplicationModelConvention>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>)
    // void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, System.Type)
// docid: M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},System.Type)
    /**
    
            Removes all application model conventions of the specified type.
            

    - Parameter list: The list of s.
    - Parameter type: The type to remove.
    */
    public static func RemoveType(list : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ApplicationModelConventionExtensions_void__RemoveType_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention__Type(&__thrown, list.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention)
// docid: M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention)
    /**
    
            Adds a  to all the controllers in the application.
            

    - Parameter conventions: The list of 
            in .
    - Parameter controllerModelConvention: The  which needs to be
            added.
    */
    public static func Add(conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, controllerModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ApplicationModelConventionExtensions_void__Add_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention__IControllerModelConvention(&__thrown, conventions.get_handle(), controllerModelConvention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention)
// docid: M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention)
    /**
    
            Adds a  to all the actions in the application.
            

    - Parameter conventions: The list of 
            in .
    - Parameter actionModelConvention: The  which needs to be
            added.
    */
    public static func Add(conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, actionModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ApplicationModelConventionExtensions_void__Add_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention__IActionModelConvention(&__thrown, conventions.get_handle(), actionModelConvention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention)
// docid: M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention)
    /**
    
            Adds a  to all the parameters in the application.
            

    - Parameter conventions: The list of 
            in .
    - Parameter parameterModelConvention: The  which needs to be
            added.
    */
    public static func Add(conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, parameterModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ApplicationModelConventionExtensions_void__Add_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention__IParameterModelConvention(&__thrown, conventions.get_handle(), parameterModelConvention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
// docid: M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
    /**
    
            Adds a  to all properties and parameters in the application.
            

    - Parameter conventions: The list of 
            in .
    - Parameter parameterModelConvention: The  which needs to be
            added.
    */
    public static func Add(conventions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, parameterModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_DependencyInjection_ApplicationModelConventionExtensions_void__Add_0__2__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention__IParameterModelBaseConvention(&__thrown, conventions.get_handle(), parameterModelConvention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ApplicationModelConventionExtensions


// type: Microsoft.Extensions.DependencyInjection.IMvcBuilder
    /**
    
            An interface for configuring MVC services.
            

    */
open class IMvcBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_DependencyInjection_IMvcBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_IMvcBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.Extensions.DependencyInjection.IMvcBuilder.get_Services
    open func get_Services() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IMvcBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager get_PartManager()
// docid: M:Microsoft.Extensions.DependencyInjection.IMvcBuilder.get_PartManager
    open func get_PartManager() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IMvcBuilder_ApplicationPartManager__get_PartManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager(hndl : __return);
        }
    }
} // IMvcBuilder


// type: Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder
    /**
    
            An interface for configuring essential MVC services.
            

    */
open class IMvcCoreBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.get_Services
    open func get_Services() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager get_PartManager()
// docid: M:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.get_PartManager
    open func get_PartManager() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder_ApplicationPartManager__get_PartManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager(hndl : __return);
        }
    }
} // IMvcCoreBuilder


// type: Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions
public struct MvcCoreMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Registers an action to configure .
            

    - Parameter builder: The .
    - Parameter setupAction: An .
    - Returns: The .

    */
    public static func AddMvcOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__AddMvcOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try AddMvcOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.JsonOptions})
    /**
    
            Configures  for the specified .
            

    - Parameter builder: The .
    - Parameter configure: An  to configure the .
    - Returns: The .

    */
    public static func AddJsonOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__AddJsonOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_JsonOptions_(&__thrown, builder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddJsonOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>(configure);
        return try AddJsonOptions(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})
    /**
    
            Configures  for the specified .
            

    - Parameter builder: The .
    - Parameter setupAction: An  to configure the .
    - Returns: The .

    */
    public static func AddFormatterMappings(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__AddFormatterMappings_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddFormatterMappings(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>(setupAction);
        return try AddFormatterMappings(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Reflection.Assembly)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Reflection.Assembly)
    /**
    
            Adds an  to the list of  on the
            .
            

    - Parameter builder: The .
    - Parameter assembly: The  of the .
    - Returns: The .

    */
    public static func AddApplicationPart(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, assembly : dotnet.System.Reflection.Assembly) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__AddApplicationPart_0__2__IMvcBuilder_Assembly(&__thrown, builder.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})
    /**
    
            Configures the  of the  using
            the given .
            

    - Parameter builder: The .
    - Parameter setupAction: The 
    - Returns: The .

    */
    public static func ConfigureApplicationPartManager(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__ConfigureApplicationPartManager_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureApplicationPartManager(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>(setupAction);
        return try ConfigureApplicationPartManager(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Registers discovered controllers as services in the .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddControllersAsServices(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__AddControllersAsServices_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.CompatibilityVersion)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.CompatibilityVersion)
    /**
    
            Sets the  for ASP.NET Core MVC for the application.
            

    - Parameter builder: The .
    - Parameter version: The  value to configure.
    - Returns: The .

    */
    public static func SetCompatibilityVersion(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, version : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__SetCompatibilityVersion_0__2__IMvcBuilder_CompatibilityVersion(&__thrown, builder.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})
    /**
    
            Configures .
            

    - Parameter builder: The .
    - Parameter setupAction: The configure action.
    - Returns: The .

    */
    public static func ConfigureApiBehaviorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcBuilderExtensions_IMvcBuilder__ConfigureApiBehaviorOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureApiBehaviorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>(setupAction);
        return try ConfigureApiBehaviorOptions(builder: builder, setupAction: del_setupAction);
    }
} // MvcCoreMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions
public struct MvcCoreMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Registers an action to configure .
            

    - Parameter builder: The .
    - Parameter setupAction: An .
    - Returns: The .

    */
    public static func AddMvcOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcOptions_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try AddMvcOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.JsonOptions})
    /**
    
            Configures  for the specified .
            

    - Parameter builder: The .
    - Parameter configure: An  to configure the .
    - Returns: The .

    */
    public static func AddJsonOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddJsonOptions_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_JsonOptions_(&__thrown, builder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddJsonOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>(configure);
        return try AddJsonOptions(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Adds services to support .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddFormatterMappings(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddFormatterMappings_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})
    /**
    
            Configures  for the specified .
            

    - Parameter builder: The .
    - Parameter setupAction: An  to configure the .
    - Returns: The .

    */
    public static func AddFormatterMappings(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddFormatterMappings_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_Formatters_FormatterMappings_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddFormatterMappings(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>(setupAction);
        return try AddFormatterMappings(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Configures authentication and authorization services for .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddAuthorization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddAuthorization_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})
    /**
    
            Configures authentication and authorization services for .
            

    - Parameter builder: The .
    - Parameter setupAction: An  to configure the .
    - Returns: The .

    */
    public static func AddAuthorization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddAuthorization_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Authorization_AuthorizationOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAuthorization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(setupAction);
        return try AddAuthorization(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Registers discovered controllers as services in the .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddControllersAsServices(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddControllersAsServices_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Reflection.Assembly)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Reflection.Assembly)
    /**
    
            Adds an  to the list of  on the
            .
            

    - Parameter builder: The .
    - Parameter assembly: The  of the .
    - Returns: The .

    */
    public static func AddApplicationPart(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, assembly : dotnet.System.Reflection.Assembly) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__AddApplicationPart_0__2__IMvcCoreBuilder_Assembly(&__thrown, builder.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})
    /**
    
            Configures the  of the  using
            the given .
            

    - Parameter builder: The .
    - Parameter setupAction: The 
    - Returns: The .

    */
    public static func ConfigureApplicationPartManager(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__ConfigureApplicationPartManager_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPartManager_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureApplicationPartManager(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>(setupAction);
        return try ConfigureApplicationPartManager(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})
    /**
    
            Configures .
            

    - Parameter builder: The .
    - Parameter setupAction: The configure action.
    - Returns: The .

    */
    public static func ConfigureApiBehaviorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__ConfigureApiBehaviorOptions_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureApiBehaviorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>(setupAction);
        return try ConfigureApiBehaviorOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.CompatibilityVersion)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.CompatibilityVersion)
    /**
    
            Sets the  for ASP.NET Core MVC for the application.
            

    - Parameter builder: The .
    - Parameter version: The  value to configure.
    - Returns: The .

    */
    public static func SetCompatibilityVersion(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, version : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreMvcCoreBuilderExtensions_IMvcCoreBuilder__SetCompatibilityVersion_0__2__IMvcCoreBuilder_CompatibilityVersion(&__thrown, builder.get_handle(), version.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
} // MvcCoreMvcCoreBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions
public struct MvcCoreServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds the minimum essential MVC services to the specified . Additional services
            including MVC's support for authorization, formatters, and validation must be added separately using the
             returned from this method.
            

    - Parameter services: The  to add services to.
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddMvcCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreServiceCollectionExtensions_IMvcCoreBuilder__AddMvcCore_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Adds the minimum essential MVC services to the specified . Additional services
            including MVC's support for authorization, formatters, and validation must be added separately using the
             returned from this method.
            

    - Parameter services: The  to add services to.
    - Parameter setupAction: An  to configure the provided .
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddMvcCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcCoreServiceCollectionExtensions_IMvcCoreBuilder__AddMvcCore_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try AddMvcCore(services: services, setupAction: del_setupAction);
    }
} // MvcCoreServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDefaultResponseMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionGroupNameProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionVisibilityProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestFormatMetadataProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiRequestMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiResponseTypeMetadataProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IActionModelConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IApiExplorerModel
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IApplicationModelProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IBindingModel
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_ICommonModel
    :
    Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IControllerModelConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IFilterModel
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelBaseConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IParameterModelConvention
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationModels_IPropertyModel
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider_1
    :
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    associatedtype TFeature_IApplicationFeatureProvider_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationPartTypeProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApplicationParts_ICompilationReferencesProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Controllers_IControllerActivator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Controllers_IControllerActivatorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Controllers_IControllerFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Controllers_IControllerFactoryProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Core_Infrastructure_IAntiforgeryValidationFailedResult
    :
    Microsoft_AspNetCore_Mvc_IActionResult
{
}

public protocol Microsoft_AspNetCore_Mvc_IDesignTimeMvcBuilderConfiguration
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_IRequestFormLimitsPolicy
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_IRequestSizePolicy
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionContextAccessor
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorChangeProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionDescriptorCollectionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionInvokerFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultExecutor_1
    :
    SGBridgeGetHandle
{
    associatedtype TResult_IActionResultExecutor_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionResultTypeMapper
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IActionSelector
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IApiBehaviorMetadata
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorActionResult
    :
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IClientErrorFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_ICompatibilitySwitch
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IConvertToActionResult
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IHttpRequestStreamReaderFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IHttpResponseStreamWriterFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IParameterInfoParameterDescriptor
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IPropertyInfoParameterDescriptor
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
    :
    Microsoft_AspNetCore_Mvc_IActionResult
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceValueProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_ICollectionModelBinder
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IEnumerableValueProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IKeyRewriterValueProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ICompositeMetadataDetailsProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IBindingMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider,
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IDisplayMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IValidationMetadataProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_IMetadataDetailsProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IMetadataBasedModelValidatorProvider
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IObjectModelValidator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Routing_IActionHttpMethodProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Routing_IRouteValueProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Routing_IUrlHelperFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IKeepTempDataResult
    :
    Microsoft_AspNetCore_Mvc_IActionResult
{
}

public protocol Microsoft_Extensions_DependencyInjection_IMvcBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapControllers(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapControllers() throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllers(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapDefaultControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapDefaultControllerRoute() throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDefaultControllerRoute(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.Object, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapControllerRoute(name : dotnet.System.String, pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object> = nil, constraints : Optional<dotnet.System.Object> = nil, dataTokens : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllerRoute(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, pattern: pattern, defaults: defaults, constraints: constraints, dataTokens: dataTokens);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder MapAreaControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String, System.Object, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapAreaControllerRoute(name : dotnet.System.String, areaName : dotnet.System.String, pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object> = nil, constraints : Optional<dotnet.System.Object> = nil, dataTokens : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapAreaControllerRoute(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, areaName: areaName, pattern: pattern, defaults: defaults, constraints: constraints, dataTokens: dataTokens);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToController(action : dotnet.System.String, controller : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), action: action, controller: controller);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToController(pattern : dotnet.System.String, action : dotnet.System.String, controller : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, action: action, controller: controller);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToAreaController(action : dotnet.System.String, controller : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, area: area);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallbackToAreaController(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallbackToAreaController(pattern : dotnet.System.String, action : dotnet.System.String, controller : dotnet.System.String, area : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, action: action, controller: controller, area: area);
    }
}

// EXTENSION METHOD void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE extension method (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)

// EXTENSION METHOD void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)
// TODO COPE extension method (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object)

// EXTENSION METHOD void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)
// TODO COPE extension method (unused generic param) void MapDynamicControllerRoute<TTransformer>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Object, System.Int32)

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseMvc() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvcWithDefaultRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseMvcWithDefaultRoute() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseMvc(configureRoutes : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configureRoutes: configureRoutes);
    }
    // delegate closure overload
    public func UseMvc(configureRoutes : @escaping (aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configureRoutes = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(configureRoutes);
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configureRoutes: del_configureRoutes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapAreaRoute(name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, areaName: areaName, template: template);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapAreaRoute(name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, areaName: areaName, template: template, defaults: defaults);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapAreaRoute(name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, areaName: areaName, template: template, defaults: defaults, constraints: constraints);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.String, System.Object, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapAreaRoute(name : dotnet.System.String, areaName : dotnet.System.String, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>, dataTokens : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, areaName: areaName, template: template, defaults: defaults, constraints: constraints, dataTokens: dataTokens);
    }
}

// EXTENSION METHOD void RemoveType<TMetadataDetailsProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>)
// TODO COPE extension method (unused generic param) void RemoveType<TMetadataDetailsProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>)

// EXTENSION METHOD void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider>, System.Type)
extension dotnet.System.Collections.Generic.IList_1 {
    public func RemoveType(type : dotnet.System.Type_) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType(list: self, type: type);
    }
}

// EXTENSION METHOD void RemoveType<TModelBinderProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>)
// TODO COPE extension method (unused generic param) void RemoveType<TModelBinderProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>)

// EXTENSION METHOD void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider>, System.Type)
extension dotnet.System.Collections.Generic.IList_1 {
    public func RemoveType(type : dotnet.System.Type_) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType(list: self, type: type);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Type, System.String)
extension Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider {
    public func GetMetadataForProperty(containerType : dotnet.System.Type_, propertyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions.GetMetadataForProperty(provider: aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl: __copy_handle(self.get_handle())), containerType: containerType, propertyName: propertyName);
    }
}

// EXTENSION METHOD void RemoveType<TModelValidatorProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>)
// TODO COPE extension method (unused generic param) void RemoveType<TModelValidatorProvider>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>)

// EXTENSION METHOD void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider>, System.Type)
extension dotnet.System.Collections.Generic.IList_1 {
    public func RemoveType(type : dotnet.System.Type_) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType(list: self, type: type);
    }
}

// EXTENSION METHOD void RemoveType<TValueProviderFactory>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
// TODO COPE extension method (unused generic param) void RemoveType<TValueProviderFactory>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)

// EXTENSION METHOD void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>, System.Type)
extension dotnet.System.Collections.Generic.IList_1 {
    public func RemoveType(type : dotnet.System.Type_) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType(list: self, type: type);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, values: values);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, values: values);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, values: values, protocol_: protocol_);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, values: values, protocol_: protocol_, host: host);
    }
}

// EXTENSION METHOD System.String Action(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Action(action : Optional<dotnet.System.String>, controller : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, values: values, protocol_: protocol_, host: host, fragment: fragment);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), values: values);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(routeName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, values: values);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, values: values, protocol_: protocol_);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, values: values, protocol_: protocol_, host: host);
    }
}

// EXTENSION METHOD System.String RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func RouteUrl(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, values: values, protocol_: protocol_, host: host, fragment: fragment);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, values: values);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler, values: values);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler, values: values, protocol_: protocol_);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler, values: values, protocol_: protocol_, host: host);
    }
}

// EXTENSION METHOD System.String Page(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func Page(pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, protocol_ : Optional<dotnet.System.String>, host : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler, values: values, protocol_: protocol_, host: host, fragment: fragment);
    }
}

// EXTENSION METHOD System.String ActionLink(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func ActionLink(action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, protocol_ : Optional<dotnet.System.String> = nil, host : Optional<dotnet.System.String> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), action: action, controller: controller, values: values, protocol_: protocol_, host: host, fragment: fragment);
    }
}

// EXTENSION METHOD System.String PageLink(Microsoft.AspNetCore.Mvc.IUrlHelper, System.String, System.String, System.Object, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_IUrlHelper {
    public func PageLink(pageName : Optional<dotnet.System.String> = nil, pageHandler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, protocol_ : Optional<dotnet.System.String> = nil, host : Optional<dotnet.System.String> = nil, fragment : Optional<dotnet.System.String> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.UrlHelperExtensions.PageLink(urlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl: __copy_handle(self.get_handle())), pageName: pageName, pageHandler: pageHandler, values: values, protocol_: protocol_, host: host, fragment: fragment);
    }
}

// EXTENSION METHOD System.String GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByAction(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(generator: self, httpContext: httpContext, action: action, controller: controller, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByAction(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByAction(action : dotnet.System.String, controller : dotnet.System.String, values : Optional<dotnet.System.Object> = nil, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(generator: self, action: action, controller: controller, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByAction(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, action : Optional<dotnet.System.String> = nil, controller : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(generator: self, httpContext: httpContext, action: action, controller: controller, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByAction(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByAction(action : dotnet.System.String, controller : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String>, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(generator: self, action: action, controller: controller, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByPage(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, page : Optional<dotnet.System.String> = nil, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(generator: self, httpContext: httpContext, page: page, handler: handler, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByPage(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByPage(page : dotnet.System.String, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(generator: self, page: page, handler: handler, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByPage(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, page : Optional<dotnet.System.String> = nil, handler : Optional<dotnet.System.String> = nil, values : Optional<dotnet.System.Object> = nil, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(generator: self, httpContext: httpContext, page: page, handler: handler, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByPage(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByPage(page : dotnet.System.String, handler : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(generator: self, page: page, handler: handler, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD void RemoveType<TApplicationModelConvention>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>)
// TODO COPE extension method (unused generic param) void RemoveType<TApplicationModelConvention>(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>)

// EXTENSION METHOD void RemoveType(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, System.Type)
extension dotnet.System.Collections.Generic.IList_1 {
    public func RemoveType(type : dotnet.System.Type_) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
        try aspnetcore.Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType(list: self, type: type);
    }
}

// EXTENSION METHOD void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention)
extension dotnet.System.Collections.Generic.IList_1 {
    public func Add(controllerModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
        try aspnetcore.Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(conventions: self, controllerModelConvention: controllerModelConvention);
    }
}

// EXTENSION METHOD void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention)
extension dotnet.System.Collections.Generic.IList_1 {
    public func Add(actionModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
        try aspnetcore.Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(conventions: self, actionModelConvention: actionModelConvention);
    }
}

// EXTENSION METHOD void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention)
extension dotnet.System.Collections.Generic.IList_1 {
    public func Add(parameterModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
        try aspnetcore.Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(conventions: self, parameterModelConvention: parameterModelConvention);
    }
}

// EXTENSION METHOD void Add(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention>, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention)
extension dotnet.System.Collections.Generic.IList_1 {
    public func Add(parameterModelConvention : aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention) throws where T == aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
        try aspnetcore.Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(conventions: self, parameterModelConvention: parameterModelConvention);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddMvcOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddJsonOptions(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddJsonOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddJsonOptions(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddJsonOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddFormatterMappings(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddFormatterMappings(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Reflection.Assembly)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddApplicationPart(assembly : dotnet.System.Reflection.Assembly) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddApplicationPart(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), assembly: assembly);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func ConfigureApplicationPartManager(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureApplicationPartManager(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddControllersAsServices() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddControllersAsServices(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.CompatibilityVersion)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func SetCompatibilityVersion(version : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.SetCompatibilityVersion(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), version: version);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func ConfigureApiBehaviorOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApiBehaviorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureApiBehaviorOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApiBehaviorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddMvcOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddJsonOptions(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddJsonOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddJsonOptions(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.JsonOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddJsonOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddFormatterMappings() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddFormatterMappings(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddFormatterMappings(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddAuthorization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddAuthorization(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddAuthorization(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddControllersAsServices() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddControllersAsServices(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Reflection.Assembly)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddApplicationPart(assembly : dotnet.System.Reflection.Assembly) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddApplicationPart(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), assembly: assembly);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func ConfigureApplicationPartManager(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureApplicationPartManager(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func ConfigureApiBehaviorOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApiBehaviorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureApiBehaviorOptions(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiBehaviorOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApiBehaviorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder SetCompatibilityVersion(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.CompatibilityVersion)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func SetCompatibilityVersion(version : aspnetcore.Microsoft.AspNetCore.Mvc.CompatibilityVersion) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.SetCompatibilityVersion(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), version: version);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddMvcCore() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddMvcCore(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddMvcCore(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

