// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Net
// Microsoft.Net.Http
// Microsoft.Net.Http.Headers
extension Microsoft.Net.Http.Headers {
// type: Microsoft.Net.Http.Headers.CacheControlHeaderValue
    /**
    
            Represents the Cache-Control HTTP header.
            

    */
open class CacheControlHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_CacheControlHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.String PublicString
    /**
    
            A constant for the public cache-control directive.
            

    */
    open class var PublicString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_PublicString());
            return __return;
        }
    }
    // static field: System.String PrivateString
    /**
    
            A constant for the private cache-control directive.
            

    */
    open class var PrivateString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_PrivateString());
            return __return;
        }
    }
    // static field: System.String MaxAgeString
    /**
    
            A constant for the max-age cache-control directive.
            

    */
    open class var MaxAgeString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_MaxAgeString());
            return __return;
        }
    }
    // static field: System.String SharedMaxAgeString
    /**
    
            A constant for the s-maxage cache-control directive.
            

    */
    open class var SharedMaxAgeString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_SharedMaxAgeString());
            return __return;
        }
    }
    // static field: System.String NoCacheString
    /**
    
            A constant for the no-cache cache-control directive.
            

    */
    open class var NoCacheString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_NoCacheString());
            return __return;
        }
    }
    // static field: System.String NoStoreString
    /**
    
            A constant for the no-store cache-control directive.
            

    */
    open class var NoStoreString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_NoStoreString());
            return __return;
        }
    }
    // static field: System.String MaxStaleString
    /**
    
            A constant for the max-stale cache-control directive.
            

    */
    open class var MaxStaleString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_MaxStaleString());
            return __return;
        }
    }
    // static field: System.String MinFreshString
    /**
    
            A constant for the min-fresh cache-control directive.
            

    */
    open class var MinFreshString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_MinFreshString());
            return __return;
        }
    }
    // static field: System.String NoTransformString
    /**
    
            A constant for the no-transform cache-control directive.
            

    */
    open class var NoTransformString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_NoTransformString());
            return __return;
        }
    }
    // static field: System.String OnlyIfCachedString
    /**
    
            A constant for the only-if-cached cache-control directive.
            

    */
    open class var OnlyIfCachedString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_OnlyIfCachedString());
            return __return;
        }
    }
    // static field: System.String MustRevalidateString
    /**
    
            A constant for the must-revalidate cache-control directive.
            

    */
    open class var MustRevalidateString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_MustRevalidateString());
            return __return;
        }
    }
    // static field: System.String ProxyRevalidateString
    /**
    
            A constant for the proxy-revalidate cache-control directive.
            

    */
    open class var ProxyRevalidateString : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_CacheControlHeaderValue_get_ProxyRevalidateString());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_CacheControlHeaderValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.CacheControlHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_CacheControlHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.CacheControlHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.CacheControlHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__TryParse_0__2__StringSegment_outCacheControlHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.CacheControlHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_NoCache()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_NoCache
    open func get_NoCache() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoCache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoCache(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_NoCache(System.Boolean)
    open func set_NoCache(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_NoCache_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.Extensions.Primitives.StringSegment> get_NoCacheHeaders()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_NoCacheHeaders
    open func get_NoCacheHeaders() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_ICollection_Microsoft_Extensions_Primitives_StringSegment___get_NoCacheHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_NoStore()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_NoStore
    open func get_NoStore() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoStore(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_NoStore(System.Boolean)
    open func set_NoStore(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_NoStore_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxAge()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_MaxAge
    open func get_MaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_MaxAge(System.Nullable{System.TimeSpan})
    open func set_MaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_SharedMaxAge()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_SharedMaxAge
    open func get_SharedMaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_SharedMaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_SharedMaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_SharedMaxAge(System.Nullable{System.TimeSpan})
    open func set_SharedMaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_SharedMaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MaxStale()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_MaxStale
    open func get_MaxStale() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_MaxStale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MaxStale(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_MaxStale(System.Boolean)
    open func set_MaxStale(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxStale_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxStaleLimit()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_MaxStaleLimit
    open func get_MaxStaleLimit() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MaxStaleLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxStaleLimit(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_MaxStaleLimit(System.Nullable{System.TimeSpan})
    open func set_MaxStaleLimit(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_MaxStaleLimit_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MinFresh()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_MinFresh
    open func get_MinFresh() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Nullable_System_TimeSpan___get_MinFresh_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MinFresh(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_MinFresh(System.Nullable{System.TimeSpan})
    open func set_MinFresh(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_MinFresh_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_NoTransform()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_NoTransform
    open func get_NoTransform() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_NoTransform_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_NoTransform(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_NoTransform(System.Boolean)
    open func set_NoTransform(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_NoTransform_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_OnlyIfCached()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_OnlyIfCached
    open func get_OnlyIfCached() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_OnlyIfCached_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_OnlyIfCached(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_OnlyIfCached(System.Boolean)
    open func set_OnlyIfCached(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_OnlyIfCached_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Public()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_Public
    open func get_Public() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_Public_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Public(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_Public(System.Boolean)
    open func set_Public(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_Public_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Private()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_Private
    open func get_Private() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_Private_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Private(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_Private(System.Boolean)
    open func set_Private(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_Private_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.Extensions.Primitives.StringSegment> get_PrivateHeaders()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_PrivateHeaders
    open func get_PrivateHeaders() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_ICollection_Microsoft_Extensions_Primitives_StringSegment___get_PrivateHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_MustRevalidate()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_MustRevalidate
    open func get_MustRevalidate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_MustRevalidate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MustRevalidate(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_MustRevalidate(System.Boolean)
    open func set_MustRevalidate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_MustRevalidate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ProxyRevalidate()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_ProxyRevalidate
    open func get_ProxyRevalidate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_bool__get_ProxyRevalidate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ProxyRevalidate(bool)
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.set_ProxyRevalidate(System.Boolean)
    open func set_ProxyRevalidate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CacheControlHeaderValue_void__set_ProxyRevalidate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue> get_Extensions()
// docid: M:Microsoft.Net.Http.Headers.CacheControlHeaderValue.get_Extensions
    open func get_Extensions() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CacheControlHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue___get_Extensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets cache-extension tokens, each with an optional assigned value.
            

    */
    open var Extensions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Extensions();
        }
    }
    /**
    
            Gets or sets a value for the max-age directive.
            
            max-age specifies the maximum amount of time the response is considered fresh.
            
            

    */
    open var MaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxAge();
        }
        set(v) {
            return try! set_MaxAge(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the max-stale is included.
            
            max-stale that the client will accept stale responses. The maximum tolerance for staleness
            is specified by .
            
            

    */
    open var MaxStale : Bool {
        get {
            return try! get_MaxStale();
        }
        set(v) {
            return try! set_MaxStale(value: v);
        }
    }
    /**
    
            Gets or sets a value for the max-stale directive.
            
            Indicates the maximum duration an HTTP client is willing to accept a response that has exceeded its expiration time.
            
            

    */
    open var MaxStaleLimit : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxStaleLimit();
        }
        set(v) {
            return try! set_MaxStaleLimit(value: v!);
        }
    }
    /**
    
            Gets or sets a value for the min-fresh directive.
            
            Indicates the freshness lifetime that an HTTP client is willing to accept a response.
            
            

    */
    open var MinFresh : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MinFresh();
        }
        set(v) {
            return try! set_MinFresh(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the must-revalidate response directive is included.
            
            Indicates that caches must revalidate the use of stale caches with the origin server before their use.
            
            

    */
    open var MustRevalidate : Bool {
        get {
            return try! get_MustRevalidate();
        }
        set(v) {
            return try! set_MustRevalidate(value: v);
        }
    }
    /**
    
            Gets or sets a value for the no-cache directive.
            
            Configuring no-cache indicates that the client must re-validate cached responses with the original server
            before using it.
            
            

    */
    open var NoCache : Bool {
        get {
            return try! get_NoCache();
        }
        set(v) {
            return try! set_NoCache(value: v);
        }
    }
    /**
    
            Gets a collection of field names in the "no-cache" directive in a cache-control header field on an HTTP response.
            

    */
    open var NoCacheHeaders : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_NoCacheHeaders();
        }
    }
    /**
    
            Gets or sets a value for the no-store directive.
            
            Configuring no-store indicates that the response may not be stored in any cache.
            
            

    */
    open var NoStore : Bool {
        get {
            return try! get_NoStore();
        }
        set(v) {
            return try! set_NoStore(value: v);
        }
    }
    /**
    
            Gets or sets a value for the no-transform request directive.
            
            Forbids intermediate caches or proxies from editing the response payload.
            
            

    */
    open var NoTransform : Bool {
        get {
            return try! get_NoTransform();
        }
        set(v) {
            return try! set_NoTransform(value: v);
        }
    }
    /**
    
            Gets or sets a value for the only-if-cached request directive.
            
            Indicates that the client only wishes to obtain a stored response
            
            

    */
    open var OnlyIfCached : Bool {
        get {
            return try! get_OnlyIfCached();
        }
        set(v) {
            return try! set_OnlyIfCached(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the private response directive is included.
            
            Indicates that the response may not be stored by a shared cache.
            
            

    */
    open var Private : Bool {
        get {
            return try! get_Private();
        }
        set(v) {
            return try! set_Private(value: v);
        }
    }
    /**
    
            Gets a collection of field names in the "private" directive in a cache-control header field on an HTTP response.
            

    */
    open var PrivateHeaders : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_PrivateHeaders();
        }
    }
    /**
    
            Gets or sets a value that determines if the proxy-validate response directive is included.
            
            Indicates that shared caches must revalidate the use of stale caches with the origin server before their use.
            
            

    */
    open var ProxyRevalidate : Bool {
        get {
            return try! get_ProxyRevalidate();
        }
        set(v) {
            return try! set_ProxyRevalidate(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the public response directive is included.
            
            Indicates that the response may be stored by any cache.
            
            

    */
    open var Public : Bool {
        get {
            return try! get_Public();
        }
        set(v) {
            return try! set_Public(value: v);
        }
    }
    /**
    
            Gets or sets a value for the s-maxage directive.
            
            Overrides max-age, but only for shared caches (such as proxies).
            
            

    */
    open var SharedMaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_SharedMaxAge();
        }
        set(v) {
            return try! set_SharedMaxAge(value: v!);
        }
    }
} // CacheControlHeaderValue


// type: Microsoft.Net.Http.Headers.ContentDispositionHeaderValue
    /**
    
            Represents the value of a Content-Disposition header.
            

    */
open class ContentDispositionHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter dispositionType: A  that represents a content disposition type.
    */
    public init(dispositionType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_ctor_0__1__StringSegment(&__thrown, dispositionType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetHttpFileName(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.SetHttpFileName(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Sets both FileName and FileNameStar using encodings appropriate for HTTP headers.
            

    - Parameter fileName: 
    */
    open func SetHttpFileName(fileName : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__SetHttpFileName_0__1__StringSegment(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetMimeFileName(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.SetMimeFileName(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Sets the FileName parameter using encodings appropriate for MIME headers.
            The FileNameStar parameter is removed.
            

    - Parameter fileName: 
    */
    open func SetMimeFileName(fileName : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__SetMimeFileName_0__1__StringSegment(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.ContentDispositionHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_ContentDispositionHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.ContentDispositionHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_bool__TryParse_0__2__StringSegment_outContentDispositionHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_DispositionType()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_DispositionType
    open func get_DispositionType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_StringSegment__get_DispositionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DispositionType(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_DispositionType(Microsoft.Extensions.Primitives.StringSegment)
    open func set_DispositionType(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_DispositionType_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Name()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_Name
    open func get_Name() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_StringSegment__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_Name(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Name(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_Name_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_FileName()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_FileName
    open func get_FileName() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_StringSegment__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileName(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_FileName(Microsoft.Extensions.Primitives.StringSegment)
    open func set_FileName(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_FileName_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_FileNameStar()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_FileNameStar
    open func get_FileNameStar() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_StringSegment__get_FileNameStar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileNameStar(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_FileNameStar(Microsoft.Extensions.Primitives.StringSegment)
    open func set_FileNameStar(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_FileNameStar_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_CreationDate()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_CreationDate
    open func get_CreationDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_CreationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_CreationDate(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_CreationDate(System.Nullable{System.DateTimeOffset})
    open func set_CreationDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_CreationDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ModificationDate()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_ModificationDate
    open func get_ModificationDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_ModificationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ModificationDate(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_ModificationDate(System.Nullable{System.DateTimeOffset})
    open func set_ModificationDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_ModificationDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ReadDate()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_ReadDate
    open func get_ReadDate() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_System_DateTimeOffset___get_ReadDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ReadDate(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_ReadDate(System.Nullable{System.DateTimeOffset})
    open func set_ReadDate(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_ReadDate_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Size()
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.get_Size
    open func get_Size() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_System_Nullable_i64___get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Size(System.Nullable<System.Int64>)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.set_Size(System.Nullable{System.Int64})
    open func set_Size(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentDispositionHeaderValue_void__set_Size_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  at which the file was created.
            

    */
    open var CreationDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_CreationDate();
        }
        set(v) {
            return try! set_CreationDate(value: v!);
        }
    }
    /**
    
            Gets or sets a content disposition type.
            

    */
    open var DispositionType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_DispositionType();
        }
        set(v) {
            return try! set_DispositionType(value: v);
        }
    }
    /**
    
            Gets or sets a value that suggests how to construct a filename for storing the message payload
            to be used if the entity is detached and stored in a separate file.
            

    */
    open var FileName : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v);
        }
    }
    /**
    
            Gets or sets a value that suggests how to construct filenames for storing message payloads
            to be used if the entities are detached and stored in a separate files.
            

    */
    open var FileNameStar : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_FileNameStar();
        }
        set(v) {
            return try! set_FileNameStar(value: v);
        }
    }
    /**
    
            Gets or sets the  at which the file was last modified.
            

    */
    open var ModificationDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ModificationDate();
        }
        set(v) {
            return try! set_ModificationDate(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the content body part.
            

    */
    open var Name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets a collection of parameters included the Content-Disposition header.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets or sets the  at which the file was last read.
            

    */
    open var ReadDate : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ReadDate();
        }
        set(v) {
            return try! set_ReadDate(value: v!);
        }
    }
    /**
    
            Gets or sets the approximate size, in bytes, of the file.
            

    */
    open var Size : Optional<Swift.Int64> {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v!);
        }
    }
} // ContentDispositionHeaderValue


// type: Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions
public struct ContentDispositionHeaderValueIdentityExtensions {
    // bool IsFileDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFileDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    /**
    
            Checks if the content disposition header is a file disposition
            

    - Parameter header: The header to check
    - Returns: True if the header is file disposition, false otherwise

    */
    public static func IsFileDisposition(header : aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValueIdentityExtensions_bool__IsFileDisposition_0__1__ContentDispositionHeaderValue(&__thrown, header.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsFormDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFormDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    /**
    
            Checks if the content disposition header is a form disposition
            

    - Parameter header: The header to check
    - Returns: True if the header is form disposition, false otherwise

    */
    public static func IsFormDisposition(header : aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentDispositionHeaderValueIdentityExtensions_bool__IsFormDisposition_0__1__ContentDispositionHeaderValue(&__thrown, header.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ContentDispositionHeaderValueIdentityExtensions


// type: Microsoft.Net.Http.Headers.ContentRangeHeaderValue
    /**
    
            Represents a Content-Range response HTTP header.
            

    */
open class ContentRangeHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_ContentRangeHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Int64, System.Int64, System.Int64)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64,System.Int64)
    /**
    
            Initializes a new instance of .
            

    - Parameter from: The start of the range.
    - Parameter to: The end of the range.
    - Parameter length: The total size of the document in bytes.
    */
    public init(from : Swift.Int64, to : Swift.Int64, length : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__3__i64_i64_i64(&__thrown, from, to, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64)
    /**
    
            Initializes a new instance of .
            

    - Parameter length: The total size of the document in bytes.
    */
    public init(length : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__1__i64(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64, System.Int64)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64)
    /**
    
            Initializes a new instance of .
            

    - Parameter from: The start of the range.
    - Parameter to: The end of the range.
    */
    public init(from : Swift.Int64, to : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_ctor_0__2__i64_i64(&__thrown, from, to);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.Net.Http.Headers.ContentRangeHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_ContentRangeHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.ContentRangeHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.ContentRangeHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_bool__TryParse_0__2__StringSegment_outContentRangeHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let _tmp2_parsedValue = aspnetcore.Microsoft.Net.Http.Headers.ContentRangeHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Unit()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_Unit
    open func get_Unit() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_StringSegment__get_Unit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Unit(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.set_Unit(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Unit(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_ContentRangeHeaderValue_void__set_Unit_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_From()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_From
    open func get_From() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_To()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_To
    open func get_To() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_To_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Length()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_Length
    open func get_Length() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_System_Nullable_i64___get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] bool get_HasLength()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_HasLength
    open func get_HasLength() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_bool__get_HasLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasRange()
// docid: M:Microsoft.Net.Http.Headers.ContentRangeHeaderValue.get_HasRange
    open func get_HasRange() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_ContentRangeHeaderValue_bool__get_HasRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the start of the range.
            

    */
    open var From : Optional<Swift.Int64> {
        get {
            return try! get_From();
        }
    }
    /**
    
            Gets a value that determines if  has been specified.
            

    */
    open var HasLength : Bool {
        get {
            return try! get_HasLength();
        }
    }
    /**
    
            Gets a value that determines if  and  have been specified.
            

    */
    open var HasRange : Bool {
        get {
            return try! get_HasRange();
        }
    }
    /**
    
            Gets the total size of the document.
            

    */
    open var Length : Optional<Swift.Int64> {
        get {
            return try! get_Length();
        }
    }
    /**
    
            Gets the end of the range.
            

    */
    open var To : Optional<Swift.Int64> {
        get {
            return try! get_To();
        }
    }
    /**
    
            Gets or sets the unit in which ranges are specified.
            

    */
    open var Unit : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Unit();
        }
        set(v) {
            return try! set_Unit(value: v);
        }
    }
} // ContentRangeHeaderValue


// type: Microsoft.Net.Http.Headers.CookieHeaderValue
    /**
    
            Represents the HTTP request Cookie header.
            

    */
open class CookieHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_CookieHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_CookieHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The cookie name.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_CookieHeaderValue_ctor_0__1__StringSegment(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The cookie name.
    - Parameter value: The cookie value.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_CookieHeaderValue_ctor_0__2__StringSegment_StringSegment(&__thrown, name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.Net.Http.Headers.CookieHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_CookieHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.CookieHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.CookieHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_bool__TryParse_0__2__StringSegment_outCookieHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.CookieHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of .
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.CookieHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.CookieHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of  using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_CookieHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.CookieHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Name()
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.get_Name
    open func get_Name() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_StringSegment__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.set_Name(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Name(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CookieHeaderValue_void__set_Name_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Value()
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.get_Value
    open func get_Value() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_CookieHeaderValue_StringSegment__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.CookieHeaderValue.set_Value(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Value(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_CookieHeaderValue_void__set_Value_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the cookie name.
            

    */
    open var Name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets or sets the cookie value.
            

    */
    open var Value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // CookieHeaderValue


// type: Microsoft.Net.Http.Headers.EntityTagHeaderValue
    /**
    
            Represents an entity-tag (etag) header value.
            

    */
open class EntityTagHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_EntityTagHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_EntityTagHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of the .
            

    - Parameter tag: A  that contains an .
    */
    public init(tag : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_EntityTagHeaderValue_ctor_0__1__StringSegment(&__thrown, tag.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, bool)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Boolean)
    /**
    
            Initializes a new instance of the .
            

    - Parameter tag: A  that contains an .
    - Parameter isWeak: A value that indicates if this entity-tag header is a weak validator.
    */
    public init(tag : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, isWeak : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_EntityTagHeaderValue_ctor_0__2__StringSegment_bool(&__thrown, tag.get_handle(), Swift.Int32(isWeak ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
    /**
    
            Check against another  for equality.
            This equality check should not be used to determine if two values match under the RFC specifications (https://tools.ietf.org/html/rfc7232#section-2.3.2).
            

    - Parameter obj: The other value to check against for equality.
    - Returns: 
            true if the strength and tag of the two values match,
            false if the other value is null, is not an , or if there is a mismatch of strength or tag between the two values.
            

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Compare(Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.Compare(Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Compares against another  to see if they match under the RFC specifications (https://tools.ietf.org/html/rfc7232#section-2.3.2).
            

    - Parameter other: The other  to compare against.
    - Parameter useStrongComparison: true to use a strong comparison, false to use a weak comparison
    - Returns: 
            true if the  match for the given comparison type,
            false if the other value is null or the comparison failed.
            

    */
    open func Compare(other : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>, useStrongComparison : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__Compare_0__2__EntityTagHeaderValue_bool(&__thrown, self.get_handle(), other?.get_handle() ?? nil, Swift.Int32(useStrongComparison ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Net.Http.Headers.EntityTagHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_EntityTagHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.EntityTagHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__TryParse_0__2__StringSegment_outEntityTagHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let _tmp2_parsedValue = aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.EntityTagHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of .
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.EntityTagHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.EntityTagHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of  using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_EntityTagHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.EntityTagHeaderValue get_Any()
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.get_Any
    open class func get_Any() throws -> aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_EntityTagHeaderValue__get_Any_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Tag()
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.get_Tag
    open func get_Tag() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_StringSegment__get_Tag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsWeak()
// docid: M:Microsoft.Net.Http.Headers.EntityTagHeaderValue.get_IsWeak
    open func get_IsWeak() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_EntityTagHeaderValue_bool__get_IsWeak_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the "any" etag.
            

    */
    public static var Any_ : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue {
        get {
            return try! get_Any();
        }
    }
    /**
    
            Gets a value that determines if the entity-tag header is a weak validator.
            

    */
    open var IsWeak : Bool {
        get {
            return try! get_IsWeak();
        }
    }
    /**
    
            Gets the quoted tag.
            

    */
    open var Tag : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Tag();
        }
    }
} // EntityTagHeaderValue


// type: Microsoft.Net.Http.Headers.HeaderNames
public struct HeaderNames {
    // static field: System.String Accept
    /**
    Gets the Accept HTTP header name.

    */
    public static var Accept : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Accept());
            return __return;
        }
    }
    // static field: System.String AcceptCharset
    /**
    Gets the Accept-Charset HTTP header name.

    */
    public static var AcceptCharset : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AcceptCharset());
            return __return;
        }
    }
    // static field: System.String AcceptEncoding
    /**
    Gets the Accept-Encoding HTTP header name.

    */
    public static var AcceptEncoding : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AcceptEncoding());
            return __return;
        }
    }
    // static field: System.String AcceptLanguage
    /**
    Gets the Accept-Language HTTP header name.

    */
    public static var AcceptLanguage : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AcceptLanguage());
            return __return;
        }
    }
    // static field: System.String AcceptRanges
    /**
    Gets the Accept-Ranges HTTP header name.

    */
    public static var AcceptRanges : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AcceptRanges());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowCredentials
    /**
    Gets the Access-Control-Allow-Credentials HTTP header name.

    */
    public static var AccessControlAllowCredentials : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlAllowCredentials());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowHeaders
    /**
    Gets the Access-Control-Allow-Headers HTTP header name.

    */
    public static var AccessControlAllowHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlAllowHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowMethods
    /**
    Gets the Access-Control-Allow-Methods HTTP header name.

    */
    public static var AccessControlAllowMethods : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlAllowMethods());
            return __return;
        }
    }
    // static field: System.String AccessControlAllowOrigin
    /**
    Gets the Access-Control-Allow-Origin HTTP header name.

    */
    public static var AccessControlAllowOrigin : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlAllowOrigin());
            return __return;
        }
    }
    // static field: System.String AccessControlExposeHeaders
    /**
    Gets the Access-Control-Expose-Headers HTTP header name.

    */
    public static var AccessControlExposeHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlExposeHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlMaxAge
    /**
    Gets the Access-Control-Max-Age HTTP header name.

    */
    public static var AccessControlMaxAge : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlMaxAge());
            return __return;
        }
    }
    // static field: System.String AccessControlRequestHeaders
    /**
    Gets the Access-Control-Request-Headers HTTP header name.

    */
    public static var AccessControlRequestHeaders : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlRequestHeaders());
            return __return;
        }
    }
    // static field: System.String AccessControlRequestMethod
    /**
    Gets the Access-Control-Request-Method HTTP header name.

    */
    public static var AccessControlRequestMethod : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AccessControlRequestMethod());
            return __return;
        }
    }
    // static field: System.String Age
    /**
    Gets the Age HTTP header name.

    */
    public static var Age : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Age());
            return __return;
        }
    }
    // static field: System.String Allow
    /**
    Gets the Allow HTTP header name.

    */
    public static var Allow : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Allow());
            return __return;
        }
    }
    // static field: System.String AltSvc
    /**
    Gets the Alt-Svc HTTP header name.

    */
    public static var AltSvc : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_AltSvc());
            return __return;
        }
    }
    // static field: System.String Authority
    /**
    Gets the :authority HTTP header name.

    */
    public static var Authority : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Authority());
            return __return;
        }
    }
    // static field: System.String Authorization
    /**
    Gets the Authorization HTTP header name.

    */
    public static var Authorization : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Authorization());
            return __return;
        }
    }
    // static field: System.String Baggage
    /**
    Gets the baggage HTTP header name.

    */
    public static var Baggage : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Baggage());
            return __return;
        }
    }
    // static field: System.String CacheControl
    /**
    Gets the Cache-Control HTTP header name.

    */
    public static var CacheControl : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_CacheControl());
            return __return;
        }
    }
    // static field: System.String Connection
    /**
    Gets the Connection HTTP header name.

    */
    public static var Connection : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Connection());
            return __return;
        }
    }
    // static field: System.String ContentDisposition
    /**
    Gets the Content-Disposition HTTP header name.

    */
    public static var ContentDisposition : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentDisposition());
            return __return;
        }
    }
    // static field: System.String ContentEncoding
    /**
    Gets the Content-Encoding HTTP header name.

    */
    public static var ContentEncoding : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentEncoding());
            return __return;
        }
    }
    // static field: System.String ContentLanguage
    /**
    Gets the Content-Language HTTP header name.

    */
    public static var ContentLanguage : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentLanguage());
            return __return;
        }
    }
    // static field: System.String ContentLength
    /**
    Gets the Content-Length HTTP header name.

    */
    public static var ContentLength : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentLength());
            return __return;
        }
    }
    // static field: System.String ContentLocation
    /**
    Gets the Content-Location HTTP header name.

    */
    public static var ContentLocation : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentLocation());
            return __return;
        }
    }
    // static field: System.String ContentMD5
    /**
    Gets the Content-MD5 HTTP header name.

    */
    public static var ContentMD5 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentMD5());
            return __return;
        }
    }
    // static field: System.String ContentRange
    /**
    Gets the Content-Range HTTP header name.

    */
    public static var ContentRange : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentRange());
            return __return;
        }
    }
    // static field: System.String ContentSecurityPolicy
    /**
    Gets the Content-Security-Policy HTTP header name.

    */
    public static var ContentSecurityPolicy : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentSecurityPolicy());
            return __return;
        }
    }
    // static field: System.String ContentSecurityPolicyReportOnly
    /**
    Gets the Content-Security-Policy-Report-Only HTTP header name.

    */
    public static var ContentSecurityPolicyReportOnly : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentSecurityPolicyReportOnly());
            return __return;
        }
    }
    // static field: System.String ContentType
    /**
    Gets the Content-Type HTTP header name.

    */
    public static var ContentType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ContentType());
            return __return;
        }
    }
    // static field: System.String CorrelationContext
    /**
    Gets the Correlation-Context HTTP header name.

    */
    public static var CorrelationContext : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_CorrelationContext());
            return __return;
        }
    }
    // static field: System.String Cookie
    /**
    Gets the Cookie HTTP header name.

    */
    public static var Cookie : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Cookie());
            return __return;
        }
    }
    // static field: System.String Date
    /**
    Gets the Date HTTP header name.

    */
    public static var Date : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Date());
            return __return;
        }
    }
    // static field: System.String DNT
    /**
    Gets the DNT HTTP header name.

    */
    public static var DNT : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_DNT());
            return __return;
        }
    }
    // static field: System.String ETag
    /**
    Gets the ETag HTTP header name.

    */
    public static var ETag : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ETag());
            return __return;
        }
    }
    // static field: System.String Expires
    /**
    Gets the Expires HTTP header name.

    */
    public static var Expires : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Expires());
            return __return;
        }
    }
    // static field: System.String Expect
    /**
    Gets the Expect HTTP header name.

    */
    public static var Expect : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Expect());
            return __return;
        }
    }
    // static field: System.String From
    /**
    Gets the From HTTP header name.

    */
    public static var From : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_From());
            return __return;
        }
    }
    // static field: System.String GrpcAcceptEncoding
    /**
    Gets the Grpc-Accept-Encoding HTTP header name.

    */
    public static var GrpcAcceptEncoding : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_GrpcAcceptEncoding());
            return __return;
        }
    }
    // static field: System.String GrpcEncoding
    /**
    Gets the Grpc-Encoding HTTP header name.

    */
    public static var GrpcEncoding : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_GrpcEncoding());
            return __return;
        }
    }
    // static field: System.String GrpcMessage
    /**
    Gets the Grpc-Message HTTP header name.

    */
    public static var GrpcMessage : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_GrpcMessage());
            return __return;
        }
    }
    // static field: System.String GrpcStatus
    /**
    Gets the Grpc-Status HTTP header name.

    */
    public static var GrpcStatus : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_GrpcStatus());
            return __return;
        }
    }
    // static field: System.String GrpcTimeout
    /**
    Gets the Grpc-Timeout HTTP header name.

    */
    public static var GrpcTimeout : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_GrpcTimeout());
            return __return;
        }
    }
    // static field: System.String Host
    /**
    Gets the Host HTTP header name.

    */
    public static var Host : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Host());
            return __return;
        }
    }
    // static field: System.String KeepAlive
    /**
    Gets the Keep-Alive HTTP header name.

    */
    public static var KeepAlive : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_KeepAlive());
            return __return;
        }
    }
    // static field: System.String IfMatch
    /**
    Gets the If-Match HTTP header name.

    */
    public static var IfMatch : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_IfMatch());
            return __return;
        }
    }
    // static field: System.String IfModifiedSince
    /**
    Gets the If-Modified-Since HTTP header name.

    */
    public static var IfModifiedSince : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_IfModifiedSince());
            return __return;
        }
    }
    // static field: System.String IfNoneMatch
    /**
    Gets the If-None-Match HTTP header name.

    */
    public static var IfNoneMatch : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_IfNoneMatch());
            return __return;
        }
    }
    // static field: System.String IfRange
    /**
    Gets the If-Range HTTP header name.

    */
    public static var IfRange : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_IfRange());
            return __return;
        }
    }
    // static field: System.String IfUnmodifiedSince
    /**
    Gets the If-Unmodified-Since HTTP header name.

    */
    public static var IfUnmodifiedSince : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_IfUnmodifiedSince());
            return __return;
        }
    }
    // static field: System.String LastModified
    /**
    Gets the Last-Modified HTTP header name.

    */
    public static var LastModified : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_LastModified());
            return __return;
        }
    }
    // static field: System.String Link
    /**
    Gets the Link HTTP header name.

    */
    public static var Link : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Link());
            return __return;
        }
    }
    // static field: System.String Location
    /**
    Gets the Location HTTP header name.

    */
    public static var Location : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Location());
            return __return;
        }
    }
    // static field: System.String MaxForwards
    /**
    Gets the Max-Forwards HTTP header name.

    */
    public static var MaxForwards : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_MaxForwards());
            return __return;
        }
    }
    // static field: System.String Method
    /**
    Gets the :method HTTP header name.

    */
    public static var Method : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Method());
            return __return;
        }
    }
    // static field: System.String Origin
    /**
    Gets the Origin HTTP header name.

    */
    public static var Origin : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Origin());
            return __return;
        }
    }
    // static field: System.String Path
    /**
    Gets the :path HTTP header name.

    */
    public static var Path : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Path());
            return __return;
        }
    }
    // static field: System.String Pragma
    /**
    Gets the Pragma HTTP header name.

    */
    public static var Pragma : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Pragma());
            return __return;
        }
    }
    // static field: System.String ProxyAuthenticate
    /**
    Gets the Proxy-Authenticate HTTP header name.

    */
    public static var ProxyAuthenticate : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ProxyAuthenticate());
            return __return;
        }
    }
    // static field: System.String ProxyAuthorization
    /**
    Gets the Proxy-Authorization HTTP header name.

    */
    public static var ProxyAuthorization : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ProxyAuthorization());
            return __return;
        }
    }
    // static field: System.String ProxyConnection
    /**
    Gets the Proxy-Connection HTTP header name.

    */
    public static var ProxyConnection : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_ProxyConnection());
            return __return;
        }
    }
    // static field: System.String Range
    /**
    Gets the Range HTTP header name.

    */
    public static var Range : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Range());
            return __return;
        }
    }
    // static field: System.String Referer
    /**
    Gets the Referer HTTP header name.

    */
    public static var Referer : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Referer());
            return __return;
        }
    }
    // static field: System.String RetryAfter
    /**
    Gets the Retry-After HTTP header name.

    */
    public static var RetryAfter : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_RetryAfter());
            return __return;
        }
    }
    // static field: System.String RequestId
    /**
    Gets the Request-Id HTTP header name.

    */
    public static var RequestId : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_RequestId());
            return __return;
        }
    }
    // static field: System.String Scheme
    /**
    Gets the :scheme HTTP header name.

    */
    public static var Scheme : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Scheme());
            return __return;
        }
    }
    // static field: System.String SecWebSocketAccept
    /**
    Gets the Sec-WebSocket-Accept HTTP header name.

    */
    public static var SecWebSocketAccept : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SecWebSocketAccept());
            return __return;
        }
    }
    // static field: System.String SecWebSocketKey
    /**
    Gets the Sec-WebSocket-Key HTTP header name.

    */
    public static var SecWebSocketKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SecWebSocketKey());
            return __return;
        }
    }
    // static field: System.String SecWebSocketProtocol
    /**
    Gets the Sec-WebSocket-Protocol HTTP header name.

    */
    public static var SecWebSocketProtocol : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SecWebSocketProtocol());
            return __return;
        }
    }
    // static field: System.String SecWebSocketVersion
    /**
    Gets the Sec-WebSocket-Version HTTP header name.

    */
    public static var SecWebSocketVersion : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SecWebSocketVersion());
            return __return;
        }
    }
    // static field: System.String SecWebSocketExtensions
    /**
    Gets the Sec-WebSocket-Extensions HTTP header name.

    */
    public static var SecWebSocketExtensions : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SecWebSocketExtensions());
            return __return;
        }
    }
    // static field: System.String Server
    /**
    Gets the Server HTTP header name.

    */
    public static var Server : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Server());
            return __return;
        }
    }
    // static field: System.String SetCookie
    /**
    Gets the Set-Cookie HTTP header name.

    */
    public static var SetCookie : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_SetCookie());
            return __return;
        }
    }
    // static field: System.String Status
    /**
    Gets the :status HTTP header name.

    */
    public static var Status : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Status());
            return __return;
        }
    }
    // static field: System.String StrictTransportSecurity
    /**
    Gets the Strict-Transport-Security HTTP header name.

    */
    public static var StrictTransportSecurity : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_StrictTransportSecurity());
            return __return;
        }
    }
    // static field: System.String TE
    /**
    Gets the TE HTTP header name.

    */
    public static var TE : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_TE());
            return __return;
        }
    }
    // static field: System.String Trailer
    /**
    Gets the Trailer HTTP header name.

    */
    public static var Trailer : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Trailer());
            return __return;
        }
    }
    // static field: System.String TransferEncoding
    /**
    Gets the Transfer-Encoding HTTP header name.

    */
    public static var TransferEncoding : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_TransferEncoding());
            return __return;
        }
    }
    // static field: System.String Translate
    /**
    Gets the Translate HTTP header name.

    */
    public static var Translate : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Translate());
            return __return;
        }
    }
    // static field: System.String TraceParent
    /**
    Gets the traceparent HTTP header name.

    */
    public static var TraceParent : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_TraceParent());
            return __return;
        }
    }
    // static field: System.String TraceState
    /**
    Gets the tracestate HTTP header name.

    */
    public static var TraceState : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_TraceState());
            return __return;
        }
    }
    // static field: System.String Upgrade
    /**
    Gets the Upgrade HTTP header name.

    */
    public static var Upgrade : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Upgrade());
            return __return;
        }
    }
    // static field: System.String UpgradeInsecureRequests
    /**
    Gets the Upgrade-Insecure-Requests HTTP header name.

    */
    public static var UpgradeInsecureRequests : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_UpgradeInsecureRequests());
            return __return;
        }
    }
    // static field: System.String UserAgent
    /**
    Gets the User-Agent HTTP header name.

    */
    public static var UserAgent : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_UserAgent());
            return __return;
        }
    }
    // static field: System.String Vary
    /**
    Gets the Vary HTTP header name.

    */
    public static var Vary : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Vary());
            return __return;
        }
    }
    // static field: System.String Via
    /**
    Gets the Via HTTP header name.

    */
    public static var Via : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Via());
            return __return;
        }
    }
    // static field: System.String Warning
    /**
    Gets the Warning HTTP header name.

    */
    public static var Warning : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_Warning());
            return __return;
        }
    }
    // static field: System.String WebSocketSubProtocols
    /**
    Gets the Sec-WebSocket-Protocol HTTP header name.

    */
    public static var WebSocketSubProtocols : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_WebSocketSubProtocols());
            return __return;
        }
    }
    // static field: System.String WWWAuthenticate
    /**
    Gets the WWW-Authenticate HTTP header name.

    */
    public static var WWWAuthenticate : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_WWWAuthenticate());
            return __return;
        }
    }
    // static field: System.String XContentTypeOptions
    /**
    Gets the X-Content-Type-Options HTTP header name.

    */
    public static var XContentTypeOptions : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XContentTypeOptions());
            return __return;
        }
    }
    // static field: System.String XFrameOptions
    /**
    Gets the X-Frame-Options HTTP header name.

    */
    public static var XFrameOptions : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XFrameOptions());
            return __return;
        }
    }
    // static field: System.String XPoweredBy
    /**
    Gets the X-Powered-By HTTP header name.

    */
    public static var XPoweredBy : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XPoweredBy());
            return __return;
        }
    }
    // static field: System.String XRequestedWith
    /**
    Gets the X-Requested-With HTTP header name.

    */
    public static var XRequestedWith : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XRequestedWith());
            return __return;
        }
    }
    // static field: System.String XUACompatible
    /**
    Gets the X-UA-Compatible HTTP header name.

    */
    public static var XUACompatible : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XUACompatible());
            return __return;
        }
    }
    // static field: System.String XXSSProtection
    /**
    Gets the X-XSS-Protection HTTP header name.

    */
    public static var XXSSProtection : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_Net_Http_Headers_HeaderNames_get_XXSSProtection());
            return __return;
        }
    }
} // HeaderNames


// type: Microsoft.Net.Http.Headers.HeaderQuality
public struct HeaderQuality {
    // static field: System.Double Match
    /**
    
            Quality factor to indicate a perfect match.
            

    */
    public static var Match : Swift.Double {
        get {
        let __return = Microsoft_Net_Http_Headers_HeaderQuality_get_Match();
            return __return;
        }
    }
    // static field: System.Double NoMatch
    /**
    
            Quality factor to indicate no match.
            

    */
    public static var NoMatch : Swift.Double {
        get {
        let __return = Microsoft_Net_Http_Headers_HeaderQuality_get_NoMatch();
            return __return;
        }
    }
} // HeaderQuality


// type: Microsoft.Net.Http.Headers.HeaderUtilities
public struct HeaderUtilities {
// TODO COPE (parm byref nullable of): bool TryParseSeconds(Microsoft.Extensions.Primitives.StringValues, System.String, ref System.Nullable<System.TimeSpan>)
    // bool ContainsCacheDirective(Microsoft.Extensions.Primitives.StringValues, System.String)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.ContainsCacheDirective(Microsoft.Extensions.Primitives.StringValues,System.String)
    /**
    
            Check if a target directive exists among the set of given cache control directives.
            

    - Parameter cacheControlDirectives: 
            The  containing the set of cache control directives.
            
    - Parameter targetDirectives: 
            The target cache control directives to look for.
            
    - Returns: 
             if  is contained in ;
            otherwise, .
            

    */
    public static func ContainsCacheDirective(cacheControlDirectives : aspnetcore.Microsoft.Extensions.Primitives.StringValues, targetDirectives : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_bool__ContainsCacheDirective_0__2__StringValues_String(&__thrown, cacheControlDirectives.get_handle(), targetDirectives.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseNonNegativeInt32(Microsoft.Extensions.Primitives.StringSegment, ref System.Int32)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt32(Microsoft.Extensions.Primitives.StringSegment,System.Int32@)
    /**
    
            Try to convert a string representation of a positive number to its 64-bit signed integer equivalent.
            A return value indicates whether the conversion succeeded or failed.
            

    - Parameter value: 
            A string containing a number to convert.
            
    - Parameter result: 
            When this method returns, contains the 64-bit signed integer value equivalent of the number contained
            in the string, if the conversion succeeded, or zero if the conversion failed. The conversion fails if
            the string is null or String.Empty, is not of the correct format, is negative, or represents a number
            greater than Int64.MaxValue. This parameter is passed uninitialized; any value originally supplied in
            result will be overwritten.
            
    - Returns:  if parsing succeeded; otherwise, .

    */
    public static func TryParseNonNegativeInt32(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, result : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_bool__TryParseNonNegativeInt32_0__2__StringSegment_outi32(&__thrown, value.get_handle(), &_tmp_out_result);
        let _tmp2_result = _tmp_out_result;
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseNonNegativeInt64(Microsoft.Extensions.Primitives.StringSegment, ref System.Int64)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt64(Microsoft.Extensions.Primitives.StringSegment,System.Int64@)
    /**
    
            Try to convert a  representation of a positive number to its 64-bit signed
            integer equivalent. A return value indicates whether the conversion succeeded or failed.
            

    - Parameter value: 
            A  containing a number to convert.
            
    - Parameter result: 
            When this method returns, contains the 64-bit signed integer value equivalent of the number contained
            in the string, if the conversion succeeded, or zero if the conversion failed. The conversion fails if
            the  is null or String.Empty, is not of the correct format, is negative, or
            represents a number greater than Int64.MaxValue. This parameter is passed uninitialized; any value
            originally supplied in result will be overwritten.
            
    - Returns:  if parsing succeeded; otherwise, .

    */
    public static func TryParseNonNegativeInt64(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, result : inout Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_bool__TryParseNonNegativeInt64_0__2__StringSegment_outi64(&__thrown, value.get_handle(), &_tmp_out_result);
        let _tmp2_result = _tmp_out_result;
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String FormatNonNegativeInt64(System.Int64)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatNonNegativeInt64(System.Int64)
    /**
    
            Converts the non-negative 64-bit numeric value to its equivalent string representation.
            

    - Parameter value: 
            The number to convert.
            
    - Returns: 
            The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9 with no leading zeroes.
            

    */
    public static func FormatNonNegativeInt64(value : Swift.Int64) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_String__FormatNonNegativeInt64_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryParseDate(Microsoft.Extensions.Primitives.StringSegment, ref System.DateTimeOffset)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseDate(Microsoft.Extensions.Primitives.StringSegment,System.DateTimeOffset@)
    /**
    
            Attempts to parse the specified  as a  value.
             

    - Parameter input: The input value.
    - Parameter result: The parsed value.
    - Returns: 
              if  can be parsed as a date, otherwise .
             

    */
    public static func TryParseDate(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, result : inout dotnet.System.DateTimeOffset) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_bool__TryParseDate_0__2__StringSegment_outDateTimeOffset(&__thrown, input.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.DateTimeOffset(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String FormatDate(System.DateTimeOffset)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate(System.DateTimeOffset)
    /**
    
            Formats the  using the RFC1123 format specifier.
            

    - Parameter dateTime: The date to format.
    - Returns: The formatted date.

    */
    public static func FormatDate(dateTime : dotnet.System.DateTimeOffset) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_String__FormatDate_0__1__DateTimeOffset(&__thrown, dateTime.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatDate(System.DateTimeOffset, bool)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate(System.DateTimeOffset,System.Boolean)
    /**
    
            Formats the  using the RFC1123 format specifier and optionally quotes it.
            

    - Parameter dateTime: The date to format.
    - Parameter quoted: Determines if the formatted date should be quoted.
    - Returns: The formatted date.

    */
    public static func FormatDate(dateTime : dotnet.System.DateTimeOffset, quoted : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_String__FormatDate_0__2__DateTimeOffset_bool(&__thrown, dateTime.get_handle(), Swift.Int32(quoted ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment RemoveQuotes(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Removes quotes from the specified  if quoted.
            

    - Parameter input: The input to remove quotes from.
    - Returns: The value without quotes.

    */
    public static func RemoveQuotes(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_StringSegment__RemoveQuotes_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // bool IsQuoted(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.IsQuoted(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Determines if the specified  is quoted.
            

    - Parameter input: The value to inspect.
    - Returns:  if the value is quoted, otherwise .

    */
    public static func IsQuoted(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_bool__IsQuoted_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment UnescapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.UnescapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Given a quoted-string as defined by the RFC specification,
            removes quotes and unescapes backslashes and quotes. This assumes that the input is a valid quoted-string.
            

    - Parameter input: The quoted-string to be unescaped.
    - Returns: An unescaped version of the quoted-string.

    */
    public static func UnescapeAsQuotedString(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_StringSegment__UnescapeAsQuotedString_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment EscapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.HeaderUtilities.EscapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Escapes a  as a quoted-string, which is defined by
            the RFC specification.
            

    - Parameter input: The input to be escaped.
    - Returns: An escaped version of the quoted-string.

    */
    public static func EscapeAsQuotedString(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_HeaderUtilities_StringSegment__EscapeAsQuotedString_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
} // HeaderUtilities


// type: Microsoft.Net.Http.Headers.MediaTypeHeaderValue
    /**
    
            Representation of the media type header. See .
            

    */
open class MediaTypeHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_MediaTypeHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a  instance.
            

    - Parameter mediaType: A  representation of a media type.
            The text provided must be a single media type without parameters. 
    */
    public init(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_ctor_0__1__StringSegment(&__thrown, mediaType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, System.Double)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Double)
    /**
    
            Initializes a  instance.
            

    - Parameter mediaType: A  representation of a media type.
            The text provided must be a single media type without parameters. 
    - Parameter quality: The  with the quality of the media type.
    */
    public init(mediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_ctor_0__2__StringSegment_f64(&__thrown, mediaType.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsSubsetOf(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.IsSubsetOf(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Gets a value indicating whether this  is a subset of
            . A "subset" is defined as the same or a more specific media type
            according to the precedence described in https://www.ietf.org/rfc/rfc2068.txt section 14.1, Accept.
            

    - Parameter otherMediaType: The  to compare.
    - Returns: 
            A value indicating whether this  is a subset of
            .
            

    */
    open func IsSubsetOf(otherMediaType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__IsSubsetOf_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), otherMediaType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Net.Http.Headers.MediaTypeHeaderValue Copy()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.Copy
    /**
    
            Performs a deep copy of this object and all of it's NameValueHeaderValue sub components,
            while avoiding the cost of re-validating the components.
            

    - Returns: A deep copy.

    */
    open func Copy() throws -> aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_MediaTypeHeaderValue__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl : __return);
        }
    }
    // Microsoft.Net.Http.Headers.MediaTypeHeaderValue CopyAsReadOnly()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.CopyAsReadOnly
    /**
    
            Performs a deep copy of this object and all of it's NameValueHeaderValue sub components,
            while avoiding the cost of re-validating the components. This copy is read-only.
            

    - Returns: A deep, read-only, copy.

    */
    open func CopyAsReadOnly() throws -> aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_MediaTypeHeaderValue__CopyAsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl : __return);
        }
    }
    // bool MatchesMediaType(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.MatchesMediaType(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Gets a value indicating whether  is a subset of
            this  in terms of type/subType. A "subset" is defined as the same or a more specific media type
            according to the precedence described in https://www.ietf.org/rfc/rfc2068.txt section 14.1, Accept.
            

    - Parameter otherMediaType: The  to compare.
    - Returns: 
            A value indicating whether  is a subset of
            this .
            

    */
    open func MatchesMediaType(otherMediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__MatchesMediaType_0__1__StringSegment(&__thrown, self.get_handle(), otherMediaType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.MediaTypeHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Takes a media type and parses it into the  and its associated parameters.
            

    - Parameter input: The  with the media type.
    - Returns: The parsed .

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_MediaTypeHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.MediaTypeHeaderValue@)
    /**
    
            Takes a media type, which can include parameters, and parses it into the  and its associated parameters.
            

    - Parameter input: The  with the media type. The media type constructed here must not have an y
    - Parameter parsedValue: The parsed 
    - Returns: True if the value was successfully parsed.

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__TryParse_0__2__StringSegment_outMediaTypeHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Takes an  of  and parses it into the  and its associated parameters.
            

    - Parameter inputs: A list of media types
    - Returns: The parsed .

    */
    open class func ParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Takes an  of  and parses it into the  and its associated parameters.
            Throws if there is invalid data in a string.
            

    - Parameter inputs: A list of media types
    - Returns: The parsed .

    */
    open class func ParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue}@)
    /**
    
            Takes an  of  and parses it into the  and its associated parameters.
            

    - Parameter inputs: A list of media types
    - Parameter parsedValues: The parsed .
    - Returns: True if the value was successfully parsed.

    */
    open class func TryParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.MediaTypeHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.MediaTypeHeaderValue}@)
    /**
    
            Takes an  of  and parses it into the  and its associated parameters.
            

    - Parameter inputs: A list of media types
    - Parameter parsedValues: The parsed .
    - Returns: True if the value was successfully parsed.

    */
    open class func TryParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_MediaTypeHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Charset()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Charset
    open func get_Charset() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_Charset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Charset(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.set_Charset(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Charset(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_MediaTypeHeaderValue_void__set_Charset_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.Text.Encoding)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.set_Encoding(System.Text.Encoding)
    open func set_Encoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_MediaTypeHeaderValue_void__set_Encoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Boundary()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Boundary
    open func get_Boundary() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_Boundary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Boundary(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.set_Boundary(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Boundary(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_MediaTypeHeaderValue_void__set_Boundary_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue> get_Parameters()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> get_Quality()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Quality
    open func get_Quality() throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_System_Nullable_f64___get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_Quality(System.Nullable<System.Double>)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.set_Quality(System.Nullable{System.Double})
    open func set_Quality(value : Optional<Swift.Double>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_MediaTypeHeaderValue_void__set_Quality_0__1__System_Nullable_f64_(&__thrown, self.get_handle(), (value != nil) ? System_Double_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_MediaType()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_MediaType
    open func get_MediaType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MediaType(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.set_MediaType(Microsoft.Extensions.Primitives.StringSegment)
    open func set_MediaType(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_MediaTypeHeaderValue_void__set_MediaType_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Type()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Type
    open func get_Type() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_SubType()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_SubType
    open func get_SubType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_SubType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_SubTypeWithoutSuffix()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_SubTypeWithoutSuffix
    open func get_SubTypeWithoutSuffix() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_SubTypeWithoutSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Suffix()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Suffix
    open func get_Suffix() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_StringSegment__get_Suffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment> get_Facets()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_Facets
    open func get_Facets() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Primitives_StringSegment___get_Facets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_MatchesAllTypes()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_MatchesAllTypes
    open func get_MatchesAllTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__get_MatchesAllTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_MatchesAllSubTypes()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_MatchesAllSubTypes
    open func get_MatchesAllSubTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__get_MatchesAllSubTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_MatchesAllSubTypesWithoutSuffix()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_MatchesAllSubTypesWithoutSuffix
    open func get_MatchesAllSubTypesWithoutSuffix() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__get_MatchesAllSubTypesWithoutSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValue.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValue_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets or sets the value of the boundary parameter. Returns 
            if there is no boundary.
            

    */
    open var Boundary : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Boundary();
        }
        set(v) {
            return try! set_Boundary(value: v);
        }
    }
    /**
    
            Gets or sets the value of the charset parameter. Returns 
            if there is no charset.
            

    */
    open var Charset : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Charset();
        }
        set(v) {
            return try! set_Charset(value: v);
        }
    }
    /**
    
            Gets or sets the value of the Encoding parameter. Setting the Encoding will set
            the  to .
            

    */
    open var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    /**
    
            Get a  of facets of the . Facets are a
            period separated list of StringSegments in the .
            See The RFC documentation on facets.
            

    */
    open var Facets : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_Facets();
        }
    }
    /**
    
            Gets whether the  is readonly.
            

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    
            Gets whether this  matches all subtypes.
            

    */
    open var MatchesAllSubTypes : Bool {
        get {
            return try! get_MatchesAllSubTypes();
        }
    }
    /**
    
            Gets whether this  matches all subtypes, ignoring any structured syntax suffix.
            

    */
    open var MatchesAllSubTypesWithoutSuffix : Bool {
        get {
            return try! get_MatchesAllSubTypesWithoutSuffix();
        }
    }
    /**
    
            Gets whether this  matches all types.
            

    */
    open var MatchesAllTypes : Bool {
        get {
            return try! get_MatchesAllTypes();
        }
    }
    /**
    
            Gets or sets the value of the media type. Returns 
            if there is no media type.
            

    */
    open var MediaType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v);
        }
    }
    /**
    
            Gets or sets the media type's parameters. Returns an empty 
            if there are no parameters.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets or sets the value of the quality parameter. Returns null
            if there is no quality.
            

    */
    open var Quality : Optional<Swift.Double> {
        get {
            return try! get_Quality();
        }
        set(v) {
            return try! set_Quality(value: v!);
        }
    }
    /**
    
            Gets the subtype of the .
            

    */
    open var SubType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_SubType();
        }
    }
    /**
    
            Gets subtype of the , excluding any structured syntax suffix. Returns 
            if there is no subtype without suffix.
            

    */
    open var SubTypeWithoutSuffix : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_SubTypeWithoutSuffix();
        }
    }
    /**
    
            Gets the structured syntax suffix of the  if it has one.
            See The RFC documentation on structured syntaxes.
            

    */
    open var Suffix : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Suffix();
        }
    }
    /**
    
            Gets the type of the .
            

    */
    open var Type_ : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Type();
        }
    }
} // MediaTypeHeaderValue


// type: Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer
    /**
    
            Implementation of  that can compare accept media type header fields
            based on their quality values (a.k.a q-values).
            

    */
open class MediaTypeHeaderValueComparer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_MediaTypeHeaderValueComparer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_MediaTypeHeaderValueComparer_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Int32 Compare(Microsoft.Net.Http.Headers.MediaTypeHeaderValue, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    */
    open /* method final */ func Compare(mediaType1 : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>, mediaType2 : Optional<aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValueComparer_i32__Compare_0__2__MediaTypeHeaderValue_MediaTypeHeaderValue(&__thrown, self.get_handle(), mediaType1?.get_handle() ?? nil, mediaType2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer get_QualityComparer()
// docid: M:Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer.get_QualityComparer
    open class func get_QualityComparer() throws -> aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_MediaTypeHeaderValueComparer_MediaTypeHeaderValueComparer__get_QualityComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer(hndl : __return);
        }
    }
    /**
    
            Gets the  instance.
            

    */
    public static var QualityComparer : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer {
        get {
            return try! get_QualityComparer();
        }
    }
} // MediaTypeHeaderValueComparer


// type: Microsoft.Net.Http.Headers.NameValueHeaderValue
    /**
    
            Represents a name/value pair used in various headers as defined in RFC 2616.
            

    */
open class NameValueHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_NameValueHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_NameValueHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The header name.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_NameValueHeaderValue_ctor_0__1__StringSegment(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The header name.
    - Parameter value: The header value.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_NameValueHeaderValue_ctor_0__2__StringSegment_StringSegment(&__thrown, name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Net.Http.Headers.NameValueHeaderValue Copy()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.Copy
    /**
    
            Provides a copy of this object without the cost of re-validating the values.
            

    - Returns: A copy.

    */
    open func Copy() throws -> aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_NameValueHeaderValue__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue(hndl : __return);
        }
    }
    // Microsoft.Net.Http.Headers.NameValueHeaderValue CopyAsReadOnly()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.CopyAsReadOnly
    /**
    
            Provides a copy of this instance while making it immutable.
            

    - Returns: The readonly .

    */
    open func CopyAsReadOnly() throws -> aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_NameValueHeaderValue__CopyAsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment GetUnescapedValue()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.GetUnescapedValue
    /**
    
            If the value is a quoted-string as defined by the RFC specification,
            removes quotes and unescapes backslashes and quotes.
            

    - Returns: An unescaped version of .

    */
    open func GetUnescapedValue() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_StringSegment__GetUnescapedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // void SetAndEscapeValue(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.SetAndEscapeValue(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Sets  after it has been quoted as defined by the RFC specification.
            

    - Parameter value: 
    */
    open func SetAndEscapeValue(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_NameValueHeaderValue_void__SetAndEscapeValue_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Net.Http.Headers.NameValueHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_NameValueHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.NameValueHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.NameValueHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_bool__TryParse_0__2__StringSegment_outNameValueHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (input?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values using string parsing rules.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseStrictList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (input?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.NameValueHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of .
            

    - Parameter input: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue_(&__thrown, (input?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.NameValueHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of  using string parsing rules.
            

    - Parameter input: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseStrictList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue_(&__thrown, (input?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.Net.Http.Headers.NameValueHeaderValue Find(System.Collections.Generic.IList<Microsoft.Net.Http.Headers.NameValueHeaderValue>, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.Find(System.Collections.Generic.IList{Microsoft.Net.Http.Headers.NameValueHeaderValue},Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Finds a  with the specified .
            

    - Parameter values: The collection to search.
    - Parameter name: The name to find.
    - Returns: The  if found, otherwise .

    */
    open class func Find(values : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue>>, name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_NameValueHeaderValue__Find_0__2__System_Collections_Generic_IList_Microsoft_Net_Http_Headers_NameValueHeaderValue__StringSegment(&__thrown, (values?.get_handle()), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.NameValueHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Name()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.get_Name
    open func get_Name() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_StringSegment__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Value()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.get_Value
    open func get_Value() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_StringSegment__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.set_Value(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Value(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_NameValueHeaderValue_void__set_Value_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.Net.Http.Headers.NameValueHeaderValue.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_NameValueHeaderValue_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a value that determines if this header is read only.
            

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    
            Gets the header name.
            

    */
    open var Name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets or sets the header value.
            

    */
    open var Value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // NameValueHeaderValue


// type: Microsoft.Net.Http.Headers.RangeConditionHeaderValue
    /**
    
            Represents an If-Range header value which can either be a date/time or an entity-tag value.
            

    */
open class RangeConditionHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_RangeConditionHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.DateTimeOffset)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.DateTimeOffset)
    /**
    
            Initializes a new instance of .
            

    - Parameter lastModified: A date value used to initialize the new instance.
    */
    public init(lastModified : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__DateTimeOffset(&__thrown, lastModified.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.#ctor(Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Initializes a new instance of .
            

    - Parameter entityTag: An entity tag uniquely representing the requested resource.
    */
    public init(entityTag : aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__EntityTagHeaderValue(&__thrown, entityTag.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter entityTag: An entity tag uniquely representing the requested resource.
    */
    public init(entityTag : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_ctor_0__1__String(&__thrown, entityTag?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.RangeConditionHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_RangeConditionHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.RangeConditionHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.RangeConditionHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_bool__TryParse_0__2__StringSegment_outRangeConditionHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.RangeConditionHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_LastModified()
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.get_LastModified
    open func get_LastModified() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_System_Nullable_System_DateTimeOffset___get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.EntityTagHeaderValue get_EntityTag()
// docid: M:Microsoft.Net.Http.Headers.RangeConditionHeaderValue.get_EntityTag
    open func get_EntityTag() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeConditionHeaderValue_EntityTagHeaderValue__get_EntityTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the  from header.
            

    */
    open var EntityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> {
        get {
            return try! get_EntityTag();
        }
    }
    /**
    
            Gets the LastModified date from header.
            

    */
    open var LastModified : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_LastModified();
        }
    }
} // RangeConditionHeaderValue


// type: Microsoft.Net.Http.Headers.RangeHeaderValue
    /**
    
            Represents a Range header value.
            
            The  class provides support for the Range header as defined in
            RFC 2616.
            
            

    */
open class RangeHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_RangeHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_RangeHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeHeaderValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Nullable<System.Int64>, System.Nullable<System.Int64>)
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})
    /**
    
            Initializes a new instance of .
            

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    public init(from : Optional<Swift.Int64>, to : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeHeaderValue_ctor_0__2__System_Nullable_i64__System_Nullable_i64_(&__thrown, (from != nil) ? System_Int64_box(from!) : nil, (to != nil) ? System_Int64_box(to!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.RangeHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_RangeHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.RangeHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.RangeHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_bool__TryParse_0__2__StringSegment_outRangeHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let _tmp2_parsedValue = aspnetcore.Microsoft.Net.Http.Headers.RangeHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Unit()
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.get_Unit
    open func get_Unit() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_StringSegment__get_Unit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Unit(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.set_Unit(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Unit(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_RangeHeaderValue_void__set_Unit_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.Net.Http.Headers.RangeItemHeaderValue> get_Ranges()
// docid: M:Microsoft.Net.Http.Headers.RangeHeaderValue.get_Ranges
    open func get_Ranges() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Net.Http.Headers.RangeItemHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeHeaderValue_System_Collections_Generic_ICollection_Microsoft_Net_Http_Headers_RangeItemHeaderValue___get_Ranges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    /**
    
            Gets the ranges specified in the header.
            

    */
    open var Ranges : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.Net.Http.Headers.RangeItemHeaderValue> {
        get {
            return try! get_Ranges();
        }
    }
    /**
    
            Gets or sets the unit from the header.
            

    */
    open var Unit : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Unit();
        }
        set(v) {
            return try! set_Unit(value: v);
        }
    }
} // RangeHeaderValue


// type: Microsoft.Net.Http.Headers.RangeItemHeaderValue
    /**
    
            Represents a byte range in a Range header value.
            
            The  class provides support for a byte range in a Range as defined
            in RFC 2616.
            
            

    */
open class RangeItemHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_RangeItemHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_RangeItemHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Nullable<System.Int64>, System.Nullable<System.Int64>)
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    public init(from : Optional<Swift.Int64>, to : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_RangeItemHeaderValue_ctor_0__2__System_Nullable_i64__System_Nullable_i64_(&__thrown, (from != nil) ? System_Int64_box(from!) : nil, (to != nil) ? System_Int64_box(to!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeItemHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeItemHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeItemHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_From()
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.get_From
    open func get_From() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeItemHeaderValue_System_Nullable_i64___get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_To()
// docid: M:Microsoft.Net.Http.Headers.RangeItemHeaderValue.get_To
    open func get_To() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_RangeItemHeaderValue_System_Nullable_i64___get_To_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    /**
    
            Gets the position at which to start sending data.
            

    */
    open var From : Optional<Swift.Int64> {
        get {
            return try! get_From();
        }
    }
    /**
    
            Gets the position at which to stop sending data.
            

    */
    open var To : Optional<Swift.Int64> {
        get {
            return try! get_To();
        }
    }
} // RangeItemHeaderValue


// type: Microsoft.Net.Http.Headers.SameSiteMode
    /**
    
            Indicates if the client should include a cookie on "same-site" or "cross-site" requests.
            RFC Draft: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.1
            

    */
public struct SameSiteMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_SameSiteMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Net.Http.Headers.SameSiteMode Unspecified
    /**
    No SameSite field will be set, the client should follow its default cookie policy.

    */
    public static var Unspecified : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode(val: Microsoft_Net_Http_Headers_SameSiteMode_get_Unspecified());
            return __return;
        }
    }
    // static field: Microsoft.Net.Http.Headers.SameSiteMode None
    /**
    Indicates the client should disable same-site restrictions.

    */
    public static var None : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode(val: Microsoft_Net_Http_Headers_SameSiteMode_get_None());
            return __return;
        }
    }
    // static field: Microsoft.Net.Http.Headers.SameSiteMode Lax
    /**
    Indicates the client should send the cookie with "same-site" requests, and with "cross-site" top-level navigations.

    */
    public static var Lax : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode(val: Microsoft_Net_Http_Headers_SameSiteMode_get_Lax());
            return __return;
        }
    }
    // static field: Microsoft.Net.Http.Headers.SameSiteMode Strict
    /**
    Indicates the client should only send the cookie with "same-site" requests.

    */
    public static var Strict : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode(val: Microsoft_Net_Http_Headers_SameSiteMode_get_Strict());
            return __return;
        }
    }
} // SameSiteMode


// type: Microsoft.Net.Http.Headers.SetCookieHeaderValue
    /**
    
            Represents the Set-Cookie header.
            
            See http://tools.ietf.org/html/rfc6265 for the Set-Cookie header specification.
            
            

    */
open class SetCookieHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_SetCookieHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_SetCookieHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The cookie name.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_SetCookieHeaderValue_ctor_0__1__StringSegment(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The cookie name.
    - Parameter value: The cookie value.
    */
    public init(name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_SetCookieHeaderValue_ctor_0__2__StringSegment_StringSegment(&__thrown, name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void AppendToStringBuilder(System.Text.StringBuilder)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.AppendToStringBuilder(System.Text.StringBuilder)
    /**
    
            Append string representation of this  to given
            .
            

    - Parameter builder: 
            The  to receive the string representation of this
            .
            
    */
    open func AppendToStringBuilder(builder : dotnet.System.Text.StringBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__AppendToStringBuilder_0__1__StringBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Net.Http.Headers.SetCookieHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses  as a  value.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_SetCookieHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.SetCookieHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.SetCookieHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout Optional<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = (parsedValue != nil) ? (parsedValue!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__TryParse_0__2__StringSegment_outSetCookieHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let __h__tmp2_parsedValue = _tmp_out_parsedValue;
        let _tmp2_parsedValue = (__h__tmp2_parsedValue != nil) ? aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue(hndl: __h__tmp2_parsedValue!) : nil;
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (inputs?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.SetCookieHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of .
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.SetCookieHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.SetCookieHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of  using string parsing rules.
            

    - Parameter inputs: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseStrictList(inputs : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_SetCookieHeaderValue_(&__thrown, (inputs?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.SetCookieHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Name()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Name
    open func get_Name() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_StringSegment__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Name(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Name(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Name_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Value()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Value
    open func get_Value() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_StringSegment__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Value(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Value(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Value_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Expires()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Expires
    open func get_Expires() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_System_Nullable_System_DateTimeOffset___get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expires(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Expires(System.Nullable{System.DateTimeOffset})
    open func set_Expires(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Expires_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxAge()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_MaxAge
    open func get_MaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_System_Nullable_System_TimeSpan___get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_MaxAge(System.Nullable{System.TimeSpan})
    open func set_MaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_MaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Domain()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Domain
    open func get_Domain() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_StringSegment__get_Domain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Domain(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Domain(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Domain(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Domain_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Path()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Path
    open func get_Path() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_StringSegment__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Path(Microsoft.Extensions.Primitives.StringSegment)
    open func set_Path(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Path_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Secure()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Secure
    open func get_Secure() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__get_Secure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Secure(bool)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_Secure(System.Boolean)
    open func set_Secure(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_Secure_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.SameSiteMode get_SameSite()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_SameSite
    open func get_SameSite() throws -> aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_SameSiteMode__get_SameSite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode(val: __return);
        }
    }
    // [IsSpecialName] void set_SameSite(Microsoft.Net.Http.Headers.SameSiteMode)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_SameSite(Microsoft.Net.Http.Headers.SameSiteMode)
    open func set_SameSite(value : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_SameSite_0__1__SameSiteMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HttpOnly()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_HttpOnly
    open func get_HttpOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_bool__get_HttpOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HttpOnly(bool)
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.set_HttpOnly(System.Boolean)
    open func set_HttpOnly(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Net_Http_Headers_SetCookieHeaderValue_void__set_HttpOnly_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment> get_Extensions()
// docid: M:Microsoft.Net.Http.Headers.SetCookieHeaderValue.get_Extensions
    open func get_Extensions() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_SetCookieHeaderValue_System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment___get_Extensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets or sets a value for the Domain cookie attribute.
            
            The Domain attribute specifies those hosts to which the cookie will
            be sent.
            
            

    */
    open var Domain : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Domain();
        }
        set(v) {
            return try! set_Domain(value: v);
        }
    }
    /**
    
            Gets or sets a value for the Expires cookie attribute.
            
            The Expires attribute indicates the maximum lifetime of the cookie,
            represented as the date and time at which the cookie expires.
            
            

    */
    open var Expires : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Expires();
        }
        set(v) {
            return try! set_Expires(value: v!);
        }
    }
    /**
    
            Gets a collection of additional values to append to the cookie.
            

    */
    open var Extensions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment> {
        get {
            return try! get_Extensions();
        }
    }
    /**
    
            Gets or sets a value for the HttpOnly cookie attribute.
            
            HttpOnly instructs the user agent to
            omit the cookie when providing access to cookies via "non-HTTP" APIs
            (such as a web browser API that exposes cookies to scripts).
            
            

    */
    open var HttpOnly : Bool {
        get {
            return try! get_HttpOnly();
        }
        set(v) {
            return try! set_HttpOnly(value: v);
        }
    }
    /**
    
            Gets or sets a value for the Max-Age cookie attribute.
            
            The Max-Age attribute indicates the maximum lifetime of the cookie,
            represented as the number of seconds until the cookie expires.
            
            

    */
    open var MaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxAge();
        }
        set(v) {
            return try! set_MaxAge(value: v!);
        }
    }
    /**
    
            Gets or sets the cookie name.
            

    */
    open var Name : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets or sets a value for the Path cookie attribute.
            
            The path attribute specifies those hosts to which the cookie will
            be sent.
            
            

    */
    open var Path : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    
            Gets or sets a value for the SameSite cookie attribute.
            
            "SameSite" cookies offer a robust defense against CSRF attack when
            deployed in strict mode, and when supported by the client.
            
            

    */
    open var SameSite : aspnetcore.Microsoft.Net.Http.Headers.SameSiteMode {
        get {
            return try! get_SameSite();
        }
        set(v) {
            return try! set_SameSite(value: v);
        }
    }
    /**
    
            Gets or sets a value for the Secure cookie attribute.
            
            The Secure attribute limits the scope of the cookie to "secure"
            channels.
            
            

    */
    open var Secure : Bool {
        get {
            return try! get_Secure();
        }
        set(v) {
            return try! set_Secure(value: v);
        }
    }
    /**
    
            Gets or sets the cookie value.
            

    */
    open var Value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // SetCookieHeaderValue


// type: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    /**
    
            A string header value with an optional quality.
            

    */
open class StringWithQualityHeaderValue
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Initializes a new instance of .
            

    - Parameter value: The  used to initialize the new instance.
    */
    public init(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_ctor_0__1__StringSegment(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, System.Double)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Double)
    /**
    
            Initializes a new instance of .
            

    - Parameter value: The  used to initialize the new instance.
    - Parameter quality: The quality factor.
    */
    public init(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, quality : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_ctor_0__2__StringSegment_f64(&__thrown, value.get_handle(), quality);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.Net.Http.Headers.StringWithQualityHeaderValue Parse(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.Parse(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Parses the specified  as a .
            

    - Parameter input: The value to parse.
    - Returns: The parsed value.

    */
    open class func Parse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_StringWithQualityHeaderValue__Parse_0__1__StringSegment(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue(hndl : __return);
        }
    }
    // bool TryParse(Microsoft.Extensions.Primitives.StringSegment, ref Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue@)
    /**
    
            Attempts to parse the specified  as a .
            

    - Parameter input: The value to parse.
    - Parameter parsedValue: The parsed value.
    - Returns:  if input is a valid , otherwise .

    */
    open class func TryParse(input : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, parsedValue : inout aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValue = parsedValue.get_handle();
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_bool__TryParse_0__2__StringSegment_outStringWithQualityHeaderValue(&__thrown, input.get_handle(), &_tmp_out_parsedValue);
        let _tmp2_parsedValue = aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue(hndl: _tmp_out_parsedValue);
            parsedValue = _tmp2_parsedValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> ParseList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.ParseList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue___ParseList_0__1__System_Collections_Generic_IList_string_(&__thrown, (input?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> ParseStrictList(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.ParseStrictList(System.Collections.Generic.IList{System.String})
    /**
    
            Parses a sequence of inputs as a sequence of  values using string parsing rules.
            

    - Parameter input: The values to parse.
    - Returns: The parsed values.

    */
    open class func ParseStrictList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_System_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue___ParseStrictList_0__1__System_Collections_Generic_IList_string_(&__thrown, (input?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // bool TryParseList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.TryParseList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of .
            

    - Parameter input: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_bool__TryParseList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_(&__thrown, (input?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryParseStrictList(System.Collections.Generic.IList<System.String>, ref System.Collections.Generic.IList<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.TryParseStrictList(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}@)
    /**
    
            Attempts to parse the sequence of values as a sequence of  using string parsing rules.
            

    - Parameter input: The values to parse.
    - Parameter parsedValues: The parsed values.
    - Returns:  if all inputs are valid , otherwise .

    */
    open class func TryParseStrictList(input : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>, parsedValues : inout Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parsedValues = (parsedValues != nil) ? (parsedValues!.get_handle()) : nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_bool__TryParseStrictList_0__2__System_Collections_Generic_IList_string__outSystem_Collections_Generic_IList_Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_(&__thrown, (input?.get_handle()), &_tmp_out_parsedValues);
        let __h__tmp2_parsedValues = _tmp_out_parsedValues;
        let _tmp2_parsedValues = (__h__tmp2_parsedValues != nil) ? dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>(hndl: __h__tmp2_parsedValues!) : nil;
            parsedValues = _tmp2_parsedValues;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Value()
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.get_Value
    open func get_Value() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_StringSegment__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> get_Quality()
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue.get_Quality
    open func get_Quality() throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValue_System_Nullable_f64___get_Quality_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    /**
    
            Gets the quality factor.
            

    */
    open var Quality : Optional<Swift.Double> {
        get {
            return try! get_Quality();
        }
    }
    /**
    
            Gets the string header value.
            

    */
    open var Value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Value();
        }
    }
} // StringWithQualityHeaderValue


// type: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
    /**
    
            Implementation of  that can compare content negotiation header fields
            based on their quality values (a.k.a q-values). This applies to values used in accept-charset,
            accept-encoding, accept-language and related header fields with similar syntax rules. See
             for a comparer for media type
            q-values.
            

    */
open class StringWithQualityHeaderValueComparer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Net_Http_Headers_StringWithQualityHeaderValueComparer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Net_Http_Headers_StringWithQualityHeaderValueComparer_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Int32 Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue, Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
    /**
    
            Compares two  based on their quality value
            (a.k.a their "q-value").
            Values with identical q-values are considered equal (i.e the result is 0) with the exception of wild-card
            values (i.e. a value of "(ASTERISK)") which are considered less than non-wild-card values. This allows to sort
            a sequence of  following their q-values ending up with any
            wild-cards at the end.
            

    - Parameter stringWithQuality1: The first value to compare.
    - Parameter stringWithQuality2: The second value to compare
    - Returns: The result of the comparison.

    */
    open /* method final */ func Compare(stringWithQuality1 : Optional<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>, stringWithQuality2 : Optional<aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValueComparer_i32__Compare_0__2__StringWithQualityHeaderValue_StringWithQualityHeaderValue(&__thrown, self.get_handle(), stringWithQuality1?.get_handle() ?? nil, stringWithQuality2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer get_QualityComparer()
// docid: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.get_QualityComparer
    open class func get_QualityComparer() throws -> aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Net_Http_Headers_StringWithQualityHeaderValueComparer_StringWithQualityHeaderValueComparer__get_QualityComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer(hndl : __return);
        }
    }
    /**
    
            Gets the default instance of .
            

    */
    public static var QualityComparer : aspnetcore.Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer {
        get {
            return try! get_QualityComparer();
        }
    }
} // StringWithQualityHeaderValueComparer


}




// EXTENSION METHOD bool IsFileDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
extension aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue {
    public func IsFileDisposition() throws -> Bool {
        return try aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFileDisposition(header: self);
    }
}

// EXTENSION METHOD bool IsFormDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
extension aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue {
    public func IsFormDisposition() throws -> Bool {
        return try aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFormDisposition(header: self);
    }
}

