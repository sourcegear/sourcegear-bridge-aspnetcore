// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
extension Microsoft.AspNetCore {
// type: Microsoft.AspNetCore.WebHost
public struct WebHost {
    // Microsoft.AspNetCore.Hosting.IWebHost Start(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.WebHost.Start(Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter app: A delegate that handles requests to the application.
    - Returns: A started  that hosts the application.

    */
    public static func Start(app : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__Start_0__1__RequestDelegate(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Start(app : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_app = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(app);
        return try Start(app: del_app);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost Start(System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.WebHost.Start(System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter url: The URL the hosted application will listen on.
    - Parameter app: A delegate that handles requests to the application.
    - Returns: A started  that hosts the application.

    */
    public static func Start(url : dotnet.System.String, app : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__Start_0__2__String_RequestDelegate(&__thrown, url.get_handle(), app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Start(url : dotnet.System.String, app : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_app = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(app);
        return try Start(url: url, app: del_app);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost Start(System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
// docid: M:Microsoft.AspNetCore.WebHost.Start(System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter routeBuilder: A delegate that configures the router for handling requests to the application.
    - Returns: A started  that hosts the application.

    */
    public static func Start(routeBuilder : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__Start_0__1__System_Action_Microsoft_AspNetCore_Routing_IRouteBuilder_(&__thrown, routeBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Start(routeBuilder : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_routeBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(routeBuilder);
        return try Start(routeBuilder: del_routeBuilder);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost Start(System.String, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
// docid: M:Microsoft.AspNetCore.WebHost.Start(System.String,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter url: The URL the hosted application will listen on.
    - Parameter routeBuilder: A delegate that configures the router for handling requests to the application.
    - Returns: A started  that hosts the application.

    */
    public static func Start(url : dotnet.System.String, routeBuilder : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__Start_0__2__String_System_Action_Microsoft_AspNetCore_Routing_IRouteBuilder_(&__thrown, url.get_handle(), routeBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Start(url : dotnet.System.String, routeBuilder : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_routeBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(routeBuilder);
        return try Start(url: url, routeBuilder: del_routeBuilder);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost StartWith(System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.WebHost.StartWith(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter app: The delegate that configures the .
    - Returns: A started  that hosts the application.

    */
    public static func StartWith(app : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__StartWith_0__1__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func StartWith(app : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_app = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(app);
        return try StartWith(app: del_app);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost StartWith(System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.WebHost.StartWith(System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Initializes and starts a new  with pre-configured defaults.
            See  for details.
            

    - Parameter url: The URL the hosted application will listen on.
    - Parameter app: The delegate that configures the .
    - Returns: A started  that hosts the application.

    */
    public static func StartWith(url : dotnet.System.String, app : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHost__StartWith_0__2__String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, url.get_handle(), app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // delegate closure overload
    public static func StartWith(url : dotnet.System.String, app : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        let del_app = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(app);
        return try StartWith(url: url, app: del_app);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder CreateDefaultBuilder()
// docid: M:Microsoft.AspNetCore.WebHost.CreateDefaultBuilder
    /**
    
            Initializes a new instance of the  class with pre-configured defaults.
            

    - Returns: The initialized .

    */
    public static func CreateDefaultBuilder() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHostBuilder__CreateDefaultBuilder_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder CreateDefaultBuilder(System.String[])
// docid: M:Microsoft.AspNetCore.WebHost.CreateDefaultBuilder(System.String[])
    /**
    
            Initializes a new instance of the  class with pre-configured defaults.
            

    - Parameter args: The command line args.
    - Returns: The initialized .

    */
    public static func CreateDefaultBuilder(args : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebHost_IWebHostBuilder__CreateDefaultBuilder_0__1__StringArray(&__thrown, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Hosting.IWebHostBuilder CreateDefaultBuilder<TStartup>(System.String[])
} // WebHost


}
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.ConfigureHostBuilder
    /**
    
            A non-buildable  for .
            Use  to build the .
            

    */
public final class ConfigureHostBuilder
    :
    dotnet.System.Object,
    Microsoft_Extensions_Hosting_IHostBuilder,
    Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsConfigureWebHost
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ConfigureHostBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    */
    public func ConfigureAppConfiguration(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__ConfigureAppConfiguration_0__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureAppConfiguration(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer<TContainerBuilder>(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,TContainerBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.ConfigureContainer``1(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,``0})
    /**
    */
    public func ConfigureContainer<UTContainerBuilder : SGBridgeGenericValue>(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,UTContainerBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__ConfigureContainer_1__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_UTContainerBuilder_(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureContainer<UTContainerBuilder : SGBridgeGenericValue>(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, UTContainerBuilder) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,UTContainerBuilder>(configureDelegate);
        return try ConfigureContainer(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureHostConfiguration(System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    */
    public func ConfigureHostConfiguration(configureDelegate : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__ConfigureHostConfiguration_0__1__System_Action_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureHostConfiguration(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureHostConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    */
    public func ConfigureServices(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureServices(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureDelegate);
        return try ConfigureServices(configureDelegate: del_configureDelegate);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory<TContainerBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})
    /**
    */
    public func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__UseServiceProviderFactory_1__1__Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_UTContainerBuilder_(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), factory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory<TContainerBuilder>(System.Func<Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder>>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})
    /**
    */
    public func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_IHostBuilder__UseServiceProviderFactory_1__1__System_Func_Microsoft_Extensions_Hosting_HostBuilderContext_Microsoft_Extensions_DependencyInjection_Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_UTContainerBuilder__(UTContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), factory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func UseServiceProviderFactory<UTContainerBuilder : SGBridgeGenericValue>(factory : @escaping (Optional<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_factory = try dotnet.System.Func_2<aspnetcore.Microsoft.Extensions.Hosting.HostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<UTContainerBuilder>>(factory);
        return try UseServiceProviderFactory(factory: del_factory);
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Builder.ConfigureHostBuilder.get_Properties
    public func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureHostBuilder_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    */
    public var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
} // ConfigureHostBuilder


// type: Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder
    /**
    
            A non-buildable  for .
            Use  to build the .
            

    */
public final class ConfigureWebHostBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_IWebHostBuilder,
    Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    */
    public func ConfigureAppConfiguration(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_IWebHostBuilder__ConfigureAppConfiguration_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureAppConfiguration(configureDelegate : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder.ConfigureServices(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    */
    public func ConfigureServices(configureServices : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureServices(configureServices : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext>, Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    */
    public func ConfigureServices(configureServices : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public func ConfigureServices(configureServices : @escaping (Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // System.String GetSetting(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder.GetSetting(System.String)
    /**
    */
    public func GetSetting(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_String__GetSetting_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseSetting(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder.UseSetting(System.String,System.String)
    /**
    */
    public func UseSetting(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ConfigureWebHostBuilder_IWebHostBuilder__UseSetting_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
} // ConfigureWebHostBuilder


// type: Microsoft.AspNetCore.Builder.WebApplication
    /**
    
            The web application used to configure the HTTP pipeline, and routes.
            

    */
public final class WebApplication
    :
    dotnet.System.Object,
    Microsoft_Extensions_Hosting_IHost,
    System_IDisposable,
    Microsoft_AspNetCore_Builder_IApplicationBuilder,
    Microsoft_AspNetCore_Routing_IEndpointRouteBuilder,
    System_IAsyncDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_WebApplication_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Builder.WebApplication Create(System.String[])
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.Create(System.String[])
    /**
    
            Initializes a new instance of the  class with preconfigured defaults.
            

    - Parameter args: Command line arguments
    - Returns: The .

    */
    public class func Create(args : Optional<dotnet.System_Arr<dotnet.System.String>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.WebApplication {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_WebApplication__Create_0__1__StringArray(&__thrown, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.WebApplication(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.WebApplicationBuilder CreateBuilder()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder
    /**
    
            Initializes a new instance of the  class with preconfigured defaults.
            

    - Returns: The .

    */
    public class func CreateBuilder() throws -> aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_WebApplicationBuilder__CreateBuilder_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.WebApplicationBuilder CreateBuilder(System.String[])
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(System.String[])
    /**
    
            Initializes a new instance of the  class with preconfigured defaults.
            

    - Parameter args: Command line arguments
    - Returns: The .

    */
    public class func CreateBuilder(args : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_WebApplicationBuilder__CreateBuilder_0__1__StringArray(&__thrown, args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.WebApplicationBuilder CreateBuilder(Microsoft.AspNetCore.Builder.WebApplicationOptions)
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(Microsoft.AspNetCore.Builder.WebApplicationOptions)
    /**
    
            Initializes a new instance of the  class with preconfigured defaults.
            

    - Parameter options: The  to configure the .
    - Returns: The .

    */
    public class func CreateBuilder(options : aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_WebApplicationBuilder__CreateBuilder_0__1__WebApplicationOptions(&__thrown, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.WebApplicationBuilder(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.StartAsync(System.Threading.CancellationToken)
    /**
    
            Start the application.
            

    - Parameter cancellationToken: 
    - Returns: 
            A  that represents the startup of the .
            Successful completion indicates the HTTP server is ready to accept new requests.
            

    */
    public func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.StopAsync(System.Threading.CancellationToken)
    /**
    
            Shuts down the application.
            

    - Parameter cancellationToken: 
    - Returns: 
            A  that represents the shutdown of the .
            Successful completion indicates that all the HTTP server has stopped.
            

    */
    public func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RunAsync(System.String)
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.RunAsync(System.String)
    /**
    
            Runs an application and returns a Task that only completes when the token is triggered or shutdown is triggered.
            

    - Parameter url: The URL to listen to if the server hasn't been configured directly.
    - Returns: 
            A  that represents the entire runtime of the  from startup to shutdown.
            

    */
    public func RunAsync(url : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_Task__RunAsync_0__1__String(&__thrown, self.get_handle(), url?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Run(System.String)
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.Run(System.String)
    /**
    
            Runs an application and block the calling thread until host shutdown.
            

    - Parameter url: The URL to listen to if the server hasn't been configured directly.
    */
    public func Run(url : Optional<dotnet.System.String> = nil) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebApplication_void__Run_0__1__String(&__thrown, self.get_handle(), url?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.DisposeAsync
    /**
    
            Disposes the application.
            

    */
    public func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_Services()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Services
    public func get_Services() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_IServiceProvider__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.IConfiguration get_Configuration()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Configuration
    public func get_Configuration() throws -> aspnetcore.Microsoft.Extensions.Configuration.IConfiguration {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_IConfiguration__get_Configuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Hosting.IWebHostEnvironment get_Environment()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Environment
    public func get_Environment() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_IWebHostEnvironment__get_Environment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Hosting.IHostApplicationLifetime get_Lifetime()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Lifetime
    public func get_Lifetime() throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostApplicationLifetime {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_IHostApplicationLifetime__get_Lifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostApplicationLifetime(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.ILogger get_Logger()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Logger
    public func get_Logger() throws -> aspnetcore.Microsoft.Extensions.Logging.ILogger {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_ILogger__get_Logger_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Urls()
// docid: M:Microsoft.AspNetCore.Builder.WebApplication.get_Urls
    public func get_Urls() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplication_System_Collections_Generic_ICollection_string___get_Urls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    /**
    
            The application's configured .
            

    */
    public var Configuration : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration {
        get {
            return try! get_Configuration();
        }
    }
    /**
    
            The application's configured .
            

    */
    public var Environment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        get {
            return try! get_Environment();
        }
    }
    /**
    
            Allows consumers to be notified of application lifetime events.
            

    */
    public var Lifetime : aspnetcore.Microsoft.Extensions.Hosting.IHostApplicationLifetime {
        get {
            return try! get_Lifetime();
        }
    }
    /**
    
            The default logger for the application.
            

    */
    public var Logger : aspnetcore.Microsoft.Extensions.Logging.ILogger {
        get {
            return try! get_Logger();
        }
    }
    /**
    
            The application's configured services.
            

    */
    public var Services : dotnet.System.IServiceProvider {
        get {
            return try! get_Services();
        }
    }
    /**
    
            The list of URLs that the HTTP server is bound to.
            

    */
    public var Urls : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Urls();
        }
    }
} // WebApplication


// type: Microsoft.AspNetCore.Builder.WebApplicationBuilder
    /**
    
            A builder for web applications and services.
            

    */
public final class WebApplicationBuilder
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_WebApplicationBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Builder.WebApplication Build()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build
    /**
    
            Builds the .
            

    - Returns: A configured .

    */
    public func Build() throws -> aspnetcore.Microsoft.AspNetCore.Builder.WebApplication {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_WebApplication__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.WebApplication(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Hosting.IWebHostEnvironment get_Environment()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_Environment
    public func get_Environment() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_IWebHostEnvironment__get_Environment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_Services
    public func get_Services() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.ConfigurationManager get_Configuration()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_Configuration
    public func get_Configuration() throws -> aspnetcore.Microsoft.Extensions.Configuration.ConfigurationManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_ConfigurationManager__get_Configuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Configuration.ConfigurationManager(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Logging.ILoggingBuilder get_Logging()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_Logging
    public func get_Logging() throws -> aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_ILoggingBuilder__get_Logging_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder get_WebHost()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_WebHost
    public func get_WebHost() throws -> aspnetcore.Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_ConfigureWebHostBuilder__get_WebHost_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.ConfigureHostBuilder get_Host()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationBuilder.get_Host
    public func get_Host() throws -> aspnetcore.Microsoft.AspNetCore.Builder.ConfigureHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationBuilder_ConfigureHostBuilder__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.ConfigureHostBuilder(hndl : __return);
        }
    }
    /**
    
            A collection of configuration providers for the application to compose. This is useful for adding new configuration sources and providers.
            

    */
    public var Configuration : aspnetcore.Microsoft.Extensions.Configuration.ConfigurationManager {
        get {
            return try! get_Configuration();
        }
    }
    /**
    
            Provides information about the web hosting environment an application is running.
            

    */
    public var Environment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        get {
            return try! get_Environment();
        }
    }
    /**
    
            An  for configuring host specific properties, but not building.
            To build after configuration, call .
            

    */
    public var Host : aspnetcore.Microsoft.AspNetCore.Builder.ConfigureHostBuilder {
        get {
            return try! get_Host();
        }
    }
    /**
    
            A collection of logging providers for the application to compose. This is useful for adding new logging providers.
            

    */
    public var Logging : aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder {
        get {
            return try! get_Logging();
        }
    }
    /**
    
            A collection of services for the application to compose. This is useful for adding user provided or framework provided services.
            

    */
    public var Services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        get {
            return try! get_Services();
        }
    }
    /**
    
            An  for configuring server specific properties, but not building.
            To build after configuration, call .
            

    */
    public var WebHost : aspnetcore.Microsoft.AspNetCore.Builder.ConfigureWebHostBuilder {
        get {
            return try! get_WebHost();
        }
    }
} // WebApplicationBuilder


// type: Microsoft.AspNetCore.Builder.WebApplicationOptions
    /**
    
            Options for configuing the behavior for .
            

    */
open class WebApplicationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_WebApplicationOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_WebApplicationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String[] get_Args()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.get_Args
    open func get_Args() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationOptions_StringArray__get_Args_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Args(System.String[])
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.set_Args(System.String[])
    open func set_Args(value : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebApplicationOptions_void__set_Args_0__1__StringArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EnvironmentName()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.get_EnvironmentName
    open func get_EnvironmentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationOptions_String__get_EnvironmentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EnvironmentName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.set_EnvironmentName(System.String)
    open func set_EnvironmentName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebApplicationOptions_void__set_EnvironmentName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ApplicationName()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.get_ApplicationName
    open func get_ApplicationName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationOptions_String__get_ApplicationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ApplicationName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.set_ApplicationName(System.String)
    open func set_ApplicationName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebApplicationOptions_void__set_ApplicationName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentRootPath()
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.get_ContentRootPath
    open func get_ContentRootPath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WebApplicationOptions_String__get_ContentRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentRootPath(System.String)
// docid: M:Microsoft.AspNetCore.Builder.WebApplicationOptions.set_ContentRootPath(System.String)
    open func set_ContentRootPath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WebApplicationOptions_void__set_ContentRootPath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The application name.
            

    */
    open var ApplicationName : Optional<dotnet.System.String> {
        get {
            return try! get_ApplicationName();
        }
        set(v) {
            return try! set_ApplicationName(value: v!);
        }
    }
    /**
    
            The command line arguments.
            

    */
    open var Args : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_Args();
        }
        set(v) {
            return try! set_Args(value: v!);
        }
    }
    /**
    
            The content root path.
            

    */
    open var ContentRootPath : Optional<dotnet.System.String> {
        get {
            return try! get_ContentRootPath();
        }
        set(v) {
            return try! set_ContentRootPath(value: v!);
        }
    }
    /**
    
            The environment name.
            

    */
    open var EnvironmentName : Optional<dotnet.System.String> {
        get {
            return try! get_EnvironmentName();
        }
        set(v) {
            return try! set_EnvironmentName(value: v!);
        }
    }
} // WebApplicationOptions


}


// Microsoft.Extensions
// Microsoft.Extensions.Hosting
extension Microsoft.Extensions.Hosting {
// type: Microsoft.Extensions.Hosting.GenericHostBuilderExtensions
public struct GenericHostBuilderExtensions {
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHostDefaults(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>)
// docid: M:Microsoft.Extensions.Hosting.GenericHostBuilderExtensions.ConfigureWebHostDefaults(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder})
    /**
    
            Configures a  with defaults for hosting a web app. This should be called
            before application specific configuration to avoid it overwriting provided services, configuration sources,
            environments, content root, etc.
            

    - Parameter builder: The  instance to configure.
    - Parameter configure: The configure callback
    - Returns: A reference to the  after the operation has completed.

    */
    public static func ConfigureWebHostDefaults(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_GenericHostBuilderExtensions_IHostBuilder__ConfigureWebHostDefaults_0__2__IHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_IWebHostBuilder_(&__thrown, builder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureWebHostDefaults(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        return try ConfigureWebHostDefaults(builder: builder, configure: del_configure);
    }
} // GenericHostBuilderExtensions


}



// EXTENSION METHOD Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHostDefaults(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>)
extension Microsoft_Extensions_Hosting_IHostBuilder {
    public func ConfigureWebHostDefaults(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostBuilderExtensions.ConfigureWebHostDefaults(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func ConfigureWebHostDefaults(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostBuilderExtensions.ConfigureWebHostDefaults(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

