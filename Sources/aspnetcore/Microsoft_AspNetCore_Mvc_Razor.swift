// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.ApplicationParts
extension Microsoft.AspNetCore.Mvc.ApplicationParts {
// type: Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyApplicationPartFactory
    /**
    
            Configures an assembly as a .
            

    */
open class CompiledRazorAssemblyApplicationPartFactory
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyApplicationPartFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyApplicationPartFactory.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyApplicationPartFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetDefaultApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyApplicationPartFactory.GetDefaultApplicationParts(System.Reflection.Assembly)
    /**
    
            Gets the sequence of  instances that are created by this instance of .
            
            Applications may use this method to get the same behavior as this factory produces during MVC's default part discovery.
            
            

    - Parameter assembly: The .
    - Returns: The sequence of  instances.

    */
    open class func GetDefaultApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetDefaultApplicationParts_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly)
    /**
    */
    open override func GetApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetApplicationParts_0__1__Assembly(&__thrown, self.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // CompiledRazorAssemblyApplicationPartFactory


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyPart
    /**
    
            An  for compiled Razor assemblies.
            

    */
open class CompiledRazorAssemblyPart
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IRazorCompiledItemProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyPart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyPart.#ctor(System.Reflection.Assembly)
    /**
    
            Initializes a new instance of .
            

    - Parameter assembly: The 
    */
    public init(assembly : dotnet.System.Reflection.Assembly) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyPart_ctor_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyPart.get_Assembly
    open func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyPart_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyPart.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_CompiledRazorAssemblyPart_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // CompiledRazorAssemblyPart


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFactory
    /**
    
            Configures an  that contains controllers, as well as Razor views and Pages.
            
            Combines the results of  and
            . This part factory
            may be used if Razor views or Razor Pages are compiled in to with other types including controllers.
            
            

    */
public final class ConsolidatedAssemblyApplicationPartFactory
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_ConsolidatedAssemblyApplicationPartFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFactory.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApplicationParts_ConsolidatedAssemblyApplicationPartFactory_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> GetApplicationParts(System.Reflection.Assembly)
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.ConsolidatedAssemblyApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly)
    /**
    */
    public override func GetApplicationParts(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_ConsolidatedAssemblyApplicationPartFactory_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart___GetApplicationParts_0__1__Assembly(&__thrown, self.get_handle(), assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ConsolidatedAssemblyApplicationPartFactory


// type: Microsoft.AspNetCore.Mvc.ApplicationParts.IRazorCompiledItemProvider
    /**
    
            Exposes one or more  instances from an .
            

    */
open class IRazorCompiledItemProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IRazorCompiledItemProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApplicationParts_IRazorCompiledItemProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem> get_CompiledItems()
// docid: M:Microsoft.AspNetCore.Mvc.ApplicationParts.IRazorCompiledItemProvider.get_CompiledItems
    open func get_CompiledItems() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApplicationParts_IRazorCompiledItemProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Razor_Hosting_RazorCompiledItem___get_CompiledItems_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IRazorCompiledItemProvider


}

// Microsoft.AspNetCore.Mvc.Diagnostics
extension Microsoft.AspNetCore.Mvc.Diagnostics {
// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData
    /**
    
            An  that occurs after a view page.
            

    */
public final class AfterViewPageEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPage, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter page: The page.
    - Parameter viewContext: The view context.
    - Parameter actionDescriptor: The action.
    - Parameter httpContext: The http context.
    */
    public init(page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage, viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext, actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_ctor_0__4__IRazorPage_ViewContext_ActionDescriptor_HttpContext(&__thrown, page.get_handle(), viewContext.get_handle(), actionDescriptor.get_handle(), httpContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.IRazorPage get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData.get_Page
    public func get_Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_IRazorPage__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData.get_ViewContext
    public func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewPageEventData.get_HttpContext
    public func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewPageEventData_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            The .
            

    */
    public var Page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        get {
            return try! get_Page();
        }
    }
    /**
    
            The .
            

    */
    public var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
    }
} // AfterViewPageEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData
    /**
    
            An  that occurs before a view page.
            

    */
public final class BeforeViewPageEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_get_EventName());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPage, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter page: The page.
    - Parameter viewContext: The view context.
    - Parameter actionDescriptor: The action.
    - Parameter httpContext: The http context.
    */
    public init(page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage, viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext, actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_ctor_0__4__IRazorPage_ViewContext_ActionDescriptor_HttpContext(&__thrown, page.get_handle(), viewContext.get_handle(), actionDescriptor.get_handle(), httpContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.IRazorPage get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData.get_Page
    public func get_Page() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_IRazorPage__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData.get_ViewContext
    public func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewPageEventData.get_HttpContext
    public func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewPageEventData_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            The .
            

    */
    public var Page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        get {
            return try! get_Page();
        }
    }
    /**
    
            The .
            

    */
    public var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
    }
} // BeforeViewPageEventData


}

// Microsoft.AspNetCore.Mvc.Razor
extension Microsoft.AspNetCore.Mvc.Razor {
// type: Microsoft.AspNetCore.Mvc.Razor.HelperResult
    /**
    
            Represents a deferred write operation in a .
            

    */
open class HelperResult
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_HelperResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<System.IO.TextWriter,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.HelperResult.#ctor(System.Func{System.IO.TextWriter,System.Threading.Tasks.Task})
    /**
    
            Creates a new instance of .
            

    - Parameter asyncAction: The asynchronous delegate to invoke when
             is called.
    */
    public init(asyncAction : dotnet.System.Func_2<dotnet.System.IO.TextWriter,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_HelperResult_ctor_0__1__System_Func_System_IO_TextWriter_Task_(&__thrown, asyncAction.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.HelperResult.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Method invoked to produce content from the .
            

    - Parameter writer: The  instance to write to.
    - Parameter encoder: The  to encode the content.
    */
    open func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_HelperResult_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.IO.TextWriter,System.Threading.Tasks.Task> get_WriteAction()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.HelperResult.get_WriteAction
    open func get_WriteAction() throws -> dotnet.System.Func_2<dotnet.System.IO.TextWriter,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_HelperResult_System_Func_System_IO_TextWriter_Task___get_WriteAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    /**
    
            Gets the asynchronous delegate to invoke when  is called.
            

    */
    open var WriteAction : dotnet.System.Func_2<dotnet.System.IO.TextWriter,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_WriteAction();
        }
    }
} // HelperResult


// type: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
    /**
    
            Represents properties and methods that are used by  for execution.
            

    */
open class IRazorPage
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPage
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_IRazorPage_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task ExecuteAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.ExecuteAsync
    /**
    
            Renders the page and writes the output to the .
            

    - Returns: A task representing the result of executing the page.

    */
    open func ExecuteAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_Task__ExecuteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void EnsureRenderedBodyOrSections()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.EnsureRenderedBodyOrSections
    /**
    
            Verifies that all sections defined in  were rendered, or
            the body was rendered if no sections were defined.
            

    */
    open func EnsureRenderedBodyOrSections() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__EnsureRenderedBodyOrSections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.IHtmlContent get_BodyContent()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_BodyContent
    open func get_BodyContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_IHtmlContent__get_BodyContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
    open func set_BodyContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_BodyContent_0__1__IHtmlContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsLayoutBeingRendered()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_IsLayoutBeingRendered
    open func get_IsLayoutBeingRendered() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_bool__get_IsLayoutBeingRendered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsLayoutBeingRendered(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_IsLayoutBeingRendered(System.Boolean)
    open func set_IsLayoutBeingRendered(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_IsLayoutBeingRendered_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_Path
    open func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_Path(System.String)
    open func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Layout()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_Layout
    open func get_Layout() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_String__get_Layout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Layout(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_Layout(System.String)
    open func set_Layout(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_Layout_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_PreviousSectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_PreviousSectionWriters
    open func get_PreviousSectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_PreviousSectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PreviousSectionWriters(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.set_PreviousSectionWriters(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate})
    open func set_PreviousSectionWriters(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPage_void__set_PreviousSectionWriters_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_SectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPage.get_SectionWriters
    open func get_SectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPage_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_SectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
} // IRazorPage


// type: Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator
    /**
    
            Provides methods to activate properties on a  instance.
            

    */
open class IRazorPageActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPageActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_IRazorPageActivator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Activate(Microsoft.AspNetCore.Mvc.Razor.IRazorPage, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator.Activate(Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            When implemented in a type, activates an instantiated page.
            

    - Parameter page: The page to activate.
    - Parameter context: The  for the executing view.
    */
    open func Activate(page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage, context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IRazorPageActivator_void__Activate_0__2__IRazorPage_ViewContext(&__thrown, self.get_handle(), page.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRazorPageActivator


// type: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider
    /**
    
            Defines methods that are used for creating  instances at a given path.
            

    */
open class IRazorPageFactoryProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPageFactoryProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_IRazorPageFactoryProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult CreateFactory(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
    /**
    
            Creates a  factory for the specified path.
            

    - Parameter relativePath: The path to locate the page.
    - Returns: The  instance.

    */
    open func CreateFactory(relativePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorPageFactoryProvider_RazorPageFactoryResult__CreateFactory_0__1__String(&__thrown, self.get_handle(), relativePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult(hndl : __return);
        }
    }
} // IRazorPageFactoryProvider


// type: Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine
    /**
    
            An  used to render pages that use the Razor syntax.
            

    */
open class IRazorViewEngine
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine,
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Razor.RazorPageResult FindPage(Microsoft.AspNetCore.Mvc.ActionContext, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.FindPage(Microsoft.AspNetCore.Mvc.ActionContext,System.String)
    /**
    
            Finds the page with the given  using view locations and information from the
            .
            

    - Parameter context: The .
    - Parameter pageName: The name or path of the page.
    - Returns: The  of locating the page.

    */
    open func FindPage(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine_RazorPageResult__FindPage_0__2__ActionContext_String(&__thrown, self.get_handle(), context.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Razor.RazorPageResult GetPage(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.GetPage(System.String,System.String)
    /**
    
            Gets the page with the given , relative to 
            unless  is already absolute.
            

    - Parameter executingFilePath: The absolute path to the currently-executing page, if any.
    - Parameter pagePath: The path to the page.
    - Returns: The  of locating the page.

    */
    open func GetPage(executingFilePath : dotnet.System.String, pagePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine_RazorPageResult__GetPage_0__2__String_String(&__thrown, self.get_handle(), executingFilePath.get_handle(), pagePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult(hndl : __return);
        }
    }
    // System.String GetAbsolutePath(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine.GetAbsolutePath(System.String,System.String)
    /**
    
            Converts the given  to be absolute, relative to
             unless  is already absolute.
            

    - Parameter executingFilePath: The absolute path to the currently-executing page, if any.
    - Parameter pagePath: The path to the page.
    - Returns: 
            The combination of  and  if
             is a relative path. The  value (unchanged)
            otherwise.
            

    */
    open func GetAbsolutePath(executingFilePath : Optional<dotnet.System.String>, pagePath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine_String__GetAbsolutePath_0__2__String_String(&__thrown, self.get_handle(), executingFilePath?.get_handle() ?? nil, pagePath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRazorViewEngine


// type: Microsoft.AspNetCore.Mvc.Razor.ITagHelperActivator
    /**
    
            Provides methods to create a tag helper.
            

    */
open class ITagHelperActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_ITagHelperActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_ITagHelperActivator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TTagHelper Create<TTagHelper>(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
} // ITagHelperActivator


// type: Microsoft.AspNetCore.Mvc.Razor.ITagHelperFactory
    /**
    
            Provides methods to create and initialize tag helpers.
            

    */
open class ITagHelperFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_ITagHelperFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_ITagHelperFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TTagHelper CreateTagHelper<TTagHelper>(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
} // ITagHelperFactory


// type: Microsoft.AspNetCore.Mvc.Razor.ITagHelperInitializer`1
    /**
    
            Initializes an  before it's executed.
            

    */
open class ITagHelperInitializer_1<TTagHelper : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_ITagHelperInitializer_1
{
    public typealias TTagHelper_ITagHelperInitializer_1 = TTagHelper;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_ITagHelperInitializer_1_get_type_handle(TTagHelper.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Initialize(TTagHelper, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ITagHelperInitializer`1.Initialize(`0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Initializes the .
            

    - Parameter helper: The  to initialize.
    - Parameter context: The  for the executing view.
    */
    open func Initialize(helper : TTagHelper, context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_ITagHelperInitializer_1_void__Initialize_0__2__TTagHelper_ViewContext(TTagHelper.get_type_handle(), &__thrown, self.get_handle(), helper.to_gval(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITagHelperInitializer_1


// type: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
    /**
    
            Specifies the contracts for a view location expander that is used by  instances to
            determine search paths for a view.
            

    */
open class IViewLocationExpander
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
    /**
    
            Invoked by a  to determine the values that would be consumed by this instance
            of . The calculated values are used to determine if the view location
            has changed since the last time it was located.
            

    - Parameter context: The  for the current view location
            expansion operation.
    */
    open func PopulateValues(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander_void__PopulateValues_0__1__ViewLocationExpanderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Invoked by a  to determine potential locations for a view.
            

    - Parameter context: The  for the current view location
            expansion operation.
    - Parameter viewLocations: The sequence of view locations to expand.
    - Returns: A list of expanded view locations.

    */
    open func ExpandViewLocations(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, viewLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander_System_Collections_Generic_IEnumerable_string___ExpandViewLocations_0__2__ViewLocationExpanderContext_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), context.get_handle(), viewLocations.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IViewLocationExpander


// type: Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpander
    /**
    
            A  that adds the language as an extension prefix to view names. Language
            that is getting added as extension prefix comes from .
            

    */
open class LanguageViewLocationExpander
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpander_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpander.#ctor
    /**
    
            Instantiates a new  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpander_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpander.#ctor(Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
            Instantiates a new  instance.
            

    - Parameter format: The .
    */
    public init(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpander_ctor_0__1__LanguageViewLocationExpanderFormat(&__thrown, format.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
    /**
    */
    open /* method final */ func PopulateValues(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpander_void__PopulateValues_0__1__ViewLocationExpanderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpander.ExpandViewLocations(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext,System.Collections.Generic.IEnumerable{System.String})
    /**
    */
    open func ExpandViewLocations(context : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext, viewLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpander_System_Collections_Generic_IEnumerable_string___ExpandViewLocations_0__2__ViewLocationExpanderContext_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), context.get_handle(), viewLocations.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // LanguageViewLocationExpander


// type: Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat
    /**
    
            Specifies the localized view format for .
            

    */
public struct LanguageViewLocationExpanderFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpanderFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat SubFolder
    /**
    
            Locale is a subfolder under which the view exists.
            

    */
    public static var SubFolder : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat(val: Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpanderFormat_get_SubFolder());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat Suffix
    /**
    
            Locale is part of the view name as a suffix.
            

    */
    public static var Suffix : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat(val: Microsoft_AspNetCore_Mvc_Razor_LanguageViewLocationExpanderFormat_get_Suffix());
            return __return;
        }
    }
} // LanguageViewLocationExpanderFormat


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPage
    /**
    
            Represents properties and methods that are needed in order to render a view that uses Razor syntax.
            

    */
open class RazorPage
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPage_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void IgnoreBody()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
    /**
    
            In a Razor layout page, ignores rendering the portion of a content page that is not within a named section.
            

    */
    open func IgnoreBody() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__IgnoreBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DefineSection(System.String, Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
    /**
    
            Creates a named content section in the page that can be invoked in a Layout page using
             or .
            

    - Parameter name: The name of the section to create.
    - Parameter section: The  to execute when rendering the section.
    */
    open override func DefineSection(name : dotnet.System.String, section : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__DefineSection_0__2__String_RenderAsyncDelegate(&__thrown, self.get_handle(), name.get_handle(), section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open override func DefineSection(name : dotnet.System.String, section : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_section = try aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate(section);
        return try DefineSection(name: name, section: del_section);
    }
    // bool IsSectionDefined(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
    /**
    
            Returns a value that indicates whether the specified section is defined in the content page.
            

    - Parameter name: The section name to search for.
    - Returns: true if the specified section is defined in the content page; otherwise, false.

    */
    open func IsSectionDefined(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_bool__IsSectionDefined_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Html.HtmlString RenderSection(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
    /**
    
            In layout pages, renders the content of the section named .
            

    - Parameter name: The name of the section to render.
    - Returns: An empty .

    */
    open func RenderSection(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_HtmlString__RenderSection_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.HtmlString RenderSection(System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
    /**
    
            In layout pages, renders the content of the section named .
            

    - Parameter name: The section to render.
    - Parameter required: Indicates if this section must be rendered.
    - Returns: An empty .

    */
    open func RenderSection(name : dotnet.System.String, required : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_HtmlString__RenderSection_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(required ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.HtmlString> RenderSectionAsync(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
    /**
    
            In layout pages, asynchronously renders the content of the section named .
            

    - Parameter name: The section to render.
    - Returns: 
            A  that on completion returns an empty .
            

    */
    open func RenderSectionAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_HtmlString___RenderSectionAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.HtmlString> RenderSectionAsync(System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
    /**
    
            In layout pages, asynchronously renders the content of the section named .
            

    - Parameter name: The section to render.
    - Parameter required: Indicates the  section must be registered
            (using @section) in the page.
    - Returns: 
            A  that on completion returns an empty .
            

    */
    open func RenderSectionAsync(name : dotnet.System.String, required : Bool) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_HtmlString___RenderSectionAsync_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(required ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void IgnoreSection(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
    /**
    
            In layout pages, ignores rendering the content of the section named .
            

    - Parameter sectionName: The section to ignore.
    */
    open func IgnoreSection(sectionName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__IgnoreSection_0__1__String(&__thrown, self.get_handle(), sectionName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnsureRenderedBodyOrSections()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
    /**
    */
    open override func EnsureRenderedBodyOrSections() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__EnsureRenderedBodyOrSections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginContext(System.Int32, System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
    /**
    */
    open override func BeginContext(position : Swift.Int32, length : Swift.Int32, isLiteral : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__BeginContext_0__3__i32_i32_bool(&__thrown, self.get_handle(), position, length, Swift.Int32(isLiteral ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
    /**
    */
    open override func EndContext() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_void__EndContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_Context()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_HttpContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    /**
    
            An  representing the current request execution.
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_Context();
        }
    }
} // RazorPage


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPageActivator
    /**
    */
open class RazorPageActivator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPageActivator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPageActivator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory, Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper, System.Diagnostics.DiagnosticSource, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageActivator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory,Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper,System.Diagnostics.DiagnosticSource,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider)
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init(metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory, jsonHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper, diagnosticSource : dotnet.System.Diagnostics.DiagnosticSource, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, modelExpressionProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageActivator_ctor_0__6__IModelMetadataProvider_IUrlHelperFactory_IJsonHelper_DiagnosticSource_HtmlEncoder_IModelExpressionProvider(&__thrown, metadataProvider.get_handle(), urlHelperFactory.get_handle(), jsonHelper.get_handle(), diagnosticSource.get_handle(), htmlEncoder.get_handle(), modelExpressionProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Activate(Microsoft.AspNetCore.Mvc.Razor.IRazorPage, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageActivator.Activate(Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open /* method final */ func Activate(page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage, context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageActivator_void__Activate_0__2__IRazorPage_ViewContext(&__thrown, self.get_handle(), page.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RazorPageActivator


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
    /**
    
            Represents properties and methods that are needed in order to render a view that uses Razor syntax.
            

    */
open class RazorPageBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IRazorPage
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task ExecuteAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
    /**
    */
    open func ExecuteAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_Task__ExecuteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.String InvalidTagHelperIndexerAssignment(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.InvalidTagHelperIndexerAssignment(System.String,System.String,System.String)
    /**
    
            Format an error message about using an indexer when the tag helper property is null.
            

    - Parameter attributeName: Name of the HTML attribute associated with the indexer.
    - Parameter tagHelperTypeName: Full name of the tag helper .
    - Parameter propertyName: Dictionary property in the tag helper.
    - Returns: An error message about using an indexer when the tag helper property is null.

    */
    open func InvalidTagHelperIndexerAssignment(attributeName : dotnet.System.String, tagHelperTypeName : dotnet.System.String, propertyName : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_String__InvalidTagHelperIndexerAssignment_0__3__String_String_String(&__thrown, self.get_handle(), attributeName.get_handle(), tagHelperTypeName.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TTagHelper CreateTagHelper<TTagHelper>()
    // void StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Starts a new writing scope and optionally overrides  within that scope.
            

    - Parameter encoder: 
            The  to use when this  handles
            non- C# expressions. If null, does not change .
            
    */
    open func StartTagHelperWritingScope(encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__StartTagHelperWritingScope_0__1__HtmlEncoder(&__thrown, self.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent EndTagHelperWritingScope()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
    /**
    
            Ends the current writing scope that was started by calling .
            

    - Returns: The buffered .

    */
    open func EndTagHelperWritingScope() throws -> aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_TagHelperContent__EndTagHelperWritingScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __return);
        }
    }
    // void BeginWriteTagHelperAttribute()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
    /**
    
            Starts a new scope for writing  attribute values.
            

    */
    open func BeginWriteTagHelperAttribute() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__BeginWriteTagHelperAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String EndWriteTagHelperAttribute()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
    /**
    
            Ends the current writing scope that was started by calling .
            

    - Returns: The content buffered by the shared  of this .

    */
    open func EndWriteTagHelperAttribute() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_String__EndWriteTagHelperAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Href(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
    /**
    
            Returns a href for the given content path.
            

    - Parameter contentPath: The content path.
    - Returns: The href for the contentPath.

    */
    open func Href(contentPath : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_String__Href_0__1__String(&__thrown, self.get_handle(), contentPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void DefineSection(System.String, Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
    /**
    
            Creates a named content section in the page that can be invoked in a Layout page using
            RenderSection or RenderSectionAsync
            

    - Parameter name: The name of the section to create.
    - Parameter section: The  to execute when rendering the section.
    */
    open func DefineSection(name : dotnet.System.String, section : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__DefineSection_0__2__String_RenderAsyncDelegate(&__thrown, self.get_handle(), name.get_handle(), section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func DefineSection(name : dotnet.System.String, section : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_section = try aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate(section);
        return try DefineSection(name: name, section: del_section);
    }
    // void Write(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
    /**
    
            Writes the specified  with HTML encoding to .
            

    - Parameter value: The  to write.
    */
    open func Write(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__Write_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
    /**
    
            Writes the specified  with HTML encoding to .
            

    - Parameter value: The  to write.
    */
    open func Write(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__Write_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLiteral(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
    /**
    
            Writes the specified  without HTML encoding to .
            

    - Parameter value: The  to write.
    */
    open func WriteLiteral(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__WriteLiteral_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLiteral(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
    /**
    
            Writes the specified  without HTML encoding to .
            

    - Parameter value: The  to write.
    */
    open func WriteLiteral(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__WriteLiteral_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginWriteAttribute(System.String, System.String, System.Int32, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
    /**
    
            Begins writing out an attribute.
            

    - Parameter name: The name.
    - Parameter prefix: The prefix.
    - Parameter prefixOffset: The prefix offset.
    - Parameter suffix: The suffix.
    - Parameter suffixOffset: The suffix offset.
    - Parameter attributeValuesCount: The attribute values count.
    */
    open func BeginWriteAttribute(name : dotnet.System.String, prefix : dotnet.System.String, prefixOffset : Swift.Int32, suffix : dotnet.System.String, suffixOffset : Swift.Int32, attributeValuesCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__BeginWriteAttribute_0__6__String_String_i32_String_i32_i32(&__thrown, self.get_handle(), name.get_handle(), prefix.get_handle(), prefixOffset, suffix.get_handle(), suffixOffset, attributeValuesCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteAttributeValue(System.String, System.Int32, System.Object, System.Int32, System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    /**
    
            Writes out an attribute value.
            

    - Parameter prefix: The prefix.
    - Parameter prefixOffset: The prefix offset.
    - Parameter value: The value.
    - Parameter valueOffset: The value offset.
    - Parameter valueLength: The value length.
    - Parameter isLiteral: Whether the attribute is a literal.
    */
    open func WriteAttributeValue(prefix : dotnet.System.String, prefixOffset : Swift.Int32, value : Optional<dotnet.System.Object>, valueOffset : Swift.Int32, valueLength : Swift.Int32, isLiteral : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__WriteAttributeValue_0__6__String_i32_Object_i32_i32_bool(&__thrown, self.get_handle(), prefix.get_handle(), prefixOffset, value?.get_handle() ?? nil, valueOffset, valueLength, Swift.Int32(isLiteral ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndWriteAttribute()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
    /**
    
            Ends writing an attribute.
            

    */
    open func EndWriteAttribute() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__EndWriteAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext, System.String, System.Int32, Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    /**
    
            Begins adding html attribute values.
            

    - Parameter executionContext: The .
    - Parameter attributeName: The name of the attribute.
    - Parameter attributeValuesCount: The number of attribute values.
    - Parameter attributeValueStyle: The .
    */
    open func BeginAddHtmlAttributeValues(executionContext : aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext, attributeName : dotnet.System.String, attributeValuesCount : Swift.Int32, attributeValueStyle : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__BeginAddHtmlAttributeValues_0__4__TagHelperExecutionContext_String_i32_HtmlAttributeValueStyle(&__thrown, self.get_handle(), executionContext.get_handle(), attributeName.get_handle(), attributeValuesCount, attributeValueStyle.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHtmlAttributeValue(System.String, System.Int32, System.Object, System.Int32, System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    /**
    
            Add an html attribute value.
            

    - Parameter prefix: The prefix.
    - Parameter prefixOffset: The prefix offset.
    - Parameter value: The attribute value.
    - Parameter valueOffset: The value offset.
    - Parameter valueLength: The value length.
    - Parameter isLiteral: Whether the attribute is a literal.
    */
    open func AddHtmlAttributeValue(prefix : Optional<dotnet.System.String>, prefixOffset : Swift.Int32, value : Optional<dotnet.System.Object>, valueOffset : Swift.Int32, valueLength : Swift.Int32, isLiteral : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__AddHtmlAttributeValue_0__6__String_i32_Object_i32_i32_bool(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, prefixOffset, value?.get_handle() ?? nil, valueOffset, valueLength, Swift.Int32(isLiteral ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
    /**
    
            Ends adding html attribute values.
            

    - Parameter executionContext: The .
    */
    open func EndAddHtmlAttributeValues(executionContext : aspnetcore.Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__EndAddHtmlAttributeValues_0__1__TagHelperExecutionContext(&__thrown, self.get_handle(), executionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.HtmlString> FlushAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
    /**
    
            Invokes  on  and 
            on the response stream, writing out any buffered content to the .
            

    - Returns: A  that represents the asynchronous flush operation and on
            completion returns an empty .

    */
    open func FlushAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_HtmlString___FlushAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.HtmlString SetAntiforgeryCookieAndHeader()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
    /**
    
            Sets antiforgery cookie and X-Frame-Options header on the response.
            

    - Returns: An empty .

    */
    open func SetAntiforgeryCookieAndHeader() throws -> aspnetcore.Microsoft.AspNetCore.Html.HtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_HtmlString__SetAntiforgeryCookieAndHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl : __return);
        }
    }
    // void BeginContext(System.Int32, System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginContext(System.Int32,System.Int32,System.Boolean)
    /**
    */
    open func BeginContext(position : Swift.Int32, length : Swift.Int32, isLiteral : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__BeginContext_0__3__i32_i32_bool(&__thrown, self.get_handle(), position, length, Swift.Int32(isLiteral ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndContext
    /**
    */
    open func EndContext() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__EndContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnsureRenderedBodyOrSections()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EnsureRenderedBodyOrSections
    /**
    */
    open func EnsureRenderedBodyOrSections() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__EnsureRenderedBodyOrSections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Layout()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_Layout
    open /* method final */ func get_Layout() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_String__get_Layout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Layout(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_Layout(System.String)
    open /* method final */ func set_Layout(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_Layout_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Output()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_Output
    open func get_Output() throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_TextWriter__get_Output_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_Path
    open /* method final */ func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_Path(System.String)
    open /* method final */ func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_SectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_SectionWriters
    open /* method final */ func get_SectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_SectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_ViewBag
    open func get_ViewBag() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsLayoutBeingRendered()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_IsLayoutBeingRendered
    open /* method final */ func get_IsLayoutBeingRendered() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_bool__get_IsLayoutBeingRendered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsLayoutBeingRendered(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_IsLayoutBeingRendered(System.Boolean)
    open /* method final */ func set_IsLayoutBeingRendered(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_IsLayoutBeingRendered_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.IHtmlContent get_BodyContent()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_BodyContent
    open /* method final */ func get_BodyContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_IHtmlContent__get_BodyContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_BodyContent(Microsoft.AspNetCore.Html.IHtmlContent)
    open /* method final */ func set_BodyContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_BodyContent_0__1__IHtmlContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> get_PreviousSectionWriters()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_PreviousSectionWriters
    open /* method final */ func get_PreviousSectionWriters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate___get_PreviousSectionWriters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PreviousSectionWriters(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_PreviousSectionWriters(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate})
    open /* method final */ func set_PreviousSectionWriters(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_PreviousSectionWriters_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.DiagnosticSource get_DiagnosticSource()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_DiagnosticSource
    open func get_DiagnosticSource() throws -> dotnet.System.Diagnostics.DiagnosticSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_DiagnosticSource__get_DiagnosticSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.DiagnosticSource(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DiagnosticSource(System.Diagnostics.DiagnosticSource)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_DiagnosticSource(System.Diagnostics.DiagnosticSource)
    open func set_DiagnosticSource(value : dotnet.System.Diagnostics.DiagnosticSource) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_DiagnosticSource_0__1__DiagnosticSource(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.HtmlEncoder get_HtmlEncoder()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_HtmlEncoder
    open func get_HtmlEncoder() throws -> dotnet.System.Text.Encodings.Web.HtmlEncoder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_HtmlEncoder__get_HtmlEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encodings.Web.HtmlEncoder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HtmlEncoder(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.set_HtmlEncoder(System.Text.Encodings.Web.HtmlEncoder)
    open func set_HtmlEncoder(value : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_void__set_HtmlEncoder_0__1__HtmlEncoder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageBase_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    /**
    */
    public var BodyContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        get {
            return try! get_BodyContent();
        }
        set(v) {
            return try! set_BodyContent(value: v!);
        }
    }
    /**
    
            Gets or sets a  instance used to instrument the page execution.
            

    */
    open var DiagnosticSource : dotnet.System.Diagnostics.DiagnosticSource {
        get {
            return try! get_DiagnosticSource();
        }
        set(v) {
            return try! set_DiagnosticSource(value: v);
        }
    }
    /**
    
            Gets the  to use when this 
            handles non- C# expressions.
            

    */
    open var HtmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder {
        get {
            return try! get_HtmlEncoder();
        }
        set(v) {
            return try! set_HtmlEncoder(value: v);
        }
    }
    /**
    */
    public var IsLayoutBeingRendered : Bool {
        get {
            return try! get_IsLayoutBeingRendered();
        }
        set(v) {
            return try! set_IsLayoutBeingRendered(value: v);
        }
    }
    /**
    */
    public var Layout : Optional<dotnet.System.String> {
        get {
            return try! get_Layout();
        }
        set(v) {
            return try! set_Layout(value: v!);
        }
    }
    /**
    
            Gets the  that the page is writing output to.
            

    */
    open var Output : dotnet.System.IO.TextWriter {
        get {
            return try! get_Output();
        }
    }
    /**
    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    */
    public var PreviousSectionWriters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        get {
            return try! get_PreviousSectionWriters();
        }
        set(v) {
            return try! set_PreviousSectionWriters(value: v);
        }
    }
    /**
    */
    public var SectionWriters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate> {
        get {
            return try! get_SectionWriters();
        }
    }
    /**
    
            Gets the  from the .
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
    }
    /**
    
            Gets the  of the current logged in user.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
    /**
    
            Gets the dynamic view data dictionary.
            

    */
    open var ViewBag : dotnet.System.Object {
        get {
            return try! get_ViewBag();
        }
    }
    /**
    */
    open var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
} // RazorPageBase


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
// boxed value type
    /**
    
            Result of .
            

    */
public final class RazorPageFactoryResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The  factory.
            

    */
    public var RazorPageFactory : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>> {
        get {
            return try! get_RazorPageFactory();
        }
    }
    /**
    
            Gets a value that determines if the page was successfully located.
            

    */
    public var Success : Bool {
        get {
            return try! get_Success();
        }
    }
    /**
    
            Gets the .
            

    */
    public var ViewDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> {
        get {
            return try! get_ViewDescriptor();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor, System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor,System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage})
    /**
    
            Initializes a new instance of  with the
            specified  factory.
            

    - Parameter razorPageFactory: The  factory.
    - Parameter viewDescriptor: The .
    */
    public init(viewDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor, razorPageFactory : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_ctor_0__2__CompiledViewDescriptor_System_Func_Microsoft_AspNetCore_Mvc_Razor_IRazorPage_(&__thrown, viewDescriptor.get_handle(), (razorPageFactory?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage> get_RazorPageFactory()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.get_RazorPageFactory
    public func get_RazorPageFactory() throws -> Optional<dotnet.System.Func_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_System_Func_Microsoft_AspNetCore_Mvc_Razor_IRazorPage___get_RazorPageFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor get_ViewDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.get_ViewDescriptor
    public func get_ViewDescriptor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_CompiledViewDescriptor__get_ViewDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Success()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.get_Success
    public func get_Success() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageFactoryResult_bool__get_Success_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // RazorPageFactoryResult


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPageResult
// boxed value type
    /**
    
            Result of locating a .
            

    */
public final class RazorPageResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the name or the path of the page being located.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the  if found.
            

    */
    public var Page : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage> {
        get {
            return try! get_Page();
        }
    }
    /**
    
            Gets the locations that were searched when  could not be found.
            

    */
    public var SearchedLocations : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_SearchedLocations();
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Mvc.Razor.IRazorPage)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageResult.#ctor(System.String,Microsoft.AspNetCore.Mvc.Razor.IRazorPage)
    /**
    
            Initializes a new instance of  for a successful discovery.
            

    - Parameter name: The name of the page that was found.
    - Parameter page: The located .
    */
    public init(name : dotnet.System.String, page : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_ctor_0__2__String_IRazorPage(&__thrown, name.get_handle(), page.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Initializes a new instance of  for an unsuccessful discovery.
            

    - Parameter name: The name of the page that was not found.
    - Parameter searchedLocations: The locations that were searched.
    */
    public init(name : dotnet.System.String, searchedLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_ctor_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, name.get_handle(), searchedLocations.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageResult.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.IRazorPage get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageResult.get_Page
    public func get_Page() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_IRazorPage__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_SearchedLocations()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageResult.get_SearchedLocations
    public func get_SearchedLocations() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPageResult_System_Collections_Generic_IEnumerable_string___get_SearchedLocations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RazorPageResult


// type: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
    /**
    
            Represents the properties and methods that are needed in order to render a view that uses Razor syntax.
            

    */
open class RazorPage_1<TModel : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPage
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorPage_1_get_type_handle(TModel.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] TModel get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.get_Model
    open func get_Model() throws -> TModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_1_TModel__get_Model_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TModel(gval: __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel> get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorPage_1_Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_TModel___get_ViewData_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{`0})
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_RazorPage_1_void__set_ViewData_0__1__Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_TModel_(TModel.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the Model property of the  property.
            

    */
    open var Model : TModel {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets or sets the dictionary for view data.
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel> {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
} // RazorPage_1


// type: Microsoft.AspNetCore.Mvc.Razor.RazorView
    /**
    
            Default implementation for  that executes one or more 
            as parts of its execution.
            

    */
open class RazorView
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewEngines_IView
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorView_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>, Microsoft.AspNetCore.Mvc.Razor.IRazorPage, System.Text.Encodings.Web.HtmlEncoder, System.Diagnostics.DiagnosticListener)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorView.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},Microsoft.AspNetCore.Mvc.Razor.IRazorPage,System.Text.Encodings.Web.HtmlEncoder,System.Diagnostics.DiagnosticListener)
    /**
    
            Initializes a new instance of 
            

    - Parameter viewEngine: The  used to locate Layout pages.
    - Parameter pageActivator: The  used to activate pages.
    - Parameter viewStartPages: The sequence of  instances executed as _ViewStarts.
            
    - Parameter razorPage: The  instance to execute.
    - Parameter htmlEncoder: The HTML encoder.
    - Parameter diagnosticListener: The .
    */
    public init(viewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine, pageActivator : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, viewStartPages : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage>, razorPage : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorView_ctor_0__6__IRazorViewEngine_IRazorPageActivator_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Razor_IRazorPage__IRazorPage_HtmlEncoder_DiagnosticListener(&__thrown, viewEngine.get_handle(), pageActivator.get_handle(), viewStartPages.get_handle(), razorPage.get_handle(), htmlEncoder.get_handle(), diagnosticListener.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task RenderAsync(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open func RenderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorView_Task__RenderAsync_0__1__ViewContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorView.get_Path
    open /* method final */ func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorView_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.IRazorPage get_RazorPage()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorView.get_RazorPage
    open func get_RazorPage() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorView_IRazorPage__get_RazorPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Razor.IRazorPage> get_ViewStartPages()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorView.get_ViewStartPages
    open func get_ViewStartPages() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorView_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Razor_IRazorPage___get_ViewStartPages_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
    }
    /**
    
            Gets  instance that the views executes on.
            

    */
    open var RazorPage : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage {
        get {
            return try! get_RazorPage();
        }
    }
    /**
    
            Gets the sequence of _ViewStart  instances that are executed by this view.
            

    */
    open var ViewStartPages : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPage> {
        get {
            return try! get_ViewStartPages();
        }
    }
} // RazorView


// type: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine
    /**
    
            Default implementation of .
            

    */
open class RazorViewEngine
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine,
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String ViewExtension
    /**
    
            The view extension
            

    */
    open class var ViewExtension : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_get_ViewExtension());
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider, Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, System.Text.Encodings.Web.HtmlEncoder, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Diagnostics.DiagnosticListener)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider,Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator,System.Text.Encodings.Web.HtmlEncoder,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.DiagnosticListener)
    /**
    
            Initializes a new instance of the .
            

    */
    public init(pageFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider, pageActivator : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IRazorPageActivator, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, optionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_ctor_0__6__IRazorPageFactoryProvider_IRazorPageActivator_HtmlEncoder_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions__ILoggerFactory_DiagnosticListener(&__thrown, pageFactory.get_handle(), pageActivator.get_handle(), htmlEncoder.get_handle(), optionsAccessor.get_handle(), loggerFactory.get_handle(), diagnosticListener.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetNormalizedRouteValue(Microsoft.AspNetCore.Mvc.ActionContext, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetNormalizedRouteValue(Microsoft.AspNetCore.Mvc.ActionContext,System.String)
    /**
    
            Gets the case-normalized route value for the specified route .
            

    - Parameter context: The .
    - Parameter key: The route key to lookup.
    - Returns: The value corresponding to the key.

    */
    open class func GetNormalizedRouteValue(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_String__GetNormalizedRouteValue_0__2__ActionContext_String(&__thrown, context.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Razor.RazorPageResult FindPage(Microsoft.AspNetCore.Mvc.ActionContext, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindPage(Microsoft.AspNetCore.Mvc.ActionContext,System.String)
    /**
    */
    open /* method final */ func FindPage(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, pageName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_RazorPageResult__FindPage_0__2__ActionContext_String(&__thrown, self.get_handle(), context.get_handle(), pageName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Razor.RazorPageResult GetPage(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetPage(System.String,System.String)
    /**
    */
    open /* method final */ func GetPage(executingFilePath : dotnet.System.String, pagePath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_RazorPageResult__GetPage_0__2__String_String(&__thrown, self.get_handle(), executingFilePath.get_handle(), pagePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorPageResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(Microsoft.AspNetCore.Mvc.ActionContext, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.Boolean)
    /**
    */
    open /* method final */ func FindView(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewName : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_ViewEngineResult__FindView_0__3__ActionContext_String_bool(&__thrown, self.get_handle(), context.get_handle(), viewName.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult GetView(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetView(System.String,System.String,System.Boolean)
    /**
    */
    open /* method final */ func GetView(executingFilePath : Optional<dotnet.System.String>, viewPath : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_ViewEngineResult__GetView_0__3__String_String_bool(&__thrown, self.get_handle(), executingFilePath?.get_handle() ?? nil, viewPath.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // System.String GetAbsolutePath(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetAbsolutePath(System.String,System.String)
    /**
    */
    open /* method final */ func GetAbsolutePath(executingFilePath : Optional<dotnet.System.String>, pagePath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngine_String__GetAbsolutePath_0__2__String_String(&__thrown, self.get_handle(), executingFilePath?.get_handle() ?? nil, pagePath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RazorViewEngine


// type: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions
    /**
    
            Provides programmatic configuration for the .
            

    */
open class RazorViewEngineOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander> get_ViewLocationExpanders()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.get_ViewLocationExpanders
    open func get_ViewLocationExpanders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander___get_ViewLocationExpanders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_ViewLocationFormats()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.get_ViewLocationFormats
    open func get_ViewLocationFormats() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_System_Collections_Generic_IList_string___get_ViewLocationFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AreaViewLocationFormats()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.get_AreaViewLocationFormats
    open func get_AreaViewLocationFormats() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_System_Collections_Generic_IList_string___get_AreaViewLocationFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_PageViewLocationFormats()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.get_PageViewLocationFormats
    open func get_PageViewLocationFormats() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_System_Collections_Generic_IList_string___get_PageViewLocationFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AreaPageViewLocationFormats()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions.get_AreaPageViewLocationFormats
    open func get_AreaPageViewLocationFormats() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_System_Collections_Generic_IList_string___get_AreaPageViewLocationFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
             Gets the locations where  will search for views (such as layouts and partials)
             when searched from the context of rendering a Razor Page within an area.
             

    */
    open var AreaPageViewLocationFormats : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AreaPageViewLocationFormats();
        }
    }
    /**
    
            Gets the locations where  will search for views within an
            area.
            

    */
    open var AreaViewLocationFormats : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AreaViewLocationFormats();
        }
    }
    /**
    
             Gets the locations where  will search for views (such as layouts and partials)
             when searched from the context of rendering a Razor Page.
             

    */
    open var PageViewLocationFormats : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_PageViewLocationFormats();
        }
    }
    /**
    
            Gets a  used by the .
            

    */
    open var ViewLocationExpanders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander> {
        get {
            return try! get_ViewLocationExpanders();
        }
    }
    /**
    
            Gets the locations where  will search for views.
            

    */
    open var ViewLocationFormats : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_ViewLocationFormats();
        }
    }
} // RazorViewEngineOptions


// type: Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate
    /**
    
            A delegate for RenderAsync.
            

    */
public final class RenderAsyncDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate.Invoke
    public func Invoke() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_Task__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_Task__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate.Invoke
    public func callAsFunction() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_RenderAsyncDelegate_Task__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RenderAsyncDelegate


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelperInitializer`1
    /**
    */
open class TagHelperInitializer_1<TTagHelper : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelperInitializer_1_get_type_handle(TTagHelper.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Action<TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelperInitializer`1.#ctor(System.Action{`0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})
    /**
    
            Creates a .
            

    - Parameter action: The initialization delegate.
    */
    public init(action : dotnet.System.Action_2<TTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelperInitializer_1_ctor_0__1__System_Action_TTagHelper_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_(TTagHelper.get_type_handle(), &__thrown, action.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Initialize(TTagHelper, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelperInitializer`1.Initialize(`0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open /* method final */ func Initialize(helper : TTagHelper, context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelperInitializer_1_void__Initialize_0__2__TTagHelper_ViewContext(TTagHelper.get_type_handle(), &__thrown, self.get_handle(), helper.to_gval(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TagHelperInitializer_1


// type: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
    /**
    
            A context for containing information for .
            

    */
open class ViewLocationExpanderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.String, System.String, System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.String,System.String,System.String,System.Boolean)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The  for the current executing action.
    - Parameter viewName: The view name.
    - Parameter controllerName: The controller name.
    - Parameter areaName: The area name.
    - Parameter pageName: The page name.
    - Parameter isMainPage: Determines if the page being found is the main page for an action.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewName : dotnet.System.String, controllerName : Optional<dotnet.System.String>, areaName : Optional<dotnet.System.String>, pageName : Optional<dotnet.System.String>, isMainPage : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_ctor_0__6__ActionContext_String_String_String_String_bool(&__thrown, actionContext.get_handle(), viewName.get_handle(), controllerName?.get_handle() ?? nil, areaName?.get_handle() ?? nil, pageName?.get_handle() ?? nil, Swift.Int32(isMainPage ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_ViewName
    open func get_ViewName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ControllerName()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_ControllerName
    open func get_ControllerName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_String__get_ControllerName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_PageName()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_PageName
    open func get_PageName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_String__get_PageName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_AreaName()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_AreaName
    open func get_AreaName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_String__get_AreaName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsMainPage()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_IsMainPage
    open func get_IsMainPage() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_bool__get_IsMainPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.get_Values
    open func get_Values() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_System_Collections_Generic_IDictionary_string_string___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Values(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.set_Values(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_Values(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_ViewLocationExpanderContext_void__set_Values_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  for the current executing action.
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            Gets the area name.
            

    */
    open var AreaName : Optional<dotnet.System.String> {
        get {
            return try! get_AreaName();
        }
    }
    /**
    
            Gets the controller name.
            

    */
    open var ControllerName : Optional<dotnet.System.String> {
        get {
            return try! get_ControllerName();
        }
    }
    /**
    
            Determines if the page being found is the main page for an action.
            

    */
    open var IsMainPage : Bool {
        get {
            return try! get_IsMainPage();
        }
    }
    /**
    
            Gets the page name. This will be the value of the page route value when rendering a Page from the
            Razor Pages framework. This value will be null if rendering a view as the result of a controller.
            

    */
    open var PageName : Optional<dotnet.System.String> {
        get {
            return try! get_PageName();
        }
    }
    /**
    
            Gets or sets the  that is populated with values as part of
            .
            

    */
    open var Values : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Values();
        }
        set(v) {
            return try! set_Values(value: v);
        }
    }
    /**
    
            Gets the view name.
            

    */
    open var ViewName : dotnet.System.String {
        get {
            return try! get_ViewName();
        }
    }
} // ViewLocationExpanderContext


}
// Microsoft.AspNetCore.Mvc.Razor.Compilation
extension Microsoft.AspNetCore.Mvc.Razor.Compilation {
// type: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor
    /**
    
            Represents a compiled Razor View or Page.
            

    */
open class CompiledViewDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.#ctor(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
    /**
    
            Creates a new .
            

    - Parameter item: The .
    */
    public init(item : aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_ctor_0__1__RazorCompiledItem(&__thrown, item.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem, Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.#ctor(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem,Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute)
    /**
    
            Creates a new . At least one of  or
             must be non-null.
            

    - Parameter item: The .
    - Parameter attribute: The .
    */
    public init(item : aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem, attribute : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_ctor_0__2__RazorCompiledItem_RazorViewAttribute(&__thrown, item.get_handle(), attribute.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RelativePath()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.get_RelativePath
    open func get_RelativePath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_String__get_RelativePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RelativePath(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.set_RelativePath(System.String)
    open func set_RelativePath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_void__set_RelativePath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute get_ViewAttribute()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.get_ViewAttribute
    open func get_ViewAttribute() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_RazorViewAttribute__get_ViewAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewAttribute(Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.set_ViewAttribute(Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute)
    open func set_ViewAttribute(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_void__set_ViewAttribute_0__1__RazorViewAttribute(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Primitives.IChangeToken> get_ExpirationTokens()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.get_ExpirationTokens
    open func get_ExpirationTokens() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_System_Collections_Generic_IList_Microsoft_Extensions_Primitives_IChangeToken___get_ExpirationTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExpirationTokens(System.Collections.Generic.IList<Microsoft.Extensions.Primitives.IChangeToken>)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.set_ExpirationTokens(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
    open func set_ExpirationTokens(value : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_void__set_ExpirationTokens_0__1__System_Collections_Generic_IList_Microsoft_Extensions_Primitives_IChangeToken_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem get_Item()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.get_Item
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_RazorCompiledItem__get_Item_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.set_Item(Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem)
    open func set_Item(value : Optional<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_void__set_Item_0__1__RazorCompiledItem(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
             instances that indicate when this result has expired.
            

    */
    open var ExpirationTokens : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>> {
        get {
            return try! get_ExpirationTokens();
        }
        set(v) {
            return try! set_ExpirationTokens(value: v!);
        }
    }
    /**
    
            Gets the  descriptor for this view.
            

    */
    open var Item : Optional<aspnetcore.Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItem> {
        get {
            return try! get_Item();
        }
        set(v) {
            return try! set_Item(value: v!);
        }
    }
    /**
    
            The normalized application relative path of the view.
            

    */
    open var RelativePath : dotnet.System.String {
        get {
            return try! get_RelativePath();
        }
        set(v) {
            return try! set_RelativePath(value: v);
        }
    }
    /**
    
            Gets the type of the compiled item.
            

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
    }
    /**
    
            Gets or sets the  decorating the view.
            

    */
    open var ViewAttribute : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute> {
        get {
            return try! get_ViewAttribute();
        }
        set(v) {
            return try! set_ViewAttribute(value: v!);
        }
    }
} // CompiledViewDescriptor


// type: Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompiler
    /**
    
            Represents a view compiler.
            

    */
open class IViewCompiler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompiler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompiler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> CompileAsync(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompiler.CompileAsync(System.String)
    /**
    
            Compile a view at the specified path.
            

    - Parameter relativePath: The relative path to the view.
    - Returns: A .

    */
    open func CompileAsync(relativePath : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompiler_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor___CompileAsync_0__1__String(&__thrown, self.get_handle(), relativePath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IViewCompiler


// type: Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompilerProvider
    /**
    
            Provides a .
            

    */
open class IViewCompilerProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompilerProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompilerProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompiler GetCompiler()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompilerProvider.GetCompiler
    /**
    
            Gets a .
            

    - Returns: The view compiler.

    */
    open func GetCompiler() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompiler {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompilerProvider_IViewCompiler__GetCompiler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.IViewCompiler(hndl : __return);
        }
    }
} // IViewCompilerProvider


// type: Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute
    /**
    
            This class is replaced by RazorCompiledItem and will not be used by the runtime.
            

    */
open class RazorViewAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Compilation_RazorViewAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute.#ctor(System.String,System.Type)
    /**
    
            This class is replaced by RazorCompiledItem and will not be used by the runtime.
            

    - Parameter path: The path.
    - Parameter viewType: The viewtype.
    */
    public init(path : dotnet.System.String, viewType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Compilation_RazorViewAttribute_ctor_0__2__String_Type(&__thrown, path.get_handle(), viewType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute.get_Path
    open func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_RazorViewAttribute_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ViewType()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute.get_ViewType
    open func get_ViewType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_RazorViewAttribute_Type__get_ViewType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            Gets the path of the view.
            

    */
    open var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
    }
    /**
    
            Gets the view type.
            

    */
    open var ViewType : dotnet.System.Type_ {
        get {
            return try! get_ViewType();
        }
    }
} // RazorViewAttribute


// type: Microsoft.AspNetCore.Mvc.Razor.Compilation.ViewsFeature
    /**
    
            A feature that contains view descriptors.
            

    */
open class ViewsFeature
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Compilation_ViewsFeature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.ViewsFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Compilation_ViewsFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> get_ViewDescriptors()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Compilation.ViewsFeature.get_ViewDescriptors
    open func get_ViewDescriptors() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Compilation_ViewsFeature_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Razor_Compilation_CompiledViewDescriptor___get_ViewDescriptors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            A list of .
            

    */
    open var ViewDescriptors : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Compilation.CompiledViewDescriptor> {
        get {
            return try! get_ViewDescriptors();
        }
    }
} // ViewsFeature


}

// Microsoft.AspNetCore.Mvc.Razor.Infrastructure
extension Microsoft.AspNetCore.Mvc.Razor.Infrastructure {
// type: Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider
    /**
    
            This API supports the MVC's infrastructure and is not intended to be used
            directly from your code. This API may change in future releases.
            

    */
public final class TagHelperMemoryCacheProvider
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Infrastructure_TagHelperMemoryCacheProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Infrastructure_TagHelperMemoryCacheProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Caching.Memory.IMemoryCache get_Cache()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider.get_Cache
    public func get_Cache() throws -> aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_Infrastructure_TagHelperMemoryCacheProvider_IMemoryCache__get_Cache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cache(Microsoft.Extensions.Caching.Memory.IMemoryCache)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider.set_Cache(Microsoft.Extensions.Caching.Memory.IMemoryCache)
    public func set_Cache(value : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_Infrastructure_TagHelperMemoryCacheProvider_void__set_Cache_0__1__IMemoryCache(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            This API supports the MVC's infrastructure and is not intended to be used
            directly from your code. This API may change in future releases.
            

    */
    public var Cache : aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache {
        get {
            return try! get_Cache();
        }
        set(v) {
            return try! set_Cache(value: v);
        }
    }
} // TagHelperMemoryCacheProvider


}

// Microsoft.AspNetCore.Mvc.Razor.Internal
extension Microsoft.AspNetCore.Mvc.Razor.Internal {
// type: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute
    /**
    
            Specifies that the attributed property should be bound using request services.
            
            This attribute is used as the backing attribute for the @inject
            Razor directive.
            
            

    */
open class RazorInjectAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_Internal_RazorInjectAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_Internal_RazorInjectAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RazorInjectAttribute


}

// Microsoft.AspNetCore.Mvc.Razor.TagHelpers
extension Microsoft.AspNetCore.Mvc.Razor.TagHelpers {
// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper
    /**
    
            A  targeting the <body> HTML element.
            

    */
open class BodyTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper.#ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter manager: The  which contains the collection
            of s.
    - Parameter loggerFactory: The .
    */
    public override init(manager : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper_ctor_0__2__ITagHelperComponentManager_ILoggerFactory(&__thrown, manager.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // BodyTagHelper


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper
    /**
    
            A  targeting the <head> HTML element.
            

    */
open class HeadTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper.#ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter manager: The  which contains the collection
            of s.
    - Parameter loggerFactory: The .
    */
    public override init(manager : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper_ctor_0__2__ITagHelperComponentManager_ILoggerFactory(&__thrown, manager.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HeadTagHelper


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager
    /**
    
            An implementation of this interface provides the collection of s
            that will be used by s.
            

    */
open class ITagHelperComponentManager
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentManager
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentManager_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent> get_Components()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager.get_Components
    open func get_Components() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentManager_System_Collections_Generic_ICollection_Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent___get_Components_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
} // ITagHelperComponentManager


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator
    /**
    
            Provides methods to activate properties of s.
            

    */
open class ITagHelperComponentPropertyActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentPropertyActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentPropertyActivator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Activate(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator.Activate(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent)
    /**
    
            Activates properties of the .
            

    - Parameter context: The  for the executing view.
    - Parameter tagHelperComponent: The  to activate properties of.
    */
    open func Activate(context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext, tagHelperComponent : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentPropertyActivator_void__Activate_0__2__ViewContext_ITagHelperComponent(&__thrown, self.get_handle(), context.get_handle(), tagHelperComponent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITagHelperComponentPropertyActivator


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper
    /**
    
            Initializes and processes the s added to the
             in the specified order.
            

    */
open class TagHelperComponentTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.#ctor(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new  and orders the
            the collection of s in .
            

    - Parameter manager: The  which contains the collection
            of s.
    - Parameter loggerFactory: The .
    */
    public init(manager : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentManager, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_ctor_0__2__ITagHelperComponentManager_ILoggerFactory(&__thrown, manager.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    */
    open func Init(context : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open func ProcessAsync(context : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, output : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context.get_handle(), output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator get_PropertyActivator()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.get_PropertyActivator
    open func get_PropertyActivator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_ITagHelperComponentPropertyActivator__get_PropertyActivator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PropertyActivator(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.set_PropertyActivator(Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator)
    open func set_PropertyActivator(value : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_void__set_PropertyActivator_0__1__ITagHelperComponentPropertyActivator(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperComponentTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperComponentTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Activates the  property of all the .
            

    */
    open var PropertyActivator : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.ITagHelperComponentPropertyActivator {
        get {
            return try! get_PropertyActivator();
        }
        set(v) {
            return try! set_PropertyActivator(value: v);
        }
    }
    /**
    
            The .
            

    */
    open var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
} // TagHelperComponentTagHelper


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature
    /**
    
            The list of tag helper types in an MVC application. The  can be populated
            using the  that is available during startup at 
            and  or at a later stage by requiring the 
            as a dependency in a component.
            

    */
open class TagHelperFeature
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Reflection.TypeInfo> get_TagHelpers()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature.get_TagHelpers
    open func get_TagHelpers() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeature_System_Collections_Generic_IList_System_Reflection_TypeInfo___get_TagHelpers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of tag helper types in an MVC application.
            

    */
    open var TagHelpers : dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_TagHelpers();
        }
    }
} // TagHelperFeature


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeatureProvider
    /**
    
            An  for the .
            

    */
open class TagHelperFeatureProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeatureProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeatureProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeatureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeatureProvider.PopulateFeature(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart},Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature)
    /**
    */
    open /* method final */ func PopulateFeature(parts : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, feature : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.TagHelperFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_TagHelperFeatureProvider_void__PopulateFeature_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart__TagHelperFeature(&__thrown, self.get_handle(), parts.get_handle(), feature.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TagHelperFeatureProvider


// type: Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper
    /**
    
             implementation targeting elements containing attributes with URL expected values.
            

    */
open class UrlResolutionTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper.#ctor(Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Creates a new .
            

    - Parameter urlHelperFactory: The .
    - Parameter htmlEncoder: The .
    */
    public init(urlHelperFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_ctor_0__2__IUrlHelperFactory_HtmlEncoder(&__thrown, urlHelperFactory.get_handle(), htmlEncoder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open func Process(context : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, output : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context.get_handle(), output.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The .
            

    */
    open var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
} // UrlResolutionTagHelper


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions
public struct MvcRazorMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddRazorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})
    /**
    
            Configures a set of  for the application.
            

    - Parameter builder: The .
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddRazorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcBuilderExtensions_IMvcBuilder__AddRazorOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRazorOptions(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>(setupAction);
        return try AddRazorOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Registers tag helpers as services and replaces the existing 
            with an .
            

    - Parameter builder: The  instance this method extends.
    - Returns: The  instance this method extends.

    */
    public static func AddTagHelpersAsServices(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcBuilderExtensions_IMvcBuilder__AddTagHelpersAsServices_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder InitializeTagHelper<TTagHelper>(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})
    /**
    
            Adds an initialization callback for a given .
            

    - Parameter builder: The  instance this method extends.
    - Parameter initialize: An action to initialize the .
    - Returns: The  instance this method extends.

    */
    public static func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, initialize : dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcBuilderExtensions_IMvcBuilder__InitializeTagHelper_1__2__IMvcBuilder_System_Action_UTTagHelper_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_(UTTagHelper.get_type_handle(), &__thrown, builder.get_handle(), initialize.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, initialize : @escaping (UTTagHelper, Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_initialize = try dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>(initialize);
        return try InitializeTagHelper(builder: builder, initialize: del_initialize);
    }
} // MvcRazorMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions
public struct MvcRazorMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Registers Razor view engine services.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddRazorViewEngine(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcCoreBuilderExtensions_IMvcCoreBuilder__AddRazorViewEngine_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})
    /**
    
            Registers Razor view engine services.
            

    - Parameter builder: The .
    - Parameter setupAction: A setup action that configures the .
    - Returns: The .

    */
    public static func AddRazorViewEngine(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcCoreBuilderExtensions_IMvcCoreBuilder__AddRazorViewEngine_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_Razor_RazorViewEngineOptions_(&__thrown, builder.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRazorViewEngine(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>(setupAction);
        return try AddRazorViewEngine(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Registers discovered tag helpers as services and changes the existing 
            for an .
            

    - Parameter builder: The  instance this method extends.
    - Returns: The  instance this method extends.

    */
    public static func AddTagHelpersAsServices(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcCoreBuilderExtensions_IMvcCoreBuilder__AddTagHelpersAsServices_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder InitializeTagHelper<TTagHelper>(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})
    /**
    
            Adds an initialization callback for a given .
            

    - Parameter builder: The  instance this method extends.
    - Parameter initialize: An action to initialize the .
    - Returns: The  instance this method extends.

    */
    public static func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, initialize : dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcRazorMvcCoreBuilderExtensions_IMvcCoreBuilder__InitializeTagHelper_1__2__IMvcCoreBuilder_System_Action_UTTagHelper_Microsoft_AspNetCore_Mvc_Rendering_ViewContext_(UTTagHelper.get_type_handle(), &__thrown, builder.get_handle(), initialize.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, initialize : @escaping (UTTagHelper, Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_initialize = try dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>(initialize);
        return try InitializeTagHelper(builder: builder, initialize: del_initialize);
    }
} // MvcRazorMvcCoreBuilderExtensions


}



public protocol Microsoft_AspNetCore_Mvc_ApplicationParts_IRazorCompiledItemProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompiler
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_Compilation_IViewCompilerProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_IRazorPage
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_IRazorPageActivator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_IRazorPageFactoryProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_IRazorViewEngine
    :
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_ITagHelperActivator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_ITagHelperFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_ITagHelperInitializer_1
    :
    SGBridgeGetHandle
{
    associatedtype TTagHelper_ITagHelperInitializer_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Mvc_Razor_IViewLocationExpander
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentManager
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Razor_TagHelpers_ITagHelperComponentPropertyActivator
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddRazorOptions(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddRazorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddRazorOptions(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddRazorOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddTagHelpersAsServices() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddTagHelpersAsServices(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder InitializeTagHelper<TTagHelper>(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(initialize : dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.InitializeTagHelper(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), initialize: initialize);
    }
    // delegate closure overload
    public func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(initialize : @escaping (UTTagHelper, Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_initialize = try dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>(initialize);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.InitializeTagHelper(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), initialize: del_initialize);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddRazorViewEngine() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddRazorViewEngine(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddRazorViewEngine(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddTagHelpersAsServices() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddTagHelpersAsServices(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder InitializeTagHelper<TTagHelper>(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(initialize : dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.InitializeTagHelper(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), initialize: initialize);
    }
    // delegate closure overload
    public func InitializeTagHelper<UTTagHelper : SGBridgeGenericValue>(initialize : @escaping (UTTagHelper, Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_initialize = try dotnet.System.Action_2<UTTagHelper,aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>(initialize);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.InitializeTagHelper(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), initialize: del_initialize);
    }
}

