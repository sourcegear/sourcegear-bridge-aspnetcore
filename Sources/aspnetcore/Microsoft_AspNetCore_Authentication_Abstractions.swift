// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authentication
extension Microsoft.AspNetCore.Authentication {
// type: Microsoft.AspNetCore.Authentication.AuthenticateResult
    /**
    
            Contains the result of an Authenticate call
            

    */
open class AuthenticateResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticateResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Clone()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Clone
    /**
    
            Create a new deep copy of the result
            

    - Returns: A copy of the result

    */
    open func Clone() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Indicates that authentication was successful.
            

    - Parameter ticket: The ticket representing the authentication result.
    - Returns: The result.

    */
    open class func Success(ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Success_0__1__AuthenticationTicket(&__thrown, ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult NoResult()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.NoResult
    /**
    
            Indicates that there was no information returned for this authentication scheme.
            

    - Returns: The result.

    */
    open class func NoResult() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__NoResult_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Fail(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Fail(System.Exception)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failure: The failure exception.
    - Returns: The result.

    */
    open class func Fail(failure : dotnet.System.Exception) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Fail_0__1__Exception(&__thrown, failure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Fail(System.Exception, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Fail(System.Exception,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failure: The failure exception.
    - Parameter properties: Additional state values for the authentication session.
    - Returns: The result.

    */
    open class func Fail(failure : dotnet.System.Exception, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Fail_0__2__Exception_AuthenticationProperties(&__thrown, failure.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Fail(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Fail(System.String)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failureMessage: The failure message.
    - Returns: The result.

    */
    open class func Fail(failureMessage : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Fail_0__1__String(&__thrown, failureMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticateResult Fail(System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Fail(System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Indicates that there was a failure during authentication.
            

    - Parameter failureMessage: The failure message.
    - Parameter properties: Additional state values for the authentication session.
    - Returns: The result.

    */
    open class func Fail(failureMessage : dotnet.System.String, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticateResult__Fail_0__2__String_AuthenticationProperties(&__thrown, failureMessage.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Succeeded()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_Succeeded
    open func get_Succeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_bool__get_Succeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationTicket get_Ticket()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_Ticket
    open func get_Ticket() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticationTicket__get_Ticket_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Ticket(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.set_Ticket(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    open func set_Ticket(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticateResult_void__set_Ticket_0__1__AuthenticationTicket(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_Principal
    open func get_Principal() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_ClaimsPrincipal__get_Principal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_Properties
    open func get_Properties() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.set_Properties(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    open func set_Properties(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticateResult_void__set_Properties_0__1__AuthenticationProperties(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Exception get_Failure()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_Failure
    open func get_Failure() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_Exception__get_Failure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Failure(System.Exception)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.set_Failure(System.Exception)
    open func set_Failure(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticateResult_void__set_Failure_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_None()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.get_None
    open func get_None() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticateResult_bool__get_None_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_None(bool)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticateResult.set_None(System.Boolean)
    open func set_None(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticateResult_void__set_None_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Holds failure information from the authentication.
            

    */
    open var Failure : Optional<dotnet.System.Exception> {
        get {
            return try! get_Failure();
        }
        set(v) {
            return try! set_Failure(value: v!);
        }
    }
    /**
    
            Indicates that there was no information returned for this authentication scheme.
            

    */
    open var None : Bool {
        get {
            return try! get_None();
        }
        set(v) {
            return try! set_None(value: v);
        }
    }
    /**
    
            Gets the claims-principal with authenticated user identities.
            

    */
    open var Principal : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_Principal();
        }
    }
    /**
    
            Additional state values for the authentication session.
            

    */
    open var Properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v!);
        }
    }
    /**
    
            If a ticket was produced, authenticate was successful.
            

    */
    open var Succeeded : Bool {
        get {
            return try! get_Succeeded();
        }
    }
    /**
    
            The authentication ticket.
            

    */
    open var Ticket : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        get {
            return try! get_Ticket();
        }
        set(v) {
            return try! set_Ticket(value: v!);
        }
    }
} // AuthenticateResult


// type: Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions
public struct AuthenticationHttpContextExtensions {
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Authenticate the current request using the default authentication scheme.
            The default authentication scheme can be configured using .
            

    - Parameter context: The  context.
    - Returns: The .

    */
    public static func AuthenticateAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Authenticate the current request using the specified scheme.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The .

    */
    public static func AuthenticateAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__2__HttpContext_String(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Challenge the current request using the specified scheme.
            An authentication challenge can be issued when an unauthenticated user requests an endpoint that requires authentication.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The result.

    */
    public static func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ChallengeAsync_0__2__HttpContext_String(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Challenge the current request using the default challenge scheme.
            An authentication challenge can be issued when an unauthenticated user requests an endpoint that requires authentication.
            The default challenge scheme can be configured using .
            

    - Parameter context: The  context.
    - Returns: The task.

    */
    public static func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ChallengeAsync_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Challenge the current request using the default challenge scheme.
            An authentication challenge can be issued when an unauthenticated user requests an endpoint that requires authentication.
            The default challenge scheme can be configured using .
            

    - Parameter context: The  context.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ChallengeAsync_0__2__HttpContext_AuthenticationProperties(&__thrown, context.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Challenge the current request using the specified scheme.
            An authentication challenge can be issued when an unauthenticated user requests an endpoint that requires authentication.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ChallengeAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Forbid the current request using the specified scheme.
            Forbid is used when an authenticated user attempts to access a resource they are not permitted to access.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The task.

    */
    public static func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ForbidAsync_0__2__HttpContext_String(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Forbid the current request using the default forbid scheme.
            Forbid is used when an authenticated user attempts to access a resource they are not permitted to access.
            The default forbid scheme can be configured using .
            

    - Parameter context: The  context.
    - Returns: The task.

    */
    public static func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ForbidAsync_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Forbid the current request using the default forbid scheme.
            Forbid is used when an authenticated user attempts to access a resource they are not permitted to access.
            The default forbid scheme can be configured using .
            

    - Parameter context: The  context.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ForbidAsync_0__2__HttpContext_AuthenticationProperties(&__thrown, context.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Forbid the current request using the specified scheme.
            Forbid is used when an authenticated user attempts to access a resource they are not permitted to access.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__ForbidAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal)
    /**
    
            Sign in a principal for the specified scheme.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter principal: The user.
    - Returns: The task.

    */
    public static func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignInAsync_0__3__HttpContext_String_ClaimsPrincipal(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal)
    /**
    
            Sign in a principal for the default authentication scheme.
            The default scheme for signing in can be configured using .
            

    - Parameter context: The  context.
    - Parameter principal: The user.
    - Returns: The task.

    */
    public static func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignInAsync_0__2__HttpContext_ClaimsPrincipal(&__thrown, context.get_handle(), principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign in a principal for the default authentication scheme.
            The default scheme for signing in can be configured using .
            

    - Parameter context: The  context.
    - Parameter principal: The user.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignInAsync_0__3__HttpContext_ClaimsPrincipal_AuthenticationProperties(&__thrown, context.get_handle(), principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign in a principal for the specified scheme.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter principal: The user.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignInAsync_0__4__HttpContext_String_ClaimsPrincipal_AuthenticationProperties(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Sign out a principal for the default authentication scheme.
            The default scheme for signing out can be configured using .
            

    - Parameter context: The  context.
    - Returns: The task.

    */
    public static func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignOutAsync_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign out a principal for the default authentication scheme.
            The default scheme for signing out can be configured using .
            

    - Parameter context: The  context.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignOutAsync_0__2__HttpContext_AuthenticationProperties(&__thrown, context.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Sign out a principal for the specified scheme.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The task.

    */
    public static func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignOutAsync_0__2__HttpContext_String(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign out a principal for the specified scheme.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The  properties.
    - Returns: The task.

    */
    public static func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_Task__SignOutAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)
    /**
    
            Authenticates the request using the specified scheme and returns the value for the token.
            

    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter tokenName: The name of the token.
    - Returns: The value of the token if present.

    */
    public static func GetTokenAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_System_Threading_Tasks_Task_string___GetTokenAsync_0__3__HttpContext_String_String(&__thrown, context.get_handle(), scheme?.get_handle() ?? nil, tokenName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Authenticates the request using the default authentication scheme and returns the value for the token.
            The default authentication scheme can be configured using .
            

    - Parameter context: The  context.
    - Parameter tokenName: The name of the token.
    - Returns: The value of the token if present.

    */
    public static func GetTokenAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHttpContextExtensions_System_Threading_Tasks_Task_string___GetTokenAsync_0__2__HttpContext_String(&__thrown, context.get_handle(), tokenName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // AuthenticationHttpContextExtensions


// type: Microsoft.AspNetCore.Authentication.AuthenticationOptions
    /**
    
            Options to configure authentication.
            

    */
open class AuthenticationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddScheme(System.String, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.AddScheme(System.String,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder})
    /**
    
            Adds an .
            

    - Parameter name: The name of the scheme being added.
    - Parameter configureBuilder: Configures the scheme.
    */
    open func AddScheme(name : dotnet.System.String, configureBuilder : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__AddScheme_0__2__String_System_Action_Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_(&__thrown, self.get_handle(), name.get_handle(), configureBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddScheme(name : dotnet.System.String, configureBuilder : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder>) throws -> Void) throws {
        let del_configureBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder>(configureBuilder);
        return try AddScheme(name: name, configureBuilder: del_configureBuilder);
    }
// TODO COPE (write_all_methods) (unused generic param) void AddScheme<THandler>(System.String, System.String)
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> get_Schemes()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_Schemes
    open func get_Schemes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder___get_Schemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> get_SchemeMap()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_SchemeMap
    open func get_SchemeMap() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder___get_SchemeMap_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DefaultScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultScheme
    open func get_DefaultScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultScheme(System.String)
    open func set_DefaultScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultAuthenticateScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultAuthenticateScheme
    open func get_DefaultAuthenticateScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultAuthenticateScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultAuthenticateScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultAuthenticateScheme(System.String)
    open func set_DefaultAuthenticateScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultAuthenticateScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultSignInScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultSignInScheme
    open func get_DefaultSignInScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultSignInScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultSignInScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultSignInScheme(System.String)
    open func set_DefaultSignInScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultSignInScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultSignOutScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultSignOutScheme
    open func get_DefaultSignOutScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultSignOutScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultSignOutScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultSignOutScheme(System.String)
    open func set_DefaultSignOutScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultSignOutScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultChallengeScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultChallengeScheme
    open func get_DefaultChallengeScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultChallengeScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultChallengeScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultChallengeScheme(System.String)
    open func set_DefaultChallengeScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultChallengeScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DefaultForbidScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_DefaultForbidScheme
    open func get_DefaultForbidScheme() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_String__get_DefaultForbidScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultForbidScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_DefaultForbidScheme(System.String)
    open func set_DefaultForbidScheme(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_DefaultForbidScheme_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RequireAuthenticatedSignIn()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.get_RequireAuthenticatedSignIn
    open func get_RequireAuthenticatedSignIn() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationOptions_bool__get_RequireAuthenticatedSignIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RequireAuthenticatedSignIn(bool)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationOptions.set_RequireAuthenticatedSignIn(System.Boolean)
    open func set_RequireAuthenticatedSignIn(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationOptions_void__set_RequireAuthenticatedSignIn_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Used as the default scheme by .
            

    */
    open var DefaultAuthenticateScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultAuthenticateScheme();
        }
        set(v) {
            return try! set_DefaultAuthenticateScheme(value: v!);
        }
    }
    /**
    
            Used as the default scheme by .
            

    */
    open var DefaultChallengeScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultChallengeScheme();
        }
        set(v) {
            return try! set_DefaultChallengeScheme(value: v!);
        }
    }
    /**
    
            Used as the default scheme by .
            

    */
    open var DefaultForbidScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultForbidScheme();
        }
        set(v) {
            return try! set_DefaultForbidScheme(value: v!);
        }
    }
    /**
    
            Used as the fallback default scheme for all the other defaults.
            

    */
    open var DefaultScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultScheme();
        }
        set(v) {
            return try! set_DefaultScheme(value: v!);
        }
    }
    /**
    
            Used as the default scheme by .
            

    */
    open var DefaultSignInScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultSignInScheme();
        }
        set(v) {
            return try! set_DefaultSignInScheme(value: v!);
        }
    }
    /**
    
            Used as the default scheme by .
            

    */
    open var DefaultSignOutScheme : Optional<dotnet.System.String> {
        get {
            return try! get_DefaultSignOutScheme();
        }
        set(v) {
            return try! set_DefaultSignOutScheme(value: v!);
        }
    }
    /**
    
            If true, SignIn should throw if attempted with a user is not authenticated.
            A user is considered authenticated if  returns  for the  associated with the HTTP request.
            

    */
    open var RequireAuthenticatedSignIn : Bool {
        get {
            return try! get_RequireAuthenticatedSignIn();
        }
        set(v) {
            return try! set_RequireAuthenticatedSignIn(value: v);
        }
    }
    /**
    
            Maps schemes by name.
            

    */
    open var SchemeMap : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> {
        get {
            return try! get_SchemeMap();
        }
    }
    /**
    
            Returns the schemes in the order they were added (important for request handling priority)
            

    */
    open var Schemes : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder> {
        get {
            return try! get_Schemes();
        }
    }
} // AuthenticationOptions


// type: Microsoft.AspNetCore.Authentication.AuthenticationProperties
    /**
    
            Dictionary used to store state values about the authentication session.
            

    */
open class AuthenticationProperties
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationProperties_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter items: State values dictionary to use.
    */
    public init(items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationProperties_ctor_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IDictionary<System.String,System.String>, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter items: State values dictionary to use.
    - Parameter parameters: Parameters dictionary to use.
    */
    public init(items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>, parameters : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationProperties_ctor_0__2__System_Collections_Generic_IDictionary_string_string__System_Collections_Generic_IDictionary_string_object_(&__thrown, (items?.get_handle()), (parameters?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationProperties Clone()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.Clone
    /**
    
            Return a copy.
            

    - Returns: A copy.

    */
    open func Clone() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_AuthenticationProperties__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __return);
        }
    }
    // System.String GetString(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.GetString(System.String)
    /**
    
            Get a string value from the  collection.
            

    - Parameter key: Property key.
    - Returns: Retrieved value or null if the property is not set.

    */
    open func GetString(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_String__GetString_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetString(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.SetString(System.String,System.String)
    /**
    
            Set or remove a string value from the  collection.
            

    - Parameter key: Property key.
    - Parameter value: Value to set or  to remove the property.
    */
    open func SetString(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__SetString_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetParameter<T>(System.String)
    // void SetParameter<T>(System.String, T)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.SetParameter``1(System.String,``0)
    /**
    
            Set a parameter value in the  collection.
            

    - Parameter key: Parameter key.
    - Parameter value: Value to set.
    */
    open func SetParameter<UT : SGBridgeGenericValue>(key : dotnet.System.String, value : UT) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__SetParameter_1__2__String_UT(UT.get_type_handle(), &__thrown, self.get_handle(), key.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Items()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_System_Collections_Generic_IDictionary_string_string___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Parameters()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_System_Collections_Generic_IDictionary_string_object___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsPersistent()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_IsPersistent
    open func get_IsPersistent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_bool__get_IsPersistent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsPersistent(bool)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.set_IsPersistent(System.Boolean)
    open func set_IsPersistent(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__set_IsPersistent_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RedirectUri()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_RedirectUri
    open func get_RedirectUri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_String__get_RedirectUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RedirectUri(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.set_RedirectUri(System.String)
    open func set_RedirectUri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__set_RedirectUri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_IssuedUtc()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_IssuedUtc
    open func get_IssuedUtc() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_System_Nullable_System_DateTimeOffset___get_IssuedUtc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_IssuedUtc(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.set_IssuedUtc(System.Nullable{System.DateTimeOffset})
    open func set_IssuedUtc(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__set_IssuedUtc_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ExpiresUtc()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_ExpiresUtc
    open func get_ExpiresUtc() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_System_Nullable_System_DateTimeOffset___get_ExpiresUtc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ExpiresUtc(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.set_ExpiresUtc(System.Nullable{System.DateTimeOffset})
    open func set_ExpiresUtc(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__set_ExpiresUtc_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_AllowRefresh()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.get_AllowRefresh
    open func get_AllowRefresh() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationProperties_System_Nullable_bool___get_AllowRefresh_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_AllowRefresh(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationProperties.set_AllowRefresh(System.Nullable{System.Boolean})
    open func set_AllowRefresh(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationProperties_void__set_AllowRefresh_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets if refreshing the authentication session should be allowed.
            

    */
    open var AllowRefresh : Optional<Bool> {
        get {
            return try! get_AllowRefresh();
        }
        set(v) {
            return try! set_AllowRefresh(value: v!);
        }
    }
    /**
    
            Gets or sets the time at which the authentication ticket expires.
            

    */
    open var ExpiresUtc : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ExpiresUtc();
        }
        set(v) {
            return try! set_ExpiresUtc(value: v!);
        }
    }
    /**
    
            Gets or sets whether the authentication session is persisted across multiple requests.
            

    */
    open var IsPersistent : Bool {
        get {
            return try! get_IsPersistent();
        }
        set(v) {
            return try! set_IsPersistent(value: v);
        }
    }
    /**
    
            Gets or sets the time at which the authentication ticket was issued.
            

    */
    open var IssuedUtc : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_IssuedUtc();
        }
        set(v) {
            return try! set_IssuedUtc(value: v!);
        }
    }
    /**
    
            State values about the authentication session.
            

    */
    open var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Collection of parameters that are passed to the authentication handler. These are not intended for
            serialization or persistence, only for flowing data between call sites.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets or sets the full path or absolute URI to be used as an http redirect response value.
            

    */
    open var RedirectUri : Optional<dotnet.System.String> {
        get {
            return try! get_RedirectUri();
        }
        set(v) {
            return try! set_RedirectUri(value: v!);
        }
    }
} // AuthenticationProperties


// type: Microsoft.AspNetCore.Authentication.AuthenticationScheme
    /**
    
            AuthenticationSchemes assign a name to a specific 
            handlerType.
            

    */
open class AuthenticationScheme
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationScheme_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationScheme.#ctor(System.String,System.String,System.Type)
    /**
    
            Initializes a new instance of .
            

    - Parameter name: The name for the authentication scheme.
    - Parameter displayName: The display name for the authentication scheme.
    - Parameter handlerType: The  type that handles this scheme.
    */
    public init(name : dotnet.System.String, displayName : Optional<dotnet.System.String>, handlerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationScheme_ctor_0__3__String_String_Type(&__thrown, name.get_handle(), displayName?.get_handle() ?? nil, handlerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationScheme.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationScheme_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationScheme.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationScheme_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_HandlerType()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationScheme.get_HandlerType
    open func get_HandlerType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationScheme_Type__get_HandlerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            The display name for the scheme. Null is valid and used for non user facing schemes.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            The  type that handles this scheme.
            

    */
    open var HandlerType : dotnet.System.Type_ {
        get {
            return try! get_HandlerType();
        }
    }
    /**
    
            The name of the authentication scheme.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // AuthenticationScheme


// type: Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder
    /**
    
            Used to build s.
            

    */
open class AuthenticationSchemeBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.#ctor(System.String)
    /**
    
            Constructor.
            

    - Parameter name: The name of the scheme being built.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationScheme Build()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.Build
    /**
    
            Builds the  instance.
            

    - Returns: The .

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_AuthenticationScheme__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.set_DisplayName(System.String)
    open func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_HandlerType()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.get_HandlerType
    open func get_HandlerType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_Type__get_HandlerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HandlerType(System.Type)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder.set_HandlerType(System.Type)
    open func set_HandlerType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeBuilder_void__set_HandlerType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the display name for the scheme being built.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets the  type responsible for this scheme.
            

    */
    open var HandlerType : Optional<dotnet.System.Type_> {
        get {
            return try! get_HandlerType();
        }
        set(v) {
            return try! set_HandlerType(value: v!);
        }
    }
    /**
    
            Gets the name of the scheme being built.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // AuthenticationSchemeBuilder


// type: Microsoft.AspNetCore.Authentication.AuthenticationTicket
    /**
    
            Contains user identity information as well as additional authentication state.
            

    */
open class AuthenticationTicket
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationTicket_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.#ctor(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Initializes a new instance of the  class
            

    - Parameter principal: the  that represents the authenticated user.
    - Parameter properties: additional properties that can be consumed by the user or runtime.
    - Parameter authenticationScheme: the authentication scheme that was responsible for this ticket.
    */
    public init(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>, authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationTicket_ctor_0__3__ClaimsPrincipal_AuthenticationProperties_String(&__thrown, principal.get_handle(), properties?.get_handle() ?? nil, authenticationScheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Claims.ClaimsPrincipal, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.#ctor(System.Security.Claims.ClaimsPrincipal,System.String)
    /**
    
            Initializes a new instance of the  class
            

    - Parameter principal: the  that represents the authenticated user.
    - Parameter authenticationScheme: the authentication scheme that was responsible for this ticket.
    */
    public init(principal : dotnet.System.Security.Claims.ClaimsPrincipal, authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationTicket_ctor_0__2__ClaimsPrincipal_String(&__thrown, principal.get_handle(), authenticationScheme.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationTicket Clone()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.Clone
    /**
    
            Returns a copy of the ticket.
            

    - Returns: A copy of the ticket

    */
    open func Clone() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTicket_AuthenticationTicket__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AuthenticationScheme()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.get_AuthenticationScheme
    open func get_AuthenticationScheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTicket_String__get_AuthenticationScheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_Principal()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.get_Principal
    open func get_Principal() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTicket_ClaimsPrincipal__get_Principal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTicket.get_Properties
    open func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTicket_AuthenticationProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties(hndl : __return);
        }
    }
    /**
    
            Gets the authentication scheme that was responsible for this ticket.
            

    */
    open var AuthenticationScheme : dotnet.System.String {
        get {
            return try! get_AuthenticationScheme();
        }
    }
    /**
    
            Gets the claims-principal with authenticated user identities.
            

    */
    open var Principal : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_Principal();
        }
    }
    /**
    
            Additional state values for the authentication session.
            

    */
    open var Properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
        get {
            return try! get_Properties();
        }
    }
} // AuthenticationTicket


// type: Microsoft.AspNetCore.Authentication.AuthenticationToken
    /**
    
            Name/Value representing a token.
            

    */
open class AuthenticationToken
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationToken_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationToken.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationToken_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationToken.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationToken_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationToken.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationToken_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationToken.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationToken_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationToken.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationToken_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Name.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Value.
            

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // AuthenticationToken


// type: Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions
public struct AuthenticationTokenExtensions {
    // void StoreTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationToken>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authentication.AuthenticationToken})
    /**
    
            Stores a set of authentication tokens, after removing any old tokens.
            

    - Parameter properties: The  properties.
    - Parameter tokens: The tokens to store.
    */
    public static func StoreTokens(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, tokens : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationToken>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_void__StoreTokens_0__2__AuthenticationProperties_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationToken_(&__thrown, properties.get_handle(), tokens.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Returns the value of a token.
            

    - Parameter properties: The  properties.
    - Parameter tokenName: The token name.
    - Returns: The token value.

    */
    public static func GetTokenValue(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, tokenName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_String__GetTokenValue_0__2__AuthenticationProperties_String(&__thrown, properties.get_handle(), tokenName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool UpdateTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String,System.String)
    /**
    
            Updates the value of a token if already present.
            

    - Parameter properties: The  to update.
    - Parameter tokenName: The token name.
    - Parameter tokenValue: The token value.
    - Returns:  if the token was updated, otherwise .

    */
    public static func UpdateTokenValue(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties, tokenName : dotnet.System.String, tokenValue : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_bool__UpdateTokenValue_0__3__AuthenticationProperties_String_String(&__thrown, properties.get_handle(), tokenName.get_handle(), tokenValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationToken> GetTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Returns all of the  instances contained in the properties.
            

    - Parameter properties: The  properties.
    - Returns: The authentication tokens.

    */
    public static func GetTokens(properties : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationToken___GetTokens_0__1__AuthenticationProperties(&__thrown, properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService, Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Authenticates the request using the specified authentication scheme and returns the value for the token.
            

    - Parameter auth: The .
    - Parameter context: The  context.
    - Parameter tokenName: The name of the token.
    - Returns: The value of the token if present.

    */
    public static func GetTokenAsync(auth : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationService, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_System_Threading_Tasks_Task_string___GetTokenAsync_0__3__IAuthenticationService_HttpContext_String(&__thrown, auth.get_handle(), context.get_handle(), tokenName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)
    /**
    
            Authenticates the request using the specified authentication scheme and returns the value for the token.
            

    - Parameter auth: The .
    - Parameter context: The  context.
    - Parameter scheme: The name of the authentication scheme.
    - Parameter tokenName: The name of the token.
    - Returns: The value of the token if present.

    */
    public static func GetTokenAsync(auth : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationService, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationTokenExtensions_System_Threading_Tasks_Task_string___GetTokenAsync_0__4__IAuthenticationService_HttpContext_String_String(&__thrown, auth.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, tokenName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // AuthenticationTokenExtensions


// type: Microsoft.AspNetCore.Authentication.IAuthenticateResultFeature
    /**
    
            Used to capture the  from the authorization middleware.
            

    */
open class IAuthenticateResultFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticateResultFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticateResultFeature_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticateResult get_AuthenticateResult()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticateResultFeature.get_AuthenticateResult
    open func get_AuthenticateResult() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticateResultFeature_AuthenticateResult__get_AuthenticateResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AuthenticateResult(Microsoft.AspNetCore.Authentication.AuthenticateResult)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticateResultFeature.set_AuthenticateResult(Microsoft.AspNetCore.Authentication.AuthenticateResult)
    open func set_AuthenticateResult(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_IAuthenticateResultFeature_void__set_AuthenticateResult_0__1__AuthenticateResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAuthenticateResultFeature


// type: Microsoft.AspNetCore.Authentication.IAuthenticationFeature
    /**
    
            Used to capture path info so redirects can be computed properly within an app.Map().
            

    */
open class IAuthenticationFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationFeature_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_OriginalPathBase()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationFeature.get_OriginalPathBase
    open func get_OriginalPathBase() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationFeature_PathString__get_OriginalPathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPathBase(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationFeature.set_OriginalPathBase(Microsoft.AspNetCore.Http.PathString)
    open func set_OriginalPathBase(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_IAuthenticationFeature_void__set_OriginalPathBase_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_OriginalPath()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationFeature.get_OriginalPath
    open func get_OriginalPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationFeature_PathString__get_OriginalPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationFeature.set_OriginalPath(Microsoft.AspNetCore.Http.PathString)
    open func set_OriginalPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_IAuthenticationFeature_void__set_OriginalPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAuthenticationFeature


// type: Microsoft.AspNetCore.Authentication.IAuthenticationHandler
    /**
    
            Created per request to handle authentication for a particular scheme.
            

    */
open class IAuthenticationHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationHandler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationHandler.InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Initialize the authentication handler. The handler should initialize anything it needs from the request and scheme as part of this method.
            

    - Parameter scheme: The  scheme.
    - Parameter context: The  context.
    */
    open func InitializeAsync(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationHandler_Task__InitializeAsync_0__2__AuthenticationScheme_HttpContext(&__thrown, self.get_handle(), scheme.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationHandler.AuthenticateAsync
    /**
    
            Authenticate the current request.
            

    - Returns: The  result.

    */
    open func AuthenticateAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationHandler_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationHandler.ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Challenge the current request.
            

    - Parameter properties: The  that contains the extra meta-data arriving with the authentication.
    */
    open func ChallengeAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationHandler_Task__ChallengeAsync_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationHandler.ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Forbid the current request.
            

    - Parameter properties: The  that contains the extra meta-data arriving with the authentication.
    */
    open func ForbidAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationHandler_Task__ForbidAsync_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAuthenticationHandler


// type: Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider
    /**
    
            Provides the appropriate IAuthenticationHandler instance for the authenticationScheme and request.
            

    */
open class IAuthenticationHandlerProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandlerProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationHandlerProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.IAuthenticationHandler> GetHandlerAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider.GetHandlerAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Returns the handler instance that will be used.
            

    - Parameter context: The .
    - Parameter authenticationScheme: The name of the authentication scheme being handled.
    - Returns: The handler instance.

    */
    open func GetHandlerAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, authenticationScheme : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationHandlerProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_IAuthenticationHandler___GetHandlerAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IAuthenticationHandlerProvider


// type: Microsoft.AspNetCore.Authentication.IAuthenticationRequestHandler
    /**
    
            Used to determine if a handler wants to participate in request processing.
            

    */
open class IAuthenticationRequestHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationRequestHandler,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationRequestHandler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<bool> HandleRequestAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationRequestHandler.HandleRequestAsync
    /**
    
            Gets a value that determines if the request should stop being processed.
            
            This feature is supported by the Authentication middleware
            which does not invoke any subsequent  or middleware configured in the request pipeline
            if the handler returns .
            
            

    - Returns:  if request processing should stop.

    */
    open func HandleRequestAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationRequestHandler_System_Threading_Tasks_Task_bool___HandleRequestAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IAuthenticationRequestHandler


// type: Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider
    /**
    
            Responsible for managing what authenticationSchemes are supported.
            

    */
open class IAuthenticationSchemeProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationScheme>> GetAllSchemesAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetAllSchemesAsync
    /**
    
            Returns all currently registered s.
            

    - Returns: All currently registered s.

    */
    open func GetAllSchemesAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationScheme____GetAllSchemesAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetSchemeAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetSchemeAsync(System.String)
    /**
    
            Returns the  matching the name, or null.
            

    - Parameter name: The name of the authenticationScheme.
    - Returns: The scheme or null if not found.

    */
    open func GetSchemeAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetSchemeAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultAuthenticateSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetDefaultAuthenticateSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultAuthenticateSchemeAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultAuthenticateSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultChallengeSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetDefaultChallengeSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultChallengeSchemeAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultChallengeSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultForbidSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetDefaultForbidSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to  .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultForbidSchemeAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultForbidSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultSignInSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetDefaultSignInSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultSignInSchemeAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultSignInSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultSignOutSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetDefaultSignOutSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to  .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultSignOutSchemeAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultSignOutSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void AddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.AddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
    /**
    
            Registers a scheme for use by .
            

    - Parameter scheme: The scheme.
    */
    open func AddScheme(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_void__AddScheme_0__1__AuthenticationScheme(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.TryAddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
    /**
    
            Registers a scheme for use by .
            

    - Parameter scheme: The scheme.
    - Returns: true if the scheme was added successfully.

    */
    open func TryAddScheme(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_bool__TryAddScheme_0__1__AuthenticationScheme(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.RemoveScheme(System.String)
    /**
    
            Removes a scheme, preventing it from being used by .
            

    - Parameter name: The name of the authenticationScheme being removed.
    */
    open func RemoveScheme(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_void__RemoveScheme_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationScheme>> GetRequestHandlerSchemesAsync()
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider.GetRequestHandlerSchemesAsync
    /**
    
            Returns the schemes in priority order for request handling.
            

    - Returns: The schemes in priority order for request handling

    */
    open func GetRequestHandlerSchemesAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationScheme____GetRequestHandlerSchemesAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IAuthenticationSchemeProvider


// type: Microsoft.AspNetCore.Authentication.IAuthenticationService
    /**
    
            Used to provide authentication.
            

    */
open class IAuthenticationService
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationService
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationService.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Authenticate for the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The result.

    */
    open func AuthenticateAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationService.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Challenge the specified authentication scheme.
            An authentication challenge can be issued when an unauthenticated user requests an endpoint that requires authentication.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationService_Task__ChallengeAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationService.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Forbids the specified authentication scheme.
            Forbid is used when an authenticated user attempts to access a resource they are not permitted to access.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationService_Task__ForbidAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationService.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign a principal in for the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter principal: The  to sign in.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationService_Task__SignInAsync_0__4__HttpContext_String_ClaimsPrincipal_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationService.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign out the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationService_Task__SignOutAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAuthenticationService


// type: Microsoft.AspNetCore.Authentication.IAuthenticationSignInHandler
    /**
    
            Used to determine if a handler supports SignIn.
            

    */
open class IAuthenticationSignInHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationSignInHandler,
    Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationSignInHandler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task SignInAsync(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSignInHandler.SignInAsync(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Handle sign in.
            

    - Parameter user: The  user.
    - Parameter properties: The  that contains the extra meta-data arriving with the authentication.
    - Returns: A task.

    */
    open func SignInAsync(user : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSignInHandler_Task__SignInAsync_0__2__ClaimsPrincipal_AuthenticationProperties(&__thrown, self.get_handle(), user.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAuthenticationSignInHandler


// type: Microsoft.AspNetCore.Authentication.IAuthenticationSignOutHandler
    /**
    
            Used to determine if a handler supports SignOut.
            

    */
open class IAuthenticationSignOutHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.IAuthenticationSignOutHandler.SignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Signout behavior.
            

    - Parameter properties: The  that contains the extra meta-data arriving with the authentication.
    - Returns: A task.

    */
    open func SignOutAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler_Task__SignOutAsync_0__1__AuthenticationProperties(&__thrown, self.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAuthenticationSignOutHandler


// type: Microsoft.AspNetCore.Authentication.IClaimsTransformation
    /**
    
            Used by the  for claims transformation.
            

    */
open class IClaimsTransformation
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_IClaimsTransformation
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_IClaimsTransformation_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal> TransformAsync(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.IClaimsTransformation.TransformAsync(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Provides a central transformation point to change the specified principal.
            Note: this will be run on each AuthenticateAsync call, so its safer to
            return a new ClaimsPrincipal if your transformation is not idempotent.
            

    - Parameter principal: The  to transform.
    - Returns: The transformed principal.

    */
    open func TransformAsync(principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_IClaimsTransformation_System_Threading_Tasks_Task_System_Security_Claims_ClaimsPrincipal___TransformAsync_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IClaimsTransformation


}



public protocol Microsoft_AspNetCore_Authentication_IAuthenticateResultFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationHandler
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationHandlerProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationRequestHandler
    :
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationService
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationSignInHandler
    :
    Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler
{
}

public protocol Microsoft_AspNetCore_Authentication_IAuthenticationSignOutHandler
    :
    Microsoft_AspNetCore_Authentication_IAuthenticationHandler
{
}

public protocol Microsoft_AspNetCore_Authentication_IClaimsTransformation
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func AuthenticateAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(context: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func AuthenticateAsync(scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(context: self, scheme: scheme);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ChallengeAsync(scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(context: self, scheme: scheme);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ChallengeAsync() throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(context: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ChallengeAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(context: self, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ChallengeAsync(scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(context: self, scheme: scheme, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ForbidAsync(scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(context: self, scheme: scheme);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ForbidAsync() throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(context: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ForbidAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(context: self, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func ForbidAsync(scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(context: self, scheme: scheme, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignInAsync(scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(context: self, scheme: scheme, principal: principal);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.Security.Claims.ClaimsPrincipal)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignInAsync(principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(context: self, principal: principal);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignInAsync(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(context: self, principal: principal, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignInAsync(scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(context: self, scheme: scheme, principal: principal, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignOutAsync() throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(context: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignOutAsync(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(context: self, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignOutAsync(scheme : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(context: self, scheme: scheme);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SignOutAsync(scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(context: self, scheme: scheme, properties: properties);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetTokenAsync(scheme : Optional<dotnet.System.String>, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(context: self, scheme: scheme, tokenName: tokenName);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetTokenAsync(tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(context: self, tokenName: tokenName);
    }
}

// EXTENSION METHOD void StoreTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationToken>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
    public func StoreTokens(tokens : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationToken>) throws {
        try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(properties: self, tokens: tokens);
    }
}

// EXTENSION METHOD System.String GetTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
    public func GetTokenValue(tokenName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(properties: self, tokenName: tokenName);
    }
}

// EXTENSION METHOD bool UpdateTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
    public func UpdateTokenValue(tokenName : dotnet.System.String, tokenValue : dotnet.System.String) throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(properties: self, tokenName: tokenName, tokenValue: tokenValue);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationToken> GetTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties {
    public func GetTokens() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationToken> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(properties: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService, Microsoft.AspNetCore.Http.HttpContext, System.String)
extension Microsoft_AspNetCore_Authentication_IAuthenticationService {
    public func GetTokenAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(auth: aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationService(hndl: __copy_handle(self.get_handle())), context: context, tokenName: tokenName);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.String> GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService, Microsoft.AspNetCore.Http.HttpContext, System.String, System.String)
extension Microsoft_AspNetCore_Authentication_IAuthenticationService {
    public func GetTokenAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, tokenName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(auth: aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationService(hndl: __copy_handle(self.get_handle())), context: context, scheme: scheme, tokenName: tokenName);
    }
}

