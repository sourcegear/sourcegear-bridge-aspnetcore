// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.SignalR
extension Microsoft.AspNetCore.SignalR {
// type: Microsoft.AspNetCore.SignalR.ClientProxyExtensions
public struct ClientProxyExtensions {
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__3__IClientProxy_String_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__4__IClientProxy_String_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__5__IClientProxy_String_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__6__IClientProxy_String_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__7__IClientProxy_String_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__8__IClientProxy_String_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter arg6: The sixth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__9__IClientProxy_String_Object_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, arg6?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter arg6: The sixth argument.
    - Parameter arg7: The seventh argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__10__IClientProxy_String_Object_Object_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, arg6?.get_handle() ?? nil, arg7?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter arg6: The sixth argument.
    - Parameter arg7: The seventh argument.
    - Parameter arg8: The eigth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__11__IClientProxy_String_Object_Object_Object_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, arg6?.get_handle() ?? nil, arg7?.get_handle() ?? nil, arg8?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter arg6: The sixth argument.
    - Parameter arg7: The seventh argument.
    - Parameter arg8: The eigth argument.
    - Parameter arg9: The ninth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, arg9 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__12__IClientProxy_String_Object_Object_Object_Object_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, arg6?.get_handle() ?? nil, arg7?.get_handle() ?? nil, arg8?.get_handle() ?? nil, arg9?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter clientProxy: The 
    - Parameter method: The name of the method to invoke.
    - Parameter arg1: The first argument.
    - Parameter arg2: The second argument.
    - Parameter arg3: The third argument.
    - Parameter arg4: The fourth argument.
    - Parameter arg5: The fifth argument.
    - Parameter arg6: The sixth argument.
    - Parameter arg7: The seventh argument.
    - Parameter arg8: The eigth argument.
    - Parameter arg9: The ninth argument.
    - Parameter arg10: The tenth argument.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    public static func SendAsync(clientProxy : aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy, method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, arg9 : Optional<dotnet.System.Object>, arg10 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_ClientProxyExtensions_Task__SendAsync_0__13__IClientProxy_String_Object_Object_Object_Object_Object_Object_Object_Object_Object_Object_CancellationToken(&__thrown, clientProxy.get_handle(), method.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil, arg3?.get_handle() ?? nil, arg4?.get_handle() ?? nil, arg5?.get_handle() ?? nil, arg6?.get_handle() ?? nil, arg7?.get_handle() ?? nil, arg8?.get_handle() ?? nil, arg9?.get_handle() ?? nil, arg10?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // ClientProxyExtensions


// type: Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1
    /**
    
            A default in-memory lifetime manager abstraction for  instances.
            

    */
open class DefaultHubLifetimeManager_1<THub : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeManager_1<THub>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_get_type_handle(THub.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager<THub>>)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager{`0}})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter logger: The logger.
    */
    public init(logger : aspnetcore.Microsoft.Extensions.Logging.ILogger_1<aspnetcore.Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager_1<THub>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_ctor_0__1__Microsoft_Extensions_Logging_ILogger_Microsoft_AspNetCore_SignalR_Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_THub__(THub.get_type_handle(), &__thrown, logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task AddToGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.AddToGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    */
    open override func AddToGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__AddToGroupAsync_0__3__String_String_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task RemoveFromGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.RemoveFromGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    */
    open override func RemoveFromGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__RemoveFromGroupAsync_0__3__String_String_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAllAsync(System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendAllAsync(System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendAllAsync(methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendAllAsync_0__3__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendConnectionAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendConnectionAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendConnectionAsync(connectionId : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendConnectionAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendGroupAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendGroupAsync(groupName : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendGroupAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendGroupsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendGroupsAsync(groupNames : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendGroupsAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupNames.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupExceptAsync(System.String, System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendGroupExceptAsync(System.String,System.String,System.Object[],System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)
    /**
    */
    open override func SendGroupExceptAsync(groupName : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendGroupExceptAsync_0__5__String_String_ObjectArray_System_Collections_Generic_IReadOnlyList_string__CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle(), methodName.get_handle(), args.get_handle(), excludedConnectionIds.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendUserAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendUserAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendUserAsync(userId : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendUserAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), userId.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    */
    open override func OnConnectedAsync(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__OnConnectedAsync_0__1__HubConnectionContext(THub.get_type_handle(), &__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    */
    open override func OnDisconnectedAsync(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__OnDisconnectedAsync_0__1__HubConnectionContext(THub.get_type_handle(), &__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAllExceptAsync(System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendAllExceptAsync(System.String,System.Object[],System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)
    /**
    */
    open override func SendAllExceptAsync(methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendAllExceptAsync_0__4__String_ObjectArray_System_Collections_Generic_IReadOnlyList_string__CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), methodName.get_handle(), args.get_handle(), excludedConnectionIds.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendConnectionsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendConnectionsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendConnectionsAsync(connectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendConnectionsAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionIds.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendUsersAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager`1.SendUsersAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    */
    open override func SendUsersAsync(userIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultHubLifetimeManager_1_Task__SendUsersAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), userIds.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // DefaultHubLifetimeManager_1


// type: Microsoft.AspNetCore.SignalR.DefaultUserIdProvider
    /**
    
            The default provider for getting the user ID from a connection.
            This provider gets the user ID from the connection's  name identifier claim.
            

    */
open class DefaultUserIdProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_SignalR_IUserIdProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_DefaultUserIdProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_DefaultUserIdProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.SignalR.DefaultUserIdProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_DefaultUserIdProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetUserId(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.DefaultUserIdProvider.GetUserId(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    */
    open func GetUserId(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DefaultUserIdProvider_String__GetUserId_0__1__HubConnectionContext(&__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultUserIdProvider


// type: Microsoft.AspNetCore.SignalR.DynamicHub
    /**
    
            A base class for SignalR hubs that use dynamic to represent client invocations.
            

    */
open class DynamicHub
    :
    aspnetcore.Microsoft.AspNetCore.SignalR.Hub
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_DynamicHub_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_DynamicHub_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.DynamicHubClients get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHub.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.DynamicHubClients {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHub_DynamicHubClients__get_Clients_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.DynamicHubClients(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Clients(Microsoft.AspNetCore.SignalR.DynamicHubClients)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHub.set_Clients(Microsoft.AspNetCore.SignalR.DynamicHubClients)
    open func set_Clients(value : aspnetcore.Microsoft.AspNetCore.SignalR.DynamicHubClients) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_DynamicHub_void__set_Clients_0__1__DynamicHubClients(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_interface ) [IsSpecialName] Microsoft.AspNetCore.SignalR.DynamicHubClients get_Clients()
} // DynamicHub


// type: Microsoft.AspNetCore.SignalR.DynamicHubClients
    /**
    
            A class that provides dynamic access to connections, including the one that sent the current invocation.
            

    */
open class DynamicHubClients
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_DynamicHubClients_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_DynamicHubClients_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.IHubCallerClients)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.#ctor(Microsoft.AspNetCore.SignalR.IHubCallerClients)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter clients: A wrapped  that is used to invoke methods.
    */
    public init(clients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_DynamicHubClients_ctor_0__1__IHubCallerClients(&__thrown, clients.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object AllExcept(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.AllExcept(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets an object that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Returns: An object that can be used to invoke methods on the specified user.

    */
    open func AllExcept(excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__AllExcept_0__1__System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Client(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.Client(System.String)
    /**
    
            Gets an object that can be used to invoke methods on the specified connection.
            

    - Parameter connectionId: The connection ID.
    - Returns: An object that can be used to invoke methods.

    */
    open func Client(connectionId : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__Client_0__1__String(&__thrown, self.get_handle(), connectionId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Clients(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.Clients(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets an object that can be used to invoke methods on the specified connections.
            

    - Parameter connectionIds: The connection IDs.
    - Returns: An object that can be used to invoke methods.

    */
    open func Clients(connectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__Clients_0__1__System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), connectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Group(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.Group(System.String)
    /**
    
            Gets an object that can be used to invoke methods on all connections in the specified group.
            

    - Parameter groupName: The group name.
    - Returns: An object that can be used to invoke methods.

    */
    open func Group(groupName : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__Group_0__1__String(&__thrown, self.get_handle(), groupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Groups(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.Groups(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets an object that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter groupNames: The group names.
    - Returns: An object that can be used to invoke methods on the specified user.

    */
    open func Groups(groupNames : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__Groups_0__1__System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), groupNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GroupExcept(System.String, System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.GroupExcept(System.String,System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets an object that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter groupName: The group name.
    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Returns: An object that can be used to invoke methods.

    */
    open func GroupExcept(groupName : dotnet.System.String, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__GroupExcept_0__2__String_System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), groupName.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object OthersInGroup(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.OthersInGroup(System.String)
    /**
    
            Gets an object that can be used to invoke methods on connections in a group other than the caller.
            

    - Returns: An object that can be used to invoke methods.

    */
    open func OthersInGroup(groupName : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__OthersInGroup_0__1__String(&__thrown, self.get_handle(), groupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object User(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.User(System.String)
    /**
    
            Gets an object that can be used to invoke methods on all connections associated with the specified user.
            

    - Parameter userId: The user ID.
    - Returns: An object that can be used to invoke methods.

    */
    open func User(userId : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__User_0__1__String(&__thrown, self.get_handle(), userId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Users(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.Users(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets an object that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter userIds: The user IDs.
    - Returns: An object that can be used to invoke methods.

    */
    open func Users(userIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__Users_0__1__System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), userIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_All()
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.get_All
    open func get_All() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__get_All_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Caller()
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.get_Caller
    open func get_Caller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__get_Caller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Others()
// docid: M:Microsoft.AspNetCore.SignalR.DynamicHubClients.get_Others
    open func get_Others() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_DynamicHubClients_Object__get_Others_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            Gets an object that can be used to invoke methods on all clients connected to the hub.
            

    */
    open var All : dotnet.System.Object {
        get {
            return try! get_All();
        }
    }
    /**
    
            Gets an object that can be used to invoke methods on the connection which triggered the current invocation.
            

    */
    open var Caller : dotnet.System.Object {
        get {
            return try! get_Caller();
        }
    }
    /**
    
            Gets an object that can be used to invoke methods on connections other than the caller.
            

    */
    open var Others : dotnet.System.Object {
        get {
            return try! get_Others();
        }
    }
} // DynamicHubClients


// type: Microsoft.AspNetCore.SignalR.Hub
    /**
    
            A base class for a SignalR hub.
            

    */
open class Hub
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_Hub_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_Hub_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task OnConnectedAsync()
// docid: M:Microsoft.AspNetCore.SignalR.Hub.OnConnectedAsync
    /**
    
            Called when a new connection is established with the hub.
            

    - Returns: A  that represents the asynchronous connect.

    */
    open func OnConnectedAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_Task__OnConnectedAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task OnDisconnectedAsync(System.Exception)
// docid: M:Microsoft.AspNetCore.SignalR.Hub.OnDisconnectedAsync(System.Exception)
    /**
    
            Called when a connection with the hub is terminated.
            

    - Returns: A  that represents the asynchronous disconnect.

    */
    open func OnDisconnectedAsync(exception : Optional<dotnet.System.Exception>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_Task__OnDisconnectedAsync_0__1__Exception(&__thrown, self.get_handle(), exception?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.SignalR.Hub.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_Hub_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubCallerClients get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.Hub.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_IHubCallerClients__get_Clients_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Clients(Microsoft.AspNetCore.SignalR.IHubCallerClients)
// docid: M:Microsoft.AspNetCore.SignalR.Hub.set_Clients(Microsoft.AspNetCore.SignalR.IHubCallerClients)
    open func set_Clients(value : aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_Hub_void__set_Clients_0__1__IHubCallerClients(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.HubCallerContext get_Context()
// docid: M:Microsoft.AspNetCore.SignalR.Hub.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_HubCallerContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Context(Microsoft.AspNetCore.SignalR.HubCallerContext)
// docid: M:Microsoft.AspNetCore.SignalR.Hub.set_Context(Microsoft.AspNetCore.SignalR.HubCallerContext)
    open func set_Context(value : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_Hub_void__set_Context_0__1__HubCallerContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IGroupManager get_Groups()
// docid: M:Microsoft.AspNetCore.SignalR.Hub.get_Groups
    open func get_Groups() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_IGroupManager__get_Groups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Groups(Microsoft.AspNetCore.SignalR.IGroupManager)
// docid: M:Microsoft.AspNetCore.SignalR.Hub.set_Groups(Microsoft.AspNetCore.SignalR.IGroupManager)
    open func set_Groups(value : aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_Hub_void__set_Groups_0__1__IGroupManager(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets an object that can be used to invoke methods on the clients connected to this hub.
            

    */
    open var Clients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients {
        get {
            return try! get_Clients();
        }
        set(v) {
            return try! set_Clients(value: v);
        }
    }
    /**
    
            Gets or sets the hub caller context.
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        get {
            return try! get_Context();
        }
        set(v) {
            return try! set_Context(value: v);
        }
    }
    /**
    
            Gets or sets the group manager.
            

    */
    open var Groups : aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager {
        get {
            return try! get_Groups();
        }
        set(v) {
            return try! set_Groups(value: v);
        }
    }
} // Hub


// type: Microsoft.AspNetCore.SignalR.HubCallerContext
    /**
    
            A context abstraction for accessing information about the hub caller connection.
            

    */
open class HubCallerContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubCallerContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubCallerContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Abort()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.Abort
    /**
    
            Aborts the connection.
            

    */
    open func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubCallerContext_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionId()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_ConnectionId
    open func get_ConnectionId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_String__get_ConnectionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_UserIdentifier()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_UserIdentifier
    open func get_UserIdentifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_String__get_UserIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_User
    open func get_User() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_Features()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_Features
    open func get_Features() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_IFeatureCollection__get_Features_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ConnectionAborted()
// docid: M:Microsoft.AspNetCore.SignalR.HubCallerContext.get_ConnectionAborted
    open func get_ConnectionAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubCallerContext_CancellationToken__get_ConnectionAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    /**
    
            Gets a  that notifies when the connection is aborted.
            

    */
    open var ConnectionAborted : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_ConnectionAborted();
        }
    }
    /**
    
            Gets the connection ID.
            

    */
    open var ConnectionId : dotnet.System.String {
        get {
            return try! get_ConnectionId();
        }
    }
    /**
    
            Gets the collection of HTTP features available on the connection.
            

    */
    open var Features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_Features();
        }
    }
    /**
    
            Gets a key/value collection that can be used to share data within the scope of this connection.
            

    */
    open var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Gets the user.
            

    */
    open var User : Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        get {
            return try! get_User();
        }
    }
    /**
    
            Gets the user identifier.
            

    */
    open var UserIdentifier : Optional<dotnet.System.String> {
        get {
            return try! get_UserIdentifier();
        }
    }
} // HubCallerContext


// type: Microsoft.AspNetCore.SignalR.HubClientsExtensions
public struct HubClientsExtensions {
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connection.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__4__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__5__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__6__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__7__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Parameter excludedConnectionId7: The seventh connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__8__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle(), excludedConnectionId7.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Parameter excludedConnectionId7: The seventh connection to exclude.
    - Parameter excludedConnectionId8: The eighth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String, excludedConnectionId8 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__9__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle(), excludedConnectionId7.get_handle(), excludedConnectionId8.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter excludedConnectionIds: The connection IDs to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func AllExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, excludedConnectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__AllExcept_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__System_Collections_Generic_IEnumerable_string_(UT.get_type_handle(), &__thrown, hubClients.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__4__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Parameter connection4: The fourth connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__5__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle(), connection4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Parameter connection4: The fourth connection to include.
    - Parameter connection5: The fifth connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__6__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle(), connection4.get_handle(), connection5.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Parameter connection4: The fourth connection to include.
    - Parameter connection5: The fifth connection to include.
    - Parameter connection6: The sixth connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__7__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle(), connection4.get_handle(), connection5.get_handle(), connection6.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Parameter connection4: The fourth connection to include.
    - Parameter connection5: The fifth connection to include.
    - Parameter connection6: The sixth connection to include.
    - Parameter connection7: The seventh connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String, connection7 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__8__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle(), connection4.get_handle(), connection5.get_handle(), connection6.get_handle(), connection7.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connection1: The first connection to include.
    - Parameter connection2: The second connection to include.
    - Parameter connection3: The third connection to include.
    - Parameter connection4: The fourth connection to include.
    - Parameter connection5: The fifth connection to include.
    - Parameter connection6: The sixth connection to include.
    - Parameter connection7: The seventh connection to include.
    - Parameter connection8: The eighth connection to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String, connection7 : dotnet.System.String, connection8 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__9__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connection1.get_handle(), connection2.get_handle(), connection3.get_handle(), connection4.get_handle(), connection5.get_handle(), connection6.get_handle(), connection7.get_handle(), connection8.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Gets a  that can be used to invoke methods on the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter connectionIds: The connection IDs.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Clients<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, connectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Clients_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__System_Collections_Generic_IEnumerable_string_(UT.get_type_handle(), &__thrown, hubClients.get_handle(), connectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__4__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Parameter group4: The fourth group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__5__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle(), group4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Parameter group4: The fourth group to include.
    - Parameter group5: The fifth group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__6__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle(), group4.get_handle(), group5.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Parameter group4: The fourth group to include.
    - Parameter group5: The fifth group to include.
    - Parameter group6: The sixth group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__7__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle(), group4.get_handle(), group5.get_handle(), group6.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Parameter group4: The fourth group to include.
    - Parameter group5: The fifth group to include.
    - Parameter group6: The sixth group to include.
    - Parameter group7: The seventh group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String, group7 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__8__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle(), group4.get_handle(), group5.get_handle(), group6.get_handle(), group7.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter group1: The first group to include.
    - Parameter group2: The second group to include.
    - Parameter group3: The third group to include.
    - Parameter group4: The fourth group to include.
    - Parameter group5: The fifth group to include.
    - Parameter group6: The sixth group to include.
    - Parameter group7: The seventh group to include.
    - Parameter group8: The eighth group to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String, group7 : dotnet.System.String, group8 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__9__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), group1.get_handle(), group2.get_handle(), group3.get_handle(), group4.get_handle(), group5.get_handle(), group6.get_handle(), group7.get_handle(), group8.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupNames: The group names.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Groups<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupNames : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Groups_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__System_Collections_Generic_IEnumerable_string_(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__4__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__5__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__6__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__7__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__8__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Parameter excludedConnectionId7: The seventh connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__9__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle(), excludedConnectionId7.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionId1: The first connection to exclude.
    - Parameter excludedConnectionId2: The second connection to exclude.
    - Parameter excludedConnectionId3: The third connection to exclude.
    - Parameter excludedConnectionId4: The fourth connection to exclude.
    - Parameter excludedConnectionId5: The fifth connection to exclude.
    - Parameter excludedConnectionId6: The sixth connection to exclude.
    - Parameter excludedConnectionId7: The seventh connection to exclude.
    - Parameter excludedConnectionId8: The eighth connection to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String, excludedConnectionId8 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__10__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionId1.get_handle(), excludedConnectionId2.get_handle(), excludedConnectionId3.get_handle(), excludedConnectionId4.get_handle(), excludedConnectionId5.get_handle(), excludedConnectionId6.get_handle(), excludedConnectionId7.get_handle(), excludedConnectionId8.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter groupName: The group name.
    - Parameter excludedConnectionIds: The connection IDs to exclude.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func GroupExcept<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, groupName : dotnet.System.String, excludedConnectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__GroupExcept_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_System_Collections_Generic_IEnumerable_string_(UT.get_type_handle(), &__thrown, hubClients.get_handle(), groupName.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__3__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__4__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Parameter user4: The fourth user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__5__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle(), user4.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Parameter user4: The fourth user to include.
    - Parameter user5: The fifth user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__6__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle(), user4.get_handle(), user5.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Parameter user4: The fourth user to include.
    - Parameter user5: The fifth user to include.
    - Parameter user6: The sixth user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__7__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle(), user4.get_handle(), user5.get_handle(), user6.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Parameter user4: The fourth user to include.
    - Parameter user5: The fifth user to include.
    - Parameter user6: The sixth user to include.
    - Parameter user7: The seventh user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String, user7 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__8__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle(), user4.get_handle(), user5.get_handle(), user6.get_handle(), user7.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter user1: The first user to include.
    - Parameter user2: The second user to include.
    - Parameter user3: The third user to include.
    - Parameter user4: The fourth user to include.
    - Parameter user5: The fifth user to include.
    - Parameter user6: The sixth user to include.
    - Parameter user7: The seventh user to include.
    - Parameter user8: The eighth user to include.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String, user7 : dotnet.System.String, user8 : dotnet.System.String) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__9__Microsoft_AspNetCore_SignalR_IHubClients_UT__String_String_String_String_String_String_String_String(UT.get_type_handle(), &__thrown, hubClients.get_handle(), user1.get_handle(), user2.get_handle(), user3.get_handle(), user4.get_handle(), user5.get_handle(), user6.get_handle(), user7.get_handle(), user8.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users``1(Microsoft.AspNetCore.SignalR.IHubClients{``0},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter hubClients: The abstraction that provides access to connections.
    - Parameter userIds: The user IDs.
    - Returns: A  representing the methods that can be invoked on the clients.

    */
    public static func Users<UT : SGBridgeGenericValue>(hubClients : aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<UT>, userIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubClientsExtensions_UT__Users_1__2__Microsoft_AspNetCore_SignalR_IHubClients_UT__System_Collections_Generic_IEnumerable_string_(UT.get_type_handle(), &__thrown, hubClients.get_handle(), userIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
} // HubClientsExtensions


// type: Microsoft.AspNetCore.SignalR.HubConnectionContext
    /**
    
            Encapsulates all information about an individual connection to a SignalR Hub.
            

    */
open class HubConnectionContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubConnectionContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubConnectionContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Connections.ConnectionContext, Microsoft.AspNetCore.SignalR.HubConnectionContextOptions, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.#ctor(Microsoft.AspNetCore.Connections.ConnectionContext,Microsoft.AspNetCore.SignalR.HubConnectionContextOptions,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter connectionContext: The underlying .
    - Parameter loggerFactory: The logger factory.
    - Parameter contextOptions: The options to configure the HubConnectionContext.
    */
    public init(connectionContext : aspnetcore.Microsoft.AspNetCore.Connections.ConnectionContext, contextOptions : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContextOptions, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubConnectionContext_ctor_0__3__ConnectionContext_HubConnectionContextOptions_ILoggerFactory(&__thrown, connectionContext.get_handle(), contextOptions.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.ValueTask WriteAsync(Microsoft.AspNetCore.SignalR.Protocol.HubMessage, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.WriteAsync(Microsoft.AspNetCore.SignalR.Protocol.HubMessage,System.Threading.CancellationToken)
    /**
    
            Write a  to the connection.
            

    - Parameter message: The  being written.
    - Parameter cancellationToken: Cancels the in progress write.
    - Returns: A  that represents the completion of the write. If the write throws this task will still complete successfully.

    */
    open func WriteAsync(message : aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.HubMessage, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_ValueTask__WriteAsync_0__2__HubMessage_CancellationToken(&__thrown, self.get_handle(), message.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask WriteAsync(Microsoft.AspNetCore.SignalR.SerializedHubMessage, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.WriteAsync(Microsoft.AspNetCore.SignalR.SerializedHubMessage,System.Threading.CancellationToken)
    /**
    
            This method is designed to support the framework and is not intended to be used by application code. Writes a pre-serialized message to the
            connection.
            

    - Parameter message: The serialization cache to use.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: 

    */
    open func WriteAsync(message : aspnetcore.Microsoft.AspNetCore.SignalR.SerializedHubMessage, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_ValueTask__WriteAsync_0__2__SerializedHubMessage_CancellationToken(&__thrown, self.get_handle(), message.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void Abort()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.Abort
    /**
    
            Aborts the connection.
            

    */
    open func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContext_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ConnectionAborted()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_ConnectionAborted
    open func get_ConnectionAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_CancellationToken__get_ConnectionAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ConnectionId()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_ConnectionId
    open func get_ConnectionId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_String__get_ConnectionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_Features()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_Features
    open func get_Features() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_IFeatureCollection__get_Features_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_UserIdentifier()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_UserIdentifier
    open func get_UserIdentifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_String__get_UserIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UserIdentifier(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.set_UserIdentifier(System.String)
    open func set_UserIdentifier(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContext_void__set_UserIdentifier_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol get_Protocol()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.get_Protocol
    open func get_Protocol() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContext_IHubProtocol__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Protocol(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContext.set_Protocol(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol)
    open func set_Protocol(value : aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContext_void__set_Protocol_0__1__IHubProtocol(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets a  that notifies when the connection is aborted.
            

    */
    open var ConnectionAborted : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_ConnectionAborted();
        }
    }
    /**
    
            Gets the ID for this connection.
            

    */
    open var ConnectionId : dotnet.System.String {
        get {
            return try! get_ConnectionId();
        }
    }
    /**
    
            Gets the collection of features available on this connection.
            

    */
    open var Features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_Features();
        }
    }
    /**
    
            Gets a key/value collection that can be used to share data within the scope of this connection.
            

    */
    open var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Gets the protocol used by this connection.
            

    */
    open var Protocol_ : aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v);
        }
    }
    /**
    
            Gets the user for this connection.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
    /**
    
            Gets or sets the user identifier for this connection.
            

    */
    open var UserIdentifier : Optional<dotnet.System.String> {
        get {
            return try! get_UserIdentifier();
        }
        set(v) {
            return try! set_UserIdentifier(value: v!);
        }
    }
} // HubConnectionContext


// type: Microsoft.AspNetCore.SignalR.HubConnectionContextOptions
    /**
    
            Options used to configure .
            

    */
open class HubConnectionContextOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_KeepAliveInterval()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.get_KeepAliveInterval
    open func get_KeepAliveInterval() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_TimeSpan__get_KeepAliveInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeepAliveInterval(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.set_KeepAliveInterval(System.TimeSpan)
    open func set_KeepAliveInterval(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_void__set_KeepAliveInterval_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_ClientTimeoutInterval()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.get_ClientTimeoutInterval
    open func get_ClientTimeoutInterval() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_TimeSpan__get_ClientTimeoutInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClientTimeoutInterval(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.set_ClientTimeoutInterval(System.TimeSpan)
    open func set_ClientTimeoutInterval(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_void__set_ClientTimeoutInterval_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StreamBufferCapacity()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.get_StreamBufferCapacity
    open func get_StreamBufferCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_i32__get_StreamBufferCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StreamBufferCapacity(System.Int32)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.set_StreamBufferCapacity(System.Int32)
    open func set_StreamBufferCapacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_void__set_StreamBufferCapacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_MaximumReceiveMessageSize()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.get_MaximumReceiveMessageSize
    open func get_MaximumReceiveMessageSize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_System_Nullable_i64___get_MaximumReceiveMessageSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaximumReceiveMessageSize(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.set_MaximumReceiveMessageSize(System.Nullable{System.Int64})
    open func set_MaximumReceiveMessageSize(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_void__set_MaximumReceiveMessageSize_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumParallelInvocations()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.get_MaximumParallelInvocations
    open func get_MaximumParallelInvocations() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_i32__get_MaximumParallelInvocations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumParallelInvocations(System.Int32)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionContextOptions.set_MaximumParallelInvocations(System.Int32)
    open func set_MaximumParallelInvocations(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionContextOptions_void__set_MaximumParallelInvocations_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the time window clients have to send a message before the server closes the connection.
            

    */
    open var ClientTimeoutInterval : dotnet.System.TimeSpan {
        get {
            return try! get_ClientTimeoutInterval();
        }
        set(v) {
            return try! set_ClientTimeoutInterval(value: v);
        }
    }
    /**
    
            Gets or sets the interval used to send keep alive pings to connected clients.
            

    */
    open var KeepAliveInterval : dotnet.System.TimeSpan {
        get {
            return try! get_KeepAliveInterval();
        }
        set(v) {
            return try! set_KeepAliveInterval(value: v);
        }
    }
    /**
    
            Gets or sets the maximum parallel hub method invocations.
            

    */
    open var MaximumParallelInvocations : Swift.Int32 {
        get {
            return try! get_MaximumParallelInvocations();
        }
        set(v) {
            return try! set_MaximumParallelInvocations(value: v);
        }
    }
    /**
    
            Gets or sets the maximum message size the client can send.
            

    */
    open var MaximumReceiveMessageSize : Optional<Swift.Int64> {
        get {
            return try! get_MaximumReceiveMessageSize();
        }
        set(v) {
            return try! set_MaximumReceiveMessageSize(value: v!);
        }
    }
    /**
    
            Gets or sets the max buffer size for client upload streams.
            

    */
    open var StreamBufferCapacity : Swift.Int32 {
        get {
            return try! get_StreamBufferCapacity();
        }
        set(v) {
            return try! set_StreamBufferCapacity(value: v);
        }
    }
} // HubConnectionContextOptions


// type: Microsoft.AspNetCore.SignalR.HubConnectionHandler`1
    /**
    
            Handles incoming connections and implements the SignalR Hub Protocol.
            

    */
open class HubConnectionHandler_1<THub : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Connections.ConnectionHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubConnectionHandler_1_get_type_handle(THub.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubConnectionHandler_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.HubLifetimeManager<THub>, Microsoft.AspNetCore.SignalR.IHubProtocolResolver, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions<THub>>, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.SignalR.IUserIdProvider, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.#ctor(Microsoft.AspNetCore.SignalR.HubLifetimeManager{`0},Microsoft.AspNetCore.SignalR.IHubProtocolResolver,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.SignalR.HubOptions},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.SignalR.HubOptions{`0}},Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.SignalR.IUserIdProvider,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter lifetimeManager: The hub lifetime manager.
    - Parameter protocolResolver: The protocol resolver used to resolve the protocols between client and server.
    - Parameter globalHubOptions: The global options used to initialize hubs.
    - Parameter hubOptions: Hub specific options used to initialize hubs. These options override the global options.
    - Parameter loggerFactory: The logger factory.
    - Parameter userIdProvider: The user ID provider used to get the user ID from a hub connection.
    - Parameter serviceScopeFactory: The service scope factory.
    */
    public init(lifetimeManager : aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeManager_1<THub>, protocolResolver : aspnetcore.Microsoft.AspNetCore.SignalR.IHubProtocolResolver, globalHubOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions>, hubOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions_1<THub>>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, userIdProvider : aspnetcore.Microsoft.AspNetCore.SignalR.IUserIdProvider, serviceScopeFactory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceScopeFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubConnectionHandler_1_ctor_0__7__Microsoft_AspNetCore_SignalR_HubLifetimeManager_THub__IHubProtocolResolver_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_SignalR_HubOptions__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_SignalR_Microsoft_AspNetCore_SignalR_HubOptions_THub___ILoggerFactory_IUserIdProvider_IServiceScopeFactory(THub.get_type_handle(), &__thrown, lifetimeManager.get_handle(), protocolResolver.get_handle(), globalHubOptions.get_handle(), hubOptions.get_handle(), loggerFactory.get_handle(), userIdProvider.get_handle(), serviceScopeFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task OnConnectedAsync(Microsoft.AspNetCore.Connections.ConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.OnConnectedAsync(Microsoft.AspNetCore.Connections.ConnectionContext)
    /**
    */
    open override func OnConnectedAsync(connection : aspnetcore.Microsoft.AspNetCore.Connections.ConnectionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionHandler_1_Task__OnConnectedAsync_0__1__ConnectionContext(THub.get_type_handle(), &__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // HubConnectionHandler_1


// type: Microsoft.AspNetCore.SignalR.HubConnectionStore
    /**
    
            Stores s by ID.
            

    */
open class HubConnectionStore
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubConnectionStore_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubConnectionStore_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubConnectionStore_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Add(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Add a  to the store.
            

    - Parameter connection: The connection to add.
    */
    open func Add(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionStore_void__Add_0__1__HubConnectionContext(&__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Remove(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Removes a  from the store.
            

    - Parameter connection: The connection to remove.
    */
    open func Remove(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionStore_void__Remove_0__1__HubConnectionContext(&__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.GetEnumerator
    /**
    
            Gets an enumerator over the connection store.
            

    - Returns: The  over the connections.

    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionStore_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionStore_HubConnectionStore_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionStore_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionStore_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.HubConnectionContext get_Item(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.get_Item(System.String)
    open func get_Item(connectionId : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionStore_HubConnectionContext__get_Item_0__1__String(&__thrown, self.get_handle(), connectionId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The number of connections in the store.
            

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // HubConnectionStore


// type: Microsoft.AspNetCore.SignalR.HubConnectionStore+Enumerator
// boxed value type
    /**
    
            An  over the 
            

    */
public final class HubConnectionStore_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The current connection the enumerator is on.
            

    */
    public var Current : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.HubConnectionStore)
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator.#ctor(Microsoft.AspNetCore.SignalR.HubConnectionStore)
    /**
    
            Constructs the  over the .
            

    - Parameter hubConnectionList: The store of connections to enumerate over.
    */
    public init(hubConnectionList : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionStore) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_ctor_0__1__HubConnectionStore(&__thrown, hubConnectionList.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator.Dispose
    /**
    
            Disposes the enumerator.
            

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator.MoveNext
    /**
    
            Moves the enumerator to the next value.
            

    - Returns: True if there is another connection. False if there are no more connections.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator.Reset
    /**
    
            Resets the enumerator to the beginning.
            

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.HubConnectionContext get_Current()
// docid: M:Microsoft.AspNetCore.SignalR.HubConnectionStore.Enumerator.get_Current
    public func get_Current() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubConnectionStore_Enumerator_HubConnectionContext__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext(hndl : __return);
        }
    }
} // HubConnectionStore_Enumerator


// type: Microsoft.AspNetCore.SignalR.HubInvocationContext
    /**
    
            Context for a Hub invocation.
            

    */
open class HubInvocationContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubInvocationContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubInvocationContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.HubCallerContext, System.IServiceProvider, Microsoft.AspNetCore.SignalR.Hub, System.Reflection.MethodInfo, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.#ctor(Microsoft.AspNetCore.SignalR.HubCallerContext,System.IServiceProvider,Microsoft.AspNetCore.SignalR.Hub,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Instantiates a new instance of the  class.
            

    - Parameter context: Context for the active Hub connection and caller.
    - Parameter serviceProvider: The  specific to the scope of this Hub method invocation.
    - Parameter hub: The instance of the Hub.
    - Parameter hubMethod: The  for the Hub method being invoked.
    - Parameter hubMethodArguments: The arguments provided by the client.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext, serviceProvider : dotnet.System.IServiceProvider, hub : aspnetcore.Microsoft.AspNetCore.SignalR.Hub, hubMethod : dotnet.System.Reflection.MethodInfo, hubMethodArguments : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubInvocationContext_ctor_0__5__HubCallerContext_IServiceProvider_Hub_MethodInfo_System_Collections_Generic_IReadOnlyList_object_(&__thrown, context.get_handle(), serviceProvider.get_handle(), hub.get_handle(), hubMethod.get_handle(), hubMethodArguments.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.HubCallerContext get_Context()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_Context
    open func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_HubCallerContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.Hub get_Hub()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_Hub
    open func get_Hub() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.Hub {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_Hub__get_Hub_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.Hub(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_HubMethodName()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_HubMethodName
    open func get_HubMethodName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_String__get_HubMethodName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_HubMethodArguments()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_HubMethodArguments
    open func get_HubMethodArguments() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_System_Collections_Generic_IReadOnlyList_object___get_HubMethodArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_ServiceProvider
    open func get_ServiceProvider() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_HubMethod()
// docid: M:Microsoft.AspNetCore.SignalR.HubInvocationContext.get_HubMethod
    open func get_HubMethod() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubInvocationContext_MethodInfo__get_HubMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    /**
    
            Gets the context for the active Hub connection and caller.
            

    */
    open var Context : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets the Hub instance.
            

    */
    open var Hub : aspnetcore.Microsoft.AspNetCore.SignalR.Hub {
        get {
            return try! get_Hub();
        }
    }
    /**
    
            The  for the Hub method being invoked.
            

    */
    open var HubMethod : dotnet.System.Reflection.MethodInfo {
        get {
            return try! get_HubMethod();
        }
    }
    /**
    
            Gets the arguments provided by the client.
            

    */
    open var HubMethodArguments : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_HubMethodArguments();
        }
    }
    /**
    
            Gets the name of the Hub method being invoked.
            

    */
    open var HubMethodName : dotnet.System.String {
        get {
            return try! get_HubMethodName();
        }
    }
    /**
    
            The  specific to the scope of this Hub method invocation.
            

    */
    open var ServiceProvider : dotnet.System.IServiceProvider {
        get {
            return try! get_ServiceProvider();
        }
    }
} // HubInvocationContext


// type: Microsoft.AspNetCore.SignalR.HubLifetimeContext
    /**
    
            Context for the hub lifetime events  and .
            

    */
public final class HubLifetimeContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubLifetimeContext_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubLifetimeContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.HubCallerContext, System.IServiceProvider, Microsoft.AspNetCore.SignalR.Hub)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeContext.#ctor(Microsoft.AspNetCore.SignalR.HubCallerContext,System.IServiceProvider,Microsoft.AspNetCore.SignalR.Hub)
    /**
    
            Instantiates a new instance of the  class.
            

    - Parameter context: Context for the active Hub connection and caller.
    - Parameter serviceProvider: The  specific to the scope of this Hub method invocation.
    - Parameter hub: The instance of the Hub.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext, serviceProvider : dotnet.System.IServiceProvider, hub : aspnetcore.Microsoft.AspNetCore.SignalR.Hub) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubLifetimeContext_ctor_0__3__HubCallerContext_IServiceProvider_Hub(&__thrown, context.get_handle(), serviceProvider.get_handle(), hub.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.HubCallerContext get_Context()
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeContext.get_Context
    public func get_Context() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeContext_HubCallerContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.Hub get_Hub()
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeContext.get_Hub
    public func get_Hub() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.Hub {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeContext_Hub__get_Hub_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.Hub(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeContext.get_ServiceProvider
    public func get_ServiceProvider() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeContext_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    /**
    
            Gets the context for the active Hub connection and caller.
            

    */
    public var Context : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
        get {
            return try! get_Context();
        }
    }
    /**
    
            Gets the Hub instance.
            

    */
    public var Hub : aspnetcore.Microsoft.AspNetCore.SignalR.Hub {
        get {
            return try! get_Hub();
        }
    }
    /**
    
            The  specific to the scope of this Hub method invocation.
            

    */
    public var ServiceProvider : dotnet.System.IServiceProvider {
        get {
            return try! get_ServiceProvider();
        }
    }
} // HubLifetimeContext


// type: Microsoft.AspNetCore.SignalR.HubLifetimeManager`1
    /**
    
            A lifetime manager abstraction for  instances.
            

    */
open class HubLifetimeManager_1<THub : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_get_type_handle(THub.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Called when a connection is started.
            

    - Parameter connection: The connection.
    - Returns: A  that represents the asynchronous connect.

    */
    open func OnConnectedAsync(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__OnConnectedAsync_0__1__HubConnectionContext(THub.get_type_handle(), &__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Called when a connection is finished.
            

    - Parameter connection: The connection.
    - Returns: A  that represents the asynchronous disconnect.

    */
    open func OnDisconnectedAsync(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__OnDisconnectedAsync_0__1__HubConnectionContext(THub.get_type_handle(), &__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAllAsync(System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendAllAsync(System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to all hub connections.
            

    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendAllAsync(methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendAllAsync_0__3__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendAllExceptAsync(System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendAllExceptAsync(System.String,System.Object[],System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to all hub connections excluding the specified connections.
            

    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendAllExceptAsync(methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendAllExceptAsync_0__4__String_ObjectArray_System_Collections_Generic_IReadOnlyList_string__CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), methodName.get_handle(), args.get_handle(), excludedConnectionIds.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendConnectionAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendConnectionAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified connection.
            

    - Parameter connectionId: The connection ID.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendConnectionAsync(connectionId : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendConnectionAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendConnectionsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendConnectionsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified connections.
            

    - Parameter connectionIds: The connection IDs.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendConnectionsAsync(connectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendConnectionsAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionIds.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendGroupAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified group.
            

    - Parameter groupName: The group name.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendGroupAsync(groupName : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendGroupAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupsAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendGroupsAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified groups.
            

    - Parameter groupNames: The group names.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendGroupsAsync(groupNames : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendGroupsAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupNames.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendGroupExceptAsync(System.String, System.String, System.Object[], System.Collections.Generic.IReadOnlyList<System.String>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendGroupExceptAsync(System.String,System.String,System.Object[],System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified group excluding the specified connections.
            

    - Parameter groupName: The group name.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendGroupExceptAsync(groupName : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendGroupExceptAsync_0__5__String_String_ObjectArray_System_Collections_Generic_IReadOnlyList_string__CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle(), methodName.get_handle(), args.get_handle(), excludedConnectionIds.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendUserAsync(System.String, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendUserAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified user.
            

    - Parameter userId: The user ID.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendUserAsync(userId : dotnet.System.String, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendUserAsync_0__4__String_String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), userId.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendUsersAsync(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.SendUsersAsync(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Sends an invocation message to the specified users.
            

    - Parameter userIds: The user IDs.
    - Parameter methodName: The invocation method name.
    - Parameter args: The invocation arguments.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous send.

    */
    open func SendUsersAsync(userIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>, methodName : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__SendUsersAsync_0__4__System_Collections_Generic_IReadOnlyList_string__String_ObjectArray_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), userIds.get_handle(), methodName.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task AddToGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.AddToGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    
            Adds a connection to the specified group.
            

    - Parameter connectionId: The connection ID to add to a group.
    - Parameter groupName: The group name.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous add.

    */
    open func AddToGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__AddToGroupAsync_0__3__String_String_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task RemoveFromGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.HubLifetimeManager`1.RemoveFromGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    
            Removes a connection from the specified group.
            

    - Parameter connectionId: The connection ID to remove from a group.
    - Parameter groupName: The group name.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous remove.

    */
    open func RemoveFromGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubLifetimeManager_1_Task__RemoveFromGroupAsync_0__3__String_String_CancellationToken(THub.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // HubLifetimeManager_1


// type: Microsoft.AspNetCore.SignalR.HubMetadata
    /**
    
            Metadata that describes the  information associated with a specific endpoint.
            

    */
open class HubMetadata
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubMetadata_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.SignalR.HubMetadata.#ctor(System.Type)
    /**
    
            Constructs the  of the given  type.
            

    - Parameter hubType: The  of the .
    */
    public init(hubType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubMetadata_ctor_0__1__Type(&__thrown, hubType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_HubType()
// docid: M:Microsoft.AspNetCore.SignalR.HubMetadata.get_HubType
    open func get_HubType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubMetadata_Type__get_HubType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            The type of .
            

    */
    open var HubType : dotnet.System.Type_ {
        get {
            return try! get_HubType();
        }
    }
} // HubMetadata


// type: Microsoft.AspNetCore.SignalR.HubMethodNameAttribute
    /**
    
            Customizes the name of a hub method.
            

    */
open class HubMethodNameAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubMethodNameAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubMethodNameAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.HubMethodNameAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of  class.
            

    - Parameter name: The customized name of the hub method.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubMethodNameAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.SignalR.HubMethodNameAttribute.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubMethodNameAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The customized name of the hub method.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // HubMethodNameAttribute


// type: Microsoft.AspNetCore.SignalR.HubOptions
    /**
    
            Options used to configure hub instances.
            

    */
open class HubOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_HandshakeTimeout()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_HandshakeTimeout
    open func get_HandshakeTimeout() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_System_TimeSpan___get_HandshakeTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_HandshakeTimeout(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_HandshakeTimeout(System.Nullable{System.TimeSpan})
    open func set_HandshakeTimeout(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_HandshakeTimeout_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_KeepAliveInterval()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_KeepAliveInterval
    open func get_KeepAliveInterval() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_System_TimeSpan___get_KeepAliveInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_KeepAliveInterval(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_KeepAliveInterval(System.Nullable{System.TimeSpan})
    open func set_KeepAliveInterval(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_KeepAliveInterval_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_ClientTimeoutInterval()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_ClientTimeoutInterval
    open func get_ClientTimeoutInterval() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_System_TimeSpan___get_ClientTimeoutInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ClientTimeoutInterval(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_ClientTimeoutInterval(System.Nullable{System.TimeSpan})
    open func set_ClientTimeoutInterval(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_ClientTimeoutInterval_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_SupportedProtocols()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_SupportedProtocols
    open func get_SupportedProtocols() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Collections_Generic_IList_string___get_SupportedProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SupportedProtocols(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_SupportedProtocols(System.Collections.Generic.IList{System.String})
    open func set_SupportedProtocols(value : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_SupportedProtocols_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_MaximumReceiveMessageSize()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_MaximumReceiveMessageSize
    open func get_MaximumReceiveMessageSize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_i64___get_MaximumReceiveMessageSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaximumReceiveMessageSize(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_MaximumReceiveMessageSize(System.Nullable{System.Int64})
    open func set_MaximumReceiveMessageSize(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_MaximumReceiveMessageSize_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_EnableDetailedErrors()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_EnableDetailedErrors
    open func get_EnableDetailedErrors() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_bool___get_EnableDetailedErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_EnableDetailedErrors(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_EnableDetailedErrors(System.Nullable{System.Boolean})
    open func set_EnableDetailedErrors(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_EnableDetailedErrors_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StreamBufferCapacity()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_StreamBufferCapacity
    open func get_StreamBufferCapacity() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_System_Nullable_i32___get_StreamBufferCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StreamBufferCapacity(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_StreamBufferCapacity(System.Nullable{System.Int32})
    open func set_StreamBufferCapacity(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_StreamBufferCapacity_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumParallelInvocationsPerClient()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.get_MaximumParallelInvocationsPerClient
    open func get_MaximumParallelInvocationsPerClient() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_HubOptions_i32__get_MaximumParallelInvocationsPerClient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumParallelInvocationsPerClient(System.Int32)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions.set_MaximumParallelInvocationsPerClient(System.Int32)
    open func set_MaximumParallelInvocationsPerClient(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptions_void__set_MaximumParallelInvocationsPerClient_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the time window clients have to send a message before the server closes the connection. The default timeout is 30 seconds.
            

    */
    open var ClientTimeoutInterval : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_ClientTimeoutInterval();
        }
        set(v) {
            return try! set_ClientTimeoutInterval(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether detailed error messages are sent to the client.
            Detailed error messages include details from exceptions thrown on the server.
            

    */
    open var EnableDetailedErrors : Optional<Bool> {
        get {
            return try! get_EnableDetailedErrors();
        }
        set(v) {
            return try! set_EnableDetailedErrors(value: v!);
        }
    }
    /**
    
            Gets or sets the interval used by the server to timeout incoming handshake requests by clients. The default timeout is 15 seconds.
            

    */
    open var HandshakeTimeout : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_HandshakeTimeout();
        }
        set(v) {
            return try! set_HandshakeTimeout(value: v!);
        }
    }
    /**
    
            Gets or sets the interval used by the server to send keep alive pings to connected clients. The default interval is 15 seconds.
            

    */
    open var KeepAliveInterval : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_KeepAliveInterval();
        }
        set(v) {
            return try! set_KeepAliveInterval(value: v!);
        }
    }
    /**
    
            By default a client is only allowed to invoke a single Hub method at a time.
            Changing this property will allow clients to invoke multiple methods at the same time before queueing.
            

    */
    open var MaximumParallelInvocationsPerClient : Swift.Int32 {
        get {
            return try! get_MaximumParallelInvocationsPerClient();
        }
        set(v) {
            return try! set_MaximumParallelInvocationsPerClient(value: v);
        }
    }
    /**
    
            Gets or sets the maximum message size of a single incoming hub message. The default is 32KB.
            

    */
    open var MaximumReceiveMessageSize : Optional<Swift.Int64> {
        get {
            return try! get_MaximumReceiveMessageSize();
        }
        set(v) {
            return try! set_MaximumReceiveMessageSize(value: v!);
        }
    }
    /**
    
            Gets or sets the max buffer size for client upload streams. The default size is 10.
            

    */
    open var StreamBufferCapacity : Optional<Swift.Int32> {
        get {
            return try! get_StreamBufferCapacity();
        }
        set(v) {
            return try! set_StreamBufferCapacity(value: v!);
        }
    }
    /**
    
            Gets or sets a collection of supported hub protocol names.
            

    */
    open var SupportedProtocols : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        get {
            return try! get_SupportedProtocols();
        }
        set(v) {
            return try! set_SupportedProtocols(value: v!);
        }
    }
} // HubOptions


// type: Microsoft.AspNetCore.SignalR.HubOptionsExtensions
public struct HubOptionsExtensions {
    // void AddFilter(Microsoft.AspNetCore.SignalR.HubOptions, Microsoft.AspNetCore.SignalR.IHubFilter)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsExtensions.AddFilter(Microsoft.AspNetCore.SignalR.HubOptions,Microsoft.AspNetCore.SignalR.IHubFilter)
    /**
    
            Adds an instance of an  to the .
            

    - Parameter options: The options to add a filter to.
    - Parameter hubFilter: The filter instance to add to the options.
    */
    public static func AddFilter(options : aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions, hubFilter : aspnetcore.Microsoft.AspNetCore.SignalR.IHubFilter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptionsExtensions_void__AddFilter_0__2__HubOptions_IHubFilter(&__thrown, options.get_handle(), hubFilter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void AddFilter<TFilter>(Microsoft.AspNetCore.SignalR.HubOptions)
    // void AddFilter(Microsoft.AspNetCore.SignalR.HubOptions, System.Type)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsExtensions.AddFilter(Microsoft.AspNetCore.SignalR.HubOptions,System.Type)
    /**
    
            Adds an  type to the  that will be resolved via DI or type activated.
            

    - Parameter options: The options to add a filter to.
    - Parameter filterType: The  type that will be added to the options.
    */
    public static func AddFilter(options : aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions, filterType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptionsExtensions_void__AddFilter_0__2__HubOptions_Type(&__thrown, options.get_handle(), filterType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HubOptionsExtensions


// type: Microsoft.AspNetCore.SignalR.HubOptionsSetup
    /**
    
            Class to configure the .
            

    */
open class HubOptionsSetup
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubOptionsSetup_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubOptionsSetup_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsSetup.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol})
    /**
    
            Constructs the  with a list of protocols added to Dependency Injection.
            

    - Parameter protocols: The list of s that are from Dependency Injection.
    */
    public init(protocols : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubOptionsSetup_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_SignalR_Protocol_IHubProtocol_(&__thrown, protocols.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(Microsoft.AspNetCore.SignalR.HubOptions)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsSetup.Configure(Microsoft.AspNetCore.SignalR.HubOptions)
    /**
    
            Configures the default values of the .
            

    - Parameter options: The  to configure.
    */
    open /* method final */ func Configure(options : aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptionsSetup_void__Configure_0__1__HubOptions(&__thrown, self.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HubOptionsSetup


// type: Microsoft.AspNetCore.SignalR.HubOptionsSetup`1
    /**
    
            Class to configure the  for a specific .
            

    */
open class HubOptionsSetup_1<THub : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubOptionsSetup_1_get_type_handle(THub.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubOptionsSetup_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsSetup`1.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.SignalR.HubOptions})
    /**
    
            Constructs the options configuration class.
            

    - Parameter options: The global  from Dependency Injection.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubOptionsSetup_1_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_SignalR_HubOptions_(THub.get_type_handle(), &__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(Microsoft.AspNetCore.SignalR.HubOptions<THub>)
// docid: M:Microsoft.AspNetCore.SignalR.HubOptionsSetup`1.Configure(Microsoft.AspNetCore.SignalR.HubOptions{`0})
    /**
    
            Configures the default values of the .
            

    - Parameter options: The options to configure.
    */
    open /* method final */ func Configure(options : aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions_1<THub>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_HubOptionsSetup_1_void__Configure_0__1__Microsoft_AspNetCore_SignalR_HubOptions_THub_(THub.get_type_handle(), &__thrown, self.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HubOptionsSetup_1


// type: Microsoft.AspNetCore.SignalR.HubOptions`1
    /**
    
            Options used to configure the specified hub type instances. These options override globally set options.
            

    */
open class HubOptions_1<THub : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_HubOptions_1_get_type_handle(THub.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_HubOptions_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.SignalR.HubOptions`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_HubOptions_1_ctor_0__0(THub.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HubOptions_1


// type: Microsoft.AspNetCore.SignalR.Hub`1
    /**
    
            A base class for a strongly typed SignalR hub.
            

    */
open class Hub_1<T : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.SignalR.Hub
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_Hub_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_Hub_1_cast(T.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubCallerClients<T> get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.Hub`1.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_Hub_1_Microsoft_AspNetCore_SignalR_IHubCallerClients_T___get_Clients_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Clients(Microsoft.AspNetCore.SignalR.IHubCallerClients<T>)
// docid: M:Microsoft.AspNetCore.SignalR.Hub`1.set_Clients(Microsoft.AspNetCore.SignalR.IHubCallerClients{`0})
    open func set_Clients(value : aspnetcore.Microsoft.AspNetCore.SignalR.IHubCallerClients_1<T>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_Hub_1_void__set_Clients_0__1__Microsoft_AspNetCore_SignalR_IHubCallerClients_T_(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_interface ) [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubCallerClients<T> get_Clients()
} // Hub_1


// type: Microsoft.AspNetCore.SignalR.IClientProxy
    /**
    
            A proxy abstraction for invoking hub methods.
            

    */
open class IClientProxy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IClientProxy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IClientProxy_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IClientProxy_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task SendCoreAsync(System.String, System.Object[], System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.IClientProxy.SendCoreAsync(System.String,System.Object[],System.Threading.CancellationToken)
    /**
    
            Invokes a method on the connection(s) represented by the  instance.
            Does not wait for a response from the receiver.
            

    - Parameter method: Name of the method to invoke.
    - Parameter args: A collection of arguments to pass to the client.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous invoke.

    */
    open func SendCoreAsync(method : dotnet.System.String, args : dotnet.System_Arr<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IClientProxy_Task__SendCoreAsync_0__3__String_ObjectArray_CancellationToken(&__thrown, self.get_handle(), method.get_handle(), args.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // IClientProxy


// type: Microsoft.AspNetCore.SignalR.IGroupManager
    /**
    
            A manager abstraction for adding and removing connections from groups.
            

    */
open class IGroupManager
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IGroupManager
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IGroupManager_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IGroupManager_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task AddToGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.IGroupManager.AddToGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    
            Adds a connection to the specified group.
            

    - Parameter connectionId: The connection ID to add to a group.
    - Parameter groupName: The group name.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous add.

    */
    open func AddToGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IGroupManager_Task__AddToGroupAsync_0__3__String_String_CancellationToken(&__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task RemoveFromGroupAsync(System.String, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.SignalR.IGroupManager.RemoveFromGroupAsync(System.String,System.String,System.Threading.CancellationToken)
    /**
    
            Removes a connection from the specified group.
            

    - Parameter connectionId: The connection ID to remove from a group.
    - Parameter groupName: The group name.
    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A  that represents the asynchronous remove.

    */
    open func RemoveFromGroupAsync(connectionId : dotnet.System.String, groupName : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IGroupManager_Task__RemoveFromGroupAsync_0__3__String_String_CancellationToken(&__thrown, self.get_handle(), connectionId.get_handle(), groupName.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // IGroupManager


// type: Microsoft.AspNetCore.SignalR.IHubActivator`1
    /**
    
            A  activator abstraction.
            

    */
open class IHubActivator_1<THub : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubActivator_1
{
    public typealias THub_IHubActivator_1 = THub;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubActivator_1_get_type_handle(THub.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubActivator_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // THub Create()
// docid: M:Microsoft.AspNetCore.SignalR.IHubActivator`1.Create
    /**
    
            Creates a hub.
            

    - Returns: The created hub.

    */
    open func Create() throws -> THub {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubActivator_1_THub__Create_0__0(THub.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return THub(gval: __return);
        }
    }
    // void Release(THub)
// docid: M:Microsoft.AspNetCore.SignalR.IHubActivator`1.Release(`0)
    /**
    
            Releases the specified hub.
            

    - Parameter hub: The hub to release.
    */
    open func Release(hub : THub) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_SignalR_IHubActivator_1_void__Release_0__1__THub(THub.get_type_handle(), &__thrown, self.get_handle(), hub.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHubActivator_1


// type: Microsoft.AspNetCore.SignalR.IHubCallerClients
    /**
    
            A clients caller abstraction for a hub.
            

    */
open class IHubCallerClients
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubCallerClients
{
    public typealias T_IHubCallerClients_1 = aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy;
    public typealias T_IHubClients_1 = aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubCallerClients_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubCallerClients_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // IHubCallerClients


// type: Microsoft.AspNetCore.SignalR.IHubCallerClients`1
    /**
    
            An abstraction that provides access to client connections, including the one that sent the current invocation.
            

    */
open class IHubCallerClients_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubCallerClients_1
{
    public typealias T_IHubCallerClients_1 = T;
    public typealias T_IHubClients_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubCallerClients_1_get_type_handle(T.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubCallerClients_1_cast(T.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // T OthersInGroup(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.IHubCallerClients`1.OthersInGroup(System.String)
    /**
    
            Gets a caller to all connections in the specified group, except the one which triggered the current invocation.
            

    - Returns: A client caller.

    */
    open func OthersInGroup(groupName : dotnet.System.String) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubCallerClients_1_T__OthersInGroup_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Caller()
// docid: M:Microsoft.AspNetCore.SignalR.IHubCallerClients`1.get_Caller
    open func get_Caller() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubCallerClients_1_T__get_Caller_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_Others()
// docid: M:Microsoft.AspNetCore.SignalR.IHubCallerClients`1.get_Others
    open func get_Others() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubCallerClients_1_T__get_Others_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // IHubCallerClients_1


// type: Microsoft.AspNetCore.SignalR.IHubClients
    /**
    
            An abstraction that provides access to client connections.
            

    */
open class IHubClients
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubClients
{
    public typealias T_IHubClients_1 = aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubClients_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubClients_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // IHubClients


// type: Microsoft.AspNetCore.SignalR.IHubClients`1
    /**
    
            An abstraction that provides access to client connections.
            

    */
open class IHubClients_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubClients_1
{
    public typealias T_IHubClients_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubClients_1_get_type_handle(T.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubClients_1_cast(T.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // T AllExcept(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.AllExcept(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all clients connected to the hub excluding the specified client connections.
            

    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Returns: A client caller.

    */
    open func AllExcept(excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__AllExcept_0__1__System_Collections_Generic_IReadOnlyList_string_(T.get_type_handle(), &__thrown, self.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Client(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.Client(System.String)
    /**
    
            Gets a  that can be used to invoke methods on the specified client connection.
            

    - Parameter connectionId: The connection ID.
    - Returns: A client caller.

    */
    open func Client(connectionId : dotnet.System.String) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__Client_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), connectionId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Clients(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.Clients(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets a  that can be used to invoke methods on the specified client connections.
            

    - Parameter connectionIds: The connection IDs.
    - Returns: A client caller.

    */
    open func Clients(connectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__Clients_0__1__System_Collections_Generic_IReadOnlyList_string_(T.get_type_handle(), &__thrown, self.get_handle(), connectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Group(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.Group(System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group.
            

    - Parameter groupName: The group name.
    - Returns: A client caller.

    */
    open func Group(groupName : dotnet.System.String) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__Group_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Groups(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.Groups(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections in all of the specified groups.
            

    - Parameter groupNames: The group names.
    - Returns: A client caller.

    */
    open func Groups(groupNames : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__Groups_0__1__System_Collections_Generic_IReadOnlyList_string_(T.get_type_handle(), &__thrown, self.get_handle(), groupNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T GroupExcept(System.String, System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.GroupExcept(System.String,System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections in the specified group excluding the specified connections.
            

    - Parameter groupName: The group name.
    - Parameter excludedConnectionIds: A collection of connection IDs to exclude.
    - Returns: A client caller.

    */
    open func GroupExcept(groupName : dotnet.System.String, excludedConnectionIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__GroupExcept_0__2__String_System_Collections_Generic_IReadOnlyList_string_(T.get_type_handle(), &__thrown, self.get_handle(), groupName.get_handle(), excludedConnectionIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T User(System.String)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.User(System.String)
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with the specified user.
            

    - Parameter userId: The user ID.
    - Returns: A client caller.

    */
    open func User(userId : dotnet.System.String) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__User_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), userId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Users(System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.Users(System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets a  that can be used to invoke methods on all connections associated with all of the specified users.
            

    - Parameter userIds: The user IDs.
    - Returns: A client caller.

    */
    open func Users(userIds : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__Users_0__1__System_Collections_Generic_IReadOnlyList_string_(T.get_type_handle(), &__thrown, self.get_handle(), userIds.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] T get_All()
// docid: M:Microsoft.AspNetCore.SignalR.IHubClients`1.get_All
    open func get_All() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubClients_1_T__get_All_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // IHubClients_1


// type: Microsoft.AspNetCore.SignalR.IHubContext
    /**
    
            A context abstraction for a hub.
            

    */
open class IHubContext
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubContext
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubContext_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubClients get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_IHubClients__get_Clients_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IGroupManager get_Groups()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext.get_Groups
    open func get_Groups() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_IGroupManager__get_Groups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager(hndl : __return);
        }
    }
} // IHubContext


// type: Microsoft.AspNetCore.SignalR.IHubContext`1
    /**
    
            A context abstraction for a hub.
            

    */
open class IHubContext_1<THub : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubContext_1
{
    public typealias THub_IHubContext_1 = THub;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubContext_1_get_type_handle(THub.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubContext_1_cast(THub.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubClients get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext`1.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_1_IHubClients__get_Clients_0__0(THub.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IGroupManager get_Groups()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext`1.get_Groups
    open func get_Groups() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_1_IGroupManager__get_Groups_0__0(THub.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager(hndl : __return);
        }
    }
} // IHubContext_1


// type: Microsoft.AspNetCore.SignalR.IHubContext`2
    /**
    
            A context abstraction for a hub.
            

    */
open class IHubContext_2<THub : SGBridgeGenericValue,T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubContext_2
{
    public typealias THub_IHubContext_2 = THub;
    public typealias T_IHubContext_2 = T;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubContext_2_get_type_handle(THub.get_type_handle(),T.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubContext_2_cast(THub.get_type_handle(),T.get_type_handle(),&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IHubClients<T> get_Clients()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext`2.get_Clients
    open func get_Clients() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_2_Microsoft_AspNetCore_SignalR_IHubClients_T___get_Clients_0__0(THub.get_type_handle(), T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.IGroupManager get_Groups()
// docid: M:Microsoft.AspNetCore.SignalR.IHubContext`2.get_Groups
    open func get_Groups() throws -> aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubContext_2_IGroupManager__get_Groups_0__0(THub.get_type_handle(), T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.SignalR.IGroupManager(hndl : __return);
        }
    }
} // IHubContext_2


// type: Microsoft.AspNetCore.SignalR.IHubFilter
    /**
    
            The filter abstraction for hub method invocations.
            

    */
open class IHubFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubFilter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubFilter_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Object> InvokeMethodAsync(Microsoft.AspNetCore.SignalR.HubInvocationContext, System.Func<Microsoft.AspNetCore.SignalR.HubInvocationContext,System.Threading.Tasks.ValueTask<System.Object>>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubFilter.InvokeMethodAsync(Microsoft.AspNetCore.SignalR.HubInvocationContext,System.Func{Microsoft.AspNetCore.SignalR.HubInvocationContext,System.Threading.Tasks.ValueTask{System.Object}})
    /**
    
            Allows handling of all Hub method invocations.
            

    - Parameter invocationContext: The context for the method invocation that holds all the important information about the invoke.
    - Parameter next: The next filter to run, and for the final one, the Hub invocation.
    - Returns: Returns the result of the Hub method invoke.

    */
    open func InvokeMethodAsync(invocationContext : aspnetcore.Microsoft.AspNetCore.SignalR.HubInvocationContext, next : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.SignalR.HubInvocationContext,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubFilter_System_Threading_Tasks_ValueTask_object___InvokeMethodAsync_0__2__HubInvocationContext_System_Func_Microsoft_AspNetCore_SignalR_HubInvocationContext_System_Threading_Tasks_System_Threading_Tasks_ValueTask_object__(&__thrown, self.get_handle(), invocationContext.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func InvokeMethodAsync(invocationContext : aspnetcore.Microsoft.AspNetCore.SignalR.HubInvocationContext, next : @escaping (aspnetcore.Microsoft.AspNetCore.SignalR.HubInvocationContext) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        let del_next = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.SignalR.HubInvocationContext,dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object>>(next);
        return try InvokeMethodAsync(invocationContext: invocationContext, next: del_next);
    }
    // System.Threading.Tasks.Task OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubLifetimeContext, System.Func<Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubFilter.OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Func{Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Threading.Tasks.Task})
    /**
    
            Allows handling of the  method.
            

    - Parameter context: The context for OnConnectedAsync.
    - Parameter next: The next filter to run, and for the final one, the Hub invocation.
    - Returns: 

    */
    open func OnConnectedAsync(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext, next : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext,dotnet.System.Threading.Tasks.Task>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubFilter_Task__OnConnectedAsync_0__2__HubLifetimeContext_System_Func_Microsoft_AspNetCore_SignalR_HubLifetimeContext_Task_(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // delegate closure overload
    open func OnConnectedAsync(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext, next : @escaping (aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext) throws -> dotnet.System.Threading.Tasks.Task) async throws {
        let del_next = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext,dotnet.System.Threading.Tasks.Task>(next);
        return try await OnConnectedAsync(context: context, next: del_next);
    }
    // System.Threading.Tasks.Task OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubLifetimeContext, System.Exception, System.Func<Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Exception,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubFilter.OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Exception,System.Func{Microsoft.AspNetCore.SignalR.HubLifetimeContext,System.Exception,System.Threading.Tasks.Task})
    /**
    
            Allows handling of the  method.
            

    - Parameter context: The context for OnDisconnectedAsync.
    - Parameter exception: The exception, if any, for the connection closing.
    - Parameter next: The next filter to run, and for the final one, the Hub invocation.
    - Returns: 

    */
    open func OnDisconnectedAsync(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext, exception : Optional<dotnet.System.Exception>, next : dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext,dotnet.System.Exception,dotnet.System.Threading.Tasks.Task>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubFilter_Task__OnDisconnectedAsync_0__3__HubLifetimeContext_Exception_System_Func_Microsoft_AspNetCore_SignalR_HubLifetimeContext_System_Exception_Task_(&__thrown, self.get_handle(), context.get_handle(), exception?.get_handle() ?? nil, next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // delegate closure overload
    open func OnDisconnectedAsync(context : aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext, exception : Optional<dotnet.System.Exception>, next : @escaping (aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext, Optional<dotnet.System.Exception>) throws -> dotnet.System.Threading.Tasks.Task) async throws {
        let del_next = try dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.SignalR.HubLifetimeContext,dotnet.System.Exception,dotnet.System.Threading.Tasks.Task>(next);
        return try await OnDisconnectedAsync(context: context, exception: exception, next: del_next);
    }
} // IHubFilter


// type: Microsoft.AspNetCore.SignalR.IHubProtocolResolver
    /**
    
            A resolver abstraction for working with  instances.
            

    */
open class IHubProtocolResolver
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IHubProtocolResolver
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IHubProtocolResolver_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IHubProtocolResolver_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol GetProtocol(System.String, System.Collections.Generic.IReadOnlyList<System.String>)
// docid: M:Microsoft.AspNetCore.SignalR.IHubProtocolResolver.GetProtocol(System.String,System.Collections.Generic.IReadOnlyList{System.String})
    /**
    
            Gets the hub protocol with the specified name, if it is allowed by the specified list of supported protocols.
            

    - Parameter protocolName: The protocol name.
    - Parameter supportedProtocols: A collection of supported protocols.
    - Returns: A matching  or null if no matching protocol was found.

    */
    open func GetProtocol(protocolName : dotnet.System.String, supportedProtocols : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubProtocolResolver_IHubProtocol__GetProtocol_0__2__String_System_Collections_Generic_IReadOnlyList_string_(&__thrown, self.get_handle(), protocolName.get_handle(), (supportedProtocols?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol> get_AllProtocols()
// docid: M:Microsoft.AspNetCore.SignalR.IHubProtocolResolver.get_AllProtocols
    open func get_AllProtocols() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IHubProtocolResolver_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_SignalR_Protocol_IHubProtocol___get_AllProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // IHubProtocolResolver


// type: Microsoft.AspNetCore.SignalR.ISignalRServerBuilder
    /**
    
            A builder abstraction for configuring SignalR servers.
            

    */
open class ISignalRServerBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_ISignalRServerBuilder,
    Microsoft_AspNetCore_SignalR_ISignalRBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_ISignalRServerBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_ISignalRServerBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // ISignalRServerBuilder


// type: Microsoft.AspNetCore.SignalR.IUserIdProvider
    /**
    
            A provider abstraction for configuring the "User ID" for a connection.
            

    */
open class IUserIdProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_SignalR_IUserIdProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_IUserIdProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_IUserIdProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.String GetUserId(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.IUserIdProvider.GetUserId(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Gets the user ID for the specified connection.
            

    - Parameter connection: The connection to get the user ID for.
    - Returns: The user ID for the specified connection.

    */
    open func GetUserId(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_IUserIdProvider_String__GetUserId_0__1__HubConnectionContext(&__thrown, self.get_handle(), connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IUserIdProvider


// type: Microsoft.AspNetCore.SignalR.SerializedHubMessage
    /**
    
            Represents a serialization cache for a single message.
            

    */
open class SerializedHubMessage
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_SerializedHubMessage_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_SignalR_SerializedHubMessage_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.SignalR.SerializedMessage>)
// docid: M:Microsoft.AspNetCore.SignalR.SerializedHubMessage.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.SignalR.SerializedMessage})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter messages: A collection of already serialized messages to cache.
    */
    public init(messages : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.SignalR.SerializedMessage>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_SerializedHubMessage_ctor_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_SignalR_SerializedMessage_(&__thrown, messages.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.SignalR.Protocol.HubMessage)
// docid: M:Microsoft.AspNetCore.SignalR.SerializedHubMessage.#ctor(Microsoft.AspNetCore.SignalR.Protocol.HubMessage)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter message: The hub message for the cache. This will be serialized with an  in  to get the message's serialized representation.
    */
    public init(message : aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.HubMessage) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_SerializedHubMessage_ctor_0__1__HubMessage(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ReadOnlyMemory<System.Byte> GetSerializedMessage(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol)
// docid: M:Microsoft.AspNetCore.SignalR.SerializedHubMessage.GetSerializedMessage(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol)
    /**
    
            Gets the serialized representation of the  using the specified .
            

    - Parameter protocol: The protocol used to create the serialized representation.
    - Returns: The serialized representation of the .

    */
    open func GetSerializedMessage(protocol_ : aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.IHubProtocol) throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_SerializedHubMessage_System_ReadOnlyMemory_u8___GetSerializedMessage_0__1__IHubProtocol(&__thrown, self.get_handle(), protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.SignalR.Protocol.HubMessage get_Message()
// docid: M:Microsoft.AspNetCore.SignalR.SerializedHubMessage.get_Message
    open func get_Message() throws -> Optional<aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.HubMessage> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_SerializedHubMessage_HubMessage__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.HubMessage(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the hub message for the serialization cache.
            

    */
    open var Message : Optional<aspnetcore.Microsoft.AspNetCore.SignalR.Protocol_.HubMessage> {
        get {
            return try! get_Message();
        }
    }
} // SerializedHubMessage


// type: Microsoft.AspNetCore.SignalR.SerializedMessage
// boxed value type
    /**
    
            Represents a serialized message.
            

    */
public final class SerializedMessage
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_SignalR_SerializedMessage_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the protocol of the serialized message.
            

    */
    public var ProtocolName : dotnet.System.String {
        get {
            return try! get_ProtocolName();
        }
    }
    /**
    
            Gets the serialized representation of the message.
            

    */
    public var Serialized : dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        get {
            return try! get_Serialized();
        }
    }
    // .ctor(System.String, System.ReadOnlyMemory<System.Byte>)
// docid: M:Microsoft.AspNetCore.SignalR.SerializedMessage.#ctor(System.String,System.ReadOnlyMemory{System.Byte})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter protocolName: The protocol of the serialized message.
    - Parameter serialized: The serialized representation of the message.
    */
    public init(protocolName : dotnet.System.String, serialized : dotnet.System.ReadOnlyMemory_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_SignalR_SerializedMessage_ctor_0__2__String_System_ReadOnlyMemory_u8_(&__thrown, protocolName.get_handle(), serialized.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_SignalR_SerializedMessage_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_ProtocolName()
// docid: M:Microsoft.AspNetCore.SignalR.SerializedMessage.get_ProtocolName
    public func get_ProtocolName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_SerializedMessage_String__get_ProtocolName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ReadOnlyMemory<System.Byte> get_Serialized()
// docid: M:Microsoft.AspNetCore.SignalR.SerializedMessage.get_Serialized
    public func get_Serialized() throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_SerializedMessage_System_ReadOnlyMemory_u8___get_Serialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
} // SerializedMessage


// type: Microsoft.AspNetCore.SignalR.SignalRConnectionBuilderExtensions
public struct SignalRConnectionBuilderExtensions {
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Connections.IConnectionBuilder UseHub<THub>(Microsoft.AspNetCore.Connections.IConnectionBuilder)
} // SignalRConnectionBuilderExtensions


}



public protocol Microsoft_AspNetCore_SignalR_IClientProxy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_SignalR_IGroupManager
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_SignalR_IHubActivator_1
    :
    SGBridgeGetHandle
{
    associatedtype THub_IHubActivator_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_SignalR_IHubCallerClients
    :
    Microsoft_AspNetCore_SignalR_IHubCallerClients_1
    where
        T_IHubCallerClients_1 == aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy
{
}

public protocol Microsoft_AspNetCore_SignalR_IHubCallerClients_1
    :
    Microsoft_AspNetCore_SignalR_IHubClients_1
    where
        T_IHubClients_1 == T_IHubCallerClients_1
{
    associatedtype T_IHubCallerClients_1;
}

public protocol Microsoft_AspNetCore_SignalR_IHubClients
    :
    Microsoft_AspNetCore_SignalR_IHubClients_1
    where
        T_IHubClients_1 == aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy
{
}

public protocol Microsoft_AspNetCore_SignalR_IHubClients_1
    :
    SGBridgeGetHandle
{
    associatedtype T_IHubClients_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_SignalR_IHubContext
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_SignalR_IHubContext_1
    :
    SGBridgeGetHandle
{
    associatedtype THub_IHubContext_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_SignalR_IHubContext_2
    :
    SGBridgeGetHandle
{
    associatedtype THub_IHubContext_2 : SGBridgeGenericValue;
    associatedtype T_IHubContext_2 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_SignalR_IHubFilter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_SignalR_IHubProtocolResolver
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_SignalR_ISignalRServerBuilder
    :
    Microsoft_AspNetCore_SignalR_ISignalRBuilder
{
}

public protocol Microsoft_AspNetCore_SignalR_IUserIdProvider
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, arg6: arg6, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, arg6: arg6, arg7: arg7, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, arg6: arg6, arg7: arg7, arg8: arg8, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, arg9 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, arg6: arg6, arg7: arg7, arg8: arg8, arg9: arg9, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, System.String, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_SignalR_IClientProxy {
    public func SendAsync(method : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>, arg3 : Optional<dotnet.System.Object>, arg4 : Optional<dotnet.System.Object>, arg5 : Optional<dotnet.System.Object>, arg6 : Optional<dotnet.System.Object>, arg7 : Optional<dotnet.System.Object>, arg8 : Optional<dotnet.System.Object>, arg9 : Optional<dotnet.System.Object>, arg10 : Optional<dotnet.System.Object>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(clientProxy: aspnetcore.Microsoft.AspNetCore.SignalR.IClientProxy(hndl: __copy_handle(self.get_handle())), method: method, arg1: arg1, arg2: arg2, arg3: arg3, arg4: arg4, arg5: arg5, arg6: arg6, arg7: arg7, arg8: arg8, arg9: arg9, arg10: arg10, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6, excludedConnectionId7: excludedConnectionId7);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String, excludedConnectionId8 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6, excludedConnectionId7: excludedConnectionId7, excludedConnectionId8: excludedConnectionId8);
    }
}

// EXTENSION METHOD T AllExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func AllExcept(excludedConnectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.AllExcept(hubClients: self, excludedConnectionIds: excludedConnectionIds);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3, connection4: connection4);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3, connection4: connection4, connection5: connection5);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3, connection4: connection4, connection5: connection5, connection6: connection6);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String, connection7 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3, connection4: connection4, connection5: connection5, connection6: connection6, connection7: connection7);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connection1 : dotnet.System.String, connection2 : dotnet.System.String, connection3 : dotnet.System.String, connection4 : dotnet.System.String, connection5 : dotnet.System.String, connection6 : dotnet.System.String, connection7 : dotnet.System.String, connection8 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connection1: connection1, connection2: connection2, connection3: connection3, connection4: connection4, connection5: connection5, connection6: connection6, connection7: connection7, connection8: connection8);
    }
}

// EXTENSION METHOD T Clients<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Clients(connectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Clients(hubClients: self, connectionIds: connectionIds);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3, group4: group4);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3, group4: group4, group5: group5);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3, group4: group4, group5: group5, group6: group6);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String, group7 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3, group4: group4, group5: group5, group6: group6, group7: group7);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(group1 : dotnet.System.String, group2 : dotnet.System.String, group3 : dotnet.System.String, group4 : dotnet.System.String, group5 : dotnet.System.String, group6 : dotnet.System.String, group7 : dotnet.System.String, group8 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, group1: group1, group2: group2, group3: group3, group4: group4, group5: group5, group6: group6, group7: group7, group8: group8);
    }
}

// EXTENSION METHOD T Groups<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Groups(groupNames : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Groups(hubClients: self, groupNames: groupNames);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6, excludedConnectionId7: excludedConnectionId7);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionId1 : dotnet.System.String, excludedConnectionId2 : dotnet.System.String, excludedConnectionId3 : dotnet.System.String, excludedConnectionId4 : dotnet.System.String, excludedConnectionId5 : dotnet.System.String, excludedConnectionId6 : dotnet.System.String, excludedConnectionId7 : dotnet.System.String, excludedConnectionId8 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionId1: excludedConnectionId1, excludedConnectionId2: excludedConnectionId2, excludedConnectionId3: excludedConnectionId3, excludedConnectionId4: excludedConnectionId4, excludedConnectionId5: excludedConnectionId5, excludedConnectionId6: excludedConnectionId6, excludedConnectionId7: excludedConnectionId7, excludedConnectionId8: excludedConnectionId8);
    }
}

// EXTENSION METHOD T GroupExcept<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.Collections.Generic.IEnumerable<System.String>)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func GroupExcept(groupName : dotnet.System.String, excludedConnectionIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.GroupExcept(hubClients: self, groupName: groupName, excludedConnectionIds: excludedConnectionIds);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3, user4: user4);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3, user4: user4, user5: user5);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3, user4: user4, user5: user5, user6: user6);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String, user7 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3, user4: user4, user5: user5, user6: user6, user7: user7);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(user1 : dotnet.System.String, user2 : dotnet.System.String, user3 : dotnet.System.String, user4 : dotnet.System.String, user5 : dotnet.System.String, user6 : dotnet.System.String, user7 : dotnet.System.String, user8 : dotnet.System.String) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, user1: user1, user2: user2, user3: user3, user4: user4, user5: user5, user6: user6, user7: user7, user8: user8);
    }
}

// EXTENSION METHOD T Users<T>(Microsoft.AspNetCore.SignalR.IHubClients<T>, System.Collections.Generic.IEnumerable<System.String>)
extension aspnetcore.Microsoft.AspNetCore.SignalR.IHubClients_1 {
    public func Users(userIds : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> T {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.HubClientsExtensions.Users(hubClients: self, userIds: userIds);
    }
}

// EXTENSION METHOD void AddFilter(Microsoft.AspNetCore.SignalR.HubOptions, Microsoft.AspNetCore.SignalR.IHubFilter)
extension aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions {
    public func AddFilter(hubFilter : aspnetcore.Microsoft.AspNetCore.SignalR.IHubFilter) throws {
        try aspnetcore.Microsoft.AspNetCore.SignalR.HubOptionsExtensions.AddFilter(options: self, hubFilter: hubFilter);
    }
}

// EXTENSION METHOD void AddFilter<TFilter>(Microsoft.AspNetCore.SignalR.HubOptions)
// TODO COPE extension method (unused generic param) void AddFilter<TFilter>(Microsoft.AspNetCore.SignalR.HubOptions)

// EXTENSION METHOD void AddFilter(Microsoft.AspNetCore.SignalR.HubOptions, System.Type)
extension aspnetcore.Microsoft.AspNetCore.SignalR.HubOptions {
    public func AddFilter(filterType : dotnet.System.Type_) throws {
        try aspnetcore.Microsoft.AspNetCore.SignalR.HubOptionsExtensions.AddFilter(options: self, filterType: filterType);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Connections.IConnectionBuilder UseHub<THub>(Microsoft.AspNetCore.Connections.IConnectionBuilder)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Connections.IConnectionBuilder UseHub<THub>(Microsoft.AspNetCore.Connections.IConnectionBuilder)

