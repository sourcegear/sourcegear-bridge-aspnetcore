// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder
    /**
    
            Builds conventions that will be used for customization of Hub  instances.
            

    */
public final class HubEndpointConventionBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Builder_IHubEndpointConventionBuilder,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_HubEndpointConventionBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})
    /**
    
            Adds the specified convention to the builder. Conventions are used to customize  instances.
            

    - Parameter convention: The convention to add to the builder.
    */
    public func Add(convention : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_HubEndpointConventionBuilder_void__Add_0__1__System_Action_Microsoft_AspNetCore_Builder_EndpointBuilder_(&__thrown, self.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Add(convention : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws -> Void) throws {
        let del_convention = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>(convention);
        return try Add(convention: del_convention);
    }
} // HubEndpointConventionBuilder


// type: Microsoft.AspNetCore.Builder.HubEndpointRouteBuilderExtensions
public struct HubEndpointRouteBuilderExtensions {
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Http.Connections.HttpConnectionDispatcherOptions>)
} // HubEndpointRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.IHubEndpointConventionBuilder
    /**
    
            Abstraction that builds conventions that will be used for customization of Hub  instances.
            

    */
open class IHubEndpointConventionBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Builder_IHubEndpointConventionBuilder,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_IHubEndpointConventionBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IHubEndpointConventionBuilder


}

// Microsoft.AspNetCore.SignalR
extension Microsoft.AspNetCore.SignalR {
// type: Microsoft.AspNetCore.SignalR.GetHttpContextExtensions
public struct GetHttpContextExtensions {
    // Microsoft.AspNetCore.Http.HttpContext GetHttpContext(Microsoft.AspNetCore.SignalR.HubCallerContext)
// docid: M:Microsoft.AspNetCore.SignalR.GetHttpContextExtensions.GetHttpContext(Microsoft.AspNetCore.SignalR.HubCallerContext)
    /**
    
            Gets  from the specified connection, or null if the connection is not associated with an HTTP request.
            

    - Parameter connection: The connection.
    - Returns: The  for the connection, or null if the connection is not associated with an HTTP request.

    */
    public static func GetHttpContext(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_GetHttpContextExtensions_HttpContext__GetHttpContext_0__1__HubCallerContext(&__thrown, connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Http.HttpContext GetHttpContext(Microsoft.AspNetCore.SignalR.HubConnectionContext)
// docid: M:Microsoft.AspNetCore.SignalR.GetHttpContextExtensions.GetHttpContext(Microsoft.AspNetCore.SignalR.HubConnectionContext)
    /**
    
            Gets  from the specified connection, or null if the connection is not associated with an HTTP request.
            

    - Parameter connection: The connection.
    - Returns: The  for the connection, or null if the connection is not associated with an HTTP request.

    */
    public static func GetHttpContext(connection : aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_SignalR_GetHttpContextExtensions_HttpContext__GetHttpContext_0__1__HubConnectionContext(&__thrown, connection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // GetHttpContextExtensions


}



public protocol Microsoft_AspNetCore_Builder_IHubEndpointConventionBuilder
    :
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String)

// EXTENSION METHOD Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Http.Connections.HttpConnectionDispatcherOptions>)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Builder.HubEndpointConventionBuilder MapHub<THub>(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Http.Connections.HttpConnectionDispatcherOptions>)

// EXTENSION METHOD Microsoft.AspNetCore.Http.HttpContext GetHttpContext(Microsoft.AspNetCore.SignalR.HubCallerContext)
extension aspnetcore.Microsoft.AspNetCore.SignalR.HubCallerContext {
    public func GetHttpContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.GetHttpContextExtensions.GetHttpContext(connection: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Http.HttpContext GetHttpContext(Microsoft.AspNetCore.SignalR.HubConnectionContext)
extension aspnetcore.Microsoft.AspNetCore.SignalR.HubConnectionContext {
    public func GetHttpContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        return try aspnetcore.Microsoft.AspNetCore.SignalR.GetHttpContextExtensions.GetHttpContext(connection: self);
    }
}

