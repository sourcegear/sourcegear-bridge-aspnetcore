// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions
public struct ResponseCompressionBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCompression(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions.UseResponseCompression(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds middleware for dynamically compressing HTTP Responses.
            

    - Parameter builder: The  instance this method extends.
    */
    public static func UseResponseCompression(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ResponseCompressionBuilderExtensions_IApplicationBuilder__UseResponseCompression_0__1__IApplicationBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // ResponseCompressionBuilderExtensions


// type: Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions
public struct ResponseCompressionServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Add response compression services.
            

    - Parameter services: The  for adding services.
    - Returns: The .

    */
    public static func AddResponseCompression(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ResponseCompressionServicesExtensions_IServiceCollection__AddResponseCompression_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>)
// docid: M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions})
    /**
    
            Add response compression services and configure the related options.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: The .

    */
    public static func AddResponseCompression(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ResponseCompressionServicesExtensions_IServiceCollection__AddResponseCompression_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddResponseCompression(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>(configureOptions);
        return try AddResponseCompression(services: services, configureOptions: del_configureOptions);
    }
} // ResponseCompressionServicesExtensions


}

// Microsoft.AspNetCore.ResponseCompression
extension Microsoft.AspNetCore.ResponseCompression {
// type: Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider
    /**
    
            Brotli compression provider.
            

    */
open class BrotliCompressionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_ResponseCompression_ICompressionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions>)
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions})
    /**
    
            Creates a new instance of  with options.
            

    - Parameter options: The options for this instance.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProviderOptions_(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IO.Stream CreateStream(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider.CreateStream(System.IO.Stream)
    /**
    */
    open /* method final */ func CreateStream(outputStream : dotnet.System.IO.Stream) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProvider_Stream__CreateStream_0__1__Stream(&__thrown, self.get_handle(), outputStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_EncodingName()
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider.get_EncodingName
    open /* method final */ func get_EncodingName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProvider_String__get_EncodingName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsFlush()
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider.get_SupportsFlush
    open /* method final */ func get_SupportsFlush() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProvider_bool__get_SupportsFlush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var EncodingName : dotnet.System.String {
        get {
            return try! get_EncodingName();
        }
    }
    /**
    */
    public var SupportsFlush : Bool {
        get {
            return try! get_SupportsFlush();
        }
    }
} // BrotliCompressionProvider


// type: Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions
    /**
    
            Options for the 
            

    */
open class BrotliCompressionProviderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProviderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProviderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.Compression.CompressionLevel get_Level()
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions.get_Level
    open func get_Level() throws -> dotnet.System.IO.Compression.CompressionLevel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProviderOptions_CompressionLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.CompressionLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.IO.Compression.CompressionLevel)
// docid: M:Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProviderOptions.set_Level(System.IO.Compression.CompressionLevel)
    open func set_Level(value : dotnet.System.IO.Compression.CompressionLevel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_BrotliCompressionProviderOptions_void__set_Level_0__1__CompressionLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            What level of compression to use for the stream. The default is .
            

    */
    open var Level : dotnet.System.IO.Compression.CompressionLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
} // BrotliCompressionProviderOptions


// type: Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection
    /**
    
            A Collection of ICompressionProvider's that also allows them to be instantiated from an .
            

    */
open class CompressionProviderCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ICompressionProvider>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_CompressionProviderCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_CompressionProviderCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void Add<TCompressionProvider>()
    // void Add(System.Type)
// docid: M:Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection.Add(System.Type)
    /**
    
            Adds a type representing an .
            

    - Parameter providerType: Type representing an .
    */
    open func Add(providerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_CompressionProviderCollection_void__Add_0__1__Type(&__thrown, self.get_handle(), providerType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CompressionProviderCollection


// type: Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider
    /**
    
            GZIP compression provider.
            

    */
open class GzipCompressionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_ResponseCompression_ICompressionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_GzipCompressionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions>)
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions})
    /**
    
            Creates a new instance of GzipCompressionProvider with options.
            

    - Parameter options: The options for this instance.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_ResponseCompression_GzipCompressionProviderOptions_(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IO.Stream CreateStream(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider.CreateStream(System.IO.Stream)
    /**
    */
    open /* method final */ func CreateStream(outputStream : dotnet.System.IO.Stream) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProvider_Stream__CreateStream_0__1__Stream(&__thrown, self.get_handle(), outputStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_EncodingName()
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider.get_EncodingName
    open /* method final */ func get_EncodingName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProvider_String__get_EncodingName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsFlush()
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider.get_SupportsFlush
    open /* method final */ func get_SupportsFlush() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProvider_bool__get_SupportsFlush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var EncodingName : dotnet.System.String {
        get {
            return try! get_EncodingName();
        }
    }
    /**
    */
    public var SupportsFlush : Bool {
        get {
            return try! get_SupportsFlush();
        }
    }
} // GzipCompressionProvider


// type: Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions
    /**
    
            Options for the GzipCompressionProvider
            

    */
open class GzipCompressionProviderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_GzipCompressionProviderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProviderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.Compression.CompressionLevel get_Level()
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions.get_Level
    open func get_Level() throws -> dotnet.System.IO.Compression.CompressionLevel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_GzipCompressionProviderOptions_CompressionLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Compression.CompressionLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.IO.Compression.CompressionLevel)
// docid: M:Microsoft.AspNetCore.ResponseCompression.GzipCompressionProviderOptions.set_Level(System.IO.Compression.CompressionLevel)
    open func set_Level(value : dotnet.System.IO.Compression.CompressionLevel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_GzipCompressionProviderOptions_void__set_Level_0__1__CompressionLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            What level of compression to use for the stream. The default is Fastest.
            

    */
    open var Level : dotnet.System.IO.Compression.CompressionLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
} // GzipCompressionProviderOptions


// type: Microsoft.AspNetCore.ResponseCompression.ICompressionProvider
    /**
    
            Provides a specific compression implementation to compress HTTP responses.
            

    */
open class ICompressionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_ResponseCompression_ICompressionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_ICompressionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream CreateStream(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.CreateStream(System.IO.Stream)
    /**
    
            Create a new compression stream.
            

    - Parameter outputStream: The stream where the compressed data have to be written.
    - Returns: The compression stream.

    */
    open func CreateStream(outputStream : dotnet.System.IO.Stream) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ICompressionProvider_Stream__CreateStream_0__1__Stream(&__thrown, self.get_handle(), outputStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_EncodingName()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.get_EncodingName
    open func get_EncodingName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ICompressionProvider_String__get_EncodingName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsFlush()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ICompressionProvider.get_SupportsFlush
    open func get_SupportsFlush() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ICompressionProvider_bool__get_SupportsFlush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ICompressionProvider


// type: Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider
    /**
    
            Used to examine requests and responses to see if compression should be enabled.
            

    */
open class IResponseCompressionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.ResponseCompression.ICompressionProvider GetCompressionProvider(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider.GetCompressionProvider(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Examines the request and selects an acceptable compression provider, if any.
            

    - Parameter context: The .
    - Returns: A compression provider or null if compression should not be used.

    */
    open func GetCompressionProvider(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ICompressionProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider_ICompressionProvider__GetCompressionProvider_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.ResponseCompression.ICompressionProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool ShouldCompressResponse(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider.ShouldCompressResponse(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Examines the response on first write to see if compression should be used.
            

    - Parameter context: The .
    - Returns:  if the response should be compressed, otherwise .

    */
    open func ShouldCompressResponse(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider_bool__ShouldCompressResponse_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckRequestAcceptsCompression(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider.CheckRequestAcceptsCompression(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Examines the request to see if compression should be used for response.
            

    - Parameter context: The .
    - Returns:  if the request accepts compression, otherwise .

    */
    open func CheckRequestAcceptsCompression(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider_bool__CheckRequestAcceptsCompression_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IResponseCompressionProvider


// type: Microsoft.AspNetCore.ResponseCompression.ResponseCompressionDefaults
    /**
    
            Defaults for the ResponseCompressionMiddleware
            

    */
open class ResponseCompressionDefaults
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_ResponseCompressionDefaults_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionDefaults.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionDefaults_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ResponseCompressionDefaults


// type: Microsoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware
    /**
    
            Enable HTTP response compression.
            

    */
open class ResponseCompressionMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_ResponseCompressionMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider)
    /**
    
            Initialize the Response Compression middleware.
            

    - Parameter next: The delegate representing the remaining middleware in the request pipeline.
    - Parameter provider: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, provider : aspnetcore.Microsoft.AspNetCore.ResponseCompression.IResponseCompressionProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionMiddleware_ctor_0__2__RequestDelegate_IResponseCompressionProvider(&__thrown, next.get_handle(), provider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invoke the middleware.
            

    - Parameter context: The .
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // ResponseCompressionMiddleware


// type: Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions
    /**
    
            Options for the HTTP response compression middleware.
            

    */
open class ResponseCompressionOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_MimeTypes()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.get_MimeTypes
    open func get_MimeTypes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_System_Collections_Generic_IEnumerable_string___get_MimeTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MimeTypes(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.set_MimeTypes(System.Collections.Generic.IEnumerable{System.String})
    open func set_MimeTypes(value : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_void__set_MimeTypes_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_ExcludedMimeTypes()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.get_ExcludedMimeTypes
    open func get_ExcludedMimeTypes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_System_Collections_Generic_IEnumerable_string___get_ExcludedMimeTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ExcludedMimeTypes(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.set_ExcludedMimeTypes(System.Collections.Generic.IEnumerable{System.String})
    open func set_ExcludedMimeTypes(value : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_void__set_ExcludedMimeTypes_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableForHttps()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.get_EnableForHttps
    open func get_EnableForHttps() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_bool__get_EnableForHttps_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableForHttps(bool)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.set_EnableForHttps(System.Boolean)
    open func set_EnableForHttps(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_void__set_EnableForHttps_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection get_Providers()
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions.get_Providers
    open func get_Providers() throws -> aspnetcore.Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_CompressionProviderCollection__get_Providers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection(hndl : __return);
        }
    }
    /**
    
            Indicates if responses over HTTPS connections should be compressed. The default is 'false'.
            Enabling compression on HTTPS requests for remotely manipulable content may expose security problems.
            

    */
    open var EnableForHttps : Bool {
        get {
            return try! get_EnableForHttps();
        }
        set(v) {
            return try! set_EnableForHttps(value: v);
        }
    }
    /**
    
            Response Content-Type MIME types to not compress.
            

    */
    open var ExcludedMimeTypes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_ExcludedMimeTypes();
        }
        set(v) {
            return try! set_ExcludedMimeTypes(value: v);
        }
    }
    /**
    
            Response Content-Type MIME types to compress.
            

    */
    open var MimeTypes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_MimeTypes();
        }
        set(v) {
            return try! set_MimeTypes(value: v);
        }
    }
    /**
    
            The  types to use for responses.
            Providers are prioritized based on the order they are added.
            

    */
    open var Providers : aspnetcore.Microsoft.AspNetCore.ResponseCompression.CompressionProviderCollection {
        get {
            return try! get_Providers();
        }
    }
} // ResponseCompressionOptions


// type: Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider
    /**
    */
open class ResponseCompressionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_ResponseCompression_ResponseCompressionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions})
    /**
    
            If no compression providers are specified then GZip is used by default.
            

    - Parameter services: Services to use when instantiating compression providers.
    - Parameter options: The options for this instance.
    */
    public init(services : dotnet.System.IServiceProvider, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionProvider_ctor_0__2__IServiceProvider_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_ResponseCompression_ResponseCompressionOptions_(&__thrown, services.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.ResponseCompression.ICompressionProvider GetCompressionProvider(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider.GetCompressionProvider(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open func GetCompressionProvider(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ICompressionProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionProvider_ICompressionProvider__GetCompressionProvider_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.ResponseCompression.ICompressionProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool ShouldCompressResponse(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider.ShouldCompressResponse(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open func ShouldCompressResponse(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionProvider_bool__ShouldCompressResponse_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckRequestAcceptsCompression(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionProvider.CheckRequestAcceptsCompression(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open /* method final */ func CheckRequestAcceptsCompression(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_ResponseCompression_ResponseCompressionProvider_bool__CheckRequestAcceptsCompression_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ResponseCompressionProvider


}



public protocol Microsoft_AspNetCore_ResponseCompression_ICompressionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_ResponseCompression_IResponseCompressionProvider
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCompression(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseResponseCompression() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions.UseResponseCompression(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddResponseCompression() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddResponseCompression(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddResponseCompression(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions>(configureOptions);
        return try aspnetcore.Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

