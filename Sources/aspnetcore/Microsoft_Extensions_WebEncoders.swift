// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions
public struct EncoderServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds ,  and 
            to the specified .
            

    - Parameter services: The .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddWebEncoders(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_EncoderServiceCollectionExtensions_IServiceCollection__AddWebEncoders_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.Extensions.WebEncoders.WebEncoderOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.WebEncoders.WebEncoderOptions})
    /**
    
            Adds ,  and 
            to the specified .
            

    - Parameter services: The .
    - Parameter setupAction: An  to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddWebEncoders(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_EncoderServiceCollectionExtensions_IServiceCollection__AddWebEncoders_0__2__IServiceCollection_System_Action_Microsoft_Extensions_WebEncoders_WebEncoderOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddWebEncoders(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions>(setupAction);
        return try AddWebEncoders(services: services, setupAction: del_setupAction);
    }
} // EncoderServiceCollectionExtensions


}

// Microsoft.Extensions.WebEncoders
extension Microsoft.Extensions.WebEncoders {
// type: Microsoft.Extensions.WebEncoders.WebEncoderOptions
    /**
    
            Specifies options common to all three encoders (HtmlEncode, JavaScriptEncode, UrlEncode).
            

    */
public final class WebEncoderOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_WebEncoders_WebEncoderOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.WebEncoders.WebEncoderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_WebEncoders_WebEncoderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.TextEncoderSettings get_TextEncoderSettings()
// docid: M:Microsoft.Extensions.WebEncoders.WebEncoderOptions.get_TextEncoderSettings
    public func get_TextEncoderSettings() throws -> Optional<dotnet.System.Text.Encodings.Web.TextEncoderSettings> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_WebEncoderOptions_TextEncoderSettings__get_TextEncoderSettings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encodings.Web.TextEncoderSettings(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TextEncoderSettings(System.Text.Encodings.Web.TextEncoderSettings)
// docid: M:Microsoft.Extensions.WebEncoders.WebEncoderOptions.set_TextEncoderSettings(System.Text.Encodings.Web.TextEncoderSettings)
    public func set_TextEncoderSettings(value : Optional<dotnet.System.Text.Encodings.Web.TextEncoderSettings>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_WebEncoderOptions_void__set_TextEncoderSettings_0__1__TextEncoderSettings(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Specifies which code points are allowed to be represented unescaped by the encoders.
            

    */
    public var TextEncoderSettings : Optional<dotnet.System.Text.Encodings.Web.TextEncoderSettings> {
        get {
            return try! get_TextEncoderSettings();
        }
        set(v) {
            return try! set_TextEncoderSettings(value: v!);
        }
    }
} // WebEncoderOptions


}
// Microsoft.Extensions.WebEncoders.Testing
extension Microsoft.Extensions.WebEncoders.Testing {
// type: Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder
    /**
    
             used for unit testing. This encoder does not perform any encoding and should not be used in application code.
            

    */
public final class HtmlTestEncoder
    :
    dotnet.System.Text.Encodings.Web.HtmlEncoder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.Encode(System.String)
    /**
    */
    public override func Encode(value : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_String__Encode_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Encode(System.IO.TextWriter, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)
    /**
    */
    public override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System_Arr<dotnet.System.Char>, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Encode(System.IO.TextWriter, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)
    /**
    */
    public override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System.String, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool WillEncode(System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.WillEncode(System.Int32)
    /**
    */
    public override func WillEncode(unicodeScalar : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_bool__WillEncode_0__1__i32(&__thrown, self.get_handle(), unicodeScalar);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 FindFirstCharacterToEncode(System.Char*, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)
    /**
    */
    public override func FindFirstCharacterToEncode(text : UnsafeMutablePointer<Swift.Int16>?, textLength : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(&__thrown, self.get_handle(), text, textLength);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryEncodeUnicodeScalar(System.Int32, System.Char*, System.Int32, ref System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)
    /**
    */
    public override func TryEncodeUnicodeScalar(unicodeScalar : Swift.Int32, buffer : UnsafeMutablePointer<Swift.Int16>?, bufferLength : Swift.Int32, numberOfCharactersWritten : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_numberOfCharactersWritten = numberOfCharactersWritten;
        let __return = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(&__thrown, self.get_handle(), unicodeScalar, buffer, bufferLength, &_tmp_out_numberOfCharactersWritten);
        let _tmp2_numberOfCharactersWritten = _tmp_out_numberOfCharactersWritten;
            numberOfCharactersWritten = _tmp2_numberOfCharactersWritten;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxOutputCharactersPerInputCharacter()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.HtmlTestEncoder.get_MaxOutputCharactersPerInputCharacter
    public override func get_MaxOutputCharactersPerInputCharacter() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_HtmlTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    public override var MaxOutputCharactersPerInputCharacter : Swift.Int32 {
        get {
            return try! get_MaxOutputCharactersPerInputCharacter();
        }
    }
} // HtmlTestEncoder


// type: Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder
    /**
    
             used for unit testing. This encoder does not perform any encoding and should not be used in application code.
            

    */
open class JavaScriptTestEncoder
    :
    dotnet.System.Text.Encodings.Web.JavaScriptEncoder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.Encode(System.String)
    /**
    */
    open override func Encode(value : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_String__Encode_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Encode(System.IO.TextWriter, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)
    /**
    */
    open override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System_Arr<dotnet.System.Char>, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Encode(System.IO.TextWriter, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)
    /**
    */
    open override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System.String, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool WillEncode(System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.WillEncode(System.Int32)
    /**
    */
    open override func WillEncode(unicodeScalar : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_bool__WillEncode_0__1__i32(&__thrown, self.get_handle(), unicodeScalar);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 FindFirstCharacterToEncode(System.Char*, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)
    /**
    */
    open override func FindFirstCharacterToEncode(text : UnsafeMutablePointer<Swift.Int16>?, textLength : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(&__thrown, self.get_handle(), text, textLength);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryEncodeUnicodeScalar(System.Int32, System.Char*, System.Int32, ref System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)
    /**
    */
    open override func TryEncodeUnicodeScalar(unicodeScalar : Swift.Int32, buffer : UnsafeMutablePointer<Swift.Int16>?, bufferLength : Swift.Int32, numberOfCharactersWritten : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_numberOfCharactersWritten = numberOfCharactersWritten;
        let __return = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(&__thrown, self.get_handle(), unicodeScalar, buffer, bufferLength, &_tmp_out_numberOfCharactersWritten);
        let _tmp2_numberOfCharactersWritten = _tmp_out_numberOfCharactersWritten;
            numberOfCharactersWritten = _tmp2_numberOfCharactersWritten;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxOutputCharactersPerInputCharacter()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.JavaScriptTestEncoder.get_MaxOutputCharactersPerInputCharacter
    open override func get_MaxOutputCharactersPerInputCharacter() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_JavaScriptTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    open override var MaxOutputCharactersPerInputCharacter : Swift.Int32 {
        get {
            return try! get_MaxOutputCharactersPerInputCharacter();
        }
    }
} // JavaScriptTestEncoder


// type: Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder
    /**
    
             used for unit testing. This encoder does not perform any encoding and should not be used in application code.
            

    */
open class UrlTestEncoder
    :
    dotnet.System.Text.Encodings.Web.UrlEncoder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.Encode(System.String)
    /**
    */
    open override func Encode(value : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_String__Encode_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Encode(System.IO.TextWriter, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)
    /**
    */
    open override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System_Arr<dotnet.System.Char>, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Encode(System.IO.TextWriter, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)
    /**
    */
    open override func Encode(output : dotnet.System.IO.TextWriter, value : dotnet.System.String, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_void__Encode_0__4__TextWriter_String_i32_i32(&__thrown, self.get_handle(), output.get_handle(), value.get_handle(), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool WillEncode(System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.WillEncode(System.Int32)
    /**
    */
    open override func WillEncode(unicodeScalar : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_bool__WillEncode_0__1__i32(&__thrown, self.get_handle(), unicodeScalar);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 FindFirstCharacterToEncode(System.Char*, System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)
    /**
    */
    open override func FindFirstCharacterToEncode(text : UnsafeMutablePointer<Swift.Int16>?, textLength : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(&__thrown, self.get_handle(), text, textLength);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryEncodeUnicodeScalar(System.Int32, System.Char*, System.Int32, ref System.Int32)
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)
    /**
    */
    open override func TryEncodeUnicodeScalar(unicodeScalar : Swift.Int32, buffer : UnsafeMutablePointer<Swift.Int16>?, bufferLength : Swift.Int32, numberOfCharactersWritten : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_numberOfCharactersWritten = numberOfCharactersWritten;
        let __return = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(&__thrown, self.get_handle(), unicodeScalar, buffer, bufferLength, &_tmp_out_numberOfCharactersWritten);
        let _tmp2_numberOfCharactersWritten = _tmp_out_numberOfCharactersWritten;
            numberOfCharactersWritten = _tmp2_numberOfCharactersWritten;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxOutputCharactersPerInputCharacter()
// docid: M:Microsoft.Extensions.WebEncoders.Testing.UrlTestEncoder.get_MaxOutputCharactersPerInputCharacter
    open override func get_MaxOutputCharactersPerInputCharacter() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_WebEncoders_Testing_UrlTestEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    open override var MaxOutputCharactersPerInputCharacter : Swift.Int32 {
        get {
            return try! get_MaxOutputCharactersPerInputCharacter();
        }
    }
} // UrlTestEncoder


}




// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddWebEncoders() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.Extensions.WebEncoders.WebEncoderOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddWebEncoders(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddWebEncoders(setupAction : @escaping (aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.WebEncoders.WebEncoderOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

