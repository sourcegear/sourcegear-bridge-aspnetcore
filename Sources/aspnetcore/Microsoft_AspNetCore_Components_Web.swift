// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Components
extension Microsoft.AspNetCore.Components {
// type: Microsoft.AspNetCore.Components.BindInputElementAttribute
    /**
    
            Configures options for binding subtypes of an HTML input element.
            

    */
public final class BindInputElementAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_BindInputElementAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String, System.String, bool, System.String)
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter type: The value of the element's type attribute.
    - Parameter suffix: The suffix value.
    - Parameter valueAttribute: The name of the value attribute to be bound.
    - Parameter changeAttribute: The name of an attribute that will register an associated change event.
    - Parameter isInvariantCulture: 
            Determines whether binding will use  or .
            
    - Parameter format: 
            An optional format to use when converting values.
            
    */
    public init(type : Optional<dotnet.System.String>, suffix : Optional<dotnet.System.String>, valueAttribute : Optional<dotnet.System.String>, changeAttribute : Optional<dotnet.System.String>, isInvariantCulture : Bool, format : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_BindInputElementAttribute_ctor_0__6__String_String_String_String_bool_String(&__thrown, type?.get_handle() ?? nil, suffix?.get_handle() ?? nil, valueAttribute?.get_handle() ?? nil, changeAttribute?.get_handle() ?? nil, Swift.Int32(isInvariantCulture ? 1 : 0), format?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_Type
    public func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Suffix()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_Suffix
    public func get_Suffix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_String__get_Suffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ValueAttribute()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_ValueAttribute
    public func get_ValueAttribute() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_String__get_ValueAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ChangeAttribute()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_ChangeAttribute
    public func get_ChangeAttribute() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_String__get_ChangeAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsInvariantCulture()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_IsInvariantCulture
    public func get_IsInvariantCulture() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_bool__get_IsInvariantCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Format()
// docid: M:Microsoft.AspNetCore.Components.BindInputElementAttribute.get_Format
    public func get_Format() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_BindInputElementAttribute_String__get_Format_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the name of an attribute that will register an associated change event.
            

    */
    public var ChangeAttribute : Optional<dotnet.System.String> {
        get {
            return try! get_ChangeAttribute();
        }
    }
    /**
    
            Gets an optional format to use when converting values.
            

    */
    public var Format : Optional<dotnet.System.String> {
        get {
            return try! get_Format();
        }
    }
    /**
    
            Gets a value that determines whether binding will use  or
            .
            

    */
    public var IsInvariantCulture : Bool {
        get {
            return try! get_IsInvariantCulture();
        }
    }
    /**
    
            Gets the suffix value.
            

    */
    public var Suffix : Optional<dotnet.System.String> {
        get {
            return try! get_Suffix();
        }
    }
    /**
    
            Gets the value of the element's type attribute.
            

    */
    public var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
    }
    /**
    
            Gets the name of the value attribute to be bound.
            

    */
    public var ValueAttribute : Optional<dotnet.System.String> {
        get {
            return try! get_ValueAttribute();
        }
    }
} // BindInputElementAttribute


// type: Microsoft.AspNetCore.Components.ElementReferenceExtensions
public struct ElementReferenceExtensions {
    // System.Threading.Tasks.ValueTask FocusAsync(Microsoft.AspNetCore.Components.ElementReference)
// docid: M:Microsoft.AspNetCore.Components.ElementReferenceExtensions.FocusAsync(Microsoft.AspNetCore.Components.ElementReference)
    /**
    
            Gives focus to an element given its .
            

    - Parameter elementReference: A reference to the element to focus.
    - Returns: The  representing the asynchronous focus operation.

    */
    public static func FocusAsync(elementReference : aspnetcore.Microsoft.AspNetCore.Components.ElementReference) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ElementReferenceExtensions_ValueTask__FocusAsync_0__1__ElementReference(&__thrown, elementReference.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask FocusAsync(Microsoft.AspNetCore.Components.ElementReference, bool)
// docid: M:Microsoft.AspNetCore.Components.ElementReferenceExtensions.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)
    /**
    
            Gives focus to an element given its .
            

    - Parameter elementReference: A reference to the element to focus.
    - Parameter preventScroll: 
            
                A  value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
                A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
                If preventScroll is set to true, no scrolling will occur.
            
            
    - Returns: The  representing the asynchronous focus operation.

    */
    public static func FocusAsync(elementReference : aspnetcore.Microsoft.AspNetCore.Components.ElementReference, preventScroll : Bool) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_ElementReferenceExtensions_ValueTask__FocusAsync_0__2__ElementReference_bool(&__thrown, elementReference.get_handle(), Swift.Int32(preventScroll ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // ElementReferenceExtensions


// type: Microsoft.AspNetCore.Components.WebElementReferenceContext
    /**
    
            A  for a web element.
            

    */
open class WebElementReferenceContext
    :
    aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_WebElementReferenceContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.JSInterop.IJSRuntime)
// docid: M:Microsoft.AspNetCore.Components.WebElementReferenceContext.#ctor(Microsoft.JSInterop.IJSRuntime)
    /**
    
            Initialize a new instance of .
            

    - Parameter jsRuntime: The .
    */
    public init(jsRuntime : aspnetcore.Microsoft.JSInterop.IJSRuntime) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_WebElementReferenceContext_ctor_0__1__IJSRuntime(&__thrown, jsRuntime.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // WebElementReferenceContext


}
// Microsoft.AspNetCore.Components.Forms
extension Microsoft.AspNetCore.Components.Forms {
// type: Microsoft.AspNetCore.Components.Forms.BrowserFileExtensions
public struct BrowserFileExtensions {
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Components.Forms.IBrowserFile> RequestImageFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Forms.BrowserFileExtensions.RequestImageFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.String,System.Int32,System.Int32)
    /**
    
            Attempts to convert the current image file to a new one of the specified file type and maximum file dimensions.
            
            Caution: there is no guarantee that the file will be converted, or will even be a valid image file at all, either
            before or after conversion. The conversion is requested within the browser before it is transferred to .NET
            code, so the resulting data should be treated as untrusted.
            
            

    - Parameter browserFile: The  to convert to a new image file.
    - Parameter format: The new image format.
    - Parameter maxWidth: The maximum image width.
    - Parameter maxHeight: The maximum image height
    - Returns: A  representing the completion of the operation.

    */
    public static func RequestImageFileAsync(browserFile : aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile, format : dotnet.System.String, maxWidth : Swift.Int32, maxHeight : Swift.Int32) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_BrowserFileExtensions_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Components_Forms_IBrowserFile___RequestImageFileAsync_0__4__IBrowserFile_String_i32_i32(&__thrown, browserFile.get_handle(), format.get_handle(), maxWidth, maxHeight);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
} // BrowserFileExtensions


// type: Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions
public struct EditContextFieldClassExtensions {
    // System.String FieldCssClass<TField>(Microsoft.AspNetCore.Components.Forms.EditContext, System.Linq.Expressions.Expression<System.Func<TField>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldCssClass``1(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})
    /**
    
            Gets a string that indicates the status of the specified field as a CSS class. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            

    - Parameter editContext: The .
    - Parameter accessor: An identifier for the field.
    - Returns: A string that indicates the status of the field.

    */
    public static func FieldCssClass<UTField : SGBridgeGenericValue>(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext, accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<UTField>>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextFieldClassExtensions_String__FieldCssClass_1__2__EditContext_System_Linq_Expressions_Expression_System_System_Func_UTField__(UTField.get_type_handle(), &__thrown, editContext.get_handle(), accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FieldCssClass(Microsoft.AspNetCore.Components.Forms.EditContext, ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldCssClass(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Gets a string that indicates the status of the specified field as a CSS class.
            

    - Parameter editContext: The .
    - Parameter fieldIdentifier: An identifier for the field.
    - Returns: A string that indicates the status of the field.

    */
    public static func FieldCssClass(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext, fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextFieldClassExtensions_String__FieldCssClass_0__2__EditContext_inFieldIdentifier(&__thrown, editContext.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void SetFieldCssClassProvider(Microsoft.AspNetCore.Components.Forms.EditContext, Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.SetFieldCssClassProvider(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider)
    /**
    
            Associates the supplied  with the supplied .
            This customizes the field CSS class names used within the .
            

    - Parameter editContext: The .
    - Parameter fieldCssClassProvider: The .
    */
    public static func SetFieldCssClassProvider(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext, fieldCssClassProvider : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContextFieldClassExtensions_void__SetFieldCssClassProvider_0__2__EditContext_FieldCssClassProvider(&__thrown, editContext.get_handle(), fieldCssClassProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EditContextFieldClassExtensions


// type: Microsoft.AspNetCore.Components.Forms.EditForm
    /**
    
            Renders a form element that cascades an  to descendants.
            

    */
open class EditForm
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_EditForm_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.#ctor
    /**
    
            Constructs an instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_EditForm_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Forms.EditContext get_EditContext()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_EditContext
    open func get_EditContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_EditContext__get_EditContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EditContext(Microsoft.AspNetCore.Components.Forms.EditContext)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_EditContext(Microsoft.AspNetCore.Components.Forms.EditContext)
    open func set_EditContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_EditContext_0__1__EditContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_Model(System.Object)
    open func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext> get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Forms_EditContext___get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Forms.EditContext})
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_ChildContent_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Forms_EditContext_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext> get_OnSubmit()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_OnSubmit
    open func get_OnSubmit() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext___get_OnSubmit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnSubmit(Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_OnSubmit(Microsoft.AspNetCore.Components.EventCallback{Microsoft.AspNetCore.Components.Forms.EditContext})
    open func set_OnSubmit(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_OnSubmit_0__1__Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext> get_OnValidSubmit()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_OnValidSubmit
    open func get_OnValidSubmit() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext___get_OnValidSubmit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnValidSubmit(Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_OnValidSubmit(Microsoft.AspNetCore.Components.EventCallback{Microsoft.AspNetCore.Components.Forms.EditContext})
    open func set_OnValidSubmit(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_OnValidSubmit_0__1__Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext> get_OnInvalidSubmit()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.get_OnInvalidSubmit
    open func get_OnInvalidSubmit() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditForm_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext___get_OnInvalidSubmit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnInvalidSubmit(Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditForm.set_OnInvalidSubmit(Microsoft.AspNetCore.Components.EventCallback{Microsoft.AspNetCore.Components.Forms.EditContext})
    open func set_OnInvalidSubmit(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditForm_void__set_OnInvalidSubmit_0__1__Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_EditContext_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the created form element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Specifies the content to be rendered inside this .
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext>> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            Supplies the edit context explicitly. If using this parameter, do not
            also supply , since the model value will be taken
            from the  property.
            

    */
    open var EditContext : Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        get {
            return try! get_EditContext();
        }
        set(v) {
            return try! set_EditContext(value: v!);
        }
    }
    /**
    
            Specifies the top-level model object for the form. An edit context will
            be constructed for this model. If using this parameter, do not also supply
            a value for .
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
    /**
    
            A callback that will be invoked when the form is submitted and the
             is determined to be invalid.
            

    */
    open var OnInvalidSubmit : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        get {
            return try! get_OnInvalidSubmit();
        }
        set(v) {
            return try! set_OnInvalidSubmit(value: v);
        }
    }
    /**
    
             A callback that will be invoked when the form is submitted.
            
             If using this parameter, you are responsible for triggering any validation
             manually, e.g., by calling .
             

    */
    open var OnSubmit : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        get {
            return try! get_OnSubmit();
        }
        set(v) {
            return try! set_OnSubmit(value: v);
        }
    }
    /**
    
            A callback that will be invoked when the form is submitted and the
             is determined to be valid.
            

    */
    open var OnValidSubmit : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext> {
        get {
            return try! get_OnValidSubmit();
        }
        set(v) {
            return try! set_OnValidSubmit(value: v);
        }
    }
} // EditForm


// type: Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider
    /**
    
            Supplies CSS class names for form fields to represent their validation state or other
            state information from an .
            

    */
open class FieldCssClassProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_FieldCssClassProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_FieldCssClassProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetFieldCssClass(Microsoft.AspNetCore.Components.Forms.EditContext, ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider.GetFieldCssClass(Microsoft.AspNetCore.Components.Forms.EditContext,Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Gets a string that indicates the status of the specified field as a CSS class.
            

    - Parameter editContext: The .
    - Parameter fieldIdentifier: The .
    - Returns: A CSS class name string.

    */
    open func GetFieldCssClass(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext, fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        let __return = Microsoft_AspNetCore_Components_Forms_FieldCssClassProvider_String__GetFieldCssClass_0__2__EditContext_inFieldIdentifier(&__thrown, self.get_handle(), editContext.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // FieldCssClassProvider


// type: Microsoft.AspNetCore.Components.Forms.IBrowserFile
    /**
    
            Represents the data of a file selected from an  component.
            
            Note: Metadata is provided by the client and is untrusted.
            
            

    */
open class IBrowserFile
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Forms_IBrowserFile
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_IBrowserFile_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream OpenReadStream(System.Int64, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Components.Forms.IBrowserFile.OpenReadStream(System.Int64,System.Threading.CancellationToken)
    /**
    
            Opens the stream for reading the uploaded file.
            

    - Parameter maxAllowedSize: 
            The maximum number of bytes that can be supplied by the Stream. Defaults to 500 KB.
            
            Calling 
            will throw if the file's size, as specified by  is larger than
            . By default, if the user supplies a file larger than 500 KB, this method will throw an exception.
            
            
            It is valuable to choose a size limit that corresponds to your use case. If you allow excessively large files, this
            may result in excessive consumption of memory or disk/database space, depending on what your code does
            with the supplied .
            
            
            For Blazor Server in particular, beware of reading the entire stream into a memory buffer unless you have
            passed a suitably low size limit, since you will be consuming that memory on the server.
            
            
    - Parameter cancellationToken: A cancellation token to signal the cancellation of streaming file data.
    */
    open func OpenReadStream(maxAllowedSize : Swift.Int64 = 512000, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_IBrowserFile_Stream__OpenReadStream_0__2__i64_CancellationToken(&__thrown, self.get_handle(), maxAllowedSize, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.Forms.IBrowserFile.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_IBrowserFile_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTimeOffset get_LastModified()
// docid: M:Microsoft.AspNetCore.Components.Forms.IBrowserFile.get_LastModified
    open func get_LastModified() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_IBrowserFile_DateTimeOffset__get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_Size()
// docid: M:Microsoft.AspNetCore.Components.Forms.IBrowserFile.get_Size
    open func get_Size() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_IBrowserFile_i64__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Components.Forms.IBrowserFile.get_ContentType
    open func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_IBrowserFile_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IBrowserFile


// type: Microsoft.AspNetCore.Components.Forms.InputBase`1
    /**
    
            A base class for form input components. This base class automatically
            integrates with an , which must be supplied
            as a cascading parameter.
            

    */
open class InputBase_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputBase_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)
    /**
    */
    open override func SetParametersAsync(parameters : aspnetcore.Microsoft.AspNetCore.Components.ParameterView) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_Task__SetParametersAsync_0__1__ParameterView(TValue.get_type_handle(), &__thrown, self.get_handle(), parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputBase_1_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.get_Value
    open func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Value(TValue)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.set_Value(`0)
    open func set_Value(value : TValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputBase_1_void__set_Value_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<TValue> get_ValueChanged()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.get_ValueChanged
    open func get_ValueChanged() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_Microsoft_AspNetCore_Components_EventCallback_TValue___get_ValueChanged_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueChanged(Microsoft.AspNetCore.Components.EventCallback<TValue>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.set_ValueChanged(Microsoft.AspNetCore.Components.EventCallback{`0})
    open func set_ValueChanged(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<TValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputBase_1_void__set_ValueChanged_0__1__Microsoft_AspNetCore_Components_EventCallback_TValue_(TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression<System.Func<TValue>> get_ValueExpression()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.get_ValueExpression
    open func get_ValueExpression() throws -> Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_System_Linq_Expressions_Expression_System_System_Func_TValue____get_ValueExpression_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ValueExpression(System.Linq.Expressions.Expression<System.Func<TValue>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.set_ValueExpression(System.Linq.Expressions.Expression{System.Func{`0}})
    open func set_ValueExpression(value : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputBase_1_void__set_ValueExpression_0__1__System_Linq_Expressions_Expression_System_System_Func_TValue__(TValue.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputBase_1_String__get_DisplayName_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputBase`1.set_DisplayName(System.String)
    open func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputBase_1_void__set_DisplayName_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the created element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Gets or sets the display name for this field.
            This value is used when generating error messages when the input value fails to parse correctly.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets the value of the input. This should be used with two-way binding.
            

    */
    open var Value : TValue {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
    /**
    
            Gets or sets a callback that updates the bound value.
            

    */
    open var ValueChanged : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<TValue> {
        get {
            return try! get_ValueChanged();
        }
        set(v) {
            return try! set_ValueChanged(value: v);
        }
    }
    /**
    
            Gets or sets an expression that identifies the bound value.
            

    */
    open var ValueExpression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>> {
        get {
            return try! get_ValueExpression();
        }
        set(v) {
            return try! set_ValueExpression(value: v!);
        }
    }
} // InputBase_1


// type: Microsoft.AspNetCore.Components.Forms.InputCheckbox
    /**
    
            An input component for editing  values.
            

    */
open class InputCheckbox
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<Swift.Bool>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputCheckbox_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputCheckbox.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputCheckbox_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputCheckbox.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputCheckbox_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputCheckbox.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputCheckbox_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
} // InputCheckbox


// type: Microsoft.AspNetCore.Components.Forms.InputDateType
    /**
    
            Represents the type of HTML input to be rendered by a  component.
            

    */
public struct InputDateType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputDateType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Components.Forms.InputDateType Date
    /**
    
            Lets the user enter a date.
            

    */
    public static var Date : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType(val: Microsoft_AspNetCore_Components_Forms_InputDateType_get_Date());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.Forms.InputDateType DateTimeLocal
    /**
    
            Lets the user enter both a date and a time.
            

    */
    public static var DateTimeLocal : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType(val: Microsoft_AspNetCore_Components_Forms_InputDateType_get_DateTimeLocal());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.Forms.InputDateType Month
    /**
    
            Lets the user enter a month and a year.
            

    */
    public static var Month : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType(val: Microsoft_AspNetCore_Components_Forms_InputDateType_get_Month());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.Forms.InputDateType Time
    /**
    
            Lets the user enter a time.
            

    */
    public static var Time : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType(val: Microsoft_AspNetCore_Components_Forms_InputDateType_get_Time());
            return __return;
        }
    }
} // InputDateType


// type: Microsoft.AspNetCore.Components.Forms.InputDate`1
    /**
    
            An input component for editing date values.
            Supported types are  and .
            

    */
open class InputDate_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<TValue>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputDate_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.#ctor
    /**
    
            Constructs an instance of 
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputDate_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Forms.InputDateType get_Type()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.get_Type
    open func get_Type() throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputDate_1_InputDateType__get_Type_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType(val: __return);
        }
    }
    // [IsSpecialName] void set_Type(Microsoft.AspNetCore.Components.Forms.InputDateType)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.set_Type(Microsoft.AspNetCore.Components.Forms.InputDateType)
    open func set_Type(value : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputDate_1_void__set_Type_0__1__InputDateType(TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ParsingErrorMessage()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.get_ParsingErrorMessage
    open func get_ParsingErrorMessage() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputDate_1_String__get_ParsingErrorMessage_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParsingErrorMessage(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.set_ParsingErrorMessage(System.String)
    open func set_ParsingErrorMessage(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputDate_1_void__set_ParsingErrorMessage_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputDate_1_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputDate`1.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputDate_1_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
    /**
    
            Gets or sets the error message used when displaying an a parsing error.
            

    */
    open var ParsingErrorMessage : dotnet.System.String {
        get {
            return try! get_ParsingErrorMessage();
        }
        set(v) {
            return try! set_ParsingErrorMessage(value: v);
        }
    }
    /**
    
            Gets or sets the type of HTML input to be rendered.
            

    */
    open var Type_ : aspnetcore.Microsoft.AspNetCore.Components.Forms.InputDateType {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // InputDate_1


// type: Microsoft.AspNetCore.Components.Forms.InputFile
    /**
    
            A component that wraps the HTML file input element and supplies a  for each file's contents.
            

    */
open class InputFile
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputFile_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputFile_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs> get_OnChange()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.get_OnChange
    open func get_OnChange() throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFile_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs___get_OnChange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnChange(Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.set_OnChange(Microsoft.AspNetCore.Components.EventCallback{Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs})
    open func set_OnChange(value : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputFile_void__set_OnChange_0__1__Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFile_System_Collections_Generic_IDictionary_string_object___get_AdditionalAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.set_AdditionalAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputFile_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFile_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFile.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputFile_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the input element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
    /**
    
            Gets or sets the event callback that will be invoked when the collection of selected files changes.
            

    */
    open var OnChange : aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs> {
        get {
            return try! get_OnChange();
        }
        set(v) {
            return try! set_OnChange(value: v);
        }
    }
} // InputFile


// type: Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs
    /**
    
            Supplies information about an  event being raised.
            

    */
public final class InputFileChangeEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.Forms.IBrowserFile>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Components.Forms.IBrowserFile})
    /**
    
            Constructs a new  instance.
            

    - Parameter files: The list of .
    */
    public init(files : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_ctor_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Components_Forms_IBrowserFile_(&__thrown, files.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.Forms.IBrowserFile> GetMultipleFiles(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs.GetMultipleFiles(System.Int32)
    /**
    
            Gets the file entries list. This method should be used for inputs that accept multiple
            files. If the input accepts only a single file, then use the  property
            instead.
            

    - Parameter maximumFileCount: The maximum number of files to accept. If the number of files exceeds this value, this method will throw an exception.
    */
    public func GetMultipleFiles(maximumFileCount : Swift.Int32 = 10) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Components_Forms_IBrowserFile___GetMultipleFiles_0__1__i32(&__thrown, self.get_handle(), maximumFileCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_FileCount()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs.get_FileCount
    public func get_FileCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_i32__get_FileCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Forms.IBrowserFile get_File()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs.get_File
    public func get_File() throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputFileChangeEventArgs_IBrowserFile__get_File_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile(hndl : __return);
        }
    }
    /**
    
            Gets the supplied file. Note that if the input accepts multiple files, then instead of
            reading this property, you should call .
            

    */
    public var File : aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile {
        get {
            return try! get_File();
        }
    }
    /**
    
            Gets the number of supplied files.
            

    */
    public var FileCount : Swift.Int32 {
        get {
            return try! get_FileCount();
        }
    }
} // InputFileChangeEventArgs


// type: Microsoft.AspNetCore.Components.Forms.InputNumber`1
    /**
    
            An input component for editing numeric values.
            Supported numeric types are , , , , , .
            

    */
open class InputNumber_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<TValue>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputNumber_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputNumber_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ParsingErrorMessage()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.get_ParsingErrorMessage
    open func get_ParsingErrorMessage() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputNumber_1_String__get_ParsingErrorMessage_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParsingErrorMessage(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.set_ParsingErrorMessage(System.String)
    open func set_ParsingErrorMessage(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputNumber_1_void__set_ParsingErrorMessage_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputNumber_1_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputNumber`1.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputNumber_1_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
    /**
    
            Gets or sets the error message used when displaying an a parsing error.
            

    */
    open var ParsingErrorMessage : dotnet.System.String {
        get {
            return try! get_ParsingErrorMessage();
        }
        set(v) {
            return try! set_ParsingErrorMessage(value: v);
        }
    }
} // InputNumber_1


// type: Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1
    /**
    
            Groups child  components.
            

    */
open class InputRadioGroup_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<TValue>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_RenderFragment__get_ChildContent_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_void__set_ChildContent_0__1__RenderFragment(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_String__get_Name_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputRadioGroup_1_void__set_Name_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the child content to be rendering inside the .
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the group.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // InputRadioGroup_1


// type: Microsoft.AspNetCore.Components.Forms.InputRadio`1
    /**
    
            An input component used for selecting a value from a group of choices.
            

    */
open class InputRadio_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputRadio_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputRadio_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputRadio_1_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputRadio_1_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.get_Value
    open func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputRadio_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    // [IsSpecialName] void set_Value(TValue)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.set_Value(`0)
    open func set_Value(value : TValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputRadio_1_void__set_Value_0__1__TValue(TValue.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputRadio_1_String__get_Name_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputRadio`1.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputRadio_1_void__set_Name_0__1__String(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the input element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the parent input radio group.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets or sets the value of this input.
            

    */
    open var Value : TValue {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // InputRadio_1


// type: Microsoft.AspNetCore.Components.Forms.InputSelect`1
    /**
    
            A dropdown selection component.
            

    */
open class InputSelect_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<TValue>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputSelect_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.#ctor
    /**
    
            Constructs an instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputSelect_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputSelect_1_RenderFragment__get_ChildContent_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputSelect_1_void__set_ChildContent_0__1__RenderFragment(TValue.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputSelect_1_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputSelect`1.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputSelect_1_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the child content to be rendering inside the select element.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            Gets or sets the select .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
} // InputSelect_1


// type: Microsoft.AspNetCore.Components.Forms.InputText
    /**
    
            An input component for editing  values.
            

    */
open class InputText
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<dotnet.System.String>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputText_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputText.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputText_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputText.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputText_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputText.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputText_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
} // InputText


// type: Microsoft.AspNetCore.Components.Forms.InputTextArea
    /**
    
            A multiline input component for editing  values.
            

    */
open class InputTextArea
    :
    aspnetcore.Microsoft.AspNetCore.Components.Forms.InputBase_1<dotnet.System.String>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_InputTextArea_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputTextArea.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_InputTextArea_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Components.ElementReference> get_Element()
// docid: M:Microsoft.AspNetCore.Components.Forms.InputTextArea.get_Element
    open func get_Element() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_InputTextArea_System_Nullable_Microsoft_AspNetCore_Components_ElementReference___get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (aspnetcore.Microsoft.AspNetCore.Components.ElementReference(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Element(System.Nullable<Microsoft.AspNetCore.Components.ElementReference>)
// docid: M:Microsoft.AspNetCore.Components.Forms.InputTextArea.set_Element(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})
    open func set_Element(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_InputTextArea_void__set_Element_0__1__System_Nullable_Microsoft_AspNetCore_Components_ElementReference_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the associated .
            
            May be  if accessed before the component is rendered.
            
            

    */
    open var Element : Optional<aspnetcore.Microsoft.AspNetCore.Components.ElementReference> {
        get {
            return try! get_Element();
        }
        set(v) {
            return try! set_Element(value: v!);
        }
    }
} // InputTextArea


// type: Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions
    /**
    
            Repesents configurable options for  with Blazor Server.
            

    */
open class RemoteBrowserFileStreamOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxSegmentSize()
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.get_MaxSegmentSize
    open func get_MaxSegmentSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_i32__get_MaxSegmentSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxSegmentSize(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.set_MaxSegmentSize(System.Int32)
    open func set_MaxSegmentSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_void__set_MaxSegmentSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxBufferSize()
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.get_MaxBufferSize
    open func get_MaxBufferSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_i32__get_MaxBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxBufferSize(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.set_MaxBufferSize(System.Int32)
    open func set_MaxBufferSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_void__set_MaxBufferSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_SegmentFetchTimeout()
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.get_SegmentFetchTimeout
    open func get_SegmentFetchTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_TimeSpan__get_SegmentFetchTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SegmentFetchTimeout(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Components.Forms.RemoteBrowserFileStreamOptions.set_SegmentFetchTimeout(System.TimeSpan)
    open func set_SegmentFetchTimeout(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_RemoteBrowserFileStreamOptions_void__set_SegmentFetchTimeout_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the maximum internal buffer size for unread data sent over a SignalR circuit.
            
            This only has an effect when using Blazor Server.
            
            

    */
    open var MaxBufferSize : Swift.Int32 {
        get {
            return try! get_MaxBufferSize();
        }
        set(v) {
            return try! set_MaxBufferSize(value: v);
        }
    }
    /**
    
            Gets or sets the maximum segment size for file data sent over a SignalR circuit.
            The default value is 20K.
            
            This only has an effect when using Blazor Server.
            
            

    */
    open var MaxSegmentSize : Swift.Int32 {
        get {
            return try! get_MaxSegmentSize();
        }
        set(v) {
            return try! set_MaxSegmentSize(value: v);
        }
    }
    /**
    
            Gets or sets the time limit for fetching a segment of file data.
            
            This only has an effect when using Blazor Server.
            
            

    */
    open var SegmentFetchTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_SegmentFetchTimeout();
        }
        set(v) {
            return try! set_SegmentFetchTimeout(value: v);
        }
    }
} // RemoteBrowserFileStreamOptions


// type: Microsoft.AspNetCore.Components.Forms.ValidationMessage`1
    /**
    
            Displays a list of validation messages for a specified field within a cascaded .
            

    */
open class ValidationMessage_1<TValue : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_get_type_handle(TValue.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.#ctor
    /**
    `
            Constructs an instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_ctor_0__0(TValue.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(TValue.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Linq.Expressions.Expression<System.Func<TValue>> get_For()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.get_For
    open func get_For() throws -> Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_System_Linq_Expressions_Expression_System_System_Func_TValue____get_For_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Linq.Expressions.Expression_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(System.Linq.Expressions.Expression<System.Func<TValue>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.set_For(System.Linq.Expressions.Expression{System.Func{`0}})
    open func set_For(value : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessage_1_void__set_For_0__1__System_Linq_Expressions_Expression_System_System_Func_TValue__(TValue.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the created div element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Specifies the field for which validation messages should be displayed.
            

    */
    open var For : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<TValue>>> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
} // ValidationMessage_1


// type: Microsoft.AspNetCore.Components.Forms.ValidationSummary
    /**
    
            Displays a list of validation messages from a cascaded .
            

    */
open class ValidationSummary
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_ValidationSummary_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.#ctor
    /**
    `
            Constructs an instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_ValidationSummary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationSummary_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.set_Model(System.Object)
    open func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationSummary_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationSummary_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationSummary.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationSummary_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be applied to the created ul element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Gets or sets the model to produce the list of validation messages for.
            When specified, this lists all errors that are associated with the model instance.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
} // ValidationSummary


}

// Microsoft.AspNetCore.Components.RenderTree
extension Microsoft.AspNetCore.Components.RenderTree {
// type: Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor
    /**
    
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            

    */
public final class WebEventDescriptor
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.UInt64 get_EventHandlerId()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.get_EventHandlerId
    public func get_EventHandlerId() throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_u64__get_EventHandlerId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_EventHandlerId(System.UInt64)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.set_EventHandlerId(System.UInt64)
    public func set_EventHandlerId(value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_void__set_EventHandlerId_0__1__u64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EventName()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.get_EventName
    public func get_EventName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_String__get_EventName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_EventName(System.String)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.set_EventName(System.String)
    public func set_EventName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_void__set_EventName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo get_EventFieldInfo()
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.get_EventFieldInfo
    public func get_EventFieldInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_EventFieldInfo__get_EventFieldInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EventFieldInfo(Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor.set_EventFieldInfo(Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo)
    public func set_EventFieldInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_RenderTree_WebEventDescriptor_void__set_EventFieldInfo_0__1__EventFieldInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            For framework use only.
            

    */
    public var EventFieldInfo : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo> {
        get {
            return try! get_EventFieldInfo();
        }
        set(v) {
            return try! set_EventFieldInfo(value: v!);
        }
    }
    /**
    
            For framework use only.
            

    */
    public var EventHandlerId : Swift.UInt64 {
        get {
            return try! get_EventHandlerId();
        }
        set(v) {
            return try! set_EventHandlerId(value: v);
        }
    }
    /**
    
            For framework use only.
            

    */
    public var EventName : dotnet.System.String {
        get {
            return try! get_EventName();
        }
        set(v) {
            return try! set_EventName(value: v);
        }
    }
} // WebEventDescriptor


// type: Microsoft.AspNetCore.Components.RenderTree.WebRenderer
    /**
    
            A  that attaches its components to a browser DOM.
            

    */
open class WebRenderer
    :
    aspnetcore.Microsoft.AspNetCore.Components.RenderTree.Renderer
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_RenderTree_WebRenderer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Json.JsonSerializerOptions, Microsoft.AspNetCore.Components.Web.Infrastructure.JSComponentInterop)
// docid: M:Microsoft.AspNetCore.Components.RenderTree.WebRenderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Json.JsonSerializerOptions,Microsoft.AspNetCore.Components.Web.Infrastructure.JSComponentInterop)
    /**
    
            Constructs an instance of .
            

    - Parameter serviceProvider: The  to be used when initializing components.
    - Parameter loggerFactory: The .
    - Parameter jsonOptions: The .
    - Parameter jsComponentInterop: The .
    */
    public init(serviceProvider : dotnet.System.IServiceProvider, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, jsonOptions : dotnet.System.Text.Json.JsonSerializerOptions, jsComponentInterop : aspnetcore.Microsoft.AspNetCore.Components.Web.Infrastructure.JSComponentInterop) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_RenderTree_WebRenderer_ctor_0__4__IServiceProvider_ILoggerFactory_JsonSerializerOptions_JSComponentInterop(&__thrown, serviceProvider.get_handle(), loggerFactory.get_handle(), jsonOptions.get_handle(), jsComponentInterop.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // WebRenderer


}

// Microsoft.AspNetCore.Components.Routing
extension Microsoft.AspNetCore.Components.Routing {
// type: Microsoft.AspNetCore.Components.Routing.FocusOnNavigate
    /**
    
            After navigating from one page to another, sets focus to an element
            matching a CSS selector. This can be used to build an accessible
            navigation system compatible with screen readers.
            

    */
open class FocusOnNavigate
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.get_RouteData
    open func get_RouteData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RouteData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RouteData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Components.RouteData)
// docid: M:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.set_RouteData(Microsoft.AspNetCore.Components.RouteData)
    open func set_RouteData(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RouteData>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Selector()
// docid: M:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.get_Selector
    open func get_Selector() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_String__get_Selector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Selector(System.String)
// docid: M:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.set_Selector(System.String)
    open func set_Selector(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_FocusOnNavigate_void__set_Selector_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the route data. This can be obtained from an enclosing
             component.
            

    */
    open var RouteData : Optional<aspnetcore.Microsoft.AspNetCore.Components.RouteData> {
        get {
            return try! get_RouteData();
        }
        set(v) {
            return try! set_RouteData(value: v!);
        }
    }
    /**
    
            Gets or sets a CSS selector describing the element to be focused after
            navigation between pages.
            

    */
    open var Selector : Optional<dotnet.System.String> {
        get {
            return try! get_Selector();
        }
        set(v) {
            return try! set_Selector(value: v!);
        }
    }
} // FocusOnNavigate


// type: Microsoft.AspNetCore.Components.Routing.NavLink
    /**
    
            A component that renders an anchor tag, automatically toggling its 'active'
            class based on whether its 'href' matches the current URI.
            

    */
open class NavLink
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_NavLink_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Routing_NavLink_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_NavLink_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ActiveClass()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.get_ActiveClass
    open func get_ActiveClass() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavLink_String__get_ActiveClass_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActiveClass(System.String)
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.set_ActiveClass(System.String)
    open func set_ActiveClass(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_NavLink_void__set_ActiveClass_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_AdditionalAttributes()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.get_AdditionalAttributes
    open func get_AdditionalAttributes() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavLink_System_Collections_Generic_IReadOnlyDictionary_string_object___get_AdditionalAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.set_AdditionalAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    open func set_AdditionalAttributes(value : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_NavLink_void__set_AdditionalAttributes_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavLink_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_NavLink_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Routing.NavLinkMatch get_Match()
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.get_Match
    open func get_Match() throws -> aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Routing_NavLink_NavLinkMatch__get_Match_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch(val: __return);
        }
    }
    // [IsSpecialName] void set_Match(Microsoft.AspNetCore.Components.Routing.NavLinkMatch)
// docid: M:Microsoft.AspNetCore.Components.Routing.NavLink.set_Match(Microsoft.AspNetCore.Components.Routing.NavLinkMatch)
    open func set_Match(value : aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Routing_NavLink_void__set_Match_0__1__NavLinkMatch(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the CSS class name applied to the NavLink when the
            current route matches the NavLink href.
            

    */
    open var ActiveClass : Optional<dotnet.System.String> {
        get {
            return try! get_ActiveClass();
        }
        set(v) {
            return try! set_ActiveClass(value: v!);
        }
    }
    /**
    
            Gets or sets a collection of additional attributes that will be added to the generated
            a element.
            

    */
    open var AdditionalAttributes : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_AdditionalAttributes();
        }
        set(v) {
            return try! set_AdditionalAttributes(value: v!);
        }
    }
    /**
    
            Gets or sets the child content of the component.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            Gets or sets a value representing the URL matching behavior.
            

    */
    open var Match : aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch {
        get {
            return try! get_Match();
        }
        set(v) {
            return try! set_Match(value: v);
        }
    }
} // NavLink


// type: Microsoft.AspNetCore.Components.Routing.NavLinkMatch
    /**
    
            Modifies the URL matching behavior for a .
            

    */
public struct NavLinkMatch : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Routing_NavLinkMatch_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Components.Routing.NavLinkMatch Prefix
    /**
    
            Specifies that the  should be active when it matches any prefix
            of the current URL.
            

    */
    public static var Prefix : aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch(val: Microsoft_AspNetCore_Components_Routing_NavLinkMatch_get_Prefix());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Components.Routing.NavLinkMatch All
    /**
    
            Specifies that the  should be active when it matches the entire
            current URL.
            

    */
    public static var All : aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Routing.NavLinkMatch(val: Microsoft_AspNetCore_Components_Routing_NavLinkMatch_get_All());
            return __return;
        }
    }
} // NavLinkMatch


}

// Microsoft.AspNetCore.Components.Web
extension Microsoft.AspNetCore.Components.Web {
// type: Microsoft.AspNetCore.Components.Web.BindAttributes
public struct BindAttributes {
} // BindAttributes


// type: Microsoft.AspNetCore.Components.Web.ClipboardEventArgs
    /**
    
            Supplies information about an clipboard event that is being raised.
            

    */
open class ClipboardEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.ClipboardEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.ClipboardEventArgs.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.ClipboardEventArgs.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // ClipboardEventArgs


// type: Microsoft.AspNetCore.Components.Web.DataTransfer
    /**
    
            The  object is used to hold the data that is being dragged during a drag and drop operation.
            It may hold one or more , each of one or more data types.
            For more information about drag and drop, see HTML Drag and Drop API.
            

    */
open class DataTransfer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_DataTransfer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_DataTransfer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DropEffect()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.get_DropEffect
    open func get_DropEffect() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransfer_String__get_DropEffect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DropEffect(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.set_DropEffect(System.String)
    open func set_DropEffect(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransfer_void__set_DropEffect_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_EffectAllowed()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.get_EffectAllowed
    open func get_EffectAllowed() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransfer_String__get_EffectAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EffectAllowed(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.set_EffectAllowed(System.String)
    open func set_EffectAllowed(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransfer_void__set_EffectAllowed_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_Files()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.get_Files
    open func get_Files() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransfer_StringArray__get_Files_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Files(System.String[])
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.set_Files(System.String[])
    open func set_Files(value : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransfer_void__set_Files_0__1__StringArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.DataTransferItem[] get_Items()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.get_Items
    open func get_Items() throws -> dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransferItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransfer_DataTransferItemArray__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransferItem>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Items(Microsoft.AspNetCore.Components.Web.DataTransferItem[])
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.set_Items(Microsoft.AspNetCore.Components.Web.DataTransferItem[])
    open func set_Items(value : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransferItem>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransfer_void__set_Items_0__1__DataTransferItemArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_Types()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.get_Types
    open func get_Types() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransfer_StringArray__get_Types_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Types(System.String[])
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransfer.set_Types(System.String[])
    open func set_Types(value : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransfer_void__set_Types_0__1__StringArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the type of drag-and-drop operation currently selected or sets the operation to a new type.
            The value must be none, copy, link or move.
            

    */
    open var DropEffect : dotnet.System.String {
        get {
            return try! get_DropEffect();
        }
        set(v) {
            return try! set_DropEffect(value: v);
        }
    }
    /**
    
            Provides all of the types of operations that are possible.
            Must be one of none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized.
            

    */
    open var EffectAllowed : Optional<dotnet.System.String> {
        get {
            return try! get_EffectAllowed();
        }
        set(v) {
            return try! set_EffectAllowed(value: v!);
        }
    }
    /**
    
            Contains a list of all the local files available on the data transfer.
            If the drag operation doesn't involve dragging files, this property is an empty list.
            

    */
    open var Files : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_Files();
        }
        set(v) {
            return try! set_Files(value: v);
        }
    }
    /**
    
            Gives a  array which is a list of all of the drag data.
            

    */
    open var Items : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransferItem> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v);
        }
    }
    /**
    
            An array of  giving the formats that were set in the dragstart event.
            

    */
    open var Types : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_Types();
        }
        set(v) {
            return try! set_Types(value: v);
        }
    }
} // DataTransfer


// type: Microsoft.AspNetCore.Components.Web.DataTransferItem
    /**
    
            The  object represents one drag data item.
            During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items.
            Each item in the list is a  object.
            

    */
open class DataTransferItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_DataTransferItem_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransferItem.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_DataTransferItem_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Kind()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransferItem.get_Kind
    open func get_Kind() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransferItem_String__get_Kind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Kind(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransferItem.set_Kind(System.String)
    open func set_Kind(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransferItem_void__set_Kind_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransferItem.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DataTransferItem_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.DataTransferItem.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DataTransferItem_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The kind of drag data item, string or file
            

    */
    open var Kind : dotnet.System.String {
        get {
            return try! get_Kind();
        }
        set(v) {
            return try! set_Kind(value: v);
        }
    }
    /**
    
            The drag data item's type, typically a MIME type
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // DataTransferItem


// type: Microsoft.AspNetCore.Components.Web.DragEventArgs
    /**
    
            Supplies information about an drag event that is being raised.
            

    */
open class DragEventArgs
    :
    aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_DragEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.DragEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_DragEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.DataTransfer get_DataTransfer()
// docid: M:Microsoft.AspNetCore.Components.Web.DragEventArgs.get_DataTransfer
    open func get_DataTransfer() throws -> aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransfer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_DragEventArgs_DataTransfer__get_DataTransfer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransfer(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataTransfer(Microsoft.AspNetCore.Components.Web.DataTransfer)
// docid: M:Microsoft.AspNetCore.Components.Web.DragEventArgs.set_DataTransfer(Microsoft.AspNetCore.Components.Web.DataTransfer)
    open func set_DataTransfer(value : aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransfer) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_DragEventArgs_void__set_DataTransfer_0__1__DataTransfer(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The data that underlies a drag-and-drop operation, known as the drag data store.
            See .
            

    */
    open var DataTransfer : aspnetcore.Microsoft.AspNetCore.Components.Web.DataTransfer {
        get {
            return try! get_DataTransfer();
        }
        set(v) {
            return try! set_DataTransfer(value: v);
        }
    }
} // DragEventArgs


// type: Microsoft.AspNetCore.Components.Web.ErrorBoundary
    /**
    
            Captures errors thrown from its child content.
            

    */
open class ErrorBoundary
    :
    aspnetcore.Microsoft.AspNetCore.Components.ErrorBoundaryBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_ErrorBoundary_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorBoundary.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_ErrorBoundary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ErrorBoundary


// type: Microsoft.AspNetCore.Components.Web.ErrorEventArgs
    /**
    
            Supplies information about an error event that is being raised.
            

    */
open class ErrorEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_ErrorEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.get_Message
    open func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Message(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.set_Message(System.String)
    open func set_Message(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ErrorEventArgs_void__set_Message_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Filename()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.get_Filename
    open func get_Filename() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_String__get_Filename_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Filename(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.set_Filename(System.String)
    open func set_Filename(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ErrorEventArgs_void__set_Filename_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Lineno()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.get_Lineno
    open func get_Lineno() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_i32__get_Lineno_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Lineno(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.set_Lineno(System.Int32)
    open func set_Lineno(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ErrorEventArgs_void__set_Lineno_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Colno()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.get_Colno
    open func get_Colno() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_i32__get_Colno_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Colno(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.set_Colno(System.Int32)
    open func set_Colno(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ErrorEventArgs_void__set_Colno_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ErrorEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.ErrorEventArgs.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ErrorEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the column number of the script file on which the error occurred.
            

    */
    open var Colno : Swift.Int32 {
        get {
            return try! get_Colno();
        }
        set(v) {
            return try! set_Colno(value: v);
        }
    }
    /**
    
            Gets the name of the script file in which the error occurred.
            

    */
    open var Filename : Optional<dotnet.System.String> {
        get {
            return try! get_Filename();
        }
        set(v) {
            return try! set_Filename(value: v!);
        }
    }
    /**
    
            Gets the line number of the script file on which the error occurred.
            

    */
    open var Lineno : Swift.Int32 {
        get {
            return try! get_Lineno();
        }
        set(v) {
            return try! set_Lineno(value: v);
        }
    }
    /**
    
            Gets a a human-readable error message describing the problem.
            

    */
    open var Message : Optional<dotnet.System.String> {
        get {
            return try! get_Message();
        }
        set(v) {
            return try! set_Message(value: v!);
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // ErrorEventArgs


// type: Microsoft.AspNetCore.Components.Web.EventHandlers
public struct EventHandlers {
} // EventHandlers


// type: Microsoft.AspNetCore.Components.Web.FocusEventArgs
    /**
    
            Supplies information about a focus event that is being raised.
            

    */
open class FocusEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_FocusEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.FocusEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_FocusEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.FocusEventArgs.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_FocusEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.FocusEventArgs.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_FocusEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // FocusEventArgs


// type: Microsoft.AspNetCore.Components.Web.HeadContent
    /**
    
            Provides content to  components.
            

    */
public final class HeadContent
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_HeadContent_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.HeadContent.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_HeadContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Web.HeadContent.get_ChildContent
    public func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_HeadContent_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Web.HeadContent.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    public func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_HeadContent_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    /**
    
            Gets or sets the content to be rendered in  instances.
            

    */
    public var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
} // HeadContent


// type: Microsoft.AspNetCore.Components.Web.HeadOutlet
    /**
    
            Renders content provided by  components.
            

    */
public final class HeadOutlet
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_HeadOutlet_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.HeadOutlet.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_HeadOutlet_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HeadOutlet


// type: Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger
    /**
    
            Logs exception information for a  component.
            

    */
open class IErrorBoundaryLogger
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Web_IErrorBoundaryLogger
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_IErrorBoundaryLogger_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.ValueTask LogErrorAsync(System.Exception)
// docid: M:Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger.LogErrorAsync(System.Exception)
    /**
    
            Logs the supplied .
            

    - Parameter exception: The  to log.
    - Returns: A  representing the completion of the operation.

    */
    open func LogErrorAsync(exception : dotnet.System.Exception) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_IErrorBoundaryLogger_ValueTask__LogErrorAsync_0__1__Exception(&__thrown, self.get_handle(), exception.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // IErrorBoundaryLogger


// type: Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration
    /**
    
            Configures options for allowing JavaScript to add root components dynamically.
            

    */
open class IJSComponentConfiguration
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore get_JSComponents()
// docid: M:Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration.get_JSComponents
    open func get_JSComponents() throws -> aspnetcore.Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration_JSComponentConfigurationStore__get_JSComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore(hndl : __return);
        }
    }
} // IJSComponentConfiguration


// type: Microsoft.AspNetCore.Components.Web.JSComponentConfigurationExtensions
public struct JSComponentConfigurationExtensions {
// TODO COPE (write_all_methods) (unused generic param) void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String)
// TODO COPE (write_all_methods) (unused generic param) void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String, System.String)
    // void RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.Type, System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.JSComponentConfigurationExtensions.RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration,System.Type,System.String)
    /**
    
            Marks the specified component type as allowed for instantiation from JavaScript.
            

    - Parameter configuration: The .
    - Parameter componentType: The component type.
    - Parameter identifier: A unique identifier for the component type that will be used by JavaScript code.
    */
    public static func RegisterForJavaScript(configuration : aspnetcore.Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, componentType : dotnet.System.Type_, identifier : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_JSComponentConfigurationExtensions_void__RegisterForJavaScript_0__3__IJSComponentConfiguration_Type_String(&__thrown, configuration.get_handle(), componentType.get_handle(), identifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.Type, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.JSComponentConfigurationExtensions.RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration,System.Type,System.String,System.String)
    /**
    
            Marks the specified component type as allowed for instantiation from JavaScript.
            

    - Parameter configuration: The .
    - Parameter componentType: The component type.
    - Parameter identifier: A unique identifier for the component type that will be used by JavaScript code.
    - Parameter javaScriptInitializer: Specifies an optional identifier for a JavaScript function that will be called to register the custom element.
    */
    public static func RegisterForJavaScript(configuration : aspnetcore.Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, componentType : dotnet.System.Type_, identifier : dotnet.System.String, javaScriptInitializer : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_JSComponentConfigurationExtensions_void__RegisterForJavaScript_0__4__IJSComponentConfiguration_Type_String_String(&__thrown, configuration.get_handle(), componentType.get_handle(), identifier.get_handle(), javaScriptInitializer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSComponentConfigurationExtensions


// type: Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore
    /**
    
            Specifies options for use when enabling JS component support.
            This type is not normally used directly from application code. In most cases, applications should
            call methods on the  on their application host builder.
            

    */
public final class JSComponentConfigurationStore
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_JSComponentConfigurationStore_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_JSComponentConfigurationStore_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JSComponentConfigurationStore


// type: Microsoft.AspNetCore.Components.Web.KeyboardEventArgs
    /**
    
            Supplies information about a keyboard event that is being raised.
            

    */
open class KeyboardEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_Key
    open func get_Key() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Key(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_Key(System.String)
    open func set_Key(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_Key_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Code()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_Code
    open func get_Code() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_String__get_Code_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Code(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_Code(System.String)
    open func set_Code(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_Code_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Location()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_Location
    open func get_Location() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_f32__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Location(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_Location(System.Single)
    open func set_Location(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_Location_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Repeat()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_Repeat
    open func get_Repeat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_bool__get_Repeat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Repeat(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_Repeat(System.Boolean)
    open func set_Repeat(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_Repeat_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CtrlKey()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_CtrlKey
    open func get_CtrlKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_bool__get_CtrlKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CtrlKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_CtrlKey(System.Boolean)
    open func set_CtrlKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_CtrlKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShiftKey()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_ShiftKey
    open func get_ShiftKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_bool__get_ShiftKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShiftKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_ShiftKey(System.Boolean)
    open func set_ShiftKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_ShiftKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AltKey()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_AltKey
    open func get_AltKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_bool__get_AltKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AltKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_AltKey(System.Boolean)
    open func set_AltKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_AltKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MetaKey()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_MetaKey
    open func get_MetaKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_bool__get_MetaKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MetaKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_MetaKey(System.Boolean)
    open func set_MetaKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_MetaKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            true if the alt key was down when the event was fired. false otherwise.
            

    */
    open var AltKey : Bool {
        get {
            return try! get_AltKey();
        }
        set(v) {
            return try! set_AltKey(value: v);
        }
    }
    /**
    
            Holds a string that identifies the physical key being pressed.
            The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value.
            

    */
    open var Code : dotnet.System.String {
        get {
            return try! get_Code();
        }
        set(v) {
            return try! set_Code(value: v);
        }
    }
    /**
    
            true if the control key was down when the event was fired. false otherwise.
            

    */
    open var CtrlKey : Bool {
        get {
            return try! get_CtrlKey();
        }
        set(v) {
            return try! set_CtrlKey(value: v);
        }
    }
    /**
    
            The key value of the key represented by the event.
            If the value has a printed representation, this attribute's value is the same as the char attribute.
            Otherwise, it's one of the key value strings specified in 'Key values'.
            If the key can't be identified, this is the string "Unidentified"
            

    */
    open var Key : dotnet.System.String {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v);
        }
    }
    /**
    
            The location of the key on the device.
            

    */
    open var Location : Swift.Float {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v);
        }
    }
    /**
    
            true if the meta key was down when the event was fired. false otherwise.
            

    */
    open var MetaKey : Bool {
        get {
            return try! get_MetaKey();
        }
        set(v) {
            return try! set_MetaKey(value: v);
        }
    }
    /**
    
            true if a key has been depressed long enough to trigger key repetition, otherwise false.
            

    */
    open var Repeat : Bool {
        get {
            return try! get_Repeat();
        }
        set(v) {
            return try! set_Repeat(value: v);
        }
    }
    /**
    
            true if the shift key was down when the event was fired. false otherwise.
            

    */
    open var ShiftKey : Bool {
        get {
            return try! get_ShiftKey();
        }
        set(v) {
            return try! set_ShiftKey(value: v);
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // KeyboardEventArgs


// type: Microsoft.AspNetCore.Components.Web.MouseEventArgs
    /**
    
            Supplies information about a mouse event that is being raised.
            

    */
open class MouseEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_MouseEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_MouseEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int64 get_Detail()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_Detail
    open func get_Detail() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_i64__get_Detail_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Detail(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_Detail(System.Int64)
    open func set_Detail(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_Detail_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ScreenX()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_ScreenX
    open func get_ScreenX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_ScreenX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ScreenX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_ScreenX(System.Double)
    open func set_ScreenX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_ScreenX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ScreenY()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_ScreenY
    open func get_ScreenY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_ScreenY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ScreenY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_ScreenY(System.Double)
    open func set_ScreenY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_ScreenY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ClientX()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_ClientX
    open func get_ClientX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_ClientX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ClientX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_ClientX(System.Double)
    open func set_ClientX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_ClientX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ClientY()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_ClientY
    open func get_ClientY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_ClientY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ClientY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_ClientY(System.Double)
    open func set_ClientY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_ClientY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_OffsetX()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_OffsetX
    open func get_OffsetX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_OffsetX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_OffsetX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_OffsetX(System.Double)
    open func set_OffsetX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_OffsetX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_OffsetY()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_OffsetY
    open func get_OffsetY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_OffsetY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_OffsetY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_OffsetY(System.Double)
    open func set_OffsetY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_OffsetY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_PageX()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_PageX
    open func get_PageX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_PageX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_PageX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_PageX(System.Double)
    open func set_PageX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_PageX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_PageY()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_PageY
    open func get_PageY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_f64__get_PageY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_PageY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_PageY(System.Double)
    open func set_PageY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_PageY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Button()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_Button
    open func get_Button() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_i64__get_Button_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Button(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_Button(System.Int64)
    open func set_Button(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_Button_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Buttons()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_Buttons
    open func get_Buttons() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_i64__get_Buttons_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Buttons(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_Buttons(System.Int64)
    open func set_Buttons(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_Buttons_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CtrlKey()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_CtrlKey
    open func get_CtrlKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_bool__get_CtrlKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CtrlKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_CtrlKey(System.Boolean)
    open func set_CtrlKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_CtrlKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShiftKey()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_ShiftKey
    open func get_ShiftKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_bool__get_ShiftKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShiftKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_ShiftKey(System.Boolean)
    open func set_ShiftKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_ShiftKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AltKey()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_AltKey
    open func get_AltKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_bool__get_AltKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AltKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_AltKey(System.Boolean)
    open func set_AltKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_AltKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MetaKey()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_MetaKey
    open func get_MetaKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_bool__get_MetaKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MetaKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_MetaKey(System.Boolean)
    open func set_MetaKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_MetaKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_MouseEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.MouseEventArgs.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_MouseEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            true if the alt key was down when the event was fired. false otherwise.
            

    */
    open var AltKey : Bool {
        get {
            return try! get_AltKey();
        }
        set(v) {
            return try! set_AltKey(value: v);
        }
    }
    /**
    
            The button number that was pressed when the mouse event was fired:
            Left button=0,
            middle button=1 (if present),
            right button=2.
            For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.
            

    */
    open var Button : Swift.Int64 {
        get {
            return try! get_Button();
        }
        set(v) {
            return try! set_Button(value: v);
        }
    }
    /**
    
            The buttons being pressed when the mouse event was fired:
            Left button=1,
            Right button=2,
            Middle (wheel) button=4,
            4th button (typically, "Browser Back" button)=8,
            5th button (typically, "Browser Forward" button)=16.
            If two or more buttons are pressed, returns the logical sum of the values.
            E.g., if Left button and Right button are pressed, returns 3 (=1 | 2).
            

    */
    open var Buttons : Swift.Int64 {
        get {
            return try! get_Buttons();
        }
        set(v) {
            return try! set_Buttons(value: v);
        }
    }
    /**
    
            The X coordinate of the mouse pointer in local (DOM content) coordinates.
            

    */
    open var ClientX : Swift.Double {
        get {
            return try! get_ClientX();
        }
        set(v) {
            return try! set_ClientX(value: v);
        }
    }
    /**
    
            The Y coordinate of the mouse pointer in local (DOM content) coordinates.
            

    */
    open var ClientY : Swift.Double {
        get {
            return try! get_ClientY();
        }
        set(v) {
            return try! set_ClientY(value: v);
        }
    }
    /**
    
            true if the control key was down when the event was fired. false otherwise.
            

    */
    open var CtrlKey : Bool {
        get {
            return try! get_CtrlKey();
        }
        set(v) {
            return try! set_CtrlKey(value: v);
        }
    }
    /**
    
            A count of consecutive clicks that happened in a short amount of time, incremented by one.
            

    */
    open var Detail : Swift.Int64 {
        get {
            return try! get_Detail();
        }
        set(v) {
            return try! set_Detail(value: v);
        }
    }
    /**
    
            true if the meta key was down when the event was fired. false otherwise.
            

    */
    open var MetaKey : Bool {
        get {
            return try! get_MetaKey();
        }
        set(v) {
            return try! set_MetaKey(value: v);
        }
    }
    /**
    
            The X coordinate of the mouse pointer in relative (Target Element) coordinates.
            

    */
    open var OffsetX : Swift.Double {
        get {
            return try! get_OffsetX();
        }
        set(v) {
            return try! set_OffsetX(value: v);
        }
    }
    /**
    
            The Y coordinate of the mouse pointer in relative (Target Element) coordinates.
            

    */
    open var OffsetY : Swift.Double {
        get {
            return try! get_OffsetY();
        }
        set(v) {
            return try! set_OffsetY(value: v);
        }
    }
    /**
    
            The X coordinate of the mouse pointer relative to the whole document.
            

    */
    open var PageX : Swift.Double {
        get {
            return try! get_PageX();
        }
        set(v) {
            return try! set_PageX(value: v);
        }
    }
    /**
    
            The Y coordinate of the mouse pointer relative to the whole document.
            

    */
    open var PageY : Swift.Double {
        get {
            return try! get_PageY();
        }
        set(v) {
            return try! set_PageY(value: v);
        }
    }
    /**
    
            The X coordinate of the mouse pointer in global (screen) coordinates.
            

    */
    open var ScreenX : Swift.Double {
        get {
            return try! get_ScreenX();
        }
        set(v) {
            return try! set_ScreenX(value: v);
        }
    }
    /**
    
            The Y coordinate of the mouse pointer in global (screen) coordinates.
            

    */
    open var ScreenY : Swift.Double {
        get {
            return try! get_ScreenY();
        }
        set(v) {
            return try! set_ScreenY(value: v);
        }
    }
    /**
    
            true if the shift key was down when the event was fired. false otherwise.
            

    */
    open var ShiftKey : Bool {
        get {
            return try! get_ShiftKey();
        }
        set(v) {
            return try! set_ShiftKey(value: v);
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // MouseEventArgs


// type: Microsoft.AspNetCore.Components.Web.PageTitle
    /**
    
            Enables rendering an HTML <title> to a  component.
            

    */
public final class PageTitle
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_PageTitle_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.PageTitle.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_PageTitle_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Web.PageTitle.get_ChildContent
    public func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PageTitle_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Web.PageTitle.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    public func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PageTitle_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    /**
    
            Gets or sets the content to be rendered as the document title.
            

    */
    public var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
} // PageTitle


// type: Microsoft.AspNetCore.Components.Web.PointerEventArgs
    /**
    
            Supplies information about a pointer event that is being raised.
            

    */
open class PointerEventArgs
    :
    aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_PointerEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_PointerEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int64 get_PointerId()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_PointerId
    open func get_PointerId() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_i64__get_PointerId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_PointerId(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_PointerId(System.Int64)
    open func set_PointerId(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_PointerId_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Width()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_Width
    open func get_Width() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_f32__get_Width_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Width(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_Width(System.Single)
    open func set_Width(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_Width_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Height()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_Height
    open func get_Height() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_f32__get_Height_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Height(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_Height(System.Single)
    open func set_Height(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_Height_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Pressure()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_Pressure
    open func get_Pressure() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_f32__get_Pressure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Pressure(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_Pressure(System.Single)
    open func set_Pressure(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_Pressure_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_TiltX()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_TiltX
    open func get_TiltX() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_f32__get_TiltX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_TiltX(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_TiltX(System.Single)
    open func set_TiltX(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_TiltX_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_TiltY()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_TiltY
    open func get_TiltY() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_f32__get_TiltY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_TiltY(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_TiltY(System.Single)
    open func set_TiltY(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_TiltY_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PointerType()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_PointerType
    open func get_PointerType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_String__get_PointerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PointerType(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_PointerType(System.String)
    open func set_PointerType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_PointerType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsPrimary()
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.get_IsPrimary
    open func get_IsPrimary() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_PointerEventArgs_bool__get_IsPrimary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsPrimary(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.PointerEventArgs.set_IsPrimary(System.Boolean)
    open func set_IsPrimary(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_PointerEventArgs_void__set_IsPrimary_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.
            

    */
    open var Height : Swift.Float {
        get {
            return try! get_Height();
        }
        set(v) {
            return try! set_Height(value: v);
        }
    }
    /**
    
            Indicates if the pointer represents the primary pointer of this pointer type.
            

    */
    open var IsPrimary : Bool {
        get {
            return try! get_IsPrimary();
        }
        set(v) {
            return try! set_IsPrimary(value: v);
        }
    }
    /**
    
            A unique identifier for the pointer causing the event.
            

    */
    open var PointerId : Swift.Int64 {
        get {
            return try! get_PointerId();
        }
        set(v) {
            return try! set_PointerId(value: v);
        }
    }
    /**
    
            Indicates the device type that caused the event.
            Must be one of the strings mouse, pen or touch, or an empty string.
            

    */
    open var PointerType : dotnet.System.String {
        get {
            return try! get_PointerType();
        }
        set(v) {
            return try! set_PointerType(value: v);
        }
    }
    /**
    
            The normalized pressure of the pointer input in the range of 0 to 1,
            where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.
            

    */
    open var Pressure : Swift.Float {
        get {
            return try! get_Pressure();
        }
        set(v) {
            return try! set_Pressure(value: v);
        }
    }
    /**
    
            The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane
            and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis.
            

    */
    open var TiltX : Swift.Float {
        get {
            return try! get_TiltX();
        }
        set(v) {
            return try! set_TiltX(value: v);
        }
    }
    /**
    
            The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane
            and the plane containing both the transducer (e.g. pen stylus) axis and the X axis.
            

    */
    open var TiltY : Swift.Float {
        get {
            return try! get_TiltY();
        }
        set(v) {
            return try! set_TiltY(value: v);
        }
    }
    /**
    
            The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.
            

    */
    open var Width : Swift.Float {
        get {
            return try! get_Width();
        }
        set(v) {
            return try! set_Width(value: v);
        }
    }
} // PointerEventArgs


// type: Microsoft.AspNetCore.Components.Web.ProgressEventArgs
    /**
    
            Supplies information about a progress event that is being raised.
            

    */
open class ProgressEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_ProgressEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_ProgressEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_LengthComputable()
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.get_LengthComputable
    open func get_LengthComputable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ProgressEventArgs_bool__get_LengthComputable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_LengthComputable(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.set_LengthComputable(System.Boolean)
    open func set_LengthComputable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ProgressEventArgs_void__set_LengthComputable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Loaded()
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.get_Loaded
    open func get_Loaded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ProgressEventArgs_i64__get_Loaded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Loaded(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.set_Loaded(System.Int64)
    open func set_Loaded(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ProgressEventArgs_void__set_Loaded_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Total()
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.get_Total
    open func get_Total() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ProgressEventArgs_i64__get_Total_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Total(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.set_Total(System.Int64)
    open func set_Total(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ProgressEventArgs_void__set_Total_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_ProgressEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.ProgressEventArgs.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_ProgressEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Whether or not the total size of the transfer is known.
            

    */
    open var LengthComputable : Bool {
        get {
            return try! get_LengthComputable();
        }
        set(v) {
            return try! set_LengthComputable(value: v);
        }
    }
    /**
    
            The number of bytes transferred since the beginning of the operation.
            This doesn't include headers and other overhead, but only the content itself.
            

    */
    open var Loaded : Swift.Int64 {
        get {
            return try! get_Loaded();
        }
        set(v) {
            return try! set_Loaded(value: v);
        }
    }
    /**
    
            The total number of bytes of content that will be transferred during the operation.
            If the total size is unknown, this value is zero.
            

    */
    open var Total : Swift.Int64 {
        get {
            return try! get_Total();
        }
        set(v) {
            return try! set_Total(value: v);
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // ProgressEventArgs


// type: Microsoft.AspNetCore.Components.Web.TouchEventArgs
    /**
    
            Supplies information about a touch event that is being raised.
            

    */
open class TouchEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_TouchEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_TouchEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int64 get_Detail()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_Detail
    open func get_Detail() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_i64__get_Detail_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Detail(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_Detail(System.Int64)
    open func set_Detail(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_Detail_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.TouchPoint[] get_Touches()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_Touches
    open func get_Touches() throws -> dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_TouchPointArray__get_Touches_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Touches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_Touches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
    open func set_Touches(value : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_Touches_0__1__TouchPointArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.TouchPoint[] get_TargetTouches()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_TargetTouches
    open func get_TargetTouches() throws -> dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_TouchPointArray__get_TargetTouches_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TargetTouches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_TargetTouches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
    open func set_TargetTouches(value : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_TargetTouches_0__1__TouchPointArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.TouchPoint[] get_ChangedTouches()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_ChangedTouches
    open func get_ChangedTouches() throws -> dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_TouchPointArray__get_ChangedTouches_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ChangedTouches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_ChangedTouches(Microsoft.AspNetCore.Components.Web.TouchPoint[])
    open func set_ChangedTouches(value : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_ChangedTouches_0__1__TouchPointArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CtrlKey()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_CtrlKey
    open func get_CtrlKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_bool__get_CtrlKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CtrlKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_CtrlKey(System.Boolean)
    open func set_CtrlKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_CtrlKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShiftKey()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_ShiftKey
    open func get_ShiftKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_bool__get_ShiftKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShiftKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_ShiftKey(System.Boolean)
    open func set_ShiftKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_ShiftKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AltKey()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_AltKey
    open func get_AltKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_bool__get_AltKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AltKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_AltKey(System.Boolean)
    open func set_AltKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_AltKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_MetaKey()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_MetaKey
    open func get_MetaKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_bool__get_MetaKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MetaKey(bool)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_MetaKey(System.Boolean)
    open func set_MetaKey(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_MetaKey_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.get_Type
    open func get_Type() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchEventArgs_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchEventArgs.set_Type(System.String)
    open func set_Type(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchEventArgs_void__set_Type_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            true if the alt key was down when the event was fired. false otherwise.
            

    */
    open var AltKey : Bool {
        get {
            return try! get_AltKey();
        }
        set(v) {
            return try! set_AltKey(value: v);
        }
    }
    /**
    
            A list of Touches for every point of contact which contributed to the event.
            For the touchstart event this must be a list of the touch points that just became active with the current event.
            For the touchmove event this must be a list of the touch points that have moved since the last event.
            For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface.
            

    */
    open var ChangedTouches : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        get {
            return try! get_ChangedTouches();
        }
        set(v) {
            return try! set_ChangedTouches(value: v);
        }
    }
    /**
    
            true if the control key was down when the event was fired. false otherwise.
            

    */
    open var CtrlKey : Bool {
        get {
            return try! get_CtrlKey();
        }
        set(v) {
            return try! set_CtrlKey(value: v);
        }
    }
    /**
    
            A count of consecutive clicks that happened in a short amount of time, incremented by one.
            

    */
    open var Detail : Swift.Int64 {
        get {
            return try! get_Detail();
        }
        set(v) {
            return try! set_Detail(value: v);
        }
    }
    /**
    
            true if the meta key was down when the event was fired. false otherwise.
            

    */
    open var MetaKey : Bool {
        get {
            return try! get_MetaKey();
        }
        set(v) {
            return try! set_MetaKey(value: v);
        }
    }
    /**
    
            true if the shift key was down when the event was fired. false otherwise.
            

    */
    open var ShiftKey : Bool {
        get {
            return try! get_ShiftKey();
        }
        set(v) {
            return try! set_ShiftKey(value: v);
        }
    }
    /**
    
            A list of  for every point of contact that is touching the surface and started on the element that is the target of the current event.
            

    */
    open var TargetTouches : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        get {
            return try! get_TargetTouches();
        }
        set(v) {
            return try! set_TargetTouches(value: v);
        }
    }
    /**
    
            A list of  for every point of contact currently touching the surface.
            

    */
    open var Touches : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchPoint> {
        get {
            return try! get_Touches();
        }
        set(v) {
            return try! set_Touches(value: v);
        }
    }
    /**
    
            Gets or sets the type of the event.
            

    */
    open var Type_ : dotnet.System.String {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // TouchEventArgs


// type: Microsoft.AspNetCore.Components.Web.TouchPoint
    /**
    
            Represents a single contact point on a touch-sensitive device.
            The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
            

    */
open class TouchPoint
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_TouchPoint_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_TouchPoint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int64 get_Identifier()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_Identifier
    open func get_Identifier() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_i64__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Identifier(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_Identifier(System.Int64)
    open func set_Identifier(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_Identifier_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ScreenX()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_ScreenX
    open func get_ScreenX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_ScreenX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ScreenX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_ScreenX(System.Double)
    open func set_ScreenX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_ScreenX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ScreenY()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_ScreenY
    open func get_ScreenY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_ScreenY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ScreenY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_ScreenY(System.Double)
    open func set_ScreenY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_ScreenY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ClientX()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_ClientX
    open func get_ClientX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_ClientX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ClientX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_ClientX(System.Double)
    open func set_ClientX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_ClientX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_ClientY()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_ClientY
    open func get_ClientY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_ClientY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ClientY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_ClientY(System.Double)
    open func set_ClientY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_ClientY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_PageX()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_PageX
    open func get_PageX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_PageX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_PageX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_PageX(System.Double)
    open func set_PageX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_PageX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_PageY()
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.get_PageY
    open func get_PageY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_TouchPoint_f64__get_PageY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_PageY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.TouchPoint.set_PageY(System.Double)
    open func set_PageY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_TouchPoint_void__set_PageY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.
            

    */
    open var ClientX : Swift.Double {
        get {
            return try! get_ClientX();
        }
        set(v) {
            return try! set_ClientX(value: v);
        }
    }
    /**
    
            The Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.
            

    */
    open var ClientY : Swift.Double {
        get {
            return try! get_ClientY();
        }
        set(v) {
            return try! set_ClientY(value: v);
        }
    }
    /**
    
            A unique identifier for this Touch object.
            A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface.
            This lets you ensure that you're tracking the same touch all the time.
            

    */
    open var Identifier : Swift.Int64 {
        get {
            return try! get_Identifier();
        }
        set(v) {
            return try! set_Identifier(value: v);
        }
    }
    /**
    
            The X coordinate of the touch point relative to the left edge of the document.
            Unlike , this value includes the horizontal scroll offset, if any.
            

    */
    open var PageX : Swift.Double {
        get {
            return try! get_PageX();
        }
        set(v) {
            return try! set_PageX(value: v);
        }
    }
    /**
    
            The Y coordinate of the touch point relative to the top of the document.
            Unlike , this value includes the vertical scroll offset, if any.
            

    */
    open var PageY : Swift.Double {
        get {
            return try! get_PageY();
        }
        set(v) {
            return try! set_PageY(value: v);
        }
    }
    /**
    
            The X coordinate of the touch point relative to the left edge of the screen.
            

    */
    open var ScreenX : Swift.Double {
        get {
            return try! get_ScreenX();
        }
        set(v) {
            return try! set_ScreenX(value: v);
        }
    }
    /**
    
            The Y coordinate of the touch point relative to the top edge of the screen.
            

    */
    open var ScreenY : Swift.Double {
        get {
            return try! get_ScreenY();
        }
        set(v) {
            return try! set_ScreenY(value: v);
        }
    }
} // TouchPoint


// type: Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions
public struct WebEventCallbackFactoryEventArgsExtensions {
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.ClipboardEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ClipboardEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ClipboardEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_ClipboardEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.DragEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.DragEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_DragEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_DragEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.DragEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.DragEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_DragEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_DragEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.ErrorEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ErrorEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_ErrorEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ErrorEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.ErrorEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ErrorEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_ErrorEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.FocusEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.FocusEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_FocusEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_FocusEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.FocusEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.FocusEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_FocusEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_FocusEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.KeyboardEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.MouseEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_MouseEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_MouseEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_MouseEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_MouseEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.PointerEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.PointerEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_PointerEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_PointerEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.PointerEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.PointerEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_PointerEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_PointerEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.ProgressEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ProgressEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_ProgressEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ProgressEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.ProgressEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_ProgressEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_ProgressEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.TouchEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.TouchEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_TouchEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_TouchEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.TouchEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.TouchEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_TouchEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_TouchEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.WheelEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Action{Microsoft.AspNetCore.Components.Web.WheelEventArgs})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_WheelEventArgs___Create_0__3__EventCallbackFactory_Object_System_Action_Microsoft_AspNetCore_Components_Web_WheelEventArgs_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
    // Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.WheelEventArgs,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(Microsoft.AspNetCore.Components.EventCallbackFactory,System.Object,System.Func{Microsoft.AspNetCore.Components.Web.WheelEventArgs,System.Threading.Tasks.Task})
    /**
    
            Creates an  for the provided  and
            .
            

    - Parameter factory: The .
    - Parameter receiver: The event receiver.
    - Parameter callback: The event callback.
    - Returns: The .

    */
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WebEventCallbackFactoryEventArgsExtensions_Microsoft_AspNetCore_Components_EventCallback_Microsoft_AspNetCore_Components_Web_WheelEventArgs___Create_0__3__EventCallbackFactory_Object_System_Func_Microsoft_AspNetCore_Components_Web_WheelEventArgs_Task_(&__thrown, factory.get_handle(), receiver.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Create(factory : aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory, receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try Create(factory: factory, receiver: receiver, callback: del_callback);
    }
} // WebEventCallbackFactoryEventArgsExtensions


// type: Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions
public struct WebRenderTreeBuilderExtensions {
    // void AddEventPreventDefaultAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, System.Int32, System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions.AddEventPreventDefaultAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.Int32,System.String,System.Boolean)
    /**
    
            Appends a frame representing an instruction to prevent the default action
            for a specified event.
            

    - Parameter builder: The .
    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter eventName: The name of the event to be affected.
    - Parameter value: True if the default action is to be prevented, otherwise false.
    */
    public static func AddEventPreventDefaultAttribute(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, sequence : Swift.Int32, eventName : dotnet.System.String, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WebRenderTreeBuilderExtensions_void__AddEventPreventDefaultAttribute_0__4__RenderTreeBuilder_i32_String_bool(&__thrown, builder.get_handle(), sequence, eventName.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddEventStopPropagationAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, System.Int32, System.String, bool)
// docid: M:Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions.AddEventStopPropagationAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.Int32,System.String,System.Boolean)
    /**
    
            Appends a frame representing an instruction to stop the specified event from
            propagating beyond the current element.
            

    - Parameter builder: The .
    - Parameter sequence: An integer that represents the position of the instruction in the source code.
    - Parameter eventName: The name of the event to be affected.
    - Parameter value: True if propagation should be stopped here, otherwise false.
    */
    public static func AddEventStopPropagationAttribute(builder : aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, sequence : Swift.Int32, eventName : dotnet.System.String, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WebRenderTreeBuilderExtensions_void__AddEventStopPropagationAttribute_0__4__RenderTreeBuilder_i32_String_bool(&__thrown, builder.get_handle(), sequence, eventName.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // WebRenderTreeBuilderExtensions


// type: Microsoft.AspNetCore.Components.Web.WheelEventArgs
    /**
    
            Supplies information about a mouse wheel event that is being raised.
            

    */
open class WheelEventArgs
    :
    aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_WheelEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_WheelEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Double get_DeltaX()
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.get_DeltaX
    open func get_DeltaX() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WheelEventArgs_f64__get_DeltaX_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DeltaX(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.set_DeltaX(System.Double)
    open func set_DeltaX(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WheelEventArgs_void__set_DeltaX_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_DeltaY()
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.get_DeltaY
    open func get_DeltaY() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WheelEventArgs_f64__get_DeltaY_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DeltaY(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.set_DeltaY(System.Double)
    open func set_DeltaY(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WheelEventArgs_void__set_DeltaY_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_DeltaZ()
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.get_DeltaZ
    open func get_DeltaZ() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WheelEventArgs_f64__get_DeltaZ_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DeltaZ(System.Double)
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.set_DeltaZ(System.Double)
    open func set_DeltaZ(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WheelEventArgs_void__set_DeltaZ_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_DeltaMode()
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.get_DeltaMode
    open func get_DeltaMode() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_WheelEventArgs_i64__get_DeltaMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DeltaMode(System.Int64)
// docid: M:Microsoft.AspNetCore.Components.Web.WheelEventArgs.set_DeltaMode(System.Int64)
    open func set_DeltaMode(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_WheelEventArgs_void__set_DeltaMode_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The unit of the delta values scroll amount.
            

    */
    open var DeltaMode : Swift.Int64 {
        get {
            return try! get_DeltaMode();
        }
        set(v) {
            return try! set_DeltaMode(value: v);
        }
    }
    /**
    
            The horizontal scroll amount.
            

    */
    open var DeltaX : Swift.Double {
        get {
            return try! get_DeltaX();
        }
        set(v) {
            return try! set_DeltaX(value: v);
        }
    }
    /**
    
            The vertical scroll amount.
            

    */
    open var DeltaY : Swift.Double {
        get {
            return try! get_DeltaY();
        }
        set(v) {
            return try! set_DeltaY(value: v);
        }
    }
    /**
    
            The scroll amount for the z-axis.
            

    */
    open var DeltaZ : Swift.Double {
        get {
            return try! get_DeltaZ();
        }
        set(v) {
            return try! set_DeltaZ(value: v);
        }
    }
} // WheelEventArgs


}
// Microsoft.AspNetCore.Components.Web.Infrastructure
extension Microsoft.AspNetCore.Components.Web.Infrastructure {
// type: Microsoft.AspNetCore.Components.Web.Infrastructure.JSComponentInterop
    /**
    
            Provides JavaScript-callable interop methods that can add, update, or remove dynamic
            root components. This is intended for framework use only and should not be called
            directly from application code.
            

    */
open class JSComponentInterop
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Infrastructure_JSComponentInterop_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore)
// docid: M:Microsoft.AspNetCore.Components.Web.Infrastructure.JSComponentInterop.#ctor(Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore)
    /**
    
            Constructs an instance of . This is only intended
            for use from framework code and should not be used directly from application code.
            

    - Parameter configuration: The 
    */
    public init(configuration : aspnetcore.Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Infrastructure_JSComponentInterop_ctor_0__1__JSComponentConfigurationStore(&__thrown, configuration.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JSComponentInterop


}

// Microsoft.AspNetCore.Components.Web.Virtualization
extension Microsoft.AspNetCore.Components.Web.Virtualization {
// type: Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate`1
    /**
    
            A function that provides items to a virtualized source.
            

    */
public final class ItemsProviderDelegate_1<TItem : SGBridgeGenericValue>
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_get_type_handle(TItem.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult<TItem>> Invoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate`1.Invoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest)
    public func Invoke(request : aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Components_Web_Virtualization_Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_TItem____Invoke_0__1__ItemsProviderRequest(TItem.get_type_handle(), &__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest, System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate`1.BeginInvoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest,System.AsyncCallback,System.Object)
    public func BeginInvoke(request : aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_IAsyncResult__BeginInvoke_0__3__ItemsProviderRequest_AsyncCallback_Object(TItem.get_type_handle(), &__thrown, self.get_handle(), request.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult<TItem>> EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate`1.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Components_Web_Virtualization_Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_TItem____EndInvoke_0__1__IAsyncResult(TItem.get_type_handle(), &__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult_1<TItem>>) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, request : NonnullHandle) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try __closure_Invoke(aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest(hndl: request));
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, request : NonnullHandle) -> NonnullHandle
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle;
            return f_interlude(thrown, request);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_create(
            TItem.get_type_handle(),
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult<TItem>> Invoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate`1.Invoke(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest)
    public func callAsFunction(request : aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_1_System_Threading_Tasks_ValueTask_Microsoft_AspNetCore_Components_Web_Virtualization_Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_TItem____Invoke_0__1__ItemsProviderRequest(TItem.get_type_handle(), &__thrown, self.get_handle(), request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
} // ItemsProviderDelegate_1


// type: Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest
// boxed value type
    /**
    
            Represents a request to an .
            

    */
public final class ItemsProviderRequest
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The  used to relay cancellation of the request.
            

    */
    public var CancellationToken : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_CancellationToken();
        }
    }
    /**
    
            The requested number of items to be provided. The actual number of provided items does not need to match
            this value.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            The start index of the data segment requested.
            

    */
    public var StartIndex : Swift.Int32 {
        get {
            return try! get_StartIndex();
        }
    }
    // .ctor(System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest.#ctor(System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    
            Constructs a new  instance.
            

    - Parameter startIndex: The start index of the data segment requested.
    - Parameter count: The requested number of items to be provided.
    - Parameter cancellationToken: 
            The  used to relay cancellation of the request.
            
    */
    public init(startIndex : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_ctor_0__3__i32_i32_CancellationToken(&__thrown, startIndex, count, cancellationToken.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Int32 get_StartIndex()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest.get_StartIndex
    public func get_StartIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_i32__get_StartIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_CancellationToken()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest.get_CancellationToken
    public func get_CancellationToken() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderRequest_CancellationToken__get_CancellationToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
} // ItemsProviderRequest


// type: Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1
// boxed value type
    /**
    
            Represents the result of a .
            

    */
public final class ItemsProviderResult_1<TItem : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_1_get_type_handle(TItem.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The items to provide.
            

    */
    public var Items : dotnet.System.Collections.Generic.IEnumerable_1<TItem> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            The total item count in the source generating the items provided.
            

    */
    public var TotalItemCount : Swift.Int32 {
        get {
            return try! get_TotalItemCount();
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<TItem>, System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)
    /**
    
            Instantiates a new  instance.
            

    - Parameter items: The items to provide.
    - Parameter totalItemCount: The total item count in the source generating the items provided.
    */
    public init(items : dotnet.System.Collections.Generic.IEnumerable_1<TItem>, totalItemCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_1_ctor_0__2__System_Collections_Generic_IEnumerable_TItem__i32(TItem.get_type_handle(), &__thrown, items.get_handle(), totalItemCount);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_1_implicit_ctor(TItem.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<TItem> get_Items()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.get_Items
    public func get_Items() throws -> dotnet.System.Collections.Generic.IEnumerable_1<TItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_1_System_Collections_Generic_IEnumerable_TItem___get_Items_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_TotalItemCount()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.get_TotalItemCount
    public func get_TotalItemCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderResult_1_i32__get_TotalItemCount_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // ItemsProviderResult_1


// type: Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext
// boxed value type
    /**
    
            Contains context for a placeholder in a virtualized list.
            

    */
public final class PlaceholderContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The item index of the placeholder.
            

    */
    public var Index : Swift.Int32 {
        get {
            return try! get_Index();
        }
    }
    /**
    
            The size of the placeholder in pixels.
            
            For virtualized components with vertical scrolling, this would be the height of the placeholder in pixels.
            For virtualized components with horizontal scrolling, this would be the width of the placeholder in pixels.
            
            

    */
    public var Size : Swift.Float {
        get {
            return try! get_Size();
        }
    }
    // .ctor(System.Int32, System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext.#ctor(System.Int32,System.Single)
    /**
    
            Constructs a new  instance.
            

    - Parameter index: The item index of the placeholder.
    - Parameter size: The size of the placeholder in pixels.
    */
    public init(index : Swift.Int32, size : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_ctor_0__2__i32_f32(&__thrown, index, size);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Int32 get_Index()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext.get_Index
    public func get_Index() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_i32__get_Index_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Single get_Size()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext.get_Size
    public func get_Size() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_f32__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // PlaceholderContext


// type: Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1
    /**
    
            Provides functionality for rendering a virtualized list of items.
            

    */
public final class Virtualize_1<TItem : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IAsyncDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_get_type_handle(TItem.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_ctor_0__0(TItem.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task RefreshDataAsync()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.RefreshDataAsync
    /**
    
            Instructs the component to re-request data from its .
            This is useful if external data may have changed. There is no need to call this
            when using .
            

    - Returns: A  representing the completion of the operation.

    */
    public func RefreshDataAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_Task__RefreshDataAsync_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.DisposeAsync
    /**
    */
    public func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_ValueTask__DisposeAsync_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<TItem> get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_ChildContent
    public func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_Microsoft_AspNetCore_Components_RenderFragment_TItem___get_ChildContent_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment<TItem>)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment{`0})
    public func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_ChildContent_0__1__Microsoft_AspNetCore_Components_RenderFragment_TItem_(TItem.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ChildContent(value : @escaping (TItem) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<TItem> get_ItemContent()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_ItemContent
    public func get_ItemContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_Microsoft_AspNetCore_Components_RenderFragment_TItem___get_ItemContent_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemContent(Microsoft.AspNetCore.Components.RenderFragment<TItem>)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_ItemContent(Microsoft.AspNetCore.Components.RenderFragment{`0})
    public func set_ItemContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_ItemContent_0__1__Microsoft_AspNetCore_Components_RenderFragment_TItem_(TItem.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ItemContent(value : @escaping (TItem) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>(value);
        return try set_ItemContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext> get_Placeholder()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_Placeholder
    public func get_Placeholder() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext___get_Placeholder_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Placeholder(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_Placeholder(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext})
    public func set_Placeholder(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_Placeholder_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Web_Virtualization_PlaceholderContext_(TItem.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_Placeholder(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>(value);
        return try set_Placeholder(value: del_value);
    }
    // [IsSpecialName] System.Single get_ItemSize()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_ItemSize
    public func get_ItemSize() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_f32__get_ItemSize_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ItemSize(System.Single)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_ItemSize(System.Single)
    public func set_ItemSize(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_ItemSize_0__1__f32(TItem.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem> get_ItemsProvider()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_ItemsProvider
    public func get_ItemsProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_TItem___get_ItemsProvider_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemsProvider(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_ItemsProvider(Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate{`0})
    public func set_ItemsProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate_1<TItem>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_ItemsProvider_0__1__Microsoft_AspNetCore_Components_Web_Virtualization_ItemsProviderDelegate_TItem_(TItem.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ItemsProvider(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderRequest) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult_1<TItem>>) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate_1<TItem>(value);
        return try set_ItemsProvider(value: del_value);
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<TItem> get_Items()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_Items
    public func get_Items() throws -> Optional<dotnet.System.Collections.Generic.ICollection_1<TItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_System_Collections_Generic_ICollection_TItem___get_Items_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.ICollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.ICollection<TItem>)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_Items(System.Collections.Generic.ICollection{`0})
    public func set_Items(value : Optional<dotnet.System.Collections.Generic.ICollection_1<TItem>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_Items_0__1__System_Collections_Generic_ICollection_TItem_(TItem.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_OverscanCount()
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.get_OverscanCount
    public func get_OverscanCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_i32__get_OverscanCount_0__0(TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_OverscanCount(System.Int32)
// docid: M:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.set_OverscanCount(System.Int32)
    public func set_OverscanCount(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Web_Virtualization_Virtualize_1_void__set_OverscanCount_0__1__i32(TItem.get_type_handle(), &__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the item template for the list.
            

    */
    public var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            Gets or sets the item template for the list.
            

    */
    public var ItemContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<TItem>> {
        get {
            return try! get_ItemContent();
        }
        set(v) {
            return try! set_ItemContent(value: v!);
        }
    }
    /**
    
            Gets the size of each item in pixels. Defaults to 50px.
            

    */
    public var ItemSize : Swift.Float {
        get {
            return try! get_ItemSize();
        }
        set(v) {
            return try! set_ItemSize(value: v);
        }
    }
    /**
    
            Gets or sets the fixed item source.
            

    */
    public var Items : Optional<dotnet.System.Collections.Generic.ICollection_1<TItem>> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v!);
        }
    }
    /**
    
            Gets or sets the function providing items to the list.
            

    */
    public var ItemsProvider : Optional<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate_1<TItem>> {
        get {
            return try! get_ItemsProvider();
        }
        set(v) {
            return try! set_ItemsProvider(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines how many additional items will be rendered
            before and after the visible region. This help to reduce the frequency of rendering
            during scrolling. However, higher values mean that more elements will be present
            in the page.
            

    */
    public var OverscanCount : Swift.Int32 {
        get {
            return try! get_OverscanCount();
        }
        set(v) {
            return try! set_OverscanCount(value: v);
        }
    }
    /**
    
            Gets or sets the template for items that have not yet been loaded in memory.
            

    */
    public var Placeholder : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>> {
        get {
            return try! get_Placeholder();
        }
        set(v) {
            return try! set_Placeholder(value: v!);
        }
    }
} // Virtualize_1


}





public protocol Microsoft_AspNetCore_Components_Forms_IBrowserFile
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_Web_IErrorBoundaryLogger
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask FocusAsync(Microsoft.AspNetCore.Components.ElementReference)
extension aspnetcore.Microsoft.AspNetCore.Components.ElementReference {
    public func FocusAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceExtensions.FocusAsync(elementReference: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask FocusAsync(Microsoft.AspNetCore.Components.ElementReference, bool)
extension aspnetcore.Microsoft.AspNetCore.Components.ElementReference {
    public func FocusAsync(preventScroll : Bool) throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.AspNetCore.Components.ElementReferenceExtensions.FocusAsync(elementReference: self, preventScroll: preventScroll);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Components.Forms.IBrowserFile> RequestImageFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile, System.String, System.Int32, System.Int32)
extension Microsoft_AspNetCore_Components_Forms_IBrowserFile {
    public func RequestImageFileAsync(format : dotnet.System.String, maxWidth : Swift.Int32, maxHeight : Swift.Int32) throws -> dotnet.System.Threading.Tasks.ValueTask_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Forms.BrowserFileExtensions.RequestImageFileAsync(browserFile: aspnetcore.Microsoft.AspNetCore.Components.Forms.IBrowserFile(hndl: __copy_handle(self.get_handle())), format: format, maxWidth: maxWidth, maxHeight: maxHeight);
    }
}

// EXTENSION METHOD System.String FieldCssClass<TField>(Microsoft.AspNetCore.Components.Forms.EditContext, System.Linq.Expressions.Expression<System.Func<TField>>)
extension aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
    public func FieldCssClass<UTField : SGBridgeGenericValue>(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<UTField>>) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldCssClass(editContext: self, accessor: accessor);
    }
}

// EXTENSION METHOD System.String FieldCssClass(Microsoft.AspNetCore.Components.Forms.EditContext, ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
extension aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
    public func FieldCssClass(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> dotnet.System.String {
        return try aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.FieldCssClass(editContext: self, fieldIdentifier: &fieldIdentifier);
    }
}

// EXTENSION METHOD void SetFieldCssClassProvider(Microsoft.AspNetCore.Components.Forms.EditContext, Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider)
extension aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
    public func SetFieldCssClassProvider(fieldCssClassProvider : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldCssClassProvider) throws {
        try aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions.SetFieldCssClassProvider(editContext: self, fieldCssClassProvider: fieldCssClassProvider);
    }
}

// EXTENSION METHOD void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String)
// TODO COPE extension method (unused generic param) void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String)

// EXTENSION METHOD void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String, System.String)
// TODO COPE extension method (unused generic param) void RegisterForJavaScript<TComponent>(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.String, System.String)

// EXTENSION METHOD void RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.Type, System.String)
extension Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration {
    public func RegisterForJavaScript(componentType : dotnet.System.Type_, identifier : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Components.Web.JSComponentConfigurationExtensions.RegisterForJavaScript(configuration: aspnetcore.Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration(hndl: __copy_handle(self.get_handle())), componentType: componentType, identifier: identifier);
    }
}

// EXTENSION METHOD void RegisterForJavaScript(Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration, System.Type, System.String, System.String)
extension Microsoft_AspNetCore_Components_Web_IJSComponentConfiguration {
    public func RegisterForJavaScript(componentType : dotnet.System.Type_, identifier : dotnet.System.String, javaScriptInitializer : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Components.Web.JSComponentConfigurationExtensions.RegisterForJavaScript(configuration: aspnetcore.Microsoft.AspNetCore.Components.Web.IJSComponentConfiguration(hndl: __copy_handle(self.get_handle())), componentType: componentType, identifier: identifier, javaScriptInitializer: javaScriptInitializer);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ClipboardEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.DragEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.DragEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.DragEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ErrorEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ErrorEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.FocusEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.FocusEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.FocusEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.MouseEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.PointerEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.PointerEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.PointerEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.ProgressEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.ProgressEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.TouchEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.TouchEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.TouchEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Action<Microsoft.AspNetCore.Components.Web.WheelEventArgs>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        let del_callback = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs> Create(Microsoft.AspNetCore.Components.EventCallbackFactory, System.Object, System.Func<Microsoft.AspNetCore.Components.Web.WheelEventArgs,System.Threading.Tasks.Task>)
extension aspnetcore.Microsoft.AspNetCore.Components.EventCallbackFactory {
    public func Create(receiver : dotnet.System.Object, callback : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: callback);
    }
    // delegate closure overload
    public func Create(receiver : dotnet.System.Object, callback : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Components.EventCallback_1<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs> {
        let del_callback = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Components.Web.WheelEventArgs,dotnet.System.Threading.Tasks.Task>(callback);
        return try aspnetcore.Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions.Create(factory: self, receiver: receiver, callback: del_callback);
    }
}

// EXTENSION METHOD void AddEventPreventDefaultAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, System.Int32, System.String, bool)
extension aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder {
    public func AddEventPreventDefaultAttribute(sequence : Swift.Int32, eventName : dotnet.System.String, value : Bool) throws {
        try aspnetcore.Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions.AddEventPreventDefaultAttribute(builder: self, sequence: sequence, eventName: eventName, value: value);
    }
}

// EXTENSION METHOD void AddEventStopPropagationAttribute(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder, System.Int32, System.String, bool)
extension aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder {
    public func AddEventStopPropagationAttribute(sequence : Swift.Int32, eventName : dotnet.System.String, value : Bool) throws {
        try aspnetcore.Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions.AddEventStopPropagationAttribute(builder: self, sequence: sequence, eventName: eventName, value: value);
    }
}

