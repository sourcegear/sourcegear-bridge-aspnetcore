// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authentication
extension Microsoft.AspNetCore.Authentication {
// type: Microsoft.AspNetCore.Authentication.AuthenticationFeature
    /**
    
            Used to capture path info so redirects can be computed properly within an app.Map().
            

    */
open class AuthenticationFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IAuthenticationFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_OriginalPathBase()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationFeature.get_OriginalPathBase
    open /* method final */ func get_OriginalPathBase() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationFeature_PathString__get_OriginalPathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPathBase(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationFeature.set_OriginalPathBase(Microsoft.AspNetCore.Http.PathString)
    open /* method final */ func set_OriginalPathBase(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationFeature_void__set_OriginalPathBase_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_OriginalPath()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationFeature.get_OriginalPath
    open /* method final */ func get_OriginalPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationFeature_PathString__get_OriginalPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationFeature.set_OriginalPath(Microsoft.AspNetCore.Http.PathString)
    open /* method final */ func set_OriginalPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationFeature_void__set_OriginalPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The original path.
            

    */
    public var OriginalPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_OriginalPath();
        }
        set(v) {
            return try! set_OriginalPath(value: v);
        }
    }
    /**
    
            The original path base.
            

    */
    public var OriginalPathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_OriginalPathBase();
        }
        set(v) {
            return try! set_OriginalPathBase(value: v);
        }
    }
} // AuthenticationFeature


// type: Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider
    /**
    
            Implementation of .
            

    */
open class AuthenticationHandlerProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IAuthenticationHandlerProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationHandlerProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)
    /**
    
            Constructor.
            

    - Parameter schemes: The .
    */
    public init(schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationHandlerProvider_ctor_0__1__IAuthenticationSchemeProvider(&__thrown, schemes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.IAuthenticationHandler> GetHandlerAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.GetHandlerAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Returns the handler instance that will be used.
            

    - Parameter context: The context.
    - Parameter authenticationScheme: The name of the authentication scheme being handled.
    - Returns: The handler instance.

    */
    open /* method final */ func GetHandlerAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, authenticationScheme : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandler {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandlerProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_IAuthenticationHandler___GetHandlerAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider get_Schemes()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.get_Schemes
    open func get_Schemes() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationHandlerProvider_IAuthenticationSchemeProvider__get_Schemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider(hndl : __return);
        }
    }
    /**
    
            The .
            

    */
    open var Schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        get {
            return try! get_Schemes();
        }
    }
} // AuthenticationHandlerProvider


// type: Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider
    /**
    
            Implements .
            

    */
open class AuthenticationSchemeProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IAuthenticationSchemeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authentication.AuthenticationOptions})
    /**
    
            Creates an instance of 
            using the specified ,
            

    - Parameter options: The  options.
    */
    public init(options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Authentication_AuthenticationOptions_(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultAuthenticateSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetDefaultAuthenticateSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultAuthenticateSchemeAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultAuthenticateSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultChallengeSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetDefaultChallengeSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultChallengeSchemeAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultChallengeSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultForbidSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetDefaultForbidSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to  .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultForbidSchemeAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultForbidSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultSignInSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetDefaultSignInSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise, this will fallback to .
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultSignInSchemeAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultSignInSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetDefaultSignOutSchemeAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetDefaultSignOutSchemeAsync
    /**
    
            Returns the scheme that will be used by default for .
            This is typically specified via .
            Otherwise this will fallback to  if that supports sign out.
            

    - Returns: The scheme that will be used by default for .

    */
    open func GetDefaultSignOutSchemeAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetDefaultSignOutSchemeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationScheme> GetSchemeAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetSchemeAsync(System.String)
    /**
    
            Returns the  matching the name, or null.
            

    - Parameter name: The name of the authenticationScheme.
    - Returns: The scheme or null if not found.

    */
    open func GetSchemeAsync(name : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationScheme___GetSchemeAsync_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationScheme>> GetRequestHandlerSchemesAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetRequestHandlerSchemesAsync
    /**
    
            Returns the schemes in priority order for request handling.
            

    - Returns: The schemes in priority order for request handling

    */
    open func GetRequestHandlerSchemesAsync() async throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationScheme____GetRequestHandlerSchemesAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // bool TryAddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.TryAddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
    /**
    
            Registers a scheme for use by .
            

    - Parameter scheme: The scheme.
    - Returns: true if the scheme was added successfully.

    */
    open func TryAddScheme(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_bool__TryAddScheme_0__1__AuthenticationScheme(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void AddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.AddScheme(Microsoft.AspNetCore.Authentication.AuthenticationScheme)
    /**
    
            Registers a scheme for use by .
            

    - Parameter scheme: The scheme.
    */
    open func AddScheme(scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_void__AddScheme_0__1__AuthenticationScheme(&__thrown, self.get_handle(), scheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveScheme(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.RemoveScheme(System.String)
    /**
    
            Removes a scheme, preventing it from being used by .
            

    - Parameter name: The name of the authenticationScheme being removed.
    */
    open func RemoveScheme(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_void__RemoveScheme_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authentication.AuthenticationScheme>> GetAllSchemesAsync()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationSchemeProvider.GetAllSchemesAsync
    /**
    */
    open func GetAllSchemesAsync() async throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationSchemeProvider_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Authentication_AuthenticationScheme____GetAllSchemesAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
} // AuthenticationSchemeProvider


// type: Microsoft.AspNetCore.Authentication.AuthenticationService
    /**
    
            Implements .
            

    */
open class AuthenticationService
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IAuthenticationService
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_AuthenticationService_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider, Microsoft.AspNetCore.Authentication.IClaimsTransformation, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider,Microsoft.AspNetCore.Authentication.IClaimsTransformation,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authentication.AuthenticationOptions})
    /**
    
            Constructor.
            

    - Parameter schemes: The .
    - Parameter handlers: The .
    - Parameter transform: The .
    - Parameter options: The .
    */
    public init(schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider, handlers : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider, transform : aspnetcore.Microsoft.AspNetCore.Authentication.IClaimsTransformation, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_AuthenticationService_ctor_0__4__IAuthenticationSchemeProvider_IAuthenticationHandlerProvider_IClaimsTransformation_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Authentication_AuthenticationOptions_(&__thrown, schemes.get_handle(), handlers.get_handle(), transform.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Authenticate for the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Returns: The result.

    */
    open func AuthenticateAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Challenge the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func ChallengeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_Task__ChallengeAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task ForbidAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Forbid the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func ForbidAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_Task__ForbidAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task SignInAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign a principal in for the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter principal: The  to sign in.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func SignInAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_Task__SignInAsync_0__4__HttpContext_String_ClaimsPrincipal_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, principal.get_handle(), properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task SignOutAsync(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Authentication.AuthenticationProperties)
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)
    /**
    
            Sign out the specified authentication scheme.
            

    - Parameter context: The .
    - Parameter scheme: The name of the authentication scheme.
    - Parameter properties: The .
    - Returns: A task.

    */
    open func SignOutAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : Optional<dotnet.System.String>, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_Task__SignOutAsync_0__3__HttpContext_String_AuthenticationProperties(&__thrown, self.get_handle(), context.get_handle(), scheme?.get_handle() ?? nil, properties?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider get_Schemes()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.get_Schemes
    open func get_Schemes() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_IAuthenticationSchemeProvider__get_Schemes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider get_Handlers()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.get_Handlers
    open func get_Handlers() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_IAuthenticationHandlerProvider__get_Handlers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.IClaimsTransformation get_Transform()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.get_Transform
    open func get_Transform() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.IClaimsTransformation {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_IClaimsTransformation__get_Transform_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.IClaimsTransformation(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.AuthenticationOptions get_Options()
// docid: M:Microsoft.AspNetCore.Authentication.AuthenticationService.get_Options
    open func get_Options() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_AuthenticationService_AuthenticationOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions(hndl : __return);
        }
    }
    /**
    
            Used to resolve IAuthenticationHandler instances.
            

    */
    open var Handlers : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationHandlerProvider {
        get {
            return try! get_Handlers();
        }
    }
    /**
    
            The .
            

    */
    open var Options : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions {
        get {
            return try! get_Options();
        }
    }
    /**
    
            Used to lookup AuthenticationSchemes.
            

    */
    open var Schemes : aspnetcore.Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider {
        get {
            return try! get_Schemes();
        }
    }
    /**
    
            Used for claims transformation.
            

    */
    open var Transform : aspnetcore.Microsoft.AspNetCore.Authentication.IClaimsTransformation {
        get {
            return try! get_Transform();
        }
    }
} // AuthenticationService


// type: Microsoft.AspNetCore.Authentication.NoopClaimsTransformation
    /**
    
            Default claims transformation is a no-op.
            

    */
open class NoopClaimsTransformation
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_IClaimsTransformation
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_NoopClaimsTransformation_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.NoopClaimsTransformation.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_NoopClaimsTransformation_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal> TransformAsync(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.NoopClaimsTransformation.TransformAsync(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Returns the principal unchanged.
            

    - Parameter principal: The user.
    - Returns: The principal unchanged.

    */
    open func TransformAsync(principal : dotnet.System.Security.Claims.ClaimsPrincipal) async throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_NoopClaimsTransformation_System_Threading_Tasks_Task_System_Security_Claims_ClaimsPrincipal___TransformAsync_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
} // NoopClaimsTransformation


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions
public struct AuthenticationCoreServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Add core authentication services needed for .
            

    - Parameter services: The .
    - Returns: The service collection.

    */
    public static func AddAuthenticationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthenticationCoreServiceCollectionExtensions_IServiceCollection__AddAuthenticationCore_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})
    /**
    
            Add core authentication services needed for .
            

    - Parameter services: The .
    - Parameter configureOptions: Used to configure the .
    - Returns: The service collection.

    */
    public static func AddAuthenticationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AuthenticationCoreServiceCollectionExtensions_IServiceCollection__AddAuthenticationCore_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Authentication_AuthenticationOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAuthenticationCore(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>(configureOptions);
        return try AddAuthenticationCore(services: services, configureOptions: del_configureOptions);
    }
} // AuthenticationCoreServiceCollectionExtensions


}



// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthenticationCore() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthenticationCore(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddAuthenticationCore(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

