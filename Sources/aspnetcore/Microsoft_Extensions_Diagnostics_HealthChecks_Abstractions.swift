// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Diagnostics
// Microsoft.Extensions.Diagnostics.HealthChecks
extension Microsoft.Extensions.Diagnostics.HealthChecks {
// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
    /**
    
            Health check context. Provides health check registrations to .
            

    */
public final class HealthCheckContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration get_Registration()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext.get_Registration
    public func get_Registration() throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_HealthCheckRegistration__get_Registration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Registration(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext.set_Registration(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration)
    public func set_Registration(value : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_void__set_Registration_0__1__HealthCheckRegistration(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  of the currently executing .
            

    */
    public var Registration : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration {
        get {
            return try! get_Registration();
        }
        set(v) {
            return try! set_Registration(value: v);
        }
    }
} // HealthCheckContext


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration
    /**
    
            Represent the registration information associated with an  implementation.
            

    */
public final class HealthCheckRegistration
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.#ctor(System.String,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Creates a new  for an existing  instance.
            

    - Parameter name: The health check name.
    - Parameter instance: The  instance.
    - Parameter failureStatus: 
            The  that should be reported upon failure of the health check. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used for filtering health checks.
    */
    public init(name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_ctor_0__4__String_IHealthCheck_System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string_(&__thrown, name.get_handle(), instance.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, (tags?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.#ctor(System.String,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Creates a new  for an existing  instance.
            

    - Parameter name: The health check name.
    - Parameter instance: The  instance.
    - Parameter failureStatus: 
            The  that should be reported upon failure of the health check. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used for filtering health checks.
    - Parameter timeout: An optional  representing the timeout of the check.
    */
    public init(name : dotnet.System.String, instance : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_ctor_0__5__String_IHealthCheck_System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, name.get_handle(), instance.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Func<System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.#ctor(System.String,System.Func{System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck},System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Creates a new  for an existing  instance.
            

    - Parameter name: The health check name.
    - Parameter factory: A delegate used to create the  instance.
    - Parameter failureStatus: 
            The  that should be reported when the health check reports a failure. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used for filtering health checks.
    */
    public init(name : dotnet.System.String, factory : dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_ctor_0__4__String_System_Func_System_IServiceProvider_Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck__System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string_(&__thrown, name.get_handle(), factory.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, (tags?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Func<System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>, System.Nullable<Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.#ctor(System.String,System.Func{System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck},System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})
    /**
    
            Creates a new  for an existing  instance.
            

    - Parameter name: The health check name.
    - Parameter factory: A delegate used to create the  instance.
    - Parameter failureStatus: 
            The  that should be reported when the health check reports a failure. If the provided value
            is null, then  will be reported.
            
    - Parameter tags: A list of tags that can be used for filtering health checks.
    - Parameter timeout: An optional  representing the timeout of the check.
    */
    public init(name : dotnet.System.String, factory : dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>, failureStatus : Optional<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus>, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, timeout : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_ctor_0__5__String_System_Func_System_IServiceProvider_Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck__System_Nullable_Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus__System_Collections_Generic_IEnumerable_string__System_Nullable_System_TimeSpan_(&__thrown, name.get_handle(), factory.get_handle(), (failureStatus != nil) ? System_Int32_box(failureStatus!.get_value()) : nil, (tags?.get_handle()), (timeout != nil) ? timeout!.get_handle() : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck> get_Factory()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.get_Factory
    public func get_Factory() throws -> dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_System_Func_System_IServiceProvider_Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck___get_Factory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Factory(System.Func<System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.set_Factory(System.Func{System.IServiceProvider,Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck})
    public func set_Factory(value : dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_void__set_Factory_0__1__System_Func_System_IServiceProvider_Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_Factory(value : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck>(value);
        return try set_Factory(value: del_value);
    }
    // [IsSpecialName] Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus get_FailureStatus()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.get_FailureStatus
    public func get_FailureStatus() throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_HealthStatus__get_FailureStatus_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: __return);
        }
    }
    // [IsSpecialName] void set_FailureStatus(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.set_FailureStatus(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus)
    public func set_FailureStatus(value : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_void__set_FailureStatus_0__1__HealthStatus(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_Timeout()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.get_Timeout
    public func get_Timeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_TimeSpan__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_Timeout(System.TimeSpan)
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.set_Name(System.String)
    public func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ISet<System.String> get_Tags()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckRegistration.get_Tags
    public func get_Tags() throws -> dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckRegistration_System_Collections_Generic_ISet_string___get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ISet_1(hndl : __return);
        }
    }
    /**
    
            Gets or sets a delegate used to create the  instance.
            

    */
    public var Factory : dotnet.System.Func_2<dotnet.System.IServiceProvider,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck> {
        get {
            return try! get_Factory();
        }
        set(v) {
            return try! set_Factory(value: v);
        }
    }
    /**
    
            Gets or sets the  that should be reported upon failure of the health check.
            

    */
    public var FailureStatus : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
            return try! get_FailureStatus();
        }
        set(v) {
            return try! set_FailureStatus(value: v);
        }
    }
    /**
    
            Gets or sets the health check name.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets a list of tags that can be used for filtering health checks.
            

    */
    public var Tags : dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        get {
            return try! get_Tags();
        }
    }
    /**
    
            Gets or sets the timeout used for the test.
            

    */
    public var Timeout : dotnet.System.TimeSpan {
        get {
            return try! get_Timeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_Timeout(System.TimeSpan)
    }
} // HealthCheckRegistration


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult
// boxed value type
    /**
    
            Represents the result of a health check.
            

    */
public final class HealthCheckResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets additional key-value pairs describing the health of the component.
            

    */
    public var Data : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Data();
        }
    }
    /**
    
            Gets a human-readable description of the status of the component that was checked.
            

    */
    public var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    /**
    
            Gets an  representing the exception that was thrown when checking for status (if any).
            

    */
    public var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
    }
    /**
    
            Gets a value indicating the status of the component that was checked.
            

    */
    public var Status : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
            return try! get_Status();
        }
    }
    // .ctor(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus, System.String, System.Exception, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.#ctor(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus,System.String,System.Exception,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Creates a new  with the specified values for ,
            , , and .
            

    - Parameter status: A value indicating the status of the component that was checked.
    - Parameter description: A human-readable description of the status of the component that was checked.
    - Parameter exception: An  representing the exception that was thrown when checking for status (if any).
    - Parameter data: Additional key-value pairs describing the health of the component.
    */
    public init(status : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus, description : Optional<dotnet.System.String>, exception : Optional<dotnet.System.Exception>, data : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_ctor_0__4__HealthStatus_String_Exception_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, status.get_value(), description?.get_handle() ?? nil, exception?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult Healthy(System.String, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Healthy(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Creates a  representing a healthy component.
            

    - Parameter description: A human-readable description of the status of the component that was checked. Optional.
    - Parameter data: Additional key-value pairs describing the health of the component. Optional.
    - Returns: A  representing a healthy component.

    */
    public class func Healthy(description : Optional<dotnet.System.String> = nil, data : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> = nil) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_HealthCheckResult__Healthy_0__2__String_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, description?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult(hndl : __return);
        }
    }
    // Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult Degraded(System.String, System.Exception, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Degraded(System.String,System.Exception,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Creates a  representing a degraded component.
            

    - Parameter description: A human-readable description of the status of the component that was checked. Optional.
    - Parameter exception: An  representing the exception that was thrown when checking for status. Optional.
    - Parameter data: Additional key-value pairs describing the health of the component. Optional.
    - Returns: A  representing a degraged component.

    */
    public class func Degraded(description : Optional<dotnet.System.String> = nil, exception : Optional<dotnet.System.Exception> = nil, data : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> = nil) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_HealthCheckResult__Degraded_0__3__String_Exception_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, description?.get_handle() ?? nil, exception?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult(hndl : __return);
        }
    }
    // Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult Unhealthy(System.String, System.Exception, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Unhealthy(System.String,System.Exception,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Creates a  representing an unhealthy component.
            

    - Parameter description: A human-readable description of the status of the component that was checked. Optional.
    - Parameter exception: An  representing the exception that was thrown when checking for status. Optional.
    - Parameter data: Additional key-value pairs describing the health of the component. Optional.
    - Returns: A  representing an unhealthy component.

    */
    public class func Unhealthy(description : Optional<dotnet.System.String> = nil, exception : Optional<dotnet.System.Exception> = nil, data : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>> = nil) throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_HealthCheckResult__Unhealthy_0__3__String_Exception_System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, description?.get_handle() ?? nil, exception?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Data()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.get_Data
    public func get_Data() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.get_Description
    public func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.get_Exception
    public func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus get_Status()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.get_Status
    public func get_Status() throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult_HealthStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: __return);
        }
    }
} // HealthCheckResult


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport
    /**
    
            Represents the result of executing a group of  instances.
            

    */
public final class HealthReport
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE ctor (span) .ctor(System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry>, System.TimeSpan)
// TODO COPE ctor (span) .ctor(System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry>, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus, System.TimeSpan)
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry> get_Entries()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport.get_Entries
    public func get_Entries() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport_System_Collections_Generic_IReadOnlyDictionary_string_Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry___get_Entries_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus get_Status()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport.get_Status
    public func get_Status() throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport_HealthStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_TotalDuration()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport.get_TotalDuration
    public func get_TotalDuration() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReport_TimeSpan__get_TotalDuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    /**
    
            A  containing the results from each health check.
            

    */
    public var Entries : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry> {
        get {
            return try! get_Entries();
        }
    }
    /**
    
            Gets a  representing the aggregate status of all the health checks. The value of 
            will be the most severe status reported by a health check. If no checks were executed, the value is always .
            

    */
    public var Status : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
            return try! get_Status();
        }
    }
    /**
    
            Gets the time the health check service took to execute.
            

    */
    public var TotalDuration : dotnet.System.TimeSpan {
        get {
            return try! get_TotalDuration();
        }
    }
} // HealthReport


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry
// boxed value type
    /**
    
            Represents an entry in a . Corresponds to the result of a single .
            

    */
public final class HealthReportEntry
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets additional key-value pairs describing the health of the component.
            

    */
    public var Data : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Data();
        }
    }
    /**
    
            Gets a human-readable description of the status of the component that was checked.
            

    */
    public var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    /**
    
            Gets the health check execution duration.
            

    */
    public var Duration : dotnet.System.TimeSpan {
        get {
            return try! get_Duration();
        }
    }
    /**
    
            Gets an  representing the exception that was thrown when checking for status (if any).
            

    */
    public var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
    }
    /**
    
            Gets the health status of the component that was checked.
            

    */
    public var Status : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
            return try! get_Status();
        }
    }
    /**
    
            Gets the tags associated with the health check.
            

    */
    public var Tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_Tags();
        }
    }
// TODO COPE ctor (span) .ctor(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus, System.String, System.TimeSpan, System.Exception, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// TODO COPE ctor (span) .ctor(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus, System.String, System.TimeSpan, System.Exception, System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>, System.Collections.Generic.IEnumerable<System.String>)
    public override init() {
        let h = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Data()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Data
    public func get_Data() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Description
    public func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.TimeSpan get_Duration()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Duration
    public func get_Duration() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_TimeSpan__get_Duration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Exception
    public func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus get_Status()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Status
    public func get_Status() throws -> aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_HealthStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Tags()
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportEntry.get_Tags
    public func get_Tags() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_HealthReportEntry_System_Collections_Generic_IEnumerable_string___get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // HealthReportEntry


// type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus
    /**
    
            Represents the reported status of a health check result.
            

    */
public struct HealthStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus Unhealthy
    /**
    
            Indicates that the health check determined that the component was unhealthy, or an unhandled
            exception was thrown while executing the health check.
            

    */
    public static var Unhealthy : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus_get_Unhealthy());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus Degraded
    /**
    
            Indicates that the health check determined that the component was in a degraded state.
            

    */
    public static var Degraded : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus_get_Degraded());
            return __return;
        }
    }
    // static field: Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus Healthy
    /**
    
            Indicates that the health check determined that the component was healthy.
            

    */
    public static var Healthy : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus(val: Microsoft_Extensions_Diagnostics_HealthChecks_HealthStatus_get_Healthy());
            return __return;
        }
    }
} // HealthStatus


// type: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    /**
    
            Represents a health check, which can be used to check the status of a component in the application, such as a backend service, database or some internal
            state.
            

    */
open class IHealthCheck
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
    /**
    
            Runs the health check, returning the status of the component being checked.
            

    - Parameter context: A context object associated with the current execution.
    - Parameter cancellationToken: A  that can be used to cancel the health check.
    - Returns: A  that completes when the health check has finished, yielding the status of the component being checked.

    */
    open func CheckHealthAsync(context : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck_System_Threading_Tasks_Task_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckResult___CheckHealthAsync_0__2__HealthCheckContext_CancellationToken(&__thrown, self.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IHealthCheck


// type: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheckPublisher
    /**
    
            Represents a publisher of  information.
            

    */
open class IHealthCheckPublisher
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheckPublisher
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheckPublisher_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task PublishAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport, System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheckPublisher.PublishAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport,System.Threading.CancellationToken)
    /**
    
            Publishes the provided .
            

    - Parameter report: The . The result of executing a set of health checks.
    - Parameter cancellationToken: The .
    - Returns: A  which will complete when publishing is complete.

    */
    open func PublishAsync(report : aspnetcore.Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheckPublisher_Task__PublishAsync_0__2__HealthReport_CancellationToken(&__thrown, self.get_handle(), report.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IHealthCheckPublisher


}




public protocol Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheck
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Diagnostics_HealthChecks_IHealthCheckPublisher
    :
    SGBridgeGetHandle
{
}

