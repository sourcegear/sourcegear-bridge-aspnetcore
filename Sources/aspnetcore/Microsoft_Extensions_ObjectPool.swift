// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.ObjectPool
extension Microsoft.Extensions.ObjectPool {
// type: Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider
    /**
    
            The default .
            

    */
open class DefaultObjectPoolProvider
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_DefaultObjectPoolProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_DefaultObjectPoolProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.ObjectPool.ObjectPool<T> Create<T>(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})
    /**
    */
    open override func Create<UT : SGBridgeGenericValue>(policy : aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<UT>) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_DefaultObjectPoolProvider_Microsoft_Extensions_ObjectPool_ObjectPool_UT___Create_1__1__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumRetained()
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.get_MaximumRetained
    open func get_MaximumRetained() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_DefaultObjectPoolProvider_i32__get_MaximumRetained_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumRetained(System.Int32)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.set_MaximumRetained(System.Int32)
    open func set_MaximumRetained(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_DefaultObjectPoolProvider_void__set_MaximumRetained_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The maximum number of objects to retain in the pool.
            

    */
    open var MaximumRetained : Swift.Int32 {
        get {
            return try! get_MaximumRetained();
        }
        set(v) {
            return try! set_MaximumRetained(value: v);
        }
    }
} // DefaultObjectPoolProvider


// type: Microsoft.Extensions.ObjectPool.DefaultObjectPool`1
    /**
    
            Default implementation of .
            

    */
open class DefaultObjectPool_1<T : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<T>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_DefaultObjectPool_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{`0})
    /**
    
            Creates an instance of .
            

    - Parameter policy: The pooling policy to use.
    */
    public init(policy : aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_DefaultObjectPool_1_ctor_0__1__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_T_(T.get_type_handle(), &__thrown, policy.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>, System.Int32)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{`0},System.Int32)
    /**
    
            Creates an instance of .
            

    - Parameter policy: The pooling policy to use.
    - Parameter maximumRetained: The maximum number of objects to retain in the pool.
    */
    public init(policy : aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<T>, maximumRetained : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_DefaultObjectPool_1_ctor_0__2__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_T__i32(T.get_type_handle(), &__thrown, policy.get_handle(), maximumRetained);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // T Get()
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.Get
    /**
    */
    open override func Get() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_DefaultObjectPool_1_T__Get_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.Return(`0)
    /**
    */
    open override func Return(obj : T) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_DefaultObjectPool_1_void__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DefaultObjectPool_1


// type: Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1
    /**
    
            Default implementation for .
            

    */
open class DefaultPooledObjectPolicy_1<T : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.PooledObjectPolicy_1<T>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_DefaultPooledObjectPolicy_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_DefaultPooledObjectPolicy_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // T Create()
// docid: M:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1.Create
    /**
    */
    open override func Create() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_DefaultPooledObjectPolicy_1_T__Create_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // bool Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1.Return(`0)
    /**
    */
    open override func Return(obj : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_DefaultPooledObjectPolicy_1_bool__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DefaultPooledObjectPolicy_1


// type: Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1
    /**
    
            Represents a policy for managing pooled objects.
            

    */
open class IPooledObjectPolicy_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_1
{
    public typealias T_IPooledObjectPolicy_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_1_get_type_handle(T.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // T Create()
// docid: M:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1.Create
    /**
    
            Create a .
            

    - Returns: The  which was created.

    */
    open func Create() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_1_T__Create_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // bool Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1.Return(`0)
    /**
    
            Runs some processing when an object was returned to the pool. Can be used to reset the state of an object and indicate if the object should be returned to the pool.
            

    - Parameter obj: The object to return to the pool.
    - Returns:  if the object should be returned to the pool.  if it's not possible/desirable for the pool to keep the object.

    */
    open func Return(obj : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_1_bool__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IPooledObjectPolicy_1


// type: Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider
    /**
    
            An  that produces instances of
            .
            

    */
open class LeakTrackingObjectPoolProvider
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_LeakTrackingObjectPoolProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)
// docid: M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider.#ctor(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The  to wrap.
    */
    public init(inner : aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_LeakTrackingObjectPoolProvider_ctor_0__1__ObjectPoolProvider(&__thrown, inner.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.ObjectPool.ObjectPool<T> Create<T>(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>)
// docid: M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})
    /**
    */
    open override func Create<UT : SGBridgeGenericValue>(policy : aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<UT>) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_LeakTrackingObjectPoolProvider_Microsoft_Extensions_ObjectPool_ObjectPool_UT___Create_1__1__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
} // LeakTrackingObjectPoolProvider


// type: Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1
    /**
    
            An  implementation that detects leaks in the use of the object pool.
            
            A leak is produced if an object is leased from the pool but not returned before it is finalized.
            An error is only produced in Debug builds.
            This type is only recommended to be used for diagnostc builds.
            
            

    */
open class LeakTrackingObjectPool_1<T : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<T>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_LeakTrackingObjectPool_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.ObjectPool.ObjectPool<T>)
// docid: M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.ObjectPool{`0})
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The  instance to track leaks in.
    */
    public init(inner : aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_LeakTrackingObjectPool_1_ctor_0__1__Microsoft_Extensions_ObjectPool_ObjectPool_T_(T.get_type_handle(), &__thrown, inner.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // T Get()
// docid: M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.Get
    /**
    */
    open override func Get() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_LeakTrackingObjectPool_1_T__Get_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.Return(`0)
    /**
    */
    open override func Return(obj : T) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_LeakTrackingObjectPool_1_void__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // LeakTrackingObjectPool_1


// type: Microsoft.Extensions.ObjectPool.ObjectPool
public struct ObjectPool {
    // Microsoft.Extensions.ObjectPool.ObjectPool<T> Create<T>(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>)
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPool.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})
    /**
    */
    public static func Create<UT : SGBridgeGenericValue>(policy : Optional<aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<UT>> = nil) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_ObjectPool_Microsoft_Extensions_ObjectPool_ObjectPool_UT___Create_1__1__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_UT_(UT.get_type_handle(), &__thrown, (policy?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
} // ObjectPool


// type: Microsoft.Extensions.ObjectPool.ObjectPoolProvider
    /**
    
            A provider of  instances.
            

    */
open class ObjectPoolProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_ObjectPoolProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.ObjectPool.ObjectPool<T> Create<T>()
    // Microsoft.Extensions.ObjectPool.ObjectPool<T> Create<T>(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy<T>)
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})
    /**
    
            Creates an  with the given .
            

    */
    open func Create<UT : SGBridgeGenericValue>(policy : aspnetcore.Microsoft.Extensions.ObjectPool.IPooledObjectPolicy_1<UT>) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_ObjectPoolProvider_Microsoft_Extensions_ObjectPool_ObjectPool_UT___Create_1__1__Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), policy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
} // ObjectPoolProvider


// type: Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions
public struct ObjectPoolProviderExtensions {
    // Microsoft.Extensions.ObjectPool.ObjectPool<System.Text.StringBuilder> CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)
    /**
    
            Creates an  that pools  instances.
            

    - Parameter provider: The .
    - Returns: The .

    */
    public static func CreateStringBuilderPool(provider : aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<dotnet.System.Text.StringBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_ObjectPoolProviderExtensions_Microsoft_Extensions_ObjectPool_ObjectPool_System_Text_StringBuilder___CreateStringBuilderPool_0__1__ObjectPoolProvider(&__thrown, provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
    // Microsoft.Extensions.ObjectPool.ObjectPool<System.Text.StringBuilder> CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider,System.Int32,System.Int32)
    /**
    
            Creates an  that pools  instances.
            

    - Parameter provider: The .
    - Parameter initialCapacity: The initial capacity to initiaize  instances with.
    - Parameter maximumRetainedCapacity: The maximum value for  that is allowed to be
            retained, when an instance is returned.
    - Returns: The .

    */
    public static func CreateStringBuilderPool(provider : aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider, initialCapacity : Swift.Int32, maximumRetainedCapacity : Swift.Int32) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<dotnet.System.Text.StringBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_ObjectPoolProviderExtensions_Microsoft_Extensions_ObjectPool_ObjectPool_System_Text_StringBuilder___CreateStringBuilderPool_0__3__ObjectPoolProvider_i32_i32(&__thrown, provider.get_handle(), initialCapacity, maximumRetainedCapacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1(hndl : __return);
        }
    }
} // ObjectPoolProviderExtensions


// type: Microsoft.Extensions.ObjectPool.ObjectPool`1
    /**
    
            A pool of objects.
            

    */
open class ObjectPool_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_ObjectPool_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // T Get()
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPool`1.Get
    /**
    
            Gets an object from the pool if one is available, otherwise creates one.
            

    - Returns: A .

    */
    open func Get() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_ObjectPool_1_T__Get_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.ObjectPool`1.Return(`0)
    /**
    
            Return an object to the pool.
            

    - Parameter obj: The object to add to the pool.
    */
    open func Return(obj : T) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_ObjectPool_1_void__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ObjectPool_1


// type: Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1
    /**
    
            A base type for .
            

    */
open class PooledObjectPolicy_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_PooledObjectPolicy_1_get_type_handle(T.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // T Create()
// docid: M:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1.Create
    /**
    */
    open func Create() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_PooledObjectPolicy_1_T__Create_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // bool Return(T)
// docid: M:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1.Return(`0)
    /**
    */
    open func Return(obj : T) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_PooledObjectPolicy_1_bool__Return_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), obj.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // PooledObjectPolicy_1


// type: Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy
    /**
    
            A policy for pooling  instances.
            

    */
open class StringBuilderPooledObjectPolicy
    :
    aspnetcore.Microsoft.Extensions.ObjectPool.PooledObjectPolicy_1<dotnet.System.Text.StringBuilder>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Text.StringBuilder Create()
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.Create
    /**
    */
    open override func Create() throws -> dotnet.System.Text.StringBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_StringBuilder__Create_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.StringBuilder(hndl : __return);
        }
    }
    // bool Return(System.Text.StringBuilder)
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.Return(System.Text.StringBuilder)
    /**
    */
    open override func Return(obj : dotnet.System.Text.StringBuilder) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_bool__Return_0__1__StringBuilder(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_InitialCapacity()
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.get_InitialCapacity
    open func get_InitialCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_i32__get_InitialCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_InitialCapacity(System.Int32)
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.set_InitialCapacity(System.Int32)
    open func set_InitialCapacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_void__set_InitialCapacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumRetainedCapacity()
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.get_MaximumRetainedCapacity
    open func get_MaximumRetainedCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_i32__get_MaximumRetainedCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumRetainedCapacity(System.Int32)
// docid: M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.set_MaximumRetainedCapacity(System.Int32)
    open func set_MaximumRetainedCapacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_ObjectPool_StringBuilderPooledObjectPolicy_void__set_MaximumRetainedCapacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the initial capacity of pooled  instances.
            

    */
    open var InitialCapacity : Swift.Int32 {
        get {
            return try! get_InitialCapacity();
        }
        set(v) {
            return try! set_InitialCapacity(value: v);
        }
    }
    /**
    
            Gets or sets the maximum value for  that is allowed to be
            retained, when  is invoked.
            

    */
    open var MaximumRetainedCapacity : Swift.Int32 {
        get {
            return try! get_MaximumRetainedCapacity();
        }
        set(v) {
            return try! set_MaximumRetainedCapacity(value: v);
        }
    }
} // StringBuilderPooledObjectPolicy


}



public protocol Microsoft_Extensions_ObjectPool_IPooledObjectPolicy_1
    :
    SGBridgeGetHandle
{
    associatedtype T_IPooledObjectPolicy_1 : SGBridgeGenericValue;
}

// EXTENSION METHOD Microsoft.Extensions.ObjectPool.ObjectPool<System.Text.StringBuilder> CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)
extension aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider {
    public func CreateStringBuilderPool() throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<dotnet.System.Text.StringBuilder> {
        return try aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(provider: self);
    }
}

// EXTENSION METHOD Microsoft.Extensions.ObjectPool.ObjectPool<System.Text.StringBuilder> CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider, System.Int32, System.Int32)
extension aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProvider {
    public func CreateStringBuilderPool(initialCapacity : Swift.Int32, maximumRetainedCapacity : Swift.Int32) throws -> aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPool_1<dotnet.System.Text.StringBuilder> {
        return try aspnetcore.Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(provider: self, initialCapacity: initialCapacity, maximumRetainedCapacity: maximumRetainedCapacity);
    }
}

