// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions
public struct HttpClientBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.IServiceProvider,System.Net.Http.DelegatingHandler>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.DelegatingHandler})
    /**
    
            Adds a delegate that will be used to create an additional message handler for a named .
            

    - Parameter builder: The .
    - Parameter configureHandler: A delegate that is used to create a .
    - Returns: An  that can be used to configure the client.

    */
    public static func AddHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : Optional<dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.DelegatingHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__AddHttpMessageHandler_0__2__IHttpClientBuilder_System_Func_System_IServiceProvider_System_Net_Http_DelegatingHandler_(&__thrown, builder?.get_handle() ?? nil, (configureHandler?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> dotnet.System.Net.Http.DelegatingHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.DelegatingHandler>(configureHandler);
        return try AddHttpMessageHandler(builder: builder, configureHandler: del_configureHandler);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.DelegatingHandler>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.DelegatingHandler})
    /**
    
            Adds a delegate that will be used to create an additional message handler for a named .
            

    - Parameter builder: The .
    - Parameter configureHandler: A delegate that is used to create a .
    - Returns: An  that can be used to configure the client.

    */
    public static func AddHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : Optional<dotnet.System.Func_1<dotnet.System.Net.Http.DelegatingHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__AddHttpMessageHandler_0__2__IHttpClientBuilder_System_Func_System_Net_Http_DelegatingHandler_(&__thrown, builder?.get_handle() ?? nil, (configureHandler?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : @escaping () throws -> dotnet.System.Net.Http.DelegatingHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_1<dotnet.System.Net.Http.DelegatingHandler>(configureHandler);
        return try AddHttpMessageHandler(builder: builder, configureHandler: del_configureHandler);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,System.IServiceProvider,``0})
    /**
    
            Configures a binding between the  type and the named 
            associated with the .
            

    - Parameter builder: The .
    - Parameter factory: A factory function that will be used to construct the typed client.
    */
    public static func AddTypedClient<UTClient : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, factory : dotnet.System.Func_3<dotnet.System.Net.Http.HttpClient,dotnet.System.IServiceProvider,UTClient>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__AddTypedClient_1__2__IHttpClientBuilder_System_Func_System_Net_Http_HttpClient_System_IServiceProvider_UTClient_(UTClient.get_type_handle(), &__thrown, builder?.get_handle() ?? nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddTypedClient<UTClient : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, factory : @escaping (Optional<dotnet.System.Net.Http.HttpClient>, Optional<dotnet.System.IServiceProvider>) throws -> UTClient) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_factory = try dotnet.System.Func_3<dotnet.System.Net.Http.HttpClient,dotnet.System.IServiceProvider,UTClient>(factory);
        return try AddTypedClient(builder: builder, factory: del_factory);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpClient,TClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,``0})
    /**
    
            Configures a binding between the  type and the named 
            associated with the .
            

    - Parameter builder: The .
    - Parameter factory: A factory function that will be used to construct the typed client.
    */
    public static func AddTypedClient<UTClient : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, factory : dotnet.System.Func_2<dotnet.System.Net.Http.HttpClient,UTClient>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__AddTypedClient_1__2__IHttpClientBuilder_System_Func_System_Net_Http_HttpClient_UTClient_(UTClient.get_type_handle(), &__thrown, builder?.get_handle() ?? nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddTypedClient<UTClient : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, factory : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> UTClient) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_factory = try dotnet.System.Func_2<dotnet.System.Net.Http.HttpClient,UTClient>(factory);
        return try AddTypedClient(builder: builder, factory: del_factory);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.IServiceProvider,System.Net.Http.HttpClient})
    /**
    
            Adds a delegate that will be used to configure a named .
            

    - Parameter builder: The .
    - Parameter configureClient: A delegate that is used to configure an .
    - Returns: An  that can be used to configure the client.

    */
    public static func ConfigureHttpClient(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureClient : Optional<dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__ConfigureHttpClient_0__2__IHttpClientBuilder_System_Action_System_IServiceProvider_System_Net_Http_HttpClient_(&__thrown, builder?.get_handle() ?? nil, (configureClient?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigureHttpClient(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureClient : @escaping (Optional<dotnet.System.IServiceProvider>, Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>(configureClient);
        return try ConfigureHttpClient(builder: builder, configureClient: del_configureClient);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<System.Net.Http.HttpClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.HttpClient})
    /**
    
            Adds a delegate that will be used to configure a named .
            

    - Parameter builder: The .
    - Parameter configureClient: A delegate that is used to configure an .
    - Returns: An  that can be used to configure the client.

    */
    public static func ConfigureHttpClient(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureClient : Optional<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__ConfigureHttpClient_0__2__IHttpClientBuilder_System_Action_System_Net_Http_HttpClient_(&__thrown, builder?.get_handle() ?? nil, (configureClient?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigureHttpClient(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureClient : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>(configureClient);
        return try ConfigureHttpClient(builder: builder, configureClient: del_configureClient);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<Microsoft.Extensions.Http.HttpMessageHandlerBuilder>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Http.HttpMessageHandlerBuilder})
    /**
    
            Adds a delegate that will be used to configure message handlers using 
            for a named .
            

    - Parameter builder: The .
    - Parameter configureBuilder: A delegate that is used to configure an .
    - Returns: An  that can be used to configure the client.

    */
    public static func ConfigureHttpMessageHandlerBuilder(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureBuilder : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__ConfigureHttpMessageHandlerBuilder_0__2__IHttpClientBuilder_System_Action_Microsoft_Extensions_Http_HttpMessageHandlerBuilder_(&__thrown, builder?.get_handle() ?? nil, (configureBuilder?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigureHttpMessageHandlerBuilder(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureBuilder : @escaping (Optional<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>(configureBuilder);
        return try ConfigureHttpMessageHandlerBuilder(builder: builder, configureBuilder: del_configureBuilder);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.IServiceProvider,System.Net.Http.HttpMessageHandler>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.HttpMessageHandler})
    /**
    
            Adds a delegate that will be used to configure the primary  for a
            named .
            

    - Parameter builder: The .
    - Parameter configureHandler: A delegate that is used to create an .
    - Returns: An  that can be used to configure the client.

    */
    public static func ConfigurePrimaryHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : Optional<dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpMessageHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__ConfigurePrimaryHttpMessageHandler_0__2__IHttpClientBuilder_System_Func_System_IServiceProvider_System_Net_Http_HttpMessageHandler_(&__thrown, builder?.get_handle() ?? nil, (configureHandler?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigurePrimaryHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> dotnet.System.Net.Http.HttpMessageHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpMessageHandler>(configureHandler);
        return try ConfigurePrimaryHttpMessageHandler(builder: builder, configureHandler: del_configureHandler);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpMessageHandler>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpMessageHandler})
    /**
    
            Adds a delegate that will be used to configure the primary  for a
            named .
            

    - Parameter builder: The .
    - Parameter configureHandler: A delegate that is used to create an .
    - Returns: An  that can be used to configure the client.

    */
    public static func ConfigurePrimaryHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : Optional<dotnet.System.Func_1<dotnet.System.Net.Http.HttpMessageHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__ConfigurePrimaryHttpMessageHandler_0__2__IHttpClientBuilder_System_Func_System_Net_Http_HttpMessageHandler_(&__thrown, builder?.get_handle() ?? nil, (configureHandler?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigurePrimaryHttpMessageHandler(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, configureHandler : @escaping () throws -> dotnet.System.Net.Http.HttpMessageHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_1<dotnet.System.Net.Http.HttpMessageHandler>(configureHandler);
        return try ConfigurePrimaryHttpMessageHandler(builder: builder, configureHandler: del_configureHandler);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Sets the collection of HTTP headers names for which values should be redacted before logging.
            

    - Parameter builder: The .
    - Parameter redactedLoggedHeaderNames: The collection of HTTP headers names for which values should be redacted before logging.
    - Returns: The .

    */
    public static func RedactLoggedHeaders(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, redactedLoggedHeaderNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__RedactLoggedHeaders_0__2__IHttpClientBuilder_System_Collections_Generic_IEnumerable_string_(&__thrown, builder?.get_handle() ?? nil, (redactedLoggedHeaderNames?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.String,bool>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.String,System.Boolean})
    /**
    
            Sets the  which determines whether to redact the HTTP header value before logging.
            

    - Parameter builder: The .
    - Parameter shouldRedactHeaderValue: The  which determines whether to redact the HTTP header value before logging.
    - Returns: The .

    */
    public static func RedactLoggedHeaders(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, shouldRedactHeaderValue : Optional<dotnet.System.Func_2<dotnet.System.String,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientBuilderExtensions_IHttpClientBuilder__RedactLoggedHeaders_0__2__IHttpClientBuilder_System_Func_string_bool_(&__thrown, builder?.get_handle() ?? nil, (shouldRedactHeaderValue?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func RedactLoggedHeaders(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder>, shouldRedactHeaderValue : @escaping (Optional<dotnet.System.String>) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_shouldRedactHeaderValue = try dotnet.System.Func_2<dotnet.System.String,Swift.Bool>(shouldRedactHeaderValue);
        return try RedactLoggedHeaders(builder: builder, shouldRedactHeaderValue: del_shouldRedactHeaderValue);
    }
// TODO COPE (write_all_methods) (span) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder SetHandlerLifetime(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.TimeSpan)
} // HttpClientBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions
public struct HttpClientFactoryServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds the  and related services to the .
            

    - Parameter services: The .
    - Returns: The .

    */
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientFactoryServiceCollectionExtensions_IServiceCollection__AddHttpClient_0__1__IServiceCollection(&__thrown, services?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)
    /**
    
            Adds the  and related services to the  and configures
            a named .
            

    - Parameter services: The .
    - Parameter name: The logical name of the  to configure.
    - Returns: An  that can be used to configure the client.

    */
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientFactoryServiceCollectionExtensions_IHttpClientBuilder__AddHttpClient_0__2__IServiceCollection_String(&__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,System.Net.Http.HttpClient})
    /**
    
            Adds the  and related services to the  and configures
            a named .
            

    - Parameter services: The .
    - Parameter name: The logical name of the  to configure.
    - Parameter configureClient: A delegate that is used to configure an .
    - Returns: An  that can be used to configure the client.

    */
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureClient : Optional<dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientFactoryServiceCollectionExtensions_IHttpClientBuilder__AddHttpClient_0__3__IServiceCollection_String_System_Action_System_IServiceProvider_System_Net_Http_HttpClient_(&__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil, (configureClient?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureClient : @escaping (Optional<dotnet.System.IServiceProvider>, Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>(configureClient);
        return try AddHttpClient(services: services, name: name, configureClient: del_configureClient);
    }
    // Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.Net.Http.HttpClient})
    /**
    
            Adds the  and related services to the  and configures
            a named .
            

    - Parameter services: The .
    - Parameter name: The logical name of the  to configure.
    - Parameter configureClient: A delegate that is used to configure an .
    - Returns: An  that can be used to configure the client.

    */
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureClient : Optional<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpClientFactoryServiceCollectionExtensions_IHttpClientBuilder__AddHttpClient_0__3__IServiceCollection_String_System_Action_System_Net_Http_HttpClient_(&__thrown, services?.get_handle() ?? nil, name?.get_handle() ?? nil, (configureClient?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddHttpClient(services : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, name : Optional<dotnet.System.String>, configureClient : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>(configureClient);
        return try AddHttpClient(services: services, name: name, configureClient: del_configureClient);
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,TImplementation>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)
// TODO COPE (write_all_methods) (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,TImplementation>)
} // HttpClientFactoryServiceCollectionExtensions


// type: Microsoft.Extensions.DependencyInjection.IHttpClientBuilder
    /**
    
            A builder for configuring named  instances returned by .
            

    */
open class IHttpClientBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_DependencyInjection_IHttpClientBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_DependencyInjection_IHttpClientBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IHttpClientBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.DependencyInjection.IServiceCollection get_Services()
// docid: M:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.get_Services
    open func get_Services() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_IHttpClientBuilder_IServiceCollection__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHttpClientBuilder


}

// Microsoft.Extensions.Http
extension Microsoft.Extensions.Http {
// type: Microsoft.Extensions.Http.HttpClientFactoryOptions
    /**
    
            An options class for configuring the default .
            

    */
open class HttpClientFactoryOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_HttpClientFactoryOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Http_HttpClientFactoryOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_HandlerLifetime()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.get_HandlerLifetime
    open func get_HandlerLifetime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpClientFactoryOptions_TimeSpan__get_HandlerLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_HandlerLifetime(System.TimeSpan)
    // [IsSpecialName] System.Collections.Generic.IList<System.Action<System.Net.Http.HttpClient>> get_HttpClientActions()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.get_HttpClientActions
    open func get_HttpClientActions() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpClientFactoryOptions_System_Collections_Generic_IList_System_System_Action_System_Net_Http_HttpClient____get_HttpClientActions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Action<Microsoft.Extensions.Http.HttpMessageHandlerBuilder>> get_HttpMessageHandlerBuilderActions()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.get_HttpMessageHandlerBuilderActions
    open func get_HttpMessageHandlerBuilderActions() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpClientFactoryOptions_System_Collections_Generic_IList_System_System_Action_Microsoft_Extensions_Http_HttpMessageHandlerBuilder____get_HttpMessageHandlerBuilderActions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<System.String,bool> get_ShouldRedactHeaderValue()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.get_ShouldRedactHeaderValue
    open func get_ShouldRedactHeaderValue() throws -> Optional<dotnet.System.Func_2<dotnet.System.String,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpClientFactoryOptions_System_Func_string_bool___get_ShouldRedactHeaderValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ShouldRedactHeaderValue(System.Func<System.String,bool>)
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.set_ShouldRedactHeaderValue(System.Func{System.String,System.Boolean})
    open func set_ShouldRedactHeaderValue(value : Optional<dotnet.System.Func_2<dotnet.System.String,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Http_HttpClientFactoryOptions_void__set_ShouldRedactHeaderValue_0__1__System_Func_string_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ShouldRedactHeaderValue(value : @escaping (Optional<dotnet.System.String>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.String,Swift.Bool>(value);
        return try set_ShouldRedactHeaderValue(value: del_value);
    }
    // [IsSpecialName] bool get_SuppressHandlerScope()
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.get_SuppressHandlerScope
    open func get_SuppressHandlerScope() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpClientFactoryOptions_bool__get_SuppressHandlerScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressHandlerScope(bool)
// docid: M:Microsoft.Extensions.Http.HttpClientFactoryOptions.set_SuppressHandlerScope(System.Boolean)
    open func set_SuppressHandlerScope(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Http_HttpClientFactoryOptions_void__set_SuppressHandlerScope_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the length of time that a  instance can be reused. Each named
            client can have its own configured handler lifetime value. The default value of this property is two minutes.
            Set the lifetime to  to disable handler expiry.
            

    */
    open var HandlerLifetime : dotnet.System.TimeSpan {
        get {
            return try! get_HandlerLifetime();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_HandlerLifetime(System.TimeSpan)
    }
    /**
    
            Gets a list of operations used to configure an .
            

    */
    open var HttpClientActions : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>> {
        get {
            return try! get_HttpClientActions();
        }
    }
    /**
    
            Gets a list of operations used to configure an .
            

    */
    open var HttpMessageHandlerBuilderActions : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>>> {
        get {
            return try! get_HttpMessageHandlerBuilderActions();
        }
    }
    /**
    
            The  which determines whether to redact the HTTP header value before logging.
            

    */
    open var ShouldRedactHeaderValue : Optional<dotnet.System.Func_2<dotnet.System.String,Bool>> {
        get {
            return try! get_ShouldRedactHeaderValue();
        }
        set(v) {
            return try! set_ShouldRedactHeaderValue(value: v!);
        }
    }
    /**
    
            
            Gets or sets a value that determines whether the  will
            create a dependency injection scope when building an .
            If false (default), a scope will be created, otherwise a scope will not be created.
            
            
            This option is provided for compatibility with existing applications. It is recommended
            to use the default setting for new applications.
            
            

    */
    open var SuppressHandlerScope : Bool {
        get {
            return try! get_SuppressHandlerScope();
        }
        set(v) {
            return try! set_SuppressHandlerScope(value: v);
        }
    }
} // HttpClientFactoryOptions


// type: Microsoft.Extensions.Http.HttpMessageHandlerBuilder
    /**
    
            A builder abstraction for configuring  instances.
            

    */
open class HttpMessageHandlerBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_HttpMessageHandlerBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.Http.HttpMessageHandler Build()
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Build
    /**
    
            Creates an .
            

    - Returns: 
            An  built from the  and
            .
            

    */
    open func Build() throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpMessageHandlerBuilder_HttpMessageHandler__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Net.Http.DelegatingHandler> get_AdditionalHandlers()
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.get_AdditionalHandlers
    open func get_AdditionalHandlers() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Net.Http.DelegatingHandler>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpMessageHandlerBuilder_System_Collections_Generic_IList_System_Net_Http_DelegatingHandler___get_AdditionalHandlers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpMessageHandlerBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Http_HttpMessageHandlerBuilder_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Http.HttpMessageHandler get_PrimaryHandler()
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.get_PrimaryHandler
    open func get_PrimaryHandler() throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpMessageHandlerBuilder_HttpMessageHandler__get_PrimaryHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PrimaryHandler(System.Net.Http.HttpMessageHandler)
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.set_PrimaryHandler(System.Net.Http.HttpMessageHandler)
    open func set_PrimaryHandler(value : Optional<dotnet.System.Net.Http.HttpMessageHandler>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Http_HttpMessageHandlerBuilder_void__set_PrimaryHandler_0__1__HttpMessageHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_Services()
// docid: M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.get_Services
    open func get_Services() throws -> Optional<dotnet.System.IServiceProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_HttpMessageHandlerBuilder_IServiceProvider__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IServiceProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets a list of additional  instances used to configure an
             pipeline.
            

    */
    open var AdditionalHandlers : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Net.Http.DelegatingHandler>> {
        get {
            return try! get_AdditionalHandlers();
        }
    }
    /**
    
            Gets or sets the name of the  being created.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets or sets the primary .
            

    */
    open var PrimaryHandler : Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        get {
            return try! get_PrimaryHandler();
        }
        set(v) {
            return try! set_PrimaryHandler(value: v!);
        }
    }
    /**
    
            Gets an  which can be used to resolve services
            from the dependency injection container.
            

    */
    open var Services : Optional<dotnet.System.IServiceProvider> {
        get {
            return try! get_Services();
        }
    }
} // HttpMessageHandlerBuilder


// type: Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter
    /**
    
            Used by the  to apply additional initialization to the configure the
             immediately before 
            is called.
            

    */
open class IHttpMessageHandlerBuilderFilter
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Http_IHttpMessageHandlerBuilderFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_IHttpMessageHandlerBuilderFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Action<Microsoft.Extensions.Http.HttpMessageHandlerBuilder> Configure(System.Action<Microsoft.Extensions.Http.HttpMessageHandlerBuilder>)
// docid: M:Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter.Configure(System.Action{Microsoft.Extensions.Http.HttpMessageHandlerBuilder})
    /**
    
            Applies additional initialization to the 
            

    - Parameter next: A delegate which will run the next .
    */
    open func Configure(next : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>>) throws -> Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_IHttpMessageHandlerBuilderFilter_System_Action_Microsoft_Extensions_Http_HttpMessageHandlerBuilder___Configure_0__1__System_Action_Microsoft_Extensions_Http_HttpMessageHandlerBuilder_(&__thrown, self.get_handle(), (next?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func Configure(next : @escaping (Optional<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>) throws -> Void) throws -> Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>> {
        let del_next = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>(next);
        return try Configure(next: del_next);
    }
} // IHttpMessageHandlerBuilderFilter


// type: Microsoft.Extensions.Http.ITypedHttpClientFactory`1
    /**
    
             A factory abstraction for a component that can create typed client instances with custom
             configuration for a given logical name.
             

    */
open class ITypedHttpClientFactory_1<TClient : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Http_ITypedHttpClientFactory_1
{
    public typealias TClient_ITypedHttpClientFactory_1 = TClient;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_ITypedHttpClientFactory_1_get_type_handle(TClient.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // TClient CreateClient(System.Net.Http.HttpClient)
// docid: M:Microsoft.Extensions.Http.ITypedHttpClientFactory`1.CreateClient(System.Net.Http.HttpClient)
    /**
    
            Creates a typed client given an associated .
            

    - Parameter httpClient: 
            An  created by the  for the named client
            associated with .
            
    - Returns: An instance of .

    */
    open func CreateClient(httpClient : Optional<dotnet.System.Net.Http.HttpClient>) throws -> TClient {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Http_ITypedHttpClientFactory_1_TClient__CreateClient_0__1__HttpClient(TClient.get_type_handle(), &__thrown, self.get_handle(), httpClient?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TClient(gval: __return);
        }
    }
} // ITypedHttpClientFactory_1


}
// Microsoft.Extensions.Http.Logging
extension Microsoft.Extensions.Http.Logging {
// type: Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler
open class LoggingHttpMessageHandler
    :
    dotnet.System.Net.Http.DelegatingHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_Logging_LoggingHttpMessageHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.#ctor(Microsoft.Extensions.Logging.ILogger)
    public init(logger : Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Http_Logging_LoggingHttpMessageHandler_ctor_0__1__ILogger(&__thrown, logger?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Http.HttpClientFactoryOptions)
// docid: M:Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.#ctor(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Http.HttpClientFactoryOptions)
    public init(logger : Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger>, options : Optional<aspnetcore.Microsoft.Extensions.Http.HttpClientFactoryOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Http_Logging_LoggingHttpMessageHandler_ctor_0__2__ILogger_HttpClientFactoryOptions(&__thrown, logger?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // LoggingHttpMessageHandler


// type: Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler
open class LoggingScopeHttpMessageHandler
    :
    dotnet.System.Net.Http.DelegatingHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Http_Logging_LoggingScopeHttpMessageHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.#ctor(Microsoft.Extensions.Logging.ILogger)
    public init(logger : Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Http_Logging_LoggingScopeHttpMessageHandler_ctor_0__1__ILogger(&__thrown, logger?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Http.HttpClientFactoryOptions)
// docid: M:Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.#ctor(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Http.HttpClientFactoryOptions)
    public init(logger : Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger>, options : Optional<aspnetcore.Microsoft.Extensions.Http.HttpClientFactoryOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Http_Logging_LoggingScopeHttpMessageHandler_ctor_0__2__ILogger_HttpClientFactoryOptions(&__thrown, logger?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // LoggingScopeHttpMessageHandler


}




// System
// System.Net
// System.Net.Http
extension System.Net.Http {
// type: System.Net.Http.HttpClientFactoryExtensions
public struct HttpClientFactoryExtensions {
    // System.Net.Http.HttpClient CreateClient(System.Net.Http.IHttpClientFactory)
// docid: M:System.Net.Http.HttpClientFactoryExtensions.CreateClient(System.Net.Http.IHttpClientFactory)
    /**
    
            Creates a new  using the default configuration.
            

    - Parameter factory: The .
    - Returns: An  configured using the default configuration.

    */
    public static func CreateClient(factory : Optional<aspnetcore.System.Net.Http.IHttpClientFactory>) throws -> Optional<dotnet.System.Net.Http.HttpClient> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpClientFactoryExtensions_HttpClient__CreateClient_0__1__IHttpClientFactory(&__thrown, factory?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpClient(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HttpClientFactoryExtensions


// type: System.Net.Http.HttpMessageHandlerFactoryExtensions
public struct HttpMessageHandlerFactoryExtensions {
    // System.Net.Http.HttpMessageHandler CreateHandler(System.Net.Http.IHttpMessageHandlerFactory)
// docid: M:System.Net.Http.HttpMessageHandlerFactoryExtensions.CreateHandler(System.Net.Http.IHttpMessageHandlerFactory)
    /**
    
            Creates a new  using the default configuration.
            

    - Parameter factory: The .
    - Returns: An  configured using the default configuration.

    */
    public static func CreateHandler(factory : Optional<aspnetcore.System.Net.Http.IHttpMessageHandlerFactory>) throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_HttpMessageHandlerFactoryExtensions_HttpMessageHandler__CreateHandler_0__1__IHttpMessageHandlerFactory(&__thrown, factory?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HttpMessageHandlerFactoryExtensions


// type: System.Net.Http.IHttpClientFactory
    /**
    
            A factory abstraction for a component that can create  instances with custom
            configuration for a given logical name.
            

    */
open class IHttpClientFactory
    :
    SGBridgeGenericValue,
    System_Net_Http_IHttpClientFactory
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_Http_IHttpClientFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Net.Http.HttpClient CreateClient(System.String)
// docid: M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)
    /**
    
            Creates and configures an  instance using the configuration that corresponds
            to the logical name specified by .
            

    - Parameter name: The logical name of the client to create.
    - Returns: A new  instance.

    */
    open func CreateClient(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Net.Http.HttpClient> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_IHttpClientFactory_HttpClient__CreateClient_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpClient(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHttpClientFactory


// type: System.Net.Http.IHttpMessageHandlerFactory
    /**
    
            A factory abstraction for a component that can create  instances with custom
            configuration for a given logical name.
            

    */
open class IHttpMessageHandlerFactory
    :
    SGBridgeGenericValue,
    System_Net_Http_IHttpMessageHandlerFactory
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_Http_IHttpMessageHandlerFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Net.Http.HttpMessageHandler CreateHandler(System.String)
// docid: M:System.Net.Http.IHttpMessageHandlerFactory.CreateHandler(System.String)
    /**
    
            Creates and configures an  instance using the configuration that corresponds
            to the logical name specified by .
            

    - Parameter name: The logical name of the message handler to create.
    - Returns: A new  instance.

    */
    open func CreateHandler(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_IHttpMessageHandlerFactory_HttpMessageHandler__CreateHandler_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Http.HttpMessageHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHttpMessageHandlerFactory


}



public protocol Microsoft_Extensions_DependencyInjection_IHttpClientBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Http_IHttpMessageHandlerBuilderFilter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Http_ITypedHttpClientFactory_1
    :
    SGBridgeGetHandle
{
    associatedtype TClient_ITypedHttpClientFactory_1 : SGBridgeGenericValue;
}

public protocol System_Net_Http_IHttpClientFactory
    :
    SGBridgeGetHandle
{
}

public protocol System_Net_Http_IHttpMessageHandlerFactory
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.IServiceProvider,System.Net.Http.DelegatingHandler>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func AddHttpMessageHandler(configureHandler : Optional<dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.DelegatingHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: configureHandler);
    }
    // delegate closure overload
    public func AddHttpMessageHandler(configureHandler : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> dotnet.System.Net.Http.DelegatingHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.DelegatingHandler>(configureHandler);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: del_configureHandler);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.DelegatingHandler>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func AddHttpMessageHandler(configureHandler : Optional<dotnet.System.Func_1<dotnet.System.Net.Http.DelegatingHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: configureHandler);
    }
    // delegate closure overload
    public func AddHttpMessageHandler(configureHandler : @escaping () throws -> dotnet.System.Net.Http.DelegatingHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_1<dotnet.System.Net.Http.DelegatingHandler>(configureHandler);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: del_configureHandler);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TClient>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func AddTypedClient<UTClient : SGBridgeGenericValue>(factory : dotnet.System.Func_3<dotnet.System.Net.Http.HttpClient,dotnet.System.IServiceProvider,UTClient>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), factory: factory);
    }
    // delegate closure overload
    public func AddTypedClient<UTClient : SGBridgeGenericValue>(factory : @escaping (Optional<dotnet.System.Net.Http.HttpClient>, Optional<dotnet.System.IServiceProvider>) throws -> UTClient) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_factory = try dotnet.System.Func_3<dotnet.System.Net.Http.HttpClient,dotnet.System.IServiceProvider,UTClient>(factory);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), factory: del_factory);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpClient,TClient>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func AddTypedClient<UTClient : SGBridgeGenericValue>(factory : dotnet.System.Func_2<dotnet.System.Net.Http.HttpClient,UTClient>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), factory: factory);
    }
    // delegate closure overload
    public func AddTypedClient<UTClient : SGBridgeGenericValue>(factory : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> UTClient) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_factory = try dotnet.System.Func_2<dotnet.System.Net.Http.HttpClient,UTClient>(factory);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), factory: del_factory);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func ConfigureHttpClient(configureClient : Optional<dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureClient: configureClient);
    }
    // delegate closure overload
    public func ConfigureHttpClient(configureClient : @escaping (Optional<dotnet.System.IServiceProvider>, Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>(configureClient);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureClient: del_configureClient);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<System.Net.Http.HttpClient>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func ConfigureHttpClient(configureClient : Optional<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureClient: configureClient);
    }
    // delegate closure overload
    public func ConfigureHttpClient(configureClient : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>(configureClient);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureClient: del_configureClient);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Action<Microsoft.Extensions.Http.HttpMessageHandlerBuilder>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func ConfigureHttpMessageHandlerBuilder(configureBuilder : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureBuilder: configureBuilder);
    }
    // delegate closure overload
    public func ConfigureHttpMessageHandlerBuilder(configureBuilder : @escaping (Optional<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Http.HttpMessageHandlerBuilder>(configureBuilder);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureBuilder: del_configureBuilder);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.IServiceProvider,System.Net.Http.HttpMessageHandler>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func ConfigurePrimaryHttpMessageHandler(configureHandler : Optional<dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpMessageHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: configureHandler);
    }
    // delegate closure overload
    public func ConfigurePrimaryHttpMessageHandler(configureHandler : @escaping (Optional<dotnet.System.IServiceProvider>) throws -> dotnet.System.Net.Http.HttpMessageHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpMessageHandler>(configureHandler);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: del_configureHandler);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.Net.Http.HttpMessageHandler>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func ConfigurePrimaryHttpMessageHandler(configureHandler : Optional<dotnet.System.Func_1<dotnet.System.Net.Http.HttpMessageHandler>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: configureHandler);
    }
    // delegate closure overload
    public func ConfigurePrimaryHttpMessageHandler(configureHandler : @escaping () throws -> dotnet.System.Net.Http.HttpMessageHandler) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureHandler = try dotnet.System.Func_1<dotnet.System.Net.Http.HttpMessageHandler>(configureHandler);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), configureHandler: del_configureHandler);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler<THandler>(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Collections.Generic.IEnumerable<System.String>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func RedactLoggedHeaders(redactedLoggedHeaderNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), redactedLoggedHeaderNames: redactedLoggedHeaderNames);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.Func<System.String,bool>)
extension Microsoft_Extensions_DependencyInjection_IHttpClientBuilder {
    public func RedactLoggedHeaders(shouldRedactHeaderValue : Optional<dotnet.System.Func_2<dotnet.System.String,Bool>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), shouldRedactHeaderValue: shouldRedactHeaderValue);
    }
    // delegate closure overload
    public func RedactLoggedHeaders(shouldRedactHeaderValue : @escaping (Optional<dotnet.System.String>) throws -> Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_shouldRedactHeaderValue = try dotnet.System.Func_2<dotnet.System.String,Swift.Bool>(shouldRedactHeaderValue);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder(hndl: __copy_handle(self.get_handle())), shouldRedactHeaderValue: del_shouldRedactHeaderValue);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder SetHandlerLifetime(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.TimeSpan)
// TODO COPE extension method (span) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder SetHandlerLifetime(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder, System.TimeSpan)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpClient() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpClient(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpClient(name : Optional<dotnet.System.String>, configureClient : Optional<dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureClient: configureClient);
    }
    // delegate closure overload
    public func AddHttpClient(name : Optional<dotnet.System.String>, configureClient : @escaping (Optional<dotnet.System.IServiceProvider>, Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_2<dotnet.System.IServiceProvider,dotnet.System.Net.Http.HttpClient>(configureClient);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureClient: del_configureClient);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpClient(name : Optional<dotnet.System.String>, configureClient : Optional<dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureClient: configureClient);
    }
    // delegate closure overload
    public func AddHttpClient(name : Optional<dotnet.System.String>, configureClient : @escaping (Optional<dotnet.System.Net.Http.HttpClient>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IHttpClientBuilder> {
        let del_configureClient = try dotnet.System.Action_1<dotnet.System.Net.Http.HttpClient>(configureClient);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), name: name, configureClient: del_configureClient);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,TImplementation>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Net.Http.HttpClient,TImplementation>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider,System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.Net.Http.HttpClient>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,System.IServiceProvider,TImplementation>)

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,TImplementation>)
// TODO COPE extension method (unused generic param) Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpClient<TClient, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Func<System.Net.Http.HttpClient,TImplementation>)

// EXTENSION METHOD System.Net.Http.HttpClient CreateClient(System.Net.Http.IHttpClientFactory)
extension System_Net_Http_IHttpClientFactory {
    public func CreateClient() throws -> Optional<dotnet.System.Net.Http.HttpClient> {
        return try aspnetcore.System.Net.Http.HttpClientFactoryExtensions.CreateClient(factory: aspnetcore.System.Net.Http.IHttpClientFactory(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Net.Http.HttpMessageHandler CreateHandler(System.Net.Http.IHttpMessageHandlerFactory)
extension System_Net_Http_IHttpMessageHandlerFactory {
    public func CreateHandler() throws -> Optional<dotnet.System.Net.Http.HttpMessageHandler> {
        return try aspnetcore.System.Net.Http.HttpMessageHandlerFactoryExtensions.CreateHandler(factory: aspnetcore.System.Net.Http.IHttpMessageHandlerFactory(hndl: __copy_handle(self.get_handle())));
    }
}

