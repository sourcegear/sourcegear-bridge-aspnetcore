// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Antiforgery
extension Microsoft.AspNetCore.Antiforgery {
// type: Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions
    /**
    
            Provides programmatic configuration for the antiforgery token system.
            

    */
open class AntiforgeryOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultCookiePrefix
    /**
    
            The default cookie prefix, which is ".AspNetCore.Antiforgery.".
            

    */
    open class var DefaultCookiePrefix : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_get_DefaultCookiePrefix());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_Cookie()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.get_Cookie
    open func get_Cookie() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_CookieBuilder__get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_Cookie(value : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_void__set_Cookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FormFieldName()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.get_FormFieldName
    open func get_FormFieldName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_String__get_FormFieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FormFieldName(System.String)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.set_FormFieldName(System.String)
    open func set_FormFieldName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_void__set_FormFieldName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HeaderName()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.get_HeaderName
    open func get_HeaderName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_String__get_HeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.set_HeaderName(System.String)
    open func set_HeaderName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_void__set_HeaderName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressXFrameOptionsHeader()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.get_SuppressXFrameOptionsHeader
    open func get_SuppressXFrameOptionsHeader() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_bool__get_SuppressXFrameOptionsHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressXFrameOptionsHeader(bool)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions.set_SuppressXFrameOptionsHeader(System.Boolean)
    open func set_SuppressXFrameOptionsHeader(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_void__set_SuppressXFrameOptionsHeader_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Determines the settings used to create the antiforgery cookies.
            

    */
    open var Cookie : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        get {
            return try! get_Cookie();
        }
        set(v) {
            return try! set_Cookie(value: v);
        }
    }
    /**
    
            Specifies the name of the antiforgery token field that is used by the antiforgery system.
            

    */
    open var FormFieldName : dotnet.System.String {
        get {
            return try! get_FormFieldName();
        }
        set(v) {
            return try! set_FormFieldName(value: v);
        }
    }
    /**
    
            Specifies the name of the header value that is used by the antiforgery system. If null then
            antiforgery validation will only consider form data.
            

    */
    open var HeaderName : Optional<dotnet.System.String> {
        get {
            return try! get_HeaderName();
        }
        set(v) {
            return try! set_HeaderName(value: v!);
        }
    }
    /**
    
            Specifies whether to suppress the generation of X-Frame-Options header
            which is used to prevent ClickJacking. By default, the X-Frame-Options
            header is generated with the value SAMEORIGIN. If this setting is 'true',
            the X-Frame-Options header will not be generated for the response.
            

    */
    open var SuppressXFrameOptionsHeader : Bool {
        get {
            return try! get_SuppressXFrameOptionsHeader();
        }
        set(v) {
            return try! set_SuppressXFrameOptionsHeader(value: v);
        }
    }
} // AntiforgeryOptions


// type: Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet
    /**
    
            The antiforgery token pair (cookie and request token) for a request.
            

    */
open class AntiforgeryTokenSet
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet.#ctor(System.String,System.String,System.String,System.String)
    /**
    
            Creates the antiforgery token pair (cookie and request token) for a request.
            

    - Parameter requestToken: The token that is supplied in the request.
    - Parameter cookieToken: The token that is supplied in the request cookie.
    - Parameter formFieldName: The name of the form field used for the request token.
    - Parameter headerName: The name of the header used for the request token.
    */
    public init(requestToken : Optional<dotnet.System.String>, cookieToken : Optional<dotnet.System.String>, formFieldName : dotnet.System.String, headerName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_ctor_0__4__String_String_String_String(&__thrown, requestToken?.get_handle() ?? nil, cookieToken?.get_handle() ?? nil, formFieldName.get_handle(), headerName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RequestToken()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet.get_RequestToken
    open func get_RequestToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_String__get_RequestToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FormFieldName()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet.get_FormFieldName
    open func get_FormFieldName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_String__get_FormFieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_HeaderName()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet.get_HeaderName
    open func get_HeaderName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_String__get_HeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_CookieToken()
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet.get_CookieToken
    open func get_CookieToken() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_AntiforgeryTokenSet_String__get_CookieToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the cookie token.
            

    */
    open var CookieToken : Optional<dotnet.System.String> {
        get {
            return try! get_CookieToken();
        }
    }
    /**
    
            Gets the name of the form field used for the request token.
            

    */
    open var FormFieldName : dotnet.System.String {
        get {
            return try! get_FormFieldName();
        }
    }
    /**
    
            Gets the name of the header used for the request token.
            

    */
    open var HeaderName : Optional<dotnet.System.String> {
        get {
            return try! get_HeaderName();
        }
    }
    /**
    
            Gets the request token.
            

    */
    open var RequestToken : Optional<dotnet.System.String> {
        get {
            return try! get_RequestToken();
        }
    }
} // AntiforgeryTokenSet


// type: Microsoft.AspNetCore.Antiforgery.AntiforgeryValidationException
    /**
    
            The  that is thrown when the antiforgery token validation fails.
            

    */
open class AntiforgeryValidationException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Antiforgery_AntiforgeryValidationException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryValidationException.#ctor(System.String)
    /**
    
            Creates a new instance of  with the specified
            exception message.
            

    - Parameter message: The message that describes the error.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Antiforgery_AntiforgeryValidationException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Antiforgery.AntiforgeryValidationException.#ctor(System.String,System.Exception)
    /**
    
            Creates a new instance of  with the specified
            exception message and inner exception.
            

    - Parameter message: The message that describes the error.
    - Parameter innerException: The inner .
    */
    public init(message : dotnet.System.String, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Antiforgery_AntiforgeryValidationException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AntiforgeryValidationException


// type: Microsoft.AspNetCore.Antiforgery.IAntiforgery
    /**
    
            Provides access to the antiforgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            

    */
open class IAntiforgery
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Antiforgery_IAntiforgery
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Antiforgery_IAntiforgery_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet GetAndStoreTokens(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgery.GetAndStoreTokens(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Generates an  for this request and stores the cookie token
            in the response. This operation also sets the "Cache-control" and "Pragma" headers to "no-cache" and
            the "X-Frame-Options" header to "SAMEORIGIN".
            

    - Parameter httpContext: The  associated with the current request.
    - Returns: An  with tokens for the response.

    */
    open func GetAndStoreTokens(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgery_AntiforgeryTokenSet__GetAndStoreTokens_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet GetTokens(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgery.GetTokens(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Generates an  for this request.
            

    - Parameter httpContext: The  associated with the current request.
    - Returns: The  for this request.

    */
    open func GetTokens(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgery_AntiforgeryTokenSet__GetTokens_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryTokenSet(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> IsRequestValidAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgery.IsRequestValidAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Asynchronously returns a value indicating whether the request passes antiforgery validation. If the
            request uses a safe HTTP method (GET, HEAD, OPTIONS, TRACE), the antiforgery token is not validated.
            

    - Parameter httpContext: The  associated with the current request.
    - Returns: 
            A  that, when completed, returns true if the request uses a safe HTTP
            method or contains a valid antiforgery token, otherwise returns false.
            

    */
    open func IsRequestValidAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgery_System_Threading_Tasks_Task_bool___IsRequestValidAsync_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task ValidateRequestAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgery.ValidateRequestAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Validates an antiforgery token that was supplied as part of the request.
            

    - Parameter httpContext: The  associated with the current request.
    - Returns: A  that completes when validation has completed.

    */
    open func ValidateRequestAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgery_Task__ValidateRequestAsync_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // void SetCookieTokenAndHeader(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgery.SetCookieTokenAndHeader(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Generates and stores an antiforgery cookie token if one is not available or not valid.
            

    - Parameter httpContext: The  associated with the current request.
    */
    open func SetCookieTokenAndHeader(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Antiforgery_IAntiforgery_void__SetCookieTokenAndHeader_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAntiforgery


// type: Microsoft.AspNetCore.Antiforgery.IAntiforgeryAdditionalDataProvider
    /**
    
            Allows providing or validating additional custom data for antiforgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then validate it when the token is validated.
            

    */
open class IAntiforgeryAdditionalDataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Antiforgery_IAntiforgeryAdditionalDataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Antiforgery_IAntiforgeryAdditionalDataProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String GetAdditionalData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgeryAdditionalDataProvider.GetAdditionalData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Provides additional data to be stored for the antiforgery tokens generated
            during this request.
            

    - Parameter context: Information about the current request.
    - Returns: Supplemental data to embed within the antiforgery token.

    */
    open func GetAdditionalData(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgeryAdditionalDataProvider_String__GetAdditionalData_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool ValidateAdditionalData(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Antiforgery.IAntiforgeryAdditionalDataProvider.ValidateAdditionalData(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Validates additional data that was embedded inside an incoming antiforgery
            token.
            

    - Parameter context: Information about the current request.
    - Parameter additionalData: Supplemental data that was embedded within the token.
    - Returns: True if the data is valid; false if the data is invalid.

    */
    open func ValidateAdditionalData(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, additionalData : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Antiforgery_IAntiforgeryAdditionalDataProvider_bool__ValidateAdditionalData_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), additionalData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IAntiforgeryAdditionalDataProvider


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions
public struct AntiforgeryServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds antiforgery services to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAntiforgery(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AntiforgeryServiceCollectionExtensions_IServiceCollection__AddAntiforgery_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions})
    /**
    
            Adds antiforgery services to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter setupAction: An  to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAntiforgery(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_AntiforgeryServiceCollectionExtensions_IServiceCollection__AddAntiforgery_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Antiforgery_AntiforgeryOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAntiforgery(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>(setupAction);
        return try AddAntiforgery(services: services, setupAction: del_setupAction);
    }
} // AntiforgeryServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Antiforgery_IAntiforgery
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Antiforgery_IAntiforgeryAdditionalDataProvider
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAntiforgery() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAntiforgery(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddAntiforgery(setupAction : @escaping (aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

