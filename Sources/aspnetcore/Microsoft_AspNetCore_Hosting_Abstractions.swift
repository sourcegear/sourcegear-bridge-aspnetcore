// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Hosting
extension Microsoft.AspNetCore.Hosting {
// type: Microsoft.AspNetCore.Hosting.EnvironmentName
public struct EnvironmentName {
    // static field: System.String Development
    /**
    
            A string constant for Development environments.
            

    */
    public static var Development : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_EnvironmentName_get_Development());
            return __return;
        }
    }
    // static field: System.String Staging
    /**
    
            A string constant for Staging environments.
            

    */
    public static var Staging : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_EnvironmentName_get_Staging());
            return __return;
        }
    }
    // static field: System.String Production
    /**
    
            A string constant for Production environments.
            

    */
    public static var Production : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_EnvironmentName_get_Production());
            return __return;
        }
    }
} // EnvironmentName


// type: Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions
public struct HostingAbstractionsWebHostBuilderExtensions {
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder, Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)
    /**
    
            Use the given configuration settings on the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configuration: The  containing settings to be used.
    - Returns: The .

    */
    public static func UseConfiguration(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configuration : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseConfiguration_0__2__IWebHostBuilder_IConfiguration(&__thrown, hostBuilder.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder CaptureStartupErrors(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.CaptureStartupErrors(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)
    /**
    
            Set whether startup errors should be captured in the configuration settings of the web host.
            When enabled, startup exceptions will be caught and an error page will be returned. If disabled, startup exceptions will be propagated.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter captureStartupErrors: true to use startup error page; otherwise false.
    - Returns: The .

    */
    public static func CaptureStartupErrors(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, captureStartupErrors : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__CaptureStartupErrors_0__2__IWebHostBuilder_bool(&__thrown, hostBuilder.get_handle(), Swift.Int32(captureStartupErrors ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)
    /**
    
            Specify the assembly containing the startup type to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter startupAssemblyName: The name of the assembly containing the startup type.
    - Returns: The .

    */
    public static func UseStartup(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, startupAssemblyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseStartup_0__2__IWebHostBuilder_String(&__thrown, hostBuilder.get_handle(), startupAssemblyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder, Microsoft.AspNetCore.Hosting.Server.IServer)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Hosting.Server.IServer)
    /**
    
            Specify the server to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter server: The  to be used.
    - Returns: The .

    */
    public static func UseServer(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, server : aspnetcore.Microsoft.AspNetCore.Hosting.Server.IServer) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseServer_0__2__IWebHostBuilder_IServer(&__thrown, hostBuilder.get_handle(), server.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseEnvironment(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseEnvironment(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)
    /**
    
            Specify the environment to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter environment: The environment to host the application in.
    - Returns: The .

    */
    public static func UseEnvironment(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, environment : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseEnvironment_0__2__IWebHostBuilder_String(&__thrown, hostBuilder.get_handle(), environment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)
    /**
    
            Specify the content root directory to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter contentRoot: Path to root directory of the application.
    - Returns: The .

    */
    public static func UseContentRoot(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, contentRoot : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseContentRoot_0__2__IWebHostBuilder_String(&__thrown, hostBuilder.get_handle(), contentRoot.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseWebRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)
    /**
    
            Specify the webroot directory to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter webRoot: Path to the root directory used by the web server.
    - Returns: The .

    */
    public static func UseWebRoot(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, webRoot : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseWebRoot_0__2__IWebHostBuilder_String(&__thrown, hostBuilder.get_handle(), webRoot.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String[])
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])
    /**
    
            Specify the urls the web host will listen on.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter urls: The urls the hosted application will listen on.
    - Returns: The .

    */
    public static func UseUrls(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, urls : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseUrls_0__2__IWebHostBuilder_StringArray(&__thrown, hostBuilder.get_handle(), urls.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder PreferHostingUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.PreferHostingUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)
    /**
    
            Indicate whether the host should listen on the URLs configured on the 
            instead of those configured on the .
            

    - Parameter hostBuilder: The  to configure.
    - Parameter preferHostingUrls: true to prefer URLs configured on the ; otherwise false.
    - Returns: The .

    */
    public static func PreferHostingUrls(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, preferHostingUrls : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__PreferHostingUrls_0__2__IWebHostBuilder_bool(&__thrown, hostBuilder.get_handle(), Swift.Int32(preferHostingUrls ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder SuppressStatusMessages(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.SuppressStatusMessages(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)
    /**
    
            Specify if startup status messages should be suppressed.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter suppressStatusMessages: true to suppress writing of hosting startup status messages; otherwise false.
    - Returns: The .

    */
    public static func SuppressStatusMessages(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, suppressStatusMessages : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__SuppressStatusMessages_0__2__IWebHostBuilder_bool(&__thrown, hostBuilder.get_handle(), Swift.Int32(suppressStatusMessages ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseShutdownTimeout(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseShutdownTimeout(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.TimeSpan)
    /**
    
            Specify the amount of time to wait for the web host to shutdown.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter timeout: The amount of time to wait for server shutdown.
    - Returns: The .

    */
    public static func UseShutdownTimeout(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, timeout : dotnet.System.TimeSpan) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHostBuilder__UseShutdownTimeout_0__2__IWebHostBuilder_TimeSpan(&__thrown, hostBuilder.get_handle(), timeout.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHost Start(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String[])
// docid: M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.Start(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])
    /**
    
            Start the web host and listen on the specified urls.
            

    - Parameter hostBuilder: The  to start.
    - Parameter urls: The urls the hosted application will listen on.
    - Returns: The .

    */
    public static func Start(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, urls : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingAbstractionsWebHostBuilderExtensions_IWebHost__Start_0__2__IWebHostBuilder_StringArray(&__thrown, hostBuilder.get_handle(), urls.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
} // HostingAbstractionsWebHostBuilderExtensions


// type: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
public struct HostingEnvironmentExtensions {
    // bool IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
// docid: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsDevelopment(hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingEnvironmentExtensions_bool__IsDevelopment_0__1__IHostingEnvironment(&__thrown, hostingEnvironment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
// docid: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsStaging(hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingEnvironmentExtensions_bool__IsStaging_0__1__IHostingEnvironment(&__thrown, hostingEnvironment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
// docid: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
    /**
    
            Checks if the current hosting environment name is .
            

    - Parameter hostingEnvironment: An instance of .
    - Returns: True if the environment name is , otherwise false.

    */
    public static func IsProduction(hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingEnvironmentExtensions_bool__IsProduction_0__1__IHostingEnvironment(&__thrown, hostingEnvironment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)
    /**
    
            Compares the current hosting environment name against the specified value.
            

    - Parameter hostingEnvironment: An instance of .
    - Parameter environmentName: Environment name to validate against.
    - Returns: True if the specified name is the same as the current environment, otherwise false.

    */
    public static func IsEnvironment(hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment, environmentName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingEnvironmentExtensions_bool__IsEnvironment_0__2__IHostingEnvironment_String(&__thrown, hostingEnvironment.get_handle(), environmentName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // HostingEnvironmentExtensions


// type: Microsoft.AspNetCore.Hosting.HostingStartupAttribute
    /**
    
            Marker attribute indicating an implementation of  that will be loaded and executed when building an .
            

    */
public final class HostingStartupAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_HostingStartupAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:Microsoft.AspNetCore.Hosting.HostingStartupAttribute.#ctor(System.Type)
    /**
    
            Constructs the  with the specified type.
            

    - Parameter hostingStartupType: A type that implements .
    */
    public init(hostingStartupType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_HostingStartupAttribute_ctor_0__1__Type(&__thrown, hostingStartupType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_HostingStartupType()
// docid: M:Microsoft.AspNetCore.Hosting.HostingStartupAttribute.get_HostingStartupType
    public func get_HostingStartupType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_HostingStartupAttribute_Type__get_HostingStartupType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    
            The implementation of  that should be loaded when
            starting an application.
            

    */
    public var HostingStartupType : dotnet.System.Type_ {
        get {
            return try! get_HostingStartupType();
        }
    }
} // HostingStartupAttribute


// type: Microsoft.AspNetCore.Hosting.IApplicationLifetime
    /**
    
            Allows consumers to perform cleanup during a graceful shutdown.
            
             This type is obsolete and will be removed in a future version.
             The recommended alternative is Microsoft.Extensions.Hosting.IHostApplicationLifetime.
            
            

    */
open class IApplicationLifetime
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IApplicationLifetime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IApplicationLifetime_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void StopApplication()
// docid: M:Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
    /**
    
            Requests termination of the current application.
            

    */
    open func StopApplication() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IApplicationLifetime_void__StopApplication_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStarted()
// docid: M:Microsoft.AspNetCore.Hosting.IApplicationLifetime.get_ApplicationStarted
    open func get_ApplicationStarted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopping()
// docid: M:Microsoft.AspNetCore.Hosting.IApplicationLifetime.get_ApplicationStopping
    open func get_ApplicationStopping() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStopping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_ApplicationStopped()
// docid: M:Microsoft.AspNetCore.Hosting.IApplicationLifetime.get_ApplicationStopped
    open func get_ApplicationStopped() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IApplicationLifetime_CancellationToken__get_ApplicationStopped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
} // IApplicationLifetime


// type: Microsoft.AspNetCore.Hosting.IHostingEnvironment
    /**
    
            Provides information about the web hosting environment an application is running in.
            
             This type is obsolete and will be removed in a future version.
             The recommended alternative is Microsoft.AspNetCore.Hosting.IWebHostEnvironment.
            
            

    */
open class IHostingEnvironment
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IHostingEnvironment
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IHostingEnvironment_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_EnvironmentName()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_EnvironmentName
    open func get_EnvironmentName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_String__get_EnvironmentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_EnvironmentName(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_EnvironmentName(System.String)
    open func set_EnvironmentName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_EnvironmentName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ApplicationName()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_ApplicationName
    open func get_ApplicationName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_String__get_ApplicationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApplicationName(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_ApplicationName(System.String)
    open func set_ApplicationName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_ApplicationName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_WebRootPath()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_WebRootPath
    open func get_WebRootPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_String__get_WebRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WebRootPath(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_WebRootPath(System.String)
    open func set_WebRootPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_WebRootPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_WebRootFileProvider()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_WebRootFileProvider
    open func get_WebRootFileProvider() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_IFileProvider__get_WebRootFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WebRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_WebRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_WebRootFileProvider(value : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_WebRootFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentRootPath()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_ContentRootPath
    open func get_ContentRootPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_String__get_ContentRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentRootPath(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_ContentRootPath(System.String)
    open func set_ContentRootPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_ContentRootPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_ContentRootFileProvider()
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.get_ContentRootFileProvider
    open func get_ContentRootFileProvider() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IHostingEnvironment_IFileProvider__get_ContentRootFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingEnvironment.set_ContentRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_ContentRootFileProvider(value : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingEnvironment_void__set_ContentRootFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostingEnvironment


// type: Microsoft.AspNetCore.Hosting.IHostingStartup
    /**
    
            Represents platform specific configuration that will be applied to a  when building an .
            

    */
open class IHostingStartup
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IHostingStartup
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IHostingStartup_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.IHostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
    /**
    
            Configure the .
            

    - Parameter builder: 
    */
    open func Configure(builder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IHostingStartup_void__Configure_0__1__IWebHostBuilder(&__thrown, self.get_handle(), builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostingStartup


// type: Microsoft.AspNetCore.Hosting.IStartup
    /**
    
            Provides an interface for initializing services and middleware used by an application.
            

    */
open class IStartup
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IStartup
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IStartup_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IServiceProvider ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Hosting.IStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Register services into the .
            

    - Parameter services: The  to add the services to.
    */
    open func ConfigureServices(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IStartup_IServiceProvider__ConfigureServices_0__1__IServiceCollection(&__thrown, self.get_handle(), services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.IStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Configures the application.
            

    - Parameter app: An  for the app to configure.
    */
    open func Configure(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IStartup_void__Configure_0__1__IApplicationBuilder(&__thrown, self.get_handle(), app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IStartup


// type: Microsoft.AspNetCore.Hosting.IStartupConfigureContainerFilter`1
    /**
    
            This API supports the ASP.NET Core infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
open class IStartupConfigureContainerFilter_1<TContainerBuilder : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IStartupConfigureContainerFilter_1
{
    public typealias TContainerBuilder_IStartupConfigureContainerFilter_1 = TContainerBuilder;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IStartupConfigureContainerFilter_1_get_type_handle(TContainerBuilder.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Action<TContainerBuilder> ConfigureContainer(System.Action<TContainerBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.IStartupConfigureContainerFilter`1.ConfigureContainer(System.Action{`0})
    /**
    
            Extends the provided  and returns a modified  action of the same type.
            

    - Parameter container: The ConfigureContainer method to extend.
    - Returns: A modified .

    */
    open func ConfigureContainer(container : dotnet.System.Action_1<TContainerBuilder>) throws -> dotnet.System.Action_1<TContainerBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IStartupConfigureContainerFilter_1_System_Action_TContainerBuilder___ConfigureContainer_0__1__System_Action_TContainerBuilder_(TContainerBuilder.get_type_handle(), &__thrown, self.get_handle(), container.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureContainer(container : @escaping (TContainerBuilder) throws -> Void) throws -> dotnet.System.Action_1<TContainerBuilder> {
        let del_container = try dotnet.System.Action_1<TContainerBuilder>(container);
        return try ConfigureContainer(container: del_container);
    }
} // IStartupConfigureContainerFilter_1


// type: Microsoft.AspNetCore.Hosting.IStartupConfigureServicesFilter
    /**
    
            This API supports the ASP.NET Core infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
open class IStartupConfigureServicesFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IStartupConfigureServicesFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IStartupConfigureServicesFilter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection> ConfigureServices(System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Hosting.IStartupConfigureServicesFilter.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Extends the provided  and returns a modified  action of the same type.
            

    - Parameter next: The ConfigureServices method to extend.
    - Returns: A modified .

    */
    open func ConfigureServices(next : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IStartupConfigureServicesFilter_System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection___ConfigureServices_0__1__System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureServices(next : @escaping (aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> Void) throws -> dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection> {
        let del_next = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(next);
        return try ConfigureServices(next: del_next);
    }
} // IStartupConfigureServicesFilter


// type: Microsoft.AspNetCore.Hosting.IStartupFilter
    /**
    
            Provides an interface for extending the middleware pipeline with new
            Configure methods. Can be used to add defaults to the beginning or
            end of the pipeline without having to make the app author explicitly
            register middleware.
            

    */
open class IStartupFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IStartupFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IStartupFilter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder> Configure(System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.IStartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Extends the provided  and returns an  of the same type.
            

    - Parameter next: The Configure method to extend.
    - Returns: A modified .

    */
    open func Configure(next : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IStartupFilter_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder___Configure_0__1__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, self.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Action_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func Configure(next : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder> {
        let del_next = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(next);
        return try Configure(next: del_next);
    }
} // IStartupFilter


// type: Microsoft.AspNetCore.Hosting.IWebHost
    /**
    
            Represents a configured web host.
            

    */
open class IWebHost
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IWebHost,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IWebHost_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Start()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHost.Start
    /**
    
            Starts listening on the configured addresses.
            

    */
    open func Start() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IWebHost_void__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHost.StartAsync(System.Threading.CancellationToken)
    /**
    
            Starts listening on the configured addresses.
            

    - Parameter cancellationToken: Used to abort program start.
    - Returns: A  that completes when the  starts.

    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHost_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHost.StopAsync(System.Threading.CancellationToken)
    /**
    
            Attempt to gracefully stop the host.
            

    - Parameter cancellationToken: Used to indicate when stop should no longer be graceful.
    - Returns: A  that completes when the  stops.

    */
    open func StopAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHost_Task__StopAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_ServerFeatures()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHost.get_ServerFeatures
    open func get_ServerFeatures() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHost_IFeatureCollection__get_ServerFeatures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_Services()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHost.get_Services
    open func get_Services() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHost_IServiceProvider__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
} // IWebHost


// type: Microsoft.AspNetCore.Hosting.IWebHostBuilder
    /**
    
            A builder for .
            

    */
open class IWebHostBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IWebHostBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IWebHostBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Hosting.IWebHost Build()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.Build
    /**
    
            Builds an  which hosts a web application.
            

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_IWebHost__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    
            Adds a delegate for configuring the  that will construct an .
            

    - Parameter configureDelegate: The delegate for configuring the  that will be used to construct an .
    - Returns: The .

    */
    open func ConfigureAppConfiguration(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_IWebHostBuilder__ConfigureAppConfiguration_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureAppConfiguration(configureDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Adds a delegate for configuring additional services for the host or web application. This may be called
            multiple times.
            

    - Parameter configureServices: A delegate for configuring the .
    - Returns: The .

    */
    open func ConfigureServices(configureServices : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureServices(configureServices : @escaping (aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.ConfigureServices(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Adds a delegate for configuring additional services for the host or web application. This may be called
            multiple times.
            

    - Parameter configureServices: A delegate for configuring the .
    - Returns: The .

    */
    open func ConfigureServices(configureServices : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureServices(configureServices : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // System.String GetSetting(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.GetSetting(System.String)
    /**
    
            Get the setting value from the configuration.
            

    - Parameter key: The key of the setting to look up.
    - Returns: The value the setting currently contains.

    */
    open func GetSetting(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_String__GetSetting_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseSetting(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostBuilder.UseSetting(System.String,System.String)
    /**
    
            Add or replace a setting in the configuration.
            

    - Parameter key: The key of the setting to add or replace.
    - Parameter value: The value of the setting to add or replace.
    - Returns: The .

    */
    open func UseSetting(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostBuilder_IWebHostBuilder__UseSetting_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
} // IWebHostBuilder


// type: Microsoft.AspNetCore.Hosting.IWebHostEnvironment
    /**
    
            Provides information about the web hosting environment an application is running in.
            

    */
open class IWebHostEnvironment
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_IWebHostEnvironment,
    Microsoft_Extensions_Hosting_IHostEnvironment
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_IWebHostEnvironment_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_WebRootPath()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostEnvironment.get_WebRootPath
    open func get_WebRootPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostEnvironment_String__get_WebRootPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WebRootPath(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostEnvironment.set_WebRootPath(System.String)
    open func set_WebRootPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IWebHostEnvironment_void__set_WebRootPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_WebRootFileProvider()
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostEnvironment.get_WebRootFileProvider
    open func get_WebRootFileProvider() throws -> aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_IWebHostEnvironment_IFileProvider__get_WebRootFileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WebRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Hosting.IWebHostEnvironment.set_WebRootFileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_WebRootFileProvider(value : aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_IWebHostEnvironment_void__set_WebRootFileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IWebHostEnvironment


// type: Microsoft.AspNetCore.Hosting.WebHostBuilderContext
    /**
    
            Context containing the common services on the . Some properties may be null until set by the .
            

    */
open class WebHostBuilderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_WebHostBuilderContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_WebHostBuilderContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Hosting.IWebHostEnvironment get_HostingEnvironment()
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderContext.get_HostingEnvironment
    open func get_HostingEnvironment() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderContext_IWebHostEnvironment__get_HostingEnvironment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HostingEnvironment(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderContext.set_HostingEnvironment(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
    open func set_HostingEnvironment(value : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_WebHostBuilderContext_void__set_HostingEnvironment_0__1__IWebHostEnvironment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.IConfiguration get_Configuration()
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderContext.get_Configuration
    open func get_Configuration() throws -> aspnetcore.Microsoft.Extensions.Configuration.IConfiguration {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderContext_IConfiguration__get_Configuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderContext.set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
    open func set_Configuration(value : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_WebHostBuilderContext_void__set_Configuration_0__1__IConfiguration(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The  containing the merged configuration of the application and the .
            

    */
    open var Configuration : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration {
        get {
            return try! get_Configuration();
        }
        set(v) {
            return try! set_Configuration(value: v);
        }
    }
    /**
    
            The  initialized by the .
            

    */
    open var HostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment {
        get {
            return try! get_HostingEnvironment();
        }
        set(v) {
            return try! set_HostingEnvironment(value: v);
        }
    }
} // WebHostBuilderContext


// type: Microsoft.AspNetCore.Hosting.WebHostDefaults
public struct WebHostDefaults {
    // static field: System.String ApplicationKey
    /**
    
            The configuration key associated with an application name.
            

    */
    public static var ApplicationKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_ApplicationKey());
            return __return;
        }
    }
    // static field: System.String StartupAssemblyKey
    /**
    
            The configuration key associated with the startup assembly.
            

    */
    public static var StartupAssemblyKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_StartupAssemblyKey());
            return __return;
        }
    }
    // static field: System.String HostingStartupAssembliesKey
    /**
    
            The configuration key associated with "hostingStartupAssemblies" configuration.
            

    */
    public static var HostingStartupAssembliesKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_HostingStartupAssembliesKey());
            return __return;
        }
    }
    // static field: System.String HostingStartupExcludeAssembliesKey
    /**
    
            The configuration key associated with the "hostingStartupExcludeAssemblies" configuration.
            

    */
    public static var HostingStartupExcludeAssembliesKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_HostingStartupExcludeAssembliesKey());
            return __return;
        }
    }
    // static field: System.String DetailedErrorsKey
    /**
    
            The configuration key associated with the "DetailedErrors" configuration.
            

    */
    public static var DetailedErrorsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_DetailedErrorsKey());
            return __return;
        }
    }
    // static field: System.String EnvironmentKey
    /**
    
            The configuration key associated with the application's environment setting.
            

    */
    public static var EnvironmentKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_EnvironmentKey());
            return __return;
        }
    }
    // static field: System.String WebRootKey
    /**
    
            The configuration key associated with the "webRoot" configuration.
            

    */
    public static var WebRootKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_WebRootKey());
            return __return;
        }
    }
    // static field: System.String CaptureStartupErrorsKey
    /**
    
            The configuration key associated with the "captureStartupErrors" configuration.
            

    */
    public static var CaptureStartupErrorsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_CaptureStartupErrorsKey());
            return __return;
        }
    }
    // static field: System.String ServerUrlsKey
    /**
    
            The configuration key associated with the "urls" configuration.
            

    */
    public static var ServerUrlsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_ServerUrlsKey());
            return __return;
        }
    }
    // static field: System.String ContentRootKey
    /**
    
            The configuration key associated with the "ContentRoot" configuration.
            

    */
    public static var ContentRootKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_ContentRootKey());
            return __return;
        }
    }
    // static field: System.String PreferHostingUrlsKey
    /**
    
            The configuration key associated with the "PreferHostingUrls" configuration.
            

    */
    public static var PreferHostingUrlsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_PreferHostingUrlsKey());
            return __return;
        }
    }
    // static field: System.String PreventHostingStartupKey
    /**
    
            The configuration key associated with the "PreventHostingStartup" configuration.
            

    */
    public static var PreventHostingStartupKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_PreventHostingStartupKey());
            return __return;
        }
    }
    // static field: System.String SuppressStatusMessagesKey
    /**
    
            The configuration key associated with the "SuppressStatusMessages" configuration.
            

    */
    public static var SuppressStatusMessagesKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_SuppressStatusMessagesKey());
            return __return;
        }
    }
    // static field: System.String ShutdownTimeoutKey
    /**
    
            The configuration key associated with the "ShutdownTimeoutSeconds" configuration.
            

    */
    public static var ShutdownTimeoutKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_ShutdownTimeoutKey());
            return __return;
        }
    }
    // static field: System.String StaticWebAssetsKey
    /**
    
            The configuration key associated with the "StaticWebAssets" configuration.
            

    */
    public static var StaticWebAssetsKey : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Hosting_WebHostDefaults_get_StaticWebAssetsKey());
            return __return;
        }
    }
} // WebHostDefaults


}



public protocol Microsoft_AspNetCore_Hosting_IApplicationLifetime
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IHostingEnvironment
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IHostingStartup
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IStartup
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IStartupConfigureContainerFilter_1
    :
    SGBridgeGetHandle
{
    associatedtype TContainerBuilder_IStartupConfigureContainerFilter_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Hosting_IStartupConfigureServicesFilter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IStartupFilter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IWebHost
    :
    System_IDisposable
{
}

public protocol Microsoft_AspNetCore_Hosting_IWebHostBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_IWebHostEnvironment
    :
    Microsoft_Extensions_Hosting_IHostEnvironment
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder, Microsoft.Extensions.Configuration.IConfiguration)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseConfiguration(configuration : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseConfiguration(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configuration: configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder CaptureStartupErrors(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func CaptureStartupErrors(captureStartupErrors : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.CaptureStartupErrors(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), captureStartupErrors: captureStartupErrors);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseStartup(startupAssemblyName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseStartup(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), startupAssemblyName: startupAssemblyName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder, Microsoft.AspNetCore.Hosting.Server.IServer)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseServer(server : aspnetcore.Microsoft.AspNetCore.Hosting.Server.IServer) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseServer(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), server: server);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseEnvironment(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseEnvironment(environment : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseEnvironment(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), environment: environment);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseContentRoot(contentRoot : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseContentRoot(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), contentRoot: contentRoot);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseWebRoot(webRoot : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseWebRoot(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), webRoot: webRoot);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String[])
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseUrls(urls : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseUrls(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), urls: urls);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder PreferHostingUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func PreferHostingUrls(preferHostingUrls : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.PreferHostingUrls(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), preferHostingUrls: preferHostingUrls);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder SuppressStatusMessages(Microsoft.AspNetCore.Hosting.IWebHostBuilder, bool)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func SuppressStatusMessages(suppressStatusMessages : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.SuppressStatusMessages(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), suppressStatusMessages: suppressStatusMessages);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseShutdownTimeout(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.TimeSpan)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseShutdownTimeout(timeout : dotnet.System.TimeSpan) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseShutdownTimeout(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), timeout: timeout);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHost Start(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.String[])
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func Start(urls : dotnet.System_Arr<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.Start(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), urls: urls);
    }
}

// EXTENSION METHOD bool IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
extension Microsoft_AspNetCore_Hosting_IHostingEnvironment {
    public func IsDevelopment() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(hostingEnvironment: aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
extension Microsoft_AspNetCore_Hosting_IHostingEnvironment {
    public func IsStaging() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(hostingEnvironment: aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
extension Microsoft_AspNetCore_Hosting_IHostingEnvironment {
    public func IsProduction() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(hostingEnvironment: aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD bool IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment, System.String)
extension Microsoft_AspNetCore_Hosting_IHostingEnvironment {
    public func IsEnvironment(environmentName : dotnet.System.String) throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(hostingEnvironment: aspnetcore.Microsoft.AspNetCore.Hosting.IHostingEnvironment(hndl: __copy_handle(self.get_handle())), environmentName: environmentName);
    }
}

