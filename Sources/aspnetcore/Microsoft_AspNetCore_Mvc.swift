// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions
public struct MvcServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds MVC services to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddMvc(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddMvc_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Adds MVC services to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter setupAction: An  to configure the provided .
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddMvc(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddMvc_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvc(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try AddMvc(services: services, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services for controllers to the specified . This method will not
            register services used for views or pages.
            

    - Parameter services: The  to add services to.
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddControllers(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddControllers_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Adds services for controllers to the specified . This method will not
            register services used for views or pages.
            

    - Parameter services: The  to add services to.
    - Parameter configure: An  to configure the provided .
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddControllers(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddControllers_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, services.get_handle(), (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddControllers(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(configure);
        return try AddControllers(services: services, configure: del_configure);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services for controllers to the specified . This method will not
            register services used for pages.
            

    - Parameter services: The  to add services to.
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddControllersWithViews(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddControllersWithViews_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})
    /**
    
            Adds services for controllers to the specified . This method will not
            register services used for pages.
            

    - Parameter services: The  to add services to.
    - Parameter configure: An  to configure the provided .
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddControllersWithViews(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddControllersWithViews_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Mvc_MvcOptions_(&__thrown, services.get_handle(), (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddControllersWithViews(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(configure);
        return try AddControllersWithViews(services: services, configure: del_configure);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services for pages to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddRazorPages(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddRazorPages_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})
    /**
    
            Adds services for pages to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter configure: An  to configure the provided .
    - Returns: An  that can be used to further configure the MVC services.

    */
    public static func AddRazorPages(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcServiceCollectionExtensions_IMvcBuilder__AddRazorPages_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Mvc_RazorPages_RazorPagesOptions_(&__thrown, services.get_handle(), (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRazorPages(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(configure);
        return try AddRazorPages(services: services, configure: del_configure);
    }
} // MvcServiceCollectionExtensions


}



// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddMvc() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddMvc(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddMvc(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddControllers() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddControllers(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddControllers(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddControllersWithViews() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersWithViews(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersWithViews(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddControllersWithViews(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersWithViews(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddControllersWithViews(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersWithViews(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRazorPages() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddRazorPages(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPages(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRazorPages(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddRazorPages(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddRazorPages(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddRazorPages(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

