// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// System
// System.Diagnostics
extension System.Diagnostics {
// type: System.Diagnostics.EntryWrittenEventArgs
open class EntryWrittenEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EntryWrittenEventArgs_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.EntryWrittenEventArgs.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EntryWrittenEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.EventLogEntry)
// docid: M:System.Diagnostics.EntryWrittenEventArgs.#ctor(System.Diagnostics.EventLogEntry)
    public init(entry : Optional<aspnetcore.System.Diagnostics.EventLogEntry>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EntryWrittenEventArgs_ctor_0__1__EventLogEntry(&__thrown, entry?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLogEntry get_Entry()
// docid: M:System.Diagnostics.EntryWrittenEventArgs.get_Entry
    open func get_Entry() throws -> Optional<aspnetcore.System.Diagnostics.EventLogEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EntryWrittenEventArgs_EventLogEntry__get_Entry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.EventLogEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Entry : Optional<aspnetcore.System.Diagnostics.EventLogEntry> {
        get {
            return try! get_Entry();
        }
    }
} // EntryWrittenEventArgs


// type: System.Diagnostics.EntryWrittenEventHandler
public final class EntryWrittenEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EntryWrittenEventHandler_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Diagnostics.EntryWrittenEventArgs)
// docid: M:System.Diagnostics.EntryWrittenEventHandler.Invoke(System.Object,System.Diagnostics.EntryWrittenEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EntryWrittenEventHandler_void__Invoke_0__2__Object_EntryWrittenEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Diagnostics.EntryWrittenEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Diagnostics.EntryWrittenEventHandler.BeginInvoke(System.Object,System.Diagnostics.EntryWrittenEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EntryWrittenEventHandler_IAsyncResult__BeginInvoke_0__4__Object_EntryWrittenEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e?.get_handle() ?? nil, callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Diagnostics.EntryWrittenEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EntryWrittenEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>) throws -> Void) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NullableHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NullableHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try __closure_Invoke((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, (e != nil) ? (aspnetcore.System.Diagnostics.EntryWrittenEventArgs(hndl: e!)) : nil);
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NullableHandle) -> Void
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NullableHandle) -> Void;
            f_interlude(thrown, sender, e);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EntryWrittenEventHandler_create(
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Diagnostics.EntryWrittenEventArgs)
// docid: M:System.Diagnostics.EntryWrittenEventHandler.Invoke(System.Object,System.Diagnostics.EntryWrittenEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EntryWrittenEventHandler_void__Invoke_0__2__Object_EntryWrittenEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EntryWrittenEventHandler


// type: System.Diagnostics.EventInstance
open class EventInstance
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventInstance_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64, System.Int32)
// docid: M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
    public init(instanceId : Swift.Int64, categoryId : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventInstance_ctor_0__2__i64_i32(&__thrown, instanceId, categoryId);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64, System.Int32, System.Diagnostics.EventLogEntryType)
// docid: M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
    public init(instanceId : Swift.Int64, categoryId : Swift.Int32, entryType : aspnetcore.System.Diagnostics.EventLogEntryType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventInstance_ctor_0__3__i64_i32_EventLogEntryType(&__thrown, instanceId, categoryId, entryType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_CategoryId()
// docid: M:System.Diagnostics.EventInstance.get_CategoryId
    open func get_CategoryId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventInstance_i32__get_CategoryId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CategoryId(System.Int32)
// docid: M:System.Diagnostics.EventInstance.set_CategoryId(System.Int32)
    open func set_CategoryId(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventInstance_void__set_CategoryId_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLogEntryType get_EntryType()
// docid: M:System.Diagnostics.EventInstance.get_EntryType
    open func get_EntryType() throws -> aspnetcore.System.Diagnostics.EventLogEntryType {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventInstance_EventLogEntryType__get_EntryType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.EventLogEntryType(val: __return);
        }
    }
    // [IsSpecialName] void set_EntryType(System.Diagnostics.EventLogEntryType)
// docid: M:System.Diagnostics.EventInstance.set_EntryType(System.Diagnostics.EventLogEntryType)
    open func set_EntryType(value : aspnetcore.System.Diagnostics.EventLogEntryType) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventInstance_void__set_EntryType_0__1__EventLogEntryType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_InstanceId()
// docid: M:System.Diagnostics.EventInstance.get_InstanceId
    open func get_InstanceId() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventInstance_i64__get_InstanceId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_InstanceId(System.Int64)
// docid: M:System.Diagnostics.EventInstance.set_InstanceId(System.Int64)
    open func set_InstanceId(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventInstance_void__set_InstanceId_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var CategoryId : Swift.Int32 {
        get {
            return try! get_CategoryId();
        }
        set(v) {
            return try! set_CategoryId(value: v);
        }
    }
    open var EntryType : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
            return try! get_EntryType();
        }
        set(v) {
            return try! set_EntryType(value: v);
        }
    }
    open var InstanceId : Swift.Int64 {
        get {
            return try! get_InstanceId();
        }
        set(v) {
            return try! set_InstanceId(value: v);
        }
    }
} // EventInstance


// type: System.Diagnostics.EventLog
open class EventLog
    :
    dotnet.System.ComponentModel.Component,
    System_ComponentModel_ISupportInitialize
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventLog_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.EventLog.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLog_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.EventLog.#ctor(System.String)
    public init(logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLog_ctor_0__1__String(&__thrown, logName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.#ctor(System.String,System.String)
    public init(logName : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLog_ctor_0__2__String_String(&__thrown, logName?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
    public init(logName : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>, source : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLog_ctor_0__3__String_String_String(&__thrown, logName?.get_handle() ?? nil, machineName?.get_handle() ?? nil, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void BeginInit()
// docid: M:System.Diagnostics.EventLog.BeginInit
    open /* method final */ func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Diagnostics.EventLog.Clear
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Diagnostics.EventLog.Close
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateEventSource(System.Diagnostics.EventSourceCreationData)
// docid: M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
    open class func CreateEventSource(sourceData : Optional<aspnetcore.System.Diagnostics.EventSourceCreationData>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__CreateEventSource_0__1__EventSourceCreationData(&__thrown, sourceData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateEventSource(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
    open class func CreateEventSource(source : Optional<dotnet.System.String>, logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__CreateEventSource_0__2__String_String(&__thrown, source?.get_handle() ?? nil, logName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateEventSource(System.String, System.String, System.String)
// docid: M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
    open class func CreateEventSource(source : Optional<dotnet.System.String>, logName : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__CreateEventSource_0__3__String_String_String(&__thrown, source?.get_handle() ?? nil, logName?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete(System.String)
// docid: M:System.Diagnostics.EventLog.Delete(System.String)
    open class func Delete(logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__Delete_0__1__String(&__thrown, logName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.Delete(System.String,System.String)
    open class func Delete(logName : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__Delete_0__2__String_String(&__thrown, logName?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteEventSource(System.String)
// docid: M:System.Diagnostics.EventLog.DeleteEventSource(System.String)
    open class func DeleteEventSource(source : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__DeleteEventSource_0__1__String(&__thrown, source?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteEventSource(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
    open class func DeleteEventSource(source : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__DeleteEventSource_0__2__String_String(&__thrown, source?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInit()
// docid: M:System.Diagnostics.EventLog.EndInit
    open /* method final */ func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Exists(System.String)
// docid: M:System.Diagnostics.EventLog.Exists(System.String)
    open class func Exists(logName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_bool__Exists_0__1__String(&__thrown, logName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Exists(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.Exists(System.String,System.String)
    open class func Exists(logName : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_bool__Exists_0__2__String_String(&__thrown, logName?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Diagnostics.EventLog[] GetEventLogs()
// docid: M:System.Diagnostics.EventLog.GetEventLogs
    open class func GetEventLogs() throws -> Optional<dotnet.System_Arr<aspnetcore.System.Diagnostics.EventLog>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_EventLogArray__GetEventLogs_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<aspnetcore.System.Diagnostics.EventLog>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.EventLog[] GetEventLogs(System.String)
// docid: M:System.Diagnostics.EventLog.GetEventLogs(System.String)
    open class func GetEventLogs(machineName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System_Arr<aspnetcore.System.Diagnostics.EventLog>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_EventLogArray__GetEventLogs_0__1__String(&__thrown, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<aspnetcore.System.Diagnostics.EventLog>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String LogNameFromSourceName(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
    open class func LogNameFromSourceName(source : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_String__LogNameFromSourceName_0__2__String_String(&__thrown, source?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ModifyOverflowPolicy(System.Diagnostics.OverflowAction, System.Int32)
// docid: M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
    open func ModifyOverflowPolicy(action : aspnetcore.System.Diagnostics.OverflowAction, retentionDays : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__ModifyOverflowPolicy_0__2__OverflowAction_i32(&__thrown, self.get_handle(), action.get_value(), retentionDays);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterDisplayName(System.String, System.Int64)
// docid: M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
    open func RegisterDisplayName(resourceFile : Optional<dotnet.System.String>, resourceId : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__RegisterDisplayName_0__2__String_i64(&__thrown, self.get_handle(), resourceFile?.get_handle() ?? nil, resourceId);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool SourceExists(System.String)
// docid: M:System.Diagnostics.EventLog.SourceExists(System.String)
    open class func SourceExists(source : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_bool__SourceExists_0__1__String(&__thrown, source?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SourceExists(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)
    open class func SourceExists(source : Optional<dotnet.System.String>, machineName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_bool__SourceExists_0__2__String_String(&__thrown, source?.get_handle() ?? nil, machineName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteEntry(System.String)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String)
    open func WriteEntry(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.Diagnostics.EventLogEntryType)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
    open func WriteEntry(message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__2__String_EventLogEntryType(&__thrown, self.get_handle(), message?.get_handle() ?? nil, type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.Diagnostics.EventLogEntryType, System.Int32)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
    open func WriteEntry(message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__3__String_EventLogEntryType_i32(&__thrown, self.get_handle(), message?.get_handle() ?? nil, type.get_value(), eventID);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.Diagnostics.EventLogEntryType, System.Int32, System.Int16)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
    open func WriteEntry(message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32, category : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__4__String_EventLogEntryType_i32_i16(&__thrown, self.get_handle(), message?.get_handle() ?? nil, type.get_value(), eventID, category);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.Diagnostics.EventLogEntryType, System.Int32, System.Int16, System.Byte[])
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
    open func WriteEntry(message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32, category : Swift.Int16, rawData : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__5__String_EventLogEntryType_i32_i16_u8Array(&__thrown, self.get_handle(), message?.get_handle() ?? nil, type.get_value(), eventID, category, (rawData?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.String)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
    open class func WriteEntry(source : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__2__String_String(&__thrown, source?.get_handle() ?? nil, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
    open class func WriteEntry(source : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__3__String_String_EventLogEntryType(&__thrown, source?.get_handle() ?? nil, message?.get_handle() ?? nil, type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, System.Int32)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
    open class func WriteEntry(source : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__4__String_String_EventLogEntryType_i32(&__thrown, source?.get_handle() ?? nil, message?.get_handle() ?? nil, type.get_value(), eventID);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, System.Int32, System.Int16)
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
    open class func WriteEntry(source : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32, category : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__5__String_String_EventLogEntryType_i32_i16(&__thrown, source?.get_handle() ?? nil, message?.get_handle() ?? nil, type.get_value(), eventID, category);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEntry(System.String, System.String, System.Diagnostics.EventLogEntryType, System.Int32, System.Int16, System.Byte[])
// docid: M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
    open class func WriteEntry(source : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, type : aspnetcore.System.Diagnostics.EventLogEntryType, eventID : Swift.Int32, category : Swift.Int16, rawData : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEntry_0__6__String_String_EventLogEntryType_i32_i16_u8Array(&__thrown, source?.get_handle() ?? nil, message?.get_handle() ?? nil, type.get_value(), eventID, category, (rawData?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEvent(System.Diagnostics.EventInstance, System.Byte[], System.Object[])
// docid: M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
    open func WriteEvent(instance : Optional<aspnetcore.System.Diagnostics.EventInstance>, data : Optional<dotnet.System_Arr<Swift.UInt8>>, values : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEvent_0__3__EventInstance_u8Array_ObjectArray(&__thrown, self.get_handle(), instance?.get_handle() ?? nil, (data?.get_handle()), (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEvent(System.Diagnostics.EventInstance, System.Object[])
// docid: M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
    open func WriteEvent(instance : Optional<aspnetcore.System.Diagnostics.EventInstance>, values : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEvent_0__2__EventInstance_ObjectArray(&__thrown, self.get_handle(), instance?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEvent(System.String, System.Diagnostics.EventInstance, System.Byte[], System.Object[])
// docid: M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
    open class func WriteEvent(source : Optional<dotnet.System.String>, instance : Optional<aspnetcore.System.Diagnostics.EventInstance>, data : Optional<dotnet.System_Arr<Swift.UInt8>>, values : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEvent_0__4__String_EventInstance_u8Array_ObjectArray(&__thrown, source?.get_handle() ?? nil, instance?.get_handle() ?? nil, (data?.get_handle()), (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEvent(System.String, System.Diagnostics.EventInstance, System.Object[])
// docid: M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
    open class func WriteEvent(source : Optional<dotnet.System.String>, instance : Optional<aspnetcore.System.Diagnostics.EventInstance>, values : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__WriteEvent_0__3__String_EventInstance_ObjectArray(&__thrown, source?.get_handle() ?? nil, instance?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableRaisingEvents()
// docid: M:System.Diagnostics.EventLog.get_EnableRaisingEvents
    open func get_EnableRaisingEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_bool__get_EnableRaisingEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableRaisingEvents(bool)
// docid: M:System.Diagnostics.EventLog.set_EnableRaisingEvents(System.Boolean)
    open func set_EnableRaisingEvents(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_EnableRaisingEvents_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLogEntryCollection get_Entries()
// docid: M:System.Diagnostics.EventLog.get_Entries
    open func get_Entries() throws -> Optional<aspnetcore.System.Diagnostics.EventLogEntryCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_EventLogEntryCollection__get_Entries_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.EventLogEntryCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Log()
// docid: M:System.Diagnostics.EventLog.get_Log
    open func get_Log() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_String__get_Log_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Log(System.String)
// docid: M:System.Diagnostics.EventLog.set_Log(System.String)
    open func set_Log(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_Log_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogDisplayName()
// docid: M:System.Diagnostics.EventLog.get_LogDisplayName
    open func get_LogDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_String__get_LogDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.EventLog.get_MachineName
    open func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MachineName(System.String)
// docid: M:System.Diagnostics.EventLog.set_MachineName(System.String)
    open func set_MachineName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_MachineName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaximumKilobytes()
// docid: M:System.Diagnostics.EventLog.get_MaximumKilobytes
    open func get_MaximumKilobytes() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_i64__get_MaximumKilobytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumKilobytes(System.Int64)
// docid: M:System.Diagnostics.EventLog.set_MaximumKilobytes(System.Int64)
    open func set_MaximumKilobytes(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_MaximumKilobytes_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinimumRetentionDays()
// docid: M:System.Diagnostics.EventLog.get_MinimumRetentionDays
    open func get_MinimumRetentionDays() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_i32__get_MinimumRetentionDays_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.OverflowAction get_OverflowAction()
// docid: M:System.Diagnostics.EventLog.get_OverflowAction
    open func get_OverflowAction() throws -> aspnetcore.System.Diagnostics.OverflowAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_OverflowAction__get_OverflowAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.OverflowAction(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Diagnostics.EventLog.get_Source
    open func get_Source() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Source(System.String)
// docid: M:System.Diagnostics.EventLog.set_Source(System.String)
    open func set_Source(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_Source_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject()
// docid: M:System.Diagnostics.EventLog.get_SynchronizingObject
    open func get_SynchronizingObject() throws -> Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLog_ISynchronizeInvoke__get_SynchronizingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISynchronizeInvoke(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
// docid: M:System.Diagnostics.EventLog.set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
    open func set_SynchronizingObject(value : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__set_SynchronizingObject_0__1__ISynchronizeInvoke(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_EntryWritten(System.Diagnostics.EntryWrittenEventHandler)
// docid: M:System.Diagnostics.EventLog.add_EntryWritten(System.Diagnostics.EntryWrittenEventHandler)
    open func add_EntryWritten(value : Optional<aspnetcore.System.Diagnostics.EntryWrittenEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__add_EntryWritten_0__1__EntryWrittenEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_EntryWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>) throws -> Void) throws {
        let del_value = try aspnetcore.System.Diagnostics.EntryWrittenEventHandler(value);
        return try add_EntryWritten(value: del_value);
    }
    // [IsSpecialName] void remove_EntryWritten(System.Diagnostics.EntryWrittenEventHandler)
// docid: M:System.Diagnostics.EventLog.remove_EntryWritten(System.Diagnostics.EntryWrittenEventHandler)
    open func remove_EntryWritten(value : Optional<aspnetcore.System.Diagnostics.EntryWrittenEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLog_void__remove_EntryWritten_0__1__EntryWrittenEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_EntryWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.System.Diagnostics.EntryWrittenEventArgs>) throws -> Void) throws {
        let del_value = try aspnetcore.System.Diagnostics.EntryWrittenEventHandler(value);
        return try remove_EntryWritten(value: del_value);
    }
    open var EnableRaisingEvents : Bool {
        get {
            return try! get_EnableRaisingEvents();
        }
        set(v) {
            return try! set_EnableRaisingEvents(value: v);
        }
    }
    open var Entries : Optional<aspnetcore.System.Diagnostics.EventLogEntryCollection> {
        get {
            return try! get_Entries();
        }
    }
    open var Log : Optional<dotnet.System.String> {
        get {
            return try! get_Log();
        }
        set(v) {
            return try! set_Log(value: v!);
        }
    }
    open var LogDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_LogDisplayName();
        }
    }
    open var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
        set(v) {
            return try! set_MachineName(value: v!);
        }
    }
    open var MaximumKilobytes : Swift.Int64 {
        get {
            return try! get_MaximumKilobytes();
        }
        set(v) {
            return try! set_MaximumKilobytes(value: v);
        }
    }
    open var MinimumRetentionDays : Swift.Int32 {
        get {
            return try! get_MinimumRetentionDays();
        }
    }
    open var OverflowAction : aspnetcore.System.Diagnostics.OverflowAction {
        get {
            return try! get_OverflowAction();
        }
    }
    open var Source : Optional<dotnet.System.String> {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v!);
        }
    }
    open var SynchronizingObject : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        get {
            return try! get_SynchronizingObject();
        }
        set(v) {
            return try! set_SynchronizingObject(value: v!);
        }
    }
} // EventLog


// type: System.Diagnostics.EventLogEntry
public final class EventLogEntry
    :
    dotnet.System.ComponentModel.Component,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventLogEntry_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Diagnostics.EventLogEntry)
// docid: M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
    public func Equals(otherEntry : Optional<aspnetcore.System.Diagnostics.EventLogEntry>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_bool__Equals_0__1__EventLogEntry(&__thrown, self.get_handle(), otherEntry?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Category()
// docid: M:System.Diagnostics.EventLogEntry.get_Category
    public func get_Category() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_String__get_Category_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int16 get_CategoryNumber()
// docid: M:System.Diagnostics.EventLogEntry.get_CategoryNumber
    public func get_CategoryNumber() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_i16__get_CategoryNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Byte[] get_Data()
// docid: M:System.Diagnostics.EventLogEntry.get_Data
    public func get_Data() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_u8Array__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLogEntryType get_EntryType()
// docid: M:System.Diagnostics.EventLogEntry.get_EntryType
    public func get_EntryType() throws -> aspnetcore.System.Diagnostics.EventLogEntryType {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_EventLogEntryType__get_EntryType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.EventLogEntryType(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_EventID()
// docid: M:System.Diagnostics.EventLogEntry.get_EventID
    public func get_EventID() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_i32__get_EventID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Index()
// docid: M:System.Diagnostics.EventLogEntry.get_Index
    public func get_Index() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_i32__get_Index_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_InstanceId()
// docid: M:System.Diagnostics.EventLogEntry.get_InstanceId
    public func get_InstanceId() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_i64__get_InstanceId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.EventLogEntry.get_MachineName
    public func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Diagnostics.EventLogEntry.get_Message
    public func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String[] get_ReplacementStrings()
// docid: M:System.Diagnostics.EventLogEntry.get_ReplacementStrings
    public func get_ReplacementStrings() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_StringArray__get_ReplacementStrings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Diagnostics.EventLogEntry.get_Source
    public func get_Source() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.DateTime get_TimeGenerated()
// docid: M:System.Diagnostics.EventLogEntry.get_TimeGenerated
    public func get_TimeGenerated() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_DateTime__get_TimeGenerated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_TimeWritten()
// docid: M:System.Diagnostics.EventLogEntry.get_TimeWritten
    public func get_TimeWritten() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_DateTime__get_TimeWritten_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_UserName()
// docid: M:System.Diagnostics.EventLogEntry.get_UserName
    public func get_UserName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntry_String__get_UserName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var Category : Optional<dotnet.System.String> {
        get {
            return try! get_Category();
        }
    }
    public var CategoryNumber : Swift.Int16 {
        get {
            return try! get_CategoryNumber();
        }
    }
    public var Data : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_Data();
        }
    }
    public var EntryType : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
            return try! get_EntryType();
        }
    }
    public var EventID : Swift.Int32 {
        get {
            return try! get_EventID();
        }
    }
    public var Index : Swift.Int32 {
        get {
            return try! get_Index();
        }
    }
    public var InstanceId : Swift.Int64 {
        get {
            return try! get_InstanceId();
        }
    }
    public var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
    }
    public var Message : Optional<dotnet.System.String> {
        get {
            return try! get_Message();
        }
    }
    public var ReplacementStrings : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_ReplacementStrings();
        }
    }
    public var Source : Optional<dotnet.System.String> {
        get {
            return try! get_Source();
        }
    }
    public var TimeGenerated : dotnet.System.DateTime {
        get {
            return try! get_TimeGenerated();
        }
    }
    public var TimeWritten : dotnet.System.DateTime {
        get {
            return try! get_TimeWritten();
        }
    }
    public var UserName : Optional<dotnet.System.String> {
        get {
            return try! get_UserName();
        }
    }
} // EventLogEntry


// type: System.Diagnostics.EventLogEntryCollection
open class EventLogEntryCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventLogEntryCollection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(System.Diagnostics.EventLogEntry[], System.Int32)
// docid: M:System.Diagnostics.EventLogEntryCollection.CopyTo(System.Diagnostics.EventLogEntry[],System.Int32)
    open func CopyTo(entries : Optional<dotnet.System_Arr<aspnetcore.System.Diagnostics.EventLogEntry>>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogEntryCollection_void__CopyTo_0__2__EventLogEntryArray_i32(&__thrown, self.get_handle(), (entries?.get_handle()), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Diagnostics.EventLogEntryCollection.GetEnumerator
    open /* method final */ func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntryCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Diagnostics.EventLogEntryCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntryCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLogEntry get_Item(System.Int32)
// docid: M:System.Diagnostics.EventLogEntryCollection.get_Item(System.Int32)
    open func get_Item(index : Swift.Int32) throws -> Optional<aspnetcore.System.Diagnostics.EventLogEntry> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogEntryCollection_EventLogEntry__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.EventLogEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // EventLogEntryCollection


// type: System.Diagnostics.EventLogEntryType
public struct EventLogEntryType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventLogEntryType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.EventLogEntryType Error
    public static var Error : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
        let __return = aspnetcore.System.Diagnostics.EventLogEntryType(val: System_Diagnostics_EventLogEntryType_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.EventLogEntryType Warning
    public static var Warning : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
        let __return = aspnetcore.System.Diagnostics.EventLogEntryType(val: System_Diagnostics_EventLogEntryType_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.EventLogEntryType Information
    public static var Information : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
        let __return = aspnetcore.System.Diagnostics.EventLogEntryType(val: System_Diagnostics_EventLogEntryType_get_Information());
            return __return;
        }
    }
    // static field: System.Diagnostics.EventLogEntryType SuccessAudit
    public static var SuccessAudit : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
        let __return = aspnetcore.System.Diagnostics.EventLogEntryType(val: System_Diagnostics_EventLogEntryType_get_SuccessAudit());
            return __return;
        }
    }
    // static field: System.Diagnostics.EventLogEntryType FailureAudit
    public static var FailureAudit : aspnetcore.System.Diagnostics.EventLogEntryType {
        get {
        let __return = aspnetcore.System.Diagnostics.EventLogEntryType(val: System_Diagnostics_EventLogEntryType_get_FailureAudit());
            return __return;
        }
    }
} // EventLogEntryType


// type: System.Diagnostics.EventLogTraceListener
public final class EventLogTraceListener
    :
    dotnet.System.Diagnostics.TraceListener
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventLogTraceListener_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.EventLogTraceListener.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLogTraceListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.EventLog)
// docid: M:System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
    public init(eventLog : Optional<aspnetcore.System.Diagnostics.EventLog>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLogTraceListener_ctor_0__1__EventLog(&__thrown, eventLog?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.EventLogTraceListener.#ctor(System.String)
    public init(source : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventLogTraceListener_ctor_0__1__String(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Diagnostics.EventLogTraceListener.Close
    public override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)
// docid: M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
    public func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : Optional<dotnet.System.String>, severity : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_Object(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source?.get_handle() ?? nil, severity.get_value(), id, data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])
// docid: M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
    public func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : Optional<dotnet.System.String>, severity : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source?.get_handle() ?? nil, severity.get_value(), id, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)
// docid: M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
    public func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : Optional<dotnet.System.String>, severity : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__TraceEvent_0__5__TraceEventCache_String_TraceEventType_i32_String(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source?.get_handle() ?? nil, severity.get_value(), id, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
// docid: M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
    public func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : Optional<dotnet.System.String>, severity : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__TraceEvent_0__6__TraceEventCache_String_TraceEventType_i32_String_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source?.get_handle() ?? nil, severity.get_value(), id, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.EventLogTraceListener.Write(System.String)
    public override func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__Write_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
    public override func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__WriteLine_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.EventLog get_EventLog()
// docid: M:System.Diagnostics.EventLogTraceListener.get_EventLog
    public func get_EventLog() throws -> Optional<aspnetcore.System.Diagnostics.EventLog> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogTraceListener_EventLog__get_EventLog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.EventLog(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EventLog(System.Diagnostics.EventLog)
// docid: M:System.Diagnostics.EventLogTraceListener.set_EventLog(System.Diagnostics.EventLog)
    public func set_EventLog(value : Optional<aspnetcore.System.Diagnostics.EventLog>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__set_EventLog_0__1__EventLog(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.EventLogTraceListener.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventLogTraceListener_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Diagnostics.EventLogTraceListener.set_Name(System.String)
    public override func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventLogTraceListener_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var EventLog : Optional<aspnetcore.System.Diagnostics.EventLog> {
        get {
            return try! get_EventLog();
        }
        set(v) {
            return try! set_EventLog(value: v!);
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.String get_Name()
} // EventLogTraceListener


// type: System.Diagnostics.EventSourceCreationData
open class EventSourceCreationData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventSourceCreationData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
    public init(source : Optional<dotnet.System.String>, logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventSourceCreationData_ctor_0__2__String_String(&__thrown, source?.get_handle() ?? nil, logName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_CategoryCount()
// docid: M:System.Diagnostics.EventSourceCreationData.get_CategoryCount
    open func get_CategoryCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_i32__get_CategoryCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CategoryCount(System.Int32)
// docid: M:System.Diagnostics.EventSourceCreationData.set_CategoryCount(System.Int32)
    open func set_CategoryCount(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_CategoryCount_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CategoryResourceFile()
// docid: M:System.Diagnostics.EventSourceCreationData.get_CategoryResourceFile
    open func get_CategoryResourceFile() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_CategoryResourceFile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CategoryResourceFile(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_CategoryResourceFile(System.String)
    open func set_CategoryResourceFile(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_CategoryResourceFile_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.EventSourceCreationData.get_LogName
    open func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LogName(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_LogName(System.String)
    open func set_LogName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_LogName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.EventSourceCreationData.get_MachineName
    open func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MachineName(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_MachineName(System.String)
    open func set_MachineName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_MachineName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MessageResourceFile()
// docid: M:System.Diagnostics.EventSourceCreationData.get_MessageResourceFile
    open func get_MessageResourceFile() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_MessageResourceFile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MessageResourceFile(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_MessageResourceFile(System.String)
    open func set_MessageResourceFile(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_MessageResourceFile_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ParameterResourceFile()
// docid: M:System.Diagnostics.EventSourceCreationData.get_ParameterResourceFile
    open func get_ParameterResourceFile() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_ParameterResourceFile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ParameterResourceFile(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_ParameterResourceFile(System.String)
    open func set_ParameterResourceFile(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_ParameterResourceFile_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Diagnostics.EventSourceCreationData.get_Source
    open func get_Source() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventSourceCreationData_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Source(System.String)
// docid: M:System.Diagnostics.EventSourceCreationData.set_Source(System.String)
    open func set_Source(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventSourceCreationData_void__set_Source_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var CategoryCount : Swift.Int32 {
        get {
            return try! get_CategoryCount();
        }
        set(v) {
            return try! set_CategoryCount(value: v);
        }
    }
    open var CategoryResourceFile : Optional<dotnet.System.String> {
        get {
            return try! get_CategoryResourceFile();
        }
        set(v) {
            return try! set_CategoryResourceFile(value: v!);
        }
    }
    open var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
        set(v) {
            return try! set_LogName(value: v!);
        }
    }
    open var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
        set(v) {
            return try! set_MachineName(value: v!);
        }
    }
    open var MessageResourceFile : Optional<dotnet.System.String> {
        get {
            return try! get_MessageResourceFile();
        }
        set(v) {
            return try! set_MessageResourceFile(value: v!);
        }
    }
    open var ParameterResourceFile : Optional<dotnet.System.String> {
        get {
            return try! get_ParameterResourceFile();
        }
        set(v) {
            return try! set_ParameterResourceFile(value: v!);
        }
    }
    open var Source : Optional<dotnet.System.String> {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v!);
        }
    }
} // EventSourceCreationData


// type: System.Diagnostics.OverflowAction
public struct OverflowAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_OverflowAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.OverflowAction DoNotOverwrite
    public static var DoNotOverwrite : aspnetcore.System.Diagnostics.OverflowAction {
        get {
        let __return = aspnetcore.System.Diagnostics.OverflowAction(val: System_Diagnostics_OverflowAction_get_DoNotOverwrite());
            return __return;
        }
    }
    // static field: System.Diagnostics.OverflowAction OverwriteAsNeeded
    public static var OverwriteAsNeeded : aspnetcore.System.Diagnostics.OverflowAction {
        get {
        let __return = aspnetcore.System.Diagnostics.OverflowAction(val: System_Diagnostics_OverflowAction_get_OverwriteAsNeeded());
            return __return;
        }
    }
    // static field: System.Diagnostics.OverflowAction OverwriteOlder
    public static var OverwriteOlder : aspnetcore.System.Diagnostics.OverflowAction {
        get {
        let __return = aspnetcore.System.Diagnostics.OverflowAction(val: System_Diagnostics_OverflowAction_get_OverwriteOlder());
            return __return;
        }
    }
} // OverflowAction


}
// System.Diagnostics.Eventing
// System.Diagnostics.Eventing.Reader
extension System.Diagnostics.Eventing.Reader {
// type: System.Diagnostics.Eventing.Reader.EventBookmark
open class EventBookmark
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventBookmark_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EventBookmark


// type: System.Diagnostics.Eventing.Reader.EventKeyword
public final class EventKeyword
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventKeyword_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventKeyword.get_DisplayName
    public func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventKeyword_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Eventing.Reader.EventKeyword.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventKeyword_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int64 get_Value()
// docid: M:System.Diagnostics.Eventing.Reader.EventKeyword.get_Value
    public func get_Value() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventKeyword_i64__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    public var Value : Swift.Int64 {
        get {
            return try! get_Value();
        }
    }
} // EventKeyword


// type: System.Diagnostics.Eventing.Reader.EventLevel
public final class EventLevel
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLevel_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLevel.get_DisplayName
    public func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLevel_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Eventing.Reader.EventLevel.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLevel_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Diagnostics.Eventing.Reader.EventLevel.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLevel_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
} // EventLevel


// type: System.Diagnostics.Eventing.Reader.EventLogConfiguration
open class EventLogConfiguration
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogConfiguration_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)
    public init(logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogConfiguration_ctor_0__1__String(&__thrown, logName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Eventing.Reader.EventLogSession)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)
    public init(logName : Optional<dotnet.System.String>, session : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogConfiguration_ctor_0__2__String_EventLogSession(&__thrown, logName?.get_handle() ?? nil, session?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SaveChanges()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges
    open func SaveChanges() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__SaveChanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsClassicLog()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_IsClassicLog
    open func get_IsClassicLog() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_bool__get_IsClassicLog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEnabled()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_IsEnabled
    open func get_IsEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_bool__get_IsEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsEnabled(bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_IsEnabled(System.Boolean)
    open func set_IsEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_IsEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogFilePath()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_LogFilePath
    open func get_LogFilePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_String__get_LogFilePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LogFilePath(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_LogFilePath(System.String)
    open func set_LogFilePath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_LogFilePath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogIsolation get_LogIsolation()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_LogIsolation
    open func get_LogIsolation() throws -> aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_EventLogIsolation__get_LogIsolation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation(val: __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogMode get_LogMode()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_LogMode
    open func get_LogMode() throws -> aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_EventLogMode__get_LogMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode(val: __return);
        }
    }
    // [IsSpecialName] void set_LogMode(System.Diagnostics.Eventing.Reader.EventLogMode)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_LogMode(System.Diagnostics.Eventing.Reader.EventLogMode)
    open func set_LogMode(value : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_LogMode_0__1__EventLogMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_LogName
    open func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogType get_LogType()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_LogType
    open func get_LogType() throws -> aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_EventLogType__get_LogType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType(val: __return);
        }
    }
    // [IsSpecialName] System.Int64 get_MaximumSizeInBytes()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_MaximumSizeInBytes
    open func get_MaximumSizeInBytes() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_i64__get_MaximumSizeInBytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumSizeInBytes(System.Int64)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_MaximumSizeInBytes(System.Int64)
    open func set_MaximumSizeInBytes(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_MaximumSizeInBytes_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OwningProviderName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_OwningProviderName
    open func get_OwningProviderName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_String__get_OwningProviderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProviderBufferSize()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderBufferSize
    open func get_ProviderBufferSize() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i32___get_ProviderBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_ProviderControlGuid()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderControlGuid
    open func get_ProviderControlGuid() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_System_Guid___get_ProviderControlGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ProviderKeywords()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderKeywords
    open func get_ProviderKeywords() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i64___get_ProviderKeywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ProviderKeywords(System.Nullable<System.Int64>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_ProviderKeywords(System.Nullable{System.Int64})
    open func set_ProviderKeywords(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_ProviderKeywords_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProviderLatency()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderLatency
    open func get_ProviderLatency() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i32___get_ProviderLatency_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProviderLevel()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderLevel
    open func get_ProviderLevel() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i32___get_ProviderLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ProviderLevel(System.Nullable<System.Int32>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_ProviderLevel(System.Nullable{System.Int32})
    open func set_ProviderLevel(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_ProviderLevel_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProviderMaximumNumberOfBuffers()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderMaximumNumberOfBuffers
    open func get_ProviderMaximumNumberOfBuffers() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i32___get_ProviderMaximumNumberOfBuffers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProviderMinimumNumberOfBuffers()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderMinimumNumberOfBuffers
    open func get_ProviderMinimumNumberOfBuffers() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Nullable_i32___get_ProviderMinimumNumberOfBuffers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_ProviderNames()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_ProviderNames
    open func get_ProviderNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_System_Collections_Generic_IEnumerable_string___get_ProviderNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SecurityDescriptor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.get_SecurityDescriptor
    open func get_SecurityDescriptor() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogConfiguration_String__get_SecurityDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SecurityDescriptor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.set_SecurityDescriptor(System.String)
    open func set_SecurityDescriptor(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogConfiguration_void__set_SecurityDescriptor_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var IsClassicLog : Bool {
        get {
            return try! get_IsClassicLog();
        }
    }
    open var IsEnabled : Bool {
        get {
            return try! get_IsEnabled();
        }
        set(v) {
            return try! set_IsEnabled(value: v);
        }
    }
    open var LogFilePath : Optional<dotnet.System.String> {
        get {
            return try! get_LogFilePath();
        }
        set(v) {
            return try! set_LogFilePath(value: v!);
        }
    }
    open var LogIsolation : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation {
        get {
            return try! get_LogIsolation();
        }
    }
    open var LogMode : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode {
        get {
            return try! get_LogMode();
        }
        set(v) {
            return try! set_LogMode(value: v);
        }
    }
    open var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
    }
    open var LogType : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        get {
            return try! get_LogType();
        }
    }
    open var MaximumSizeInBytes : Swift.Int64 {
        get {
            return try! get_MaximumSizeInBytes();
        }
        set(v) {
            return try! set_MaximumSizeInBytes(value: v);
        }
    }
    open var OwningProviderName : Optional<dotnet.System.String> {
        get {
            return try! get_OwningProviderName();
        }
    }
    open var ProviderBufferSize : Optional<Swift.Int32> {
        get {
            return try! get_ProviderBufferSize();
        }
    }
    open var ProviderControlGuid : Optional<dotnet.System.Guid> {
        get {
            return try! get_ProviderControlGuid();
        }
    }
    open var ProviderKeywords : Optional<Swift.Int64> {
        get {
            return try! get_ProviderKeywords();
        }
        set(v) {
            return try! set_ProviderKeywords(value: v!);
        }
    }
    open var ProviderLatency : Optional<Swift.Int32> {
        get {
            return try! get_ProviderLatency();
        }
    }
    open var ProviderLevel : Optional<Swift.Int32> {
        get {
            return try! get_ProviderLevel();
        }
        set(v) {
            return try! set_ProviderLevel(value: v!);
        }
    }
    open var ProviderMaximumNumberOfBuffers : Optional<Swift.Int32> {
        get {
            return try! get_ProviderMaximumNumberOfBuffers();
        }
    }
    open var ProviderMinimumNumberOfBuffers : Optional<Swift.Int32> {
        get {
            return try! get_ProviderMinimumNumberOfBuffers();
        }
    }
    open var ProviderNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_ProviderNames();
        }
    }
    open var SecurityDescriptor : Optional<dotnet.System.String> {
        get {
            return try! get_SecurityDescriptor();
        }
        set(v) {
            return try! set_SecurityDescriptor(value: v!);
        }
    }
} // EventLogConfiguration


// type: System.Diagnostics.Eventing.Reader.EventLogException
open class EventLogException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    open override func GetObjectData(info : Optional<dotnet.System.Runtime.Serialization.SerializationInfo>, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info?.get_handle() ?? nil, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogException.get_Message
    open func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.String get_Message()
} // EventLogException


// type: System.Diagnostics.Eventing.Reader.EventLogInformation
public final class EventLogInformation
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogInformation_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Nullable<System.Int32> get_Attributes()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_Attributes
    public func get_Attributes() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_i32___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> get_CreationTime()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_CreationTime
    public func get_CreationTime() throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_System_DateTime___get_CreationTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_FileSize()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_FileSize
    public func get_FileSize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_i64___get_FileSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_IsLogFull()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_IsLogFull
    public func get_IsLogFull() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_bool___get_IsLogFull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> get_LastAccessTime()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_LastAccessTime
    public func get_LastAccessTime() throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_System_DateTime___get_LastAccessTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> get_LastWriteTime()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_LastWriteTime
    public func get_LastWriteTime() throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_System_DateTime___get_LastWriteTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_OldestRecordNumber()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_OldestRecordNumber
    public func get_OldestRecordNumber() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_i64___get_OldestRecordNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_RecordCount()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInformation.get_RecordCount
    public func get_RecordCount() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogInformation_System_Nullable_i64___get_RecordCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    public var Attributes : Optional<Swift.Int32> {
        get {
            return try! get_Attributes();
        }
    }
    public var CreationTime : Optional<dotnet.System.DateTime> {
        get {
            return try! get_CreationTime();
        }
    }
    public var FileSize : Optional<Swift.Int64> {
        get {
            return try! get_FileSize();
        }
    }
    public var IsLogFull : Optional<Bool> {
        get {
            return try! get_IsLogFull();
        }
    }
    public var LastAccessTime : Optional<dotnet.System.DateTime> {
        get {
            return try! get_LastAccessTime();
        }
    }
    public var LastWriteTime : Optional<dotnet.System.DateTime> {
        get {
            return try! get_LastWriteTime();
        }
    }
    public var OldestRecordNumber : Optional<Swift.Int64> {
        get {
            return try! get_OldestRecordNumber();
        }
    }
    public var RecordCount : Optional<Swift.Int64> {
        get {
            return try! get_RecordCount();
        }
    }
} // EventLogInformation


// type: System.Diagnostics.Eventing.Reader.EventLogInvalidDataException
open class EventLogInvalidDataException
    :
    aspnetcore.System.Diagnostics.Eventing.Reader.EventLogException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogInvalidDataException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogInvalidDataException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogInvalidDataException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogInvalidDataException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventLogInvalidDataException


// type: System.Diagnostics.Eventing.Reader.EventLogIsolation
public struct EventLogIsolation : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogIsolation_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.EventLogIsolation Application
    public static var Application : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation(val: System_Diagnostics_Eventing_Reader_EventLogIsolation_get_Application());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogIsolation System
    public static var System : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation(val: System_Diagnostics_Eventing_Reader_EventLogIsolation_get_System());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogIsolation Custom
    public static var Custom : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogIsolation(val: System_Diagnostics_Eventing_Reader_EventLogIsolation_get_Custom());
            return __return;
        }
    }
} // EventLogIsolation


// type: System.Diagnostics.Eventing.Reader.EventLogLink
public final class EventLogLink
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogLink_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogLink.get_DisplayName
    public func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogLink_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsImported()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogLink.get_IsImported
    public func get_IsImported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogLink_bool__get_IsImported_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogLink.get_LogName
    public func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogLink_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    public var IsImported : Bool {
        get {
            return try! get_IsImported();
        }
    }
    public var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
    }
} // EventLogLink


// type: System.Diagnostics.Eventing.Reader.EventLogMode
public struct EventLogMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.EventLogMode Circular
    public static var Circular : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode(val: System_Diagnostics_Eventing_Reader_EventLogMode_get_Circular());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogMode AutoBackup
    public static var AutoBackup : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode(val: System_Diagnostics_Eventing_Reader_EventLogMode_get_AutoBackup());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogMode Retain
    public static var Retain : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogMode(val: System_Diagnostics_Eventing_Reader_EventLogMode_get_Retain());
            return __return;
        }
    }
} // EventLogMode


// type: System.Diagnostics.Eventing.Reader.EventLogNotFoundException
open class EventLogNotFoundException
    :
    aspnetcore.System.Diagnostics.Eventing.Reader.EventLogException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogNotFoundException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogNotFoundException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogNotFoundException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogNotFoundException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventLogNotFoundException


// type: System.Diagnostics.Eventing.Reader.EventLogPropertySelector
open class EventLogPropertySelector
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogPropertySelector_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})
    public init(propertyQueries : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogPropertySelector_ctor_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, (propertyQueries?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogPropertySelector_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventLogPropertySelector


// type: System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException
open class EventLogProviderDisabledException
    :
    aspnetcore.System.Diagnostics.Eventing.Reader.EventLogException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogProviderDisabledException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogProviderDisabledException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogProviderDisabledException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogProviderDisabledException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventLogProviderDisabledException


// type: System.Diagnostics.Eventing.Reader.EventLogQuery
open class EventLogQuery
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogQuery_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Diagnostics.Eventing.Reader.PathType)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)
    public init(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogQuery_ctor_0__2__String_PathType(&__thrown, path?.get_handle() ?? nil, pathType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Eventing.Reader.PathType, System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)
    public init(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType, query : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogQuery_ctor_0__3__String_PathType_String(&__thrown, path?.get_handle() ?? nil, pathType.get_value(), query?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_ReverseDirection()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.get_ReverseDirection
    open func get_ReverseDirection() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogQuery_bool__get_ReverseDirection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReverseDirection(bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.set_ReverseDirection(System.Boolean)
    open func set_ReverseDirection(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogQuery_void__set_ReverseDirection_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogSession get_Session()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.get_Session
    open func get_Session() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogQuery_EventLogSession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Session(System.Diagnostics.Eventing.Reader.EventLogSession)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.set_Session(System.Diagnostics.Eventing.Reader.EventLogSession)
    open func set_Session(value : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogQuery_void__set_Session_0__1__EventLogSession(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_TolerateQueryErrors()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.get_TolerateQueryErrors
    open func get_TolerateQueryErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogQuery_bool__get_TolerateQueryErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_TolerateQueryErrors(bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogQuery.set_TolerateQueryErrors(System.Boolean)
    open func set_TolerateQueryErrors(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogQuery_void__set_TolerateQueryErrors_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var ReverseDirection : Bool {
        get {
            return try! get_ReverseDirection();
        }
        set(v) {
            return try! set_ReverseDirection(value: v);
        }
    }
    open var Session : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession> {
        get {
            return try! get_Session();
        }
        set(v) {
            return try! set_Session(value: v!);
        }
    }
    open var TolerateQueryErrors : Bool {
        get {
            return try! get_TolerateQueryErrors();
        }
        set(v) {
            return try! set_TolerateQueryErrors(value: v);
        }
    }
} // EventLogQuery


// type: System.Diagnostics.Eventing.Reader.EventLogReader
open class EventLogReader
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogReader_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
    public init(eventQuery : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogQuery>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReader_ctor_0__1__EventLogQuery(&__thrown, eventQuery?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.Eventing.Reader.EventLogQuery, System.Diagnostics.Eventing.Reader.EventBookmark)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
    public init(eventQuery : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogQuery>, bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReader_ctor_0__2__EventLogQuery_EventBookmark(&__thrown, eventQuery?.get_handle() ?? nil, bookmark?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)
    public init(path : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReader_ctor_0__1__String(&__thrown, path?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Eventing.Reader.PathType)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)
    public init(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReader_ctor_0__2__String_PathType(&__thrown, path?.get_handle() ?? nil, pathType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CancelReading()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading
    open func CancelReading() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__CancelReading_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Diagnostics.Eventing.Reader.EventRecord ReadEvent()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent
    open func ReadEvent() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogReader_EventRecord__ReadEvent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Eventing.Reader.EventRecord ReadEvent(System.TimeSpan)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)
    open func ReadEvent(timeout : dotnet.System.TimeSpan) throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogReader_EventRecord__ReadEvent_0__1__TimeSpan(&__thrown, self.get_handle(), timeout.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Seek(System.Diagnostics.Eventing.Reader.EventBookmark)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)
    open func Seek(bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__Seek_0__1__EventBookmark(&__thrown, self.get_handle(), bookmark?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Seek(System.Diagnostics.Eventing.Reader.EventBookmark, System.Int64)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)
    open func Seek(bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark>, offset : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__Seek_0__2__EventBookmark_i64(&__thrown, self.get_handle(), bookmark?.get_handle() ?? nil, offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Seek(System.IO.SeekOrigin, System.Int64)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)
    open func Seek(origin : dotnet.System.IO.SeekOrigin, offset : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__Seek_0__2__SeekOrigin_i64(&__thrown, self.get_handle(), origin.get_value(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BatchSize()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.get_BatchSize
    open func get_BatchSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogReader_i32__get_BatchSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BatchSize(System.Int32)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.set_BatchSize(System.Int32)
    open func set_BatchSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogReader_void__set_BatchSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventLogStatus> get_LogStatus()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReader.get_LogStatus
    open func get_LogStatus() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogStatus>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogReader_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventLogStatus___get_LogStatus_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var BatchSize : Swift.Int32 {
        get {
            return try! get_BatchSize();
        }
        set(v) {
            return try! set_BatchSize(value: v);
        }
    }
    open var LogStatus : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogStatus>> {
        get {
            return try! get_LogStatus();
        }
    }
} // EventLogReader


// type: System.Diagnostics.Eventing.Reader.EventLogReadingException
open class EventLogReadingException
    :
    aspnetcore.System.Diagnostics.Eventing.Reader.EventLogException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogReadingException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReadingException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReadingException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogReadingException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EventLogReadingException


// type: System.Diagnostics.Eventing.Reader.EventLogRecord
open class EventLogRecord
    :
    aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogRecord_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String FormatDescription()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription
    open override func FormatDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__FormatDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatDescription(System.Collections.Generic.IEnumerable<System.Object>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})
    open override func FormatDescription(values : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__FormatDescription_0__1__System_Collections_Generic_IEnumerable_object_(&__thrown, self.get_handle(), (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IList<System.Object> GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)
    open func GetPropertyValues(propertySelector : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogPropertySelector>) throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Collections_Generic_IList_object___GetPropertyValues_0__1__EventLogPropertySelector(&__thrown, self.get_handle(), propertySelector?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToXml()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml
    open override func ToXml() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__ToXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_ActivityId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ActivityId
    open override func get_ActivityId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_System_Guid___get_ActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventBookmark get_Bookmark()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Bookmark
    open override func get_Bookmark() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_EventBookmark__get_Bookmark_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ContainerLog()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ContainerLog
    open func get_ContainerLog() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_ContainerLog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Id()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Id
    open override func get_Id() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_i32__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Keywords()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Keywords
    open override func get_Keywords() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i64___get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_KeywordsDisplayNames()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_KeywordsDisplayNames
    open override func get_KeywordsDisplayNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Collections_Generic_IEnumerable_string___get_KeywordsDisplayNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Byte> get_Level()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Level
    open override func get_Level() throws -> Optional<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_u8___get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Byte_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_LevelDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_LevelDisplayName
    open override func get_LevelDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_LevelDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_LogName
    open override func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_MachineName
    open override func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Int32> get_MatchedQueryIds()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_MatchedQueryIds
    open func get_MatchedQueryIds() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Collections_Generic_IEnumerable_i32___get_MatchedQueryIds_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int16> get_Opcode()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Opcode
    open override func get_Opcode() throws -> Optional<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i16___get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int16_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_OpcodeDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_OpcodeDisplayName
    open override func get_OpcodeDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_OpcodeDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProcessId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ProcessId
    open override func get_ProcessId() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i32___get_ProcessId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventProperty> get_Properties()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Properties
    open override func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventProperty>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventProperty___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_ProviderId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ProviderId
    open override func get_ProviderId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_System_Guid___get_ProviderId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.String get_ProviderName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ProviderName
    open override func get_ProviderName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_ProviderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Qualifiers()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Qualifiers
    open override func get_Qualifiers() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i32___get_Qualifiers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_RecordId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_RecordId
    open override func get_RecordId() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i64___get_RecordId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_RelatedActivityId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_RelatedActivityId
    open override func get_RelatedActivityId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_System_Guid___get_RelatedActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Task()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Task
    open override func get_Task() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i32___get_Task_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_TaskDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_TaskDisplayName
    open override func get_TaskDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_String__get_TaskDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ThreadId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_ThreadId
    open override func get_ThreadId() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_i32___get_ThreadId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> get_TimeCreated()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_TimeCreated
    open override func get_TimeCreated() throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_System_DateTime___get_TimeCreated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_UserId()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_UserId
    open override func get_UserId() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_SecurityIdentifier__get_UserId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Byte> get_Version()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogRecord.get_Version
    open override func get_Version() throws -> Optional<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogRecord_System_Nullable_u8___get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Byte_unbox(__return!) : nil;
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Guid> get_ActivityId()
    open override var Bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark> {
        get {
            return try! get_Bookmark();
        }
    }
    open var ContainerLog : Optional<dotnet.System.String> {
        get {
            return try! get_ContainerLog();
        }
    }
    open override var Id : Swift.Int32 {
        get {
            return try! get_Id();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int64> get_Keywords()
    open override var KeywordsDisplayNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_KeywordsDisplayNames();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Byte> get_Level()
    open override var LevelDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_LevelDisplayName();
        }
    }
    open override var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
    }
    open override var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
    }
    open var MatchedQueryIds : Optional<dotnet.System.Collections.Generic.IEnumerable_1<Swift.Int32>> {
        get {
            return try! get_MatchedQueryIds();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int16> get_Opcode()
    open override var OpcodeDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_OpcodeDisplayName();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int32> get_ProcessId()
    open override var Properties : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventProperty>> {
        get {
            return try! get_Properties();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Guid> get_ProviderId()
    open override var ProviderName : Optional<dotnet.System.String> {
        get {
            return try! get_ProviderName();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int32> get_Qualifiers()
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int64> get_RecordId()
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Guid> get_RelatedActivityId()
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int32> get_Task()
    open override var TaskDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_TaskDisplayName();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Int32> get_ThreadId()
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.DateTime> get_TimeCreated()
    open override var UserId : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_UserId();
        }
    }
// TODO COPE (is_override_notoptional_with_optional) [IsSpecialName] System.Nullable<System.Byte> get_Version()
} // EventLogRecord


// type: System.Diagnostics.Eventing.Reader.EventLogSession
open class EventLogSession
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogSession_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogSession_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)
    public init(server : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogSession_ctor_0__1__String(&__thrown, server?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.Security.SecureString, System.Diagnostics.Eventing.Reader.SessionAuthentication)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)
    public init(server : Optional<dotnet.System.String>, domain : Optional<dotnet.System.String>, user : Optional<dotnet.System.String>, password : Optional<dotnet.System.Security.SecureString>, logOnType : aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogSession_ctor_0__5__String_String_String_SecureString_SessionAuthentication(&__thrown, server?.get_handle() ?? nil, domain?.get_handle() ?? nil, user?.get_handle() ?? nil, password?.get_handle() ?? nil, logOnType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CancelCurrentOperations()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations
    open func CancelCurrentOperations() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__CancelCurrentOperations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearLog(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)
    open func ClearLog(logName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ClearLog_0__1__String(&__thrown, self.get_handle(), logName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearLog(System.String, System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)
    open func ClearLog(logName : Optional<dotnet.System.String>, backupPath : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ClearLog_0__2__String_String(&__thrown, self.get_handle(), logName?.get_handle() ?? nil, backupPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExportLog(System.String, System.Diagnostics.Eventing.Reader.PathType, System.String, System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)
    open func ExportLog(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType, query : Optional<dotnet.System.String>, targetFilePath : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ExportLog_0__4__String_PathType_String_String(&__thrown, self.get_handle(), path?.get_handle() ?? nil, pathType.get_value(), query?.get_handle() ?? nil, targetFilePath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExportLog(System.String, System.Diagnostics.Eventing.Reader.PathType, System.String, System.String, bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)
    open func ExportLog(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType, query : Optional<dotnet.System.String>, targetFilePath : Optional<dotnet.System.String>, tolerateQueryErrors : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ExportLog_0__5__String_PathType_String_String_bool(&__thrown, self.get_handle(), path?.get_handle() ?? nil, pathType.get_value(), query?.get_handle() ?? nil, targetFilePath?.get_handle() ?? nil, Swift.Int32(tolerateQueryErrors ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExportLogAndMessages(System.String, System.Diagnostics.Eventing.Reader.PathType, System.String, System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)
    open func ExportLogAndMessages(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType, query : Optional<dotnet.System.String>, targetFilePath : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ExportLogAndMessages_0__4__String_PathType_String_String(&__thrown, self.get_handle(), path?.get_handle() ?? nil, pathType.get_value(), query?.get_handle() ?? nil, targetFilePath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExportLogAndMessages(System.String, System.Diagnostics.Eventing.Reader.PathType, System.String, System.String, bool, System.Globalization.CultureInfo)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)
    open func ExportLogAndMessages(path : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType, query : Optional<dotnet.System.String>, targetFilePath : Optional<dotnet.System.String>, tolerateQueryErrors : Bool, targetCultureInfo : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogSession_void__ExportLogAndMessages_0__6__String_PathType_String_String_bool_CultureInfo(&__thrown, self.get_handle(), path?.get_handle() ?? nil, pathType.get_value(), query?.get_handle() ?? nil, targetFilePath?.get_handle() ?? nil, Swift.Int32(tolerateQueryErrors ? 1 : 0), targetCultureInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Diagnostics.Eventing.Reader.EventLogInformation GetLogInformation(System.String, System.Diagnostics.Eventing.Reader.PathType)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)
    open func GetLogInformation(logName : Optional<dotnet.System.String>, pathType : aspnetcore.System.Diagnostics.Eventing.Reader.PathType) throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogSession_EventLogInformation__GetLogInformation_0__2__String_PathType(&__thrown, self.get_handle(), logName?.get_handle() ?? nil, pathType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogInformation(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetLogNames()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames
    open func GetLogNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogSession_System_Collections_Generic_IEnumerable_string___GetLogNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetProviderNames()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames
    open func GetProviderNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogSession_System_Collections_Generic_IEnumerable_string___GetProviderNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogSession get_GlobalSession()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogSession.get_GlobalSession
    open class func get_GlobalSession() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogSession_EventLogSession__get_GlobalSession_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public static var GlobalSession : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession> {
        get {
            return try! get_GlobalSession();
        }
    }
} // EventLogSession


// type: System.Diagnostics.Eventing.Reader.EventLogStatus
public final class EventLogStatus
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogStatus_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogStatus.get_LogName
    public func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogStatus_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogStatus.get_StatusCode
    public func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogStatus_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
    }
    public var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
} // EventLogStatus


// type: System.Diagnostics.Eventing.Reader.EventLogType
public struct EventLogType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.EventLogType Administrative
    public static var Administrative : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType(val: System_Diagnostics_Eventing_Reader_EventLogType_get_Administrative());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogType Operational
    public static var Operational : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType(val: System_Diagnostics_Eventing_Reader_EventLogType_get_Operational());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogType Analytical
    public static var Analytical : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType(val: System_Diagnostics_Eventing_Reader_EventLogType_get_Analytical());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.EventLogType Debug
    public static var Debug : aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.EventLogType(val: System_Diagnostics_Eventing_Reader_EventLogType_get_Debug());
            return __return;
        }
    }
} // EventLogType


// type: System.Diagnostics.Eventing.Reader.EventLogWatcher
open class EventLogWatcher
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventLogWatcher_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
    public init(eventQuery : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogQuery>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogWatcher_ctor_0__1__EventLogQuery(&__thrown, eventQuery?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.Eventing.Reader.EventLogQuery, System.Diagnostics.Eventing.Reader.EventBookmark)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
    public init(eventQuery : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogQuery>, bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogWatcher_ctor_0__2__EventLogQuery_EventBookmark(&__thrown, eventQuery?.get_handle() ?? nil, bookmark?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Diagnostics.Eventing.Reader.EventLogQuery, System.Diagnostics.Eventing.Reader.EventBookmark, bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
    public init(eventQuery : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogQuery>, bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark>, readExistingEvents : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogWatcher_ctor_0__3__EventLogQuery_EventBookmark_bool(&__thrown, eventQuery?.get_handle() ?? nil, bookmark?.get_handle() ?? nil, Swift.Int32(readExistingEvents ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
    public init(path : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_EventLogWatcher_ctor_0__1__String(&__thrown, path?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogWatcher_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventLogWatcher_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.set_Enabled(System.Boolean)
    open func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogWatcher_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_EventRecordWritten(System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.add_EventRecordWritten(System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs})
    open func add_EventRecordWritten(value : Optional<dotnet.System.EventHandler_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogWatcher_void__add_EventRecordWritten_0__1__System_EventHandler_System_Diagnostics_Eventing_Reader_EventRecordWrittenEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_EventRecordWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>(value);
        return try add_EventRecordWritten(value: del_value);
    }
    // [IsSpecialName] void remove_EventRecordWritten(System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>)
// docid: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.remove_EventRecordWritten(System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs})
    open func remove_EventRecordWritten(value : Optional<dotnet.System.EventHandler_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventLogWatcher_void__remove_EventRecordWritten_0__1__System_EventHandler_System_Diagnostics_Eventing_Reader_EventRecordWrittenEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_EventRecordWritten(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>(value);
        return try remove_EventRecordWritten(value: del_value);
    }
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
} // EventLogWatcher


// type: System.Diagnostics.Eventing.Reader.EventMetadata
public final class EventMetadata
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventMetadata_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Description
    public func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int64 get_Id()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Id
    public func get_Id() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_i64__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Diagnostics.Eventing.Reader.EventKeyword> get_Keywords()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Keywords
    public func get_Keywords() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventKeyword>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_System_Collections_Generic_IEnumerable_System_Diagnostics_Eventing_Reader_EventKeyword___get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLevel get_Level()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Level
    public func get_Level() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLevel> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_EventLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventLevel(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventLogLink get_LogLink()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_LogLink
    public func get_LogLink() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogLink> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_EventLogLink__get_LogLink_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventLogLink(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventOpcode get_Opcode()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Opcode
    public func get_Opcode() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventOpcode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_EventOpcode__get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventOpcode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventTask get_Task()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Task
    public func get_Task() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventTask> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_EventTask__get_Task_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventTask(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Template
    public func get_Template() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Byte get_Version()
// docid: M:System.Diagnostics.Eventing.Reader.EventMetadata.get_Version
    public func get_Version() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventMetadata_u8__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    public var Id : Swift.Int64 {
        get {
            return try! get_Id();
        }
    }
    public var Keywords : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventKeyword>> {
        get {
            return try! get_Keywords();
        }
    }
    public var Level : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLevel> {
        get {
            return try! get_Level();
        }
    }
    public var LogLink : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogLink> {
        get {
            return try! get_LogLink();
        }
    }
    public var Opcode : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventOpcode> {
        get {
            return try! get_Opcode();
        }
    }
    public var Task : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventTask> {
        get {
            return try! get_Task();
        }
    }
    public var Template : Optional<dotnet.System.String> {
        get {
            return try! get_Template();
        }
    }
    public var Version : Swift.UInt8 {
        get {
            return try! get_Version();
        }
    }
} // EventMetadata


// type: System.Diagnostics.Eventing.Reader.EventOpcode
public final class EventOpcode
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventOpcode_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventOpcode.get_DisplayName
    public func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventOpcode_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Eventing.Reader.EventOpcode.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventOpcode_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Diagnostics.Eventing.Reader.EventOpcode.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventOpcode_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
} // EventOpcode


// type: System.Diagnostics.Eventing.Reader.EventProperty
public final class EventProperty
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventProperty_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Diagnostics.Eventing.Reader.EventProperty.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventProperty_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // EventProperty


// type: System.Diagnostics.Eventing.Reader.EventRecord
open class EventRecord
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventRecord_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_EventRecord_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String FormatDescription()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription
    open func FormatDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__FormatDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatDescription(System.Collections.Generic.IEnumerable<System.Object>)
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})
    open func FormatDescription(values : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__FormatDescription_0__1__System_Collections_Generic_IEnumerable_object_(&__thrown, self.get_handle(), (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToXml()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml
    open func ToXml() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__ToXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_ActivityId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_ActivityId
    open func get_ActivityId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_System_Guid___get_ActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventBookmark get_Bookmark()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Bookmark
    open func get_Bookmark() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_EventBookmark__get_Bookmark_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Id()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Id
    open func get_Id() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_i32__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_Keywords()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Keywords
    open func get_Keywords() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i64___get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_KeywordsDisplayNames()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_KeywordsDisplayNames
    open func get_KeywordsDisplayNames() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Collections_Generic_IEnumerable_string___get_KeywordsDisplayNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Byte> get_Level()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Level
    open func get_Level() throws -> Optional<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_u8___get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Byte_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_LevelDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_LevelDisplayName
    open func get_LevelDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_LevelDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_LogName
    open func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_MachineName
    open func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int16> get_Opcode()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Opcode
    open func get_Opcode() throws -> Optional<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i16___get_Opcode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int16_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_OpcodeDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_OpcodeDisplayName
    open func get_OpcodeDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_OpcodeDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ProcessId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_ProcessId
    open func get_ProcessId() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i32___get_ProcessId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventProperty> get_Properties()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventProperty>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventProperty___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_ProviderId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_ProviderId
    open func get_ProviderId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_System_Guid___get_ProviderId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.String get_ProviderName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_ProviderName
    open func get_ProviderName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_ProviderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Qualifiers()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Qualifiers
    open func get_Qualifiers() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i32___get_Qualifiers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_RecordId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_RecordId
    open func get_RecordId() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i64___get_RecordId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> get_RelatedActivityId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_RelatedActivityId
    open func get_RelatedActivityId() throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_System_Guid___get_RelatedActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Task()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Task
    open func get_Task() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i32___get_Task_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_TaskDisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_TaskDisplayName
    open func get_TaskDisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_String__get_TaskDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ThreadId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_ThreadId
    open func get_ThreadId() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_i32___get_ThreadId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> get_TimeCreated()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_TimeCreated
    open func get_TimeCreated() throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_System_DateTime___get_TimeCreated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_UserId()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_UserId
    open func get_UserId() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_SecurityIdentifier__get_UserId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<System.Byte> get_Version()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecord.get_Version
    open func get_Version() throws -> Optional<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecord_System_Nullable_u8___get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Byte_unbox(__return!) : nil;
        }
    }
    open var ActivityId : Optional<dotnet.System.Guid> {
        get {
            return try! get_ActivityId();
        }
    }
    open var Bookmark : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventBookmark> {
        get {
            return try! get_Bookmark();
        }
    }
    open var Id : Swift.Int32 {
        get {
            return try! get_Id();
        }
    }
    open var Keywords : Optional<Swift.Int64> {
        get {
            return try! get_Keywords();
        }
    }
    open var KeywordsDisplayNames : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_KeywordsDisplayNames();
        }
    }
    open var Level : Optional<Swift.UInt8> {
        get {
            return try! get_Level();
        }
    }
    open var LevelDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_LevelDisplayName();
        }
    }
    open var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
    }
    open var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
    }
    open var Opcode : Optional<Swift.Int16> {
        get {
            return try! get_Opcode();
        }
    }
    open var OpcodeDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_OpcodeDisplayName();
        }
    }
    open var ProcessId : Optional<Swift.Int32> {
        get {
            return try! get_ProcessId();
        }
    }
    open var Properties : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventProperty>> {
        get {
            return try! get_Properties();
        }
    }
    open var ProviderId : Optional<dotnet.System.Guid> {
        get {
            return try! get_ProviderId();
        }
    }
    open var ProviderName : Optional<dotnet.System.String> {
        get {
            return try! get_ProviderName();
        }
    }
    open var Qualifiers : Optional<Swift.Int32> {
        get {
            return try! get_Qualifiers();
        }
    }
    open var RecordId : Optional<Swift.Int64> {
        get {
            return try! get_RecordId();
        }
    }
    open var RelatedActivityId : Optional<dotnet.System.Guid> {
        get {
            return try! get_RelatedActivityId();
        }
    }
    open var Task : Optional<Swift.Int32> {
        get {
            return try! get_Task();
        }
    }
    open var TaskDisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_TaskDisplayName();
        }
    }
    open var ThreadId : Optional<Swift.Int32> {
        get {
            return try! get_ThreadId();
        }
    }
    open var TimeCreated : Optional<dotnet.System.DateTime> {
        get {
            return try! get_TimeCreated();
        }
    }
    open var UserId : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_UserId();
        }
    }
    open var Version : Optional<Swift.UInt8> {
        get {
            return try! get_Version();
        }
    }
} // EventRecord


// type: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
public final class EventRecordWrittenEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventRecordWrittenEventArgs_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Exception get_EventException()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.get_EventException
    public func get_EventException() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecordWrittenEventArgs_Exception__get_EventException_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.Eventing.Reader.EventRecord get_EventRecord()
// docid: M:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.get_EventRecord
    public func get_EventRecord() throws -> Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventRecordWrittenEventArgs_EventRecord__get_EventRecord_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var EventException : Optional<dotnet.System.Exception> {
        get {
            return try! get_EventException();
        }
    }
    public var EventRecord : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventRecord> {
        get {
            return try! get_EventRecord();
        }
    }
} // EventRecordWrittenEventArgs


// type: System.Diagnostics.Eventing.Reader.EventTask
public final class EventTask
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_EventTask_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.EventTask.get_DisplayName
    public func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventTask_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Guid get_EventGuid()
// docid: M:System.Diagnostics.Eventing.Reader.EventTask.get_EventGuid
    public func get_EventGuid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventTask_Guid__get_EventGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Eventing.Reader.EventTask.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventTask_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Diagnostics.Eventing.Reader.EventTask.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_EventTask_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    public var EventGuid : dotnet.System.Guid {
        get {
            return try! get_EventGuid();
        }
    }
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
} // EventTask


// type: System.Diagnostics.Eventing.Reader.PathType
public struct PathType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_PathType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.PathType LogName
    public static var LogName : aspnetcore.System.Diagnostics.Eventing.Reader.PathType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.PathType(val: System_Diagnostics_Eventing_Reader_PathType_get_LogName());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.PathType FilePath
    public static var FilePath : aspnetcore.System.Diagnostics.Eventing.Reader.PathType {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.PathType(val: System_Diagnostics_Eventing_Reader_PathType_get_FilePath());
            return __return;
        }
    }
} // PathType


// type: System.Diagnostics.Eventing.Reader.ProviderMetadata
open class ProviderMetadata
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_ProviderMetadata_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)
    public init(providerName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_ProviderMetadata_ctor_0__1__String(&__thrown, providerName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.Eventing.Reader.EventLogSession, System.Globalization.CultureInfo)
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)
    public init(providerName : Optional<dotnet.System.String>, session : Optional<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogSession>, targetCultureInfo : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Eventing_Reader_ProviderMetadata_ctor_0__3__String_EventLogSession_CultureInfo(&__thrown, providerName?.get_handle() ?? nil, session?.get_handle() ?? nil, targetCultureInfo?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Eventing_Reader_ProviderMetadata_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Diagnostics.Eventing.Reader.EventMetadata> get_Events()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Events
    open func get_Events() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IEnumerable_System_Diagnostics_Eventing_Reader_EventMetadata___get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Uri get_HelpLink()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_HelpLink
    open func get_HelpLink() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_Uri__get_HelpLink_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Guid get_Id()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Id
    open func get_Id() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_Guid__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventKeyword> get_Keywords()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Keywords
    open func get_Keywords() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventKeyword>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventKeyword___get_Keywords_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventLevel> get_Levels()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Levels
    open func get_Levels() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLevel>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventLevel___get_Levels_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventLogLink> get_LogLinks()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_LogLinks
    open func get_LogLinks() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogLink>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventLogLink___get_LogLinks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MessageFilePath()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_MessageFilePath
    open func get_MessageFilePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_String__get_MessageFilePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventOpcode> get_Opcodes()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Opcodes
    open func get_Opcodes() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventOpcode>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventOpcode___get_Opcodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ParameterFilePath()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_ParameterFilePath
    open func get_ParameterFilePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_String__get_ParameterFilePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ResourceFilePath()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_ResourceFilePath
    open func get_ResourceFilePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_String__get_ResourceFilePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Diagnostics.Eventing.Reader.EventTask> get_Tasks()
// docid: M:System.Diagnostics.Eventing.Reader.ProviderMetadata.get_Tasks
    open func get_Tasks() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventTask>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Eventing_Reader_ProviderMetadata_System_Collections_Generic_IList_System_Diagnostics_Eventing_Reader_EventTask___get_Tasks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    open var Events : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventMetadata>> {
        get {
            return try! get_Events();
        }
    }
    open var HelpLink : Optional<dotnet.System.Uri> {
        get {
            return try! get_HelpLink();
        }
    }
    open var Id : dotnet.System.Guid {
        get {
            return try! get_Id();
        }
    }
    open var Keywords : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventKeyword>> {
        get {
            return try! get_Keywords();
        }
    }
    open var Levels : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLevel>> {
        get {
            return try! get_Levels();
        }
    }
    open var LogLinks : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventLogLink>> {
        get {
            return try! get_LogLinks();
        }
    }
    open var MessageFilePath : Optional<dotnet.System.String> {
        get {
            return try! get_MessageFilePath();
        }
    }
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    open var Opcodes : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventOpcode>> {
        get {
            return try! get_Opcodes();
        }
    }
    open var ParameterFilePath : Optional<dotnet.System.String> {
        get {
            return try! get_ParameterFilePath();
        }
    }
    open var ResourceFilePath : Optional<dotnet.System.String> {
        get {
            return try! get_ResourceFilePath();
        }
    }
    open var Tasks : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.System.Diagnostics.Eventing.Reader.EventTask>> {
        get {
            return try! get_Tasks();
        }
    }
} // ProviderMetadata


// type: System.Diagnostics.Eventing.Reader.SessionAuthentication
public struct SessionAuthentication : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_SessionAuthentication_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.SessionAuthentication Default
    public static var Default : aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication(val: System_Diagnostics_Eventing_Reader_SessionAuthentication_get_Default());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.SessionAuthentication Negotiate
    public static var Negotiate : aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication(val: System_Diagnostics_Eventing_Reader_SessionAuthentication_get_Negotiate());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.SessionAuthentication Kerberos
    public static var Kerberos : aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication(val: System_Diagnostics_Eventing_Reader_SessionAuthentication_get_Kerberos());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.SessionAuthentication Ntlm
    public static var Ntlm : aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.SessionAuthentication(val: System_Diagnostics_Eventing_Reader_SessionAuthentication_get_Ntlm());
            return __return;
        }
    }
} // SessionAuthentication


// type: System.Diagnostics.Eventing.Reader.StandardEventKeywords
public struct StandardEventKeywords : SGBridgeGenericValue {
    let v : Swift.Int64;
    public init(val: Swift.Int64) { self.v = val; }
    public func get_value() -> Swift.Int64 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int64(gval); }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords None
    public static var None : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords ResponseTime
    public static var ResponseTime : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_ResponseTime());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords WdiContext
    public static var WdiContext : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_WdiContext());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords WdiDiagnostic
    public static var WdiDiagnostic : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_WdiDiagnostic());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords Sqm
    public static var Sqm : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_Sqm());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords AuditFailure
    public static var AuditFailure : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_AuditFailure());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords CorrelationHint
    public static var CorrelationHint : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_CorrelationHint());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords AuditSuccess
    public static var AuditSuccess : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_AuditSuccess());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords CorrelationHint2
    public static var CorrelationHint2 : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_CorrelationHint2());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventKeywords EventLogClassic
    public static var EventLogClassic : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventKeywords(val: System_Diagnostics_Eventing_Reader_StandardEventKeywords_get_EventLogClassic());
            return __return;
        }
    }
} // StandardEventKeywords


// type: System.Diagnostics.Eventing.Reader.StandardEventLevel
public struct StandardEventLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_StandardEventLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel LogAlways
    public static var LogAlways : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_LogAlways());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel Critical
    public static var Critical : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_Critical());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel Error
    public static var Error : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel Warning
    public static var Warning : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel Informational
    public static var Informational : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_Informational());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventLevel Verbose
    public static var Verbose : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventLevel(val: System_Diagnostics_Eventing_Reader_StandardEventLevel_get_Verbose());
            return __return;
        }
    }
} // StandardEventLevel


// type: System.Diagnostics.Eventing.Reader.StandardEventOpcode
public struct StandardEventOpcode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Info
    public static var Info : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Info());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Start
    public static var Start : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Start());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Stop
    public static var Stop : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Stop());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode DataCollectionStart
    public static var DataCollectionStart : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_DataCollectionStart());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode DataCollectionStop
    public static var DataCollectionStop : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_DataCollectionStop());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Extension
    public static var Extension : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Extension());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Reply
    public static var Reply : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Reply());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Resume
    public static var Resume : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Resume());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Suspend
    public static var Suspend : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Suspend());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Send
    public static var Send : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Send());
            return __return;
        }
    }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventOpcode Receive
    public static var Receive : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventOpcode(val: System_Diagnostics_Eventing_Reader_StandardEventOpcode_get_Receive());
            return __return;
        }
    }
} // StandardEventOpcode


// type: System.Diagnostics.Eventing.Reader.StandardEventTask
public struct StandardEventTask : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Eventing_Reader_StandardEventTask_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.Eventing.Reader.StandardEventTask None
    public static var None : aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventTask {
        get {
        let __return = aspnetcore.System.Diagnostics.Eventing.Reader.StandardEventTask(val: System_Diagnostics_Eventing_Reader_StandardEventTask_get_None());
            return __return;
        }
    }
} // StandardEventTask


}




