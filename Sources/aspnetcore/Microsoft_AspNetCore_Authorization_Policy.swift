// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authorization
extension Microsoft.AspNetCore.Authorization {
// type: Microsoft.AspNetCore.Authorization.AuthorizationMiddleware
    /**
    
            A middleware that enables authorization capabilities.
            

    */
open class AuthorizationMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_AuthorizationMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter next: The next middleware in the application middleware pipeline.
    - Parameter policyProvider: The .
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, policyProvider : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_AuthorizationMiddleware_ctor_0__2__RequestDelegate_IAuthorizationPolicyProvider(&__thrown, next.get_handle(), policyProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the middleware performing authorization.
            

    - Parameter context: The .
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_AuthorizationMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // AuthorizationMiddleware


// type: Microsoft.AspNetCore.Authorization.IAuthorizationMiddlewareResultHandler
    /**
    
            Allow custom handling of authorization and handling of the authorization response.
            

    */
open class IAuthorizationMiddlewareResultHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_IAuthorizationMiddlewareResultHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_IAuthorizationMiddlewareResultHandler_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult)
// docid: M:Microsoft.AspNetCore.Authorization.IAuthorizationMiddlewareResultHandler.HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult)
    /**
    
            Evaluates the authorization requirement and processes the authorization result.
            

    - Parameter next: 
            The next middleware in the application pipeline. Implementations may not invoke this if the authorization did not succeed.
            
    - Parameter context: The .
    - Parameter policy: The  for the resource.
    - Parameter authorizeResult: The result of authorization.
    */
    open func HandleAsync(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authorizeResult : aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_IAuthorizationMiddlewareResultHandler_Task__HandleAsync_0__4__RequestDelegate_HttpContext_AuthorizationPolicy_PolicyAuthorizationResult(&__thrown, self.get_handle(), next.get_handle(), context.get_handle(), policy.get_handle(), authorizeResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // delegate closure overload
    open func HandleAsync(next : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authorizeResult : aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(next);
        return try await HandleAsync(next: del_next, context: context, policy: policy, authorizeResult: authorizeResult);
    }
} // IAuthorizationMiddlewareResultHandler


}
// Microsoft.AspNetCore.Authorization.Policy
extension Microsoft.AspNetCore.Authorization.Policy {
// type: Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler
    /**
    
            Default implementation for .
            

    */
open class AuthorizationMiddlewareResultHandler
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_IAuthorizationMiddlewareResultHandler
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Policy_AuthorizationMiddlewareResultHandler_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Policy_AuthorizationMiddlewareResultHandler_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult)
    /**
    */
    open /* method final */ func HandleAsync(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authorizeResult : aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_AuthorizationMiddlewareResultHandler_Task__HandleAsync_0__4__RequestDelegate_HttpContext_AuthorizationPolicy_PolicyAuthorizationResult(&__thrown, self.get_handle(), next.get_handle(), context.get_handle(), policy.get_handle(), authorizeResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // delegate closure overload
    open /* method final */ func HandleAsync(next : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authorizeResult : aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(next);
        return try await HandleAsync(next: del_next, context: context, policy: policy, authorizeResult: authorizeResult);
    }
} // AuthorizationMiddlewareResultHandler


// type: Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator
    /**
    
            Base class for authorization handlers that need to be called for a specific requirement type.
            

    */
open class IPolicyEvaluator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Does authentication for  and sets the resulting
             to .  If no schemes are set, this is a no-op.
            

    - Parameter policy: The .
    - Parameter context: The .
    - Returns:  unless all schemes specified by  fail to authenticate.  

    */
    open func AuthenticateAsync(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__2__AuthorizationPolicy_HttpContext(&__thrown, self.get_handle(), policy.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Authentication.AuthenticateResult, Microsoft.AspNetCore.Http.HttpContext, System.Object)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Authentication.AuthenticateResult,Microsoft.AspNetCore.Http.HttpContext,System.Object)
    /**
    
            Attempts authorization for a policy using .
            

    - Parameter policy: The .
    - Parameter authenticationResult: The result of a call to .
    - Parameter context: The .
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Returns: Returns  if authorization succeeds.
            Otherwise returns  if , otherwise
            returns  

    */
    open func AuthorizeAsync(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authenticationResult : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, resource : Optional<dotnet.System.Object>) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult___AuthorizeAsync_0__4__AuthorizationPolicy_AuthenticateResult_HttpContext_Object(&__thrown, self.get_handle(), policy.get_handle(), authenticationResult.get_handle(), context.get_handle(), resource?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // IPolicyEvaluator


// type: Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult
    /**
    
            The result of .
            

    */
open class PolicyAuthorizationResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult Challenge()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Challenge
    /**
    
            Indicates that an unauthenticated user requested access to an endpoint that requires authentication.
             

    - Returns: The .

    */
    open class func Challenge() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_PolicyAuthorizationResult__Challenge_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult Forbid()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbid
    /**
    
            Indiciates that the access to a resource was forbidden.
            

    - Returns: The .

    */
    open class func Forbid() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_PolicyAuthorizationResult__Forbid_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult Forbid(Microsoft.AspNetCore.Authorization.AuthorizationFailure)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbid(Microsoft.AspNetCore.Authorization.AuthorizationFailure)
    /**
    
            Indiciates that the access to a resource was forbidden.
            

    - Parameter authorizationFailure: Specifies the reason the authorization failed.s
    - Returns: The .

    */
    open class func Forbid(authorizationFailure : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure>) throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_PolicyAuthorizationResult__Forbid_0__1__AuthorizationFailure(&__thrown, authorizationFailure?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult Success()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Success
    /**
    
            Indicates a successful authorization.
            

    - Returns: The .

    */
    open class func Success() throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_PolicyAuthorizationResult__Success_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Challenged()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.get_Challenged
    open func get_Challenged() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_bool__get_Challenged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Forbidden()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.get_Forbidden
    open func get_Forbidden() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_bool__get_Forbidden_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Succeeded()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.get_Succeeded
    open func get_Succeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_bool__get_Succeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authorization.AuthorizationFailure get_AuthorizationFailure()
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.get_AuthorizationFailure
    open func get_AuthorizationFailure() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult_AuthorizationFailure__get_AuthorizationFailure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Contains information about why authorization failed.
            

    */
    open var AuthorizationFailure : Optional<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationFailure> {
        get {
            return try! get_AuthorizationFailure();
        }
    }
    /**
    
            If true, means the callee should challenge and try again.
            

    */
    open var Challenged : Bool {
        get {
            return try! get_Challenged();
        }
    }
    /**
    
            Authorization was forbidden.
            

    */
    open var Forbidden : Bool {
        get {
            return try! get_Forbidden();
        }
    }
    /**
    
            Authorization was successful.
            

    */
    open var Succeeded : Bool {
        get {
            return try! get_Succeeded();
        }
    }
} // PolicyAuthorizationResult


// type: Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator
    /**
    
            Default implementation for .
            

    */
open class PolicyEvaluator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authorization_Policy_PolicyEvaluator_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Authorization.IAuthorizationService)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.#ctor(Microsoft.AspNetCore.Authorization.IAuthorizationService)
    /**
    
            Constructor
            

    - Parameter authorization: The authorization service.
    */
    public init(authorization : aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizationService) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authorization_Policy_PolicyEvaluator_ctor_0__1__IAuthorizationService(&__thrown, authorization.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult> AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Does authentication for  and sets the resulting
             to .  If no schemes are set, this is a no-op.
            

    - Parameter policy: The .
    - Parameter context: The .
    - Returns:  unless all schemes specified by  failed to authenticate.  

    */
    open func AuthenticateAsync(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyEvaluator_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticateResult___AuthenticateAsync_0__2__AuthorizationPolicy_HttpContext(&__thrown, self.get_handle(), policy.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult> AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy, Microsoft.AspNetCore.Authentication.AuthenticateResult, Microsoft.AspNetCore.Http.HttpContext, System.Object)
// docid: M:Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Authentication.AuthenticateResult,Microsoft.AspNetCore.Http.HttpContext,System.Object)
    /**
    
            Attempts authorization for a policy using .
            

    - Parameter policy: The .
    - Parameter authenticationResult: The result of a call to .
    - Parameter context: The .
    - Parameter resource: 
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            
    - Returns: Returns  if authorization succeeds.
            Otherwise returns  if , otherwise
            returns  

    */
    open func AuthorizeAsync(policy : aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationPolicy, authenticationResult : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticateResult, context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, resource : Optional<dotnet.System.Object>) async throws -> aspnetcore.Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authorization_Policy_PolicyEvaluator_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authorization_Policy_PolicyAuthorizationResult___AuthorizeAsync_0__4__AuthorizationPolicy_AuthenticateResult_HttpContext_Object(&__thrown, self.get_handle(), policy.get_handle(), authenticationResult.get_handle(), context.get_handle(), resource?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
} // PolicyEvaluator


}


// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions
public struct AuthorizationAppBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthorization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions.UseAuthorization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  to the specified , which enables authorization capabilities.
            
            When authorizing a resource that is routed using endpoint routing, this call must appear between the calls to
            app.UseRouting() and app.UseEndpoints(...) for the middleware to function correctly.
            
            

    - Parameter app: The  to add the middleware to.
    - Returns: A reference to  after the operation has completed.

    */
    public static func UseAuthorization(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthorizationAppBuilderExtensions_IApplicationBuilder__UseAuthorization_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // AuthorizationAppBuilderExtensions


// type: Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions
public struct AuthorizationEndpointConventionBuilderExtensions {
    // TBuilder RequireAuthorization<TBuilder>(TBuilder)
// docid: M:Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization``1(``0)
    /**
    
            Adds the default authorization policy to the endpoint(s).
            

    - Parameter builder: The endpoint convention builder.
    - Returns: The original convention builder parameter.

    */
    public static func RequireAuthorization<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthorizationEndpointConventionBuilderExtensions_UTBuilder__RequireAuthorization_1__1__UTBuilder(UTBuilder.get_type_handle(), &__thrown, builder.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder RequireAuthorization<TBuilder>(TBuilder, System.String[])
// docid: M:Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization``1(``0,System.String[])
    /**
    
            Adds authorization policies with the specified names to the endpoint(s).
            

    - Parameter builder: The endpoint convention builder.
    - Parameter policyNames: A collection of policy names. If empty, the default authorization policy will be used.
    - Returns: The original convention builder parameter.

    */
    public static func RequireAuthorization<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, policyNames : dotnet.System_Arr<dotnet.System.String>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthorizationEndpointConventionBuilderExtensions_UTBuilder__RequireAuthorization_1__2__UTBuilder_StringArray(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), policyNames.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder RequireAuthorization<TBuilder>(TBuilder, Microsoft.AspNetCore.Authorization.IAuthorizeData[])
// docid: M:Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization``1(``0,Microsoft.AspNetCore.Authorization.IAuthorizeData[])
    /**
    
            Adds authorization policies with the specified  to the endpoint(s).
            

    - Parameter builder: The endpoint convention builder.
    - Parameter authorizeData: 
            A collection of . If empty, the default authorization policy will be used.
            
    - Returns: The original convention builder parameter.

    */
    public static func RequireAuthorization<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, authorizeData : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Authorization.IAuthorizeData>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthorizationEndpointConventionBuilderExtensions_UTBuilder__RequireAuthorization_1__2__UTBuilder_IAuthorizeDataArray(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), authorizeData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder AllowAnonymous<TBuilder>(TBuilder)
// docid: M:Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.AllowAnonymous``1(``0)
    /**
    
            Allows anonymous access to the endpoint by adding  to the endpoint metadata. This will bypass
            all authorization checks for the endpoint including the default authorization policy and fallback authorization policy.
            

    - Parameter builder: The endpoint convention builder.
    - Returns: The original convention builder parameter.

    */
    public static func AllowAnonymous<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_AuthorizationEndpointConventionBuilderExtensions_UTBuilder__AllowAnonymous_1__1__UTBuilder(UTBuilder.get_type_handle(), &__thrown, builder.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
} // AuthorizationEndpointConventionBuilderExtensions


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions
public struct PolicyServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationPolicyEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationPolicyEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds the authorization policy evaluator service to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAuthorizationPolicyEvaluator(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PolicyServiceCollectionExtensions_IServiceCollection__AddAuthorizationPolicyEvaluator_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds authorization policy services to the specified .
            

    - Parameter services: The  to add services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAuthorization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PolicyServiceCollectionExtensions_IServiceCollection__AddAuthorization_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})
    /**
    
            Adds authorization policy services to the specified .
            

    - Parameter services: The  to add services to.
    - Parameter configure: An action delegate to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddAuthorization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_PolicyServiceCollectionExtensions_IServiceCollection__AddAuthorization_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Authorization_AuthorizationOptions_(&__thrown, services.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddAuthorization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(configure);
        return try AddAuthorization(services: services, configure: del_configure);
    }
} // PolicyServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Authorization_IAuthorizationMiddlewareResultHandler
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authorization_Policy_IPolicyEvaluator
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthorization(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseAuthorization() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions.UseAuthorization(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD TBuilder RequireAuthorization<TBuilder>(TBuilder)
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder RequireAuthorization<TBuilder>(TBuilder, System.String[])
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder RequireAuthorization<TBuilder>(TBuilder, Microsoft.AspNetCore.Authorization.IAuthorizeData[])
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder AllowAnonymous<TBuilder>(TBuilder)
// TODO COPE extension method on generic param type

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationPolicyEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthorizationPolicyEvaluator() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationPolicyEvaluator(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthorization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddAuthorization(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddAuthorization(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authorization.AuthorizationOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

