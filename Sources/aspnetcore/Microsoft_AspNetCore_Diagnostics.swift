// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions
public struct DeveloperExceptionPageExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Captures synchronous and asynchronous  instances from the pipeline and generates HTML error responses.
            

    - Parameter app: The .
    - Returns: A reference to the  after the operation has completed.

    */
    public static func UseDeveloperExceptionPage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DeveloperExceptionPageExtensions_IApplicationBuilder__UseDeveloperExceptionPage_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions)
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions)
    /**
    
            Captures synchronous and asynchronous  instances from the pipeline and generates HTML error responses.
            

    - Parameter app: The .
    - Parameter options: A  that specifies options for the middleware.
    - Returns: A reference to the  after the operation has completed.

    */
    public static func UseDeveloperExceptionPage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DeveloperExceptionPageExtensions_IApplicationBuilder__UseDeveloperExceptionPage_0__2__IApplicationBuilder_DeveloperExceptionPageOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // DeveloperExceptionPageExtensions


// type: Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions
    /**
    
            Options for the .
            

    */
open class DeveloperExceptionPageOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions.#ctor
    /**
    
            Create an instance with the default options settings.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_SourceCodeLineCount()
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions.get_SourceCodeLineCount
    open func get_SourceCodeLineCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_i32__get_SourceCodeLineCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_SourceCodeLineCount(System.Int32)
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions.set_SourceCodeLineCount(System.Int32)
    open func set_SourceCodeLineCount(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_void__set_SourceCodeLineCount_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_FileProvider()
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions.get_FileProvider
    open func get_FileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_IFileProvider__get_FileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
// docid: M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions.set_FileProvider(Microsoft.Extensions.FileProviders.IFileProvider)
    open func set_FileProvider(value : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions_void__set_FileProvider_0__1__IFileProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Provides files containing source code used to display contextual information of an exception.
            

    */
    open var FileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        get {
            return try! get_FileProvider();
        }
        set(v) {
            return try! set_FileProvider(value: v!);
        }
    }
    /**
    
            Determines how many lines of code to include before and after the line of code
            present in an exception's stack frame. Only applies when symbols are available and
            source code referenced by the exception stack trace is present on the server.
            

    */
    open var SourceCodeLineCount : Swift.Int32 {
        get {
            return try! get_SourceCodeLineCount();
        }
        set(v) {
            return try! set_SourceCodeLineCount(value: v);
        }
    }
} // DeveloperExceptionPageOptions


// type: Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions
public struct ExceptionHandlerExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseExceptionHandler(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerExtensions_IApplicationBuilder__UseExceptionHandler_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Adds a middleware to the pipeline that will catch exceptions, log them, reset the request path, and re-execute the request.
            The request will not be re-executed if the response has already started.
            

    - Parameter app: 
    - Parameter errorHandlingPath: 
    - Returns: 

    */
    public static func UseExceptionHandler(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, errorHandlingPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerExtensions_IApplicationBuilder__UseExceptionHandler_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), errorHandlingPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            

    - Parameter app: 
    - Parameter configure: 
    - Returns: 

    */
    public static func UseExceptionHandler(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerExtensions_IApplicationBuilder__UseExceptionHandler_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseExceptionHandler(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configure);
        return try UseExceptionHandler(app: app, configure: del_configure);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)
    /**
    
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseExceptionHandler(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerExtensions_IApplicationBuilder__UseExceptionHandler_0__2__IApplicationBuilder_ExceptionHandlerOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // ExceptionHandlerExtensions


// type: Microsoft.AspNetCore.Builder.ExceptionHandlerOptions
    /**
    
            Options for configuring the .
            

    */
open class ExceptionHandlerOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_ExceptionHandlingPath()
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.get_ExceptionHandlingPath
    open func get_ExceptionHandlingPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_PathString__get_ExceptionHandlingPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ExceptionHandlingPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.set_ExceptionHandlingPath(Microsoft.AspNetCore.Http.PathString)
    open func set_ExceptionHandlingPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_void__set_ExceptionHandlingPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_ExceptionHandler()
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.get_ExceptionHandler
    open func get_ExceptionHandler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_RequestDelegate__get_ExceptionHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionHandler(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.set_ExceptionHandler(Microsoft.AspNetCore.Http.RequestDelegate)
    open func set_ExceptionHandler(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_void__set_ExceptionHandler_0__1__RequestDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ExceptionHandler(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(value);
        return try set_ExceptionHandler(value: del_value);
    }
    // [IsSpecialName] bool get_AllowStatusCode404Response()
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.get_AllowStatusCode404Response
    open func get_AllowStatusCode404Response() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_bool__get_AllowStatusCode404Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowStatusCode404Response(bool)
// docid: M:Microsoft.AspNetCore.Builder.ExceptionHandlerOptions.set_AllowStatusCode404Response(System.Boolean)
    open func set_AllowStatusCode404Response(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_void__set_AllowStatusCode404Response_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            This value controls whether the  should
            consider a response with a 404 status code to be a valid result of executing the
            . The default value is false and the middleware will
            consider 404 status codes to be an error on the server and will therefore rethrow
            the original exception.
            

    */
    open var AllowStatusCode404Response : Bool {
        get {
            return try! get_AllowStatusCode404Response();
        }
        set(v) {
            return try! set_AllowStatusCode404Response(value: v);
        }
    }
    /**
    
            The  that will handle the exception. If this is not
            explicitly provided, the subsequent middleware pipeline will be used by default.
            

    */
    open var ExceptionHandler : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_ExceptionHandler();
        }
        set(v) {
            return try! set_ExceptionHandler(value: v!);
        }
    }
    /**
    
            The path to the exception handling endpoint. This path will be used when executing
            the .
            

    */
    open var ExceptionHandlingPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_ExceptionHandlingPath();
        }
        set(v) {
            return try! set_ExceptionHandlingPath(value: v);
        }
    }
} // ExceptionHandlerOptions


// type: Microsoft.AspNetCore.Builder.StatusCodePagesExtensions
public struct StatusCodePagesExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.StatusCodePagesOptions)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StatusCodePagesOptions)
    /**
    
            Adds a StatusCodePages middleware with the given options that checks for responses with status codes
            between 400 and 599 that do not have a body.
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePages_0__2__IApplicationBuilder_StatusCodePagesOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a StatusCodePages middleware with a default response handler that checks for responses with status codes
            between 400 and 599 that do not have a body.
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePages_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task})
    /**
    
            Adds a StatusCodePages middleware with the specified handler that checks for responses with status codes
            between 400 and 599 that do not have a body.
            

    - Parameter app: 
    - Parameter handler: 
    - Returns: 

    */
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePages_0__2__IApplicationBuilder_System_Func_Microsoft_AspNetCore_Diagnostics_StatusCodeContext_Task_(&__thrown, app.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_handler = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>(handler);
        return try UseStatusCodePages(app: app, handler: del_handler);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)
    /**
    
            Adds a StatusCodePages middleware with the specified response body to send. This may include a '{0}' placeholder for the status code.
            The middleware checks for responses with status codes between 400 and 599 that do not have a body.
            

    - Parameter app: 
    - Parameter contentType: 
    - Parameter bodyFormat: 
    - Returns: 

    */
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, contentType : dotnet.System.String, bodyFormat : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePages_0__3__IApplicationBuilder_String_String(&__thrown, app.get_handle(), contentType.get_handle(), bodyFormat.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithRedirects(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithRedirects(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Adds a StatusCodePages middleware to the pipeline. Specifies that responses should be handled by redirecting
            with the given location URL template. This may include a '{0}' placeholder for the status code. URLs starting
            with '~' will have PathBase prepended, where any other URL will be used as is.
            

    - Parameter app: 
    - Parameter locationFormat: 
    - Returns: 

    */
    public static func UseStatusCodePagesWithRedirects(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, locationFormat : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePagesWithRedirects_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), locationFormat.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a StatusCodePages middleware to the pipeline with the specified alternate middleware pipeline to execute
            to generate the response body.
            

    - Parameter app: 
    - Parameter configuration: 
    - Returns: 

    */
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePages_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseStatusCodePages(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try UseStatusCodePages(app: app, configuration: del_configuration);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithReExecute(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithReExecute(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)
    /**
    
            Adds a StatusCodePages middleware to the pipeline. Specifies that the response body should be generated by
            re-executing the request pipeline using an alternate path. This path may contain a '{0}' placeholder of the status code.
            

    - Parameter app: 
    - Parameter pathFormat: 
    - Parameter queryFormat: 
    - Returns: 

    */
    public static func UseStatusCodePagesWithReExecute(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathFormat : dotnet.System.String, queryFormat : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_IApplicationBuilder__UseStatusCodePagesWithReExecute_0__3__IApplicationBuilder_String_String(&__thrown, app.get_handle(), pathFormat.get_handle(), queryFormat?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // StatusCodePagesExtensions


// type: Microsoft.AspNetCore.Builder.StatusCodePagesOptions
    /**
    
            Options for .
            

    */
open class StatusCodePagesOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_StatusCodePagesOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesOptions.#ctor
    /**
    
            Creates a default  which produces a plaintext response
            containing the status code and the reason phrase.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_StatusCodePagesOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task> get_HandleAsync()
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesOptions.get_HandleAsync
    open func get_HandleAsync() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_StatusCodePagesOptions_System_Func_Microsoft_AspNetCore_Diagnostics_StatusCodeContext_Task___get_HandleAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HandleAsync(System.Func<Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Builder.StatusCodePagesOptions.set_HandleAsync(System.Func{Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task})
    open func set_HandleAsync(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_StatusCodePagesOptions_void__set_HandleAsync_0__1__System_Func_Microsoft_AspNetCore_Diagnostics_StatusCodeContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_HandleAsync(value : @escaping (aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_HandleAsync(value: del_value);
    }
    /**
    
            The handler that generates the response body for the given . By default this produces a plain text response that includes the status code.
            

    */
    open var HandleAsync : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_HandleAsync();
        }
        set(v) {
            return try! set_HandleAsync(value: v);
        }
    }
} // StatusCodePagesOptions


// type: Microsoft.AspNetCore.Builder.WelcomePageExtensions
public struct WelcomePageExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.WelcomePageOptions)
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WelcomePageOptions)
    /**
    
            Adds the WelcomePageMiddleware to the pipeline with the given options.
            

    - Parameter app: 
    - Parameter options: 
    - Returns: 

    */
    public static func UseWelcomePage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WelcomePageExtensions_IApplicationBuilder__UseWelcomePage_0__2__IApplicationBuilder_WelcomePageOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Adds the WelcomePageMiddleware to the pipeline with the given path.
            

    - Parameter app: 
    - Parameter path: 
    - Returns: 

    */
    public static func UseWelcomePage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WelcomePageExtensions_IApplicationBuilder__UseWelcomePage_0__2__IApplicationBuilder_PathString(&__thrown, app.get_handle(), path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
    /**
    
            Adds the WelcomePageMiddleware to the pipeline with the given path.
            

    - Parameter app: 
    - Parameter path: 
    - Returns: 

    */
    public static func UseWelcomePage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, path : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WelcomePageExtensions_IApplicationBuilder__UseWelcomePage_0__2__IApplicationBuilder_String(&__thrown, app.get_handle(), path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the WelcomePageMiddleware to the pipeline.
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseWelcomePage(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WelcomePageExtensions_IApplicationBuilder__UseWelcomePage_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // WelcomePageExtensions


// type: Microsoft.AspNetCore.Builder.WelcomePageOptions
    /**
    
            Options for the WelcomePageMiddleware.
            

    */
open class WelcomePageOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_WelcomePageOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_WelcomePageOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_Path()
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageOptions.get_Path
    open func get_Path() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_WelcomePageOptions_PathString__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.WelcomePageOptions.set_Path(Microsoft.AspNetCore.Http.PathString)
    open func set_Path(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_WelcomePageOptions_void__set_Path_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Specifies which requests paths will be responded to. Exact matches only. Leave null to handle all requests.
            

    */
    open var Path : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
} // WelcomePageOptions


}

// Microsoft.AspNetCore.Diagnostics
extension Microsoft.AspNetCore.Diagnostics {
// type: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware
    /**
    
            Captures synchronous and asynchronous exceptions from the pipeline and generates error responses.
            

    */
open class DeveloperExceptionPageMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_DeveloperExceptionPageMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions>, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, System.Diagnostics.DiagnosticSource, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Diagnostics.IDeveloperPageExceptionFilter>)
// docid: M:Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions},Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Diagnostics.DiagnosticSource,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Diagnostics.IDeveloperPageExceptionFilter})
    /**
    
            Initializes a new instance of the  class
            

    - Parameter next: 
    - Parameter options: 
    - Parameter loggerFactory: 
    - Parameter hostingEnvironment: 
    - Parameter diagnosticSource: 
    - Parameter filters: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, diagnosticSource : dotnet.System.Diagnostics.DiagnosticSource, filters : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Diagnostics.IDeveloperPageExceptionFilter>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_DeveloperExceptionPageMiddleware_ctor_0__6__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_DeveloperExceptionPageOptions__ILoggerFactory_IWebHostEnvironment_DiagnosticSource_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Diagnostics_IDeveloperPageExceptionFilter_(&__thrown, next.get_handle(), options.get_handle(), loggerFactory.get_handle(), hostingEnvironment.get_handle(), diagnosticSource.get_handle(), filters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Process an individual request.
            

    - Parameter context: 
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_DeveloperExceptionPageMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // DeveloperExceptionPageMiddleware


// type: Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature
    /**
    
            A feature containing the path and error of the original request for examination by an exception handler.
            

    */
open class ExceptionHandlerFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Diagnostics_IExceptionHandlerPathFeature,
    Microsoft_AspNetCore_Diagnostics_IExceptionHandlerFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Exception get_Error()
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.get_Error
    open /* method final */ func get_Error() throws -> dotnet.System.Exception {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_Exception__get_Error_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Exception(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Error(System.Exception)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.set_Error(System.Exception)
    open func set_Error(value : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_void__set_Error_0__1__Exception(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.get_Path
    open /* method final */ func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.set_Path(System.String)
    open func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Endpoint get_Endpoint()
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.get_Endpoint
    open /* method final */ func get_Endpoint() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_Endpoint__get_Endpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
    open func set_Endpoint(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_void__set_Endpoint_0__1__Endpoint(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.get_RouteValues
    open /* method final */ func get_RouteValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerFeature.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_ExceptionHandlerFeature_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Endpoint : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoint();
        }
        set(v) {
            return try! set_Endpoint(value: v!);
        }
    }
    /**
    */
    public var Error : dotnet.System.Exception {
        get {
            return try! get_Error();
        }
        set(v) {
            return try! set_Error(value: v);
        }
    }
    /**
    */
    public var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    */
    public var RouteValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
} // ExceptionHandlerFeature


// type: Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware
    /**
    
            A middleware for handling exceptions in the application.
            

    */
open class ExceptionHandlerMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_ExceptionHandlerMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>, System.Diagnostics.DiagnosticListener)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.ExceptionHandlerOptions},System.Diagnostics.DiagnosticListener)
    /**
    
            Creates a new 
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter loggerFactory: The  used for logging.
    - Parameter options: The options for configuring the middleware.
    - Parameter diagnosticListener: The  used for writing diagnostic messages.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerMiddleware_ctor_0__4__RequestDelegate_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_ExceptionHandlerOptions__DiagnosticListener(&__thrown, next.get_handle(), loggerFactory.get_handle(), options.get_handle(), diagnosticListener.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_ExceptionHandlerMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // ExceptionHandlerMiddleware


// type: Microsoft.AspNetCore.Diagnostics.StatusCodeContext
    /**
    
            Contains information used by the handler of the .
            

    */
open class StatusCodeContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_StatusCodeContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Builder.StatusCodePagesOptions, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Builder.StatusCodePagesOptions,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Creates a new .
            

    - Parameter context: The .
    - Parameter options: The configured .
    - Parameter next: The  representing the next middleware in the pipeline.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, options : aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions, next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_StatusCodeContext_ctor_0__3__HttpContext_StatusCodePagesOptions_RequestDelegate(&__thrown, context.get_handle(), options.get_handle(), next.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.StatusCodePagesOptions get_Options()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeContext.get_Options
    open func get_Options() throws -> aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeContext_StatusCodePagesOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_Next()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeContext.get_Next
    open func get_Next() throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeContext_RequestDelegate__get_Next_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets the  representing the next middleware in the pipeline.
            

    */
    open var Next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        get {
            return try! get_Next();
        }
    }
    /**
    
            Gets the configured .
            

    */
    open var Options : aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions {
        get {
            return try! get_Options();
        }
    }
} // StatusCodeContext


// type: Microsoft.AspNetCore.Diagnostics.StatusCodePagesFeature
    /**
    
            Represents the Status code pages feature.
            

    */
open class StatusCodePagesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Diagnostics_IStatusCodePagesFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_StatusCodePagesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodePagesFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_StatusCodePagesFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodePagesFeature.get_Enabled
    open /* method final */ func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodePagesFeature_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodePagesFeature.set_Enabled(System.Boolean)
    open /* method final */ func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_StatusCodePagesFeature_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Enables or disables status code pages. The default value is true.
            Set this to false to prevent the 
            from creating a response body while handling the error status code.
            

    */
    public var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
} // StatusCodePagesFeature


// type: Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware
    /**
    
            A middleware for generating the response body of error status codes with no body.
            

    */
open class StatusCodePagesMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_StatusCodePagesMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.StatusCodePagesOptions>)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.StatusCodePagesOptions})
    /**
    
            Creates a new 
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter options: The options for configuring the middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_StatusCodePagesMiddleware_ctor_0__2__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_StatusCodePagesOptions_(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodePagesMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // StatusCodePagesMiddleware


// type: Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature
    /**
    Default implementation for .

    */
open class StatusCodeReExecuteFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Diagnostics_IStatusCodeReExecuteFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_OriginalPath()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.get_OriginalPath
    open /* method final */ func get_OriginalPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_String__get_OriginalPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPath(System.String)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.set_OriginalPath(System.String)
    open /* method final */ func set_OriginalPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_void__set_OriginalPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalPathBase()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.get_OriginalPathBase
    open /* method final */ func get_OriginalPathBase() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_String__get_OriginalPathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalPathBase(System.String)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.set_OriginalPathBase(System.String)
    open /* method final */ func set_OriginalPathBase(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_void__set_OriginalPathBase_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalQueryString()
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.get_OriginalQueryString
    open /* method final */ func get_OriginalQueryString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_String__get_OriginalQueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OriginalQueryString(System.String)
// docid: M:Microsoft.AspNetCore.Diagnostics.StatusCodeReExecuteFeature.set_OriginalQueryString(System.String)
    open /* method final */ func set_OriginalQueryString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Diagnostics_StatusCodeReExecuteFeature_void__set_OriginalQueryString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var OriginalPath : dotnet.System.String {
        get {
            return try! get_OriginalPath();
        }
        set(v) {
            return try! set_OriginalPath(value: v);
        }
    }
    /**
    */
    public var OriginalPathBase : dotnet.System.String {
        get {
            return try! get_OriginalPathBase();
        }
        set(v) {
            return try! set_OriginalPathBase(value: v);
        }
    }
    /**
    */
    public var OriginalQueryString : Optional<dotnet.System.String> {
        get {
            return try! get_OriginalQueryString();
        }
        set(v) {
            return try! set_OriginalQueryString(value: v!);
        }
    }
} // StatusCodeReExecuteFeature


// type: Microsoft.AspNetCore.Diagnostics.WelcomePageMiddleware
    /**
    
            This middleware provides a default web page for new applications.
            

    */
open class WelcomePageMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Diagnostics_WelcomePageMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.WelcomePageOptions>)
// docid: M:Microsoft.AspNetCore.Diagnostics.WelcomePageMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.WelcomePageOptions})
    /**
    
            Creates a default web page for new applications.
            

    - Parameter next: 
    - Parameter options: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Diagnostics_WelcomePageMiddleware_ctor_0__2__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_WelcomePageOptions_(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Diagnostics.WelcomePageMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Process an individual request.
            

    - Parameter context: The .
    - Returns: 

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Diagnostics_WelcomePageMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // WelcomePageMiddleware


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions
public struct ExceptionHandlerServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddExceptionHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.ExceptionHandlerOptions})
    /**
    
            Adds services and options for the exception handler middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddExceptionHandler(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ExceptionHandlerServiceCollectionExtensions_IServiceCollection__AddExceptionHandler_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddExceptionHandler(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>(configureOptions);
        return try AddExceptionHandler(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddExceptionHandler<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,TService>)
// docid: M:Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,``0})
    /**
    
            Adds services and options for the exception handler middleware.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddExceptionHandler<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_ExceptionHandlerServiceCollectionExtensions_IServiceCollection__AddExceptionHandler_1__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_ExceptionHandlerOptions_UTService_(UTService.get_type_handle(), &__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddExceptionHandler<UTService : SGBridgeGenericValue>(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,UTService>(configureOptions);
        return try AddExceptionHandler(services: services, configureOptions: del_configureOptions);
    }
} // ExceptionHandlerServiceCollectionExtensions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDeveloperExceptionPage() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseDeveloperExceptionPage(options : aspnetcore.Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseExceptionHandler() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseExceptionHandler(errorHandlingPath : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), errorHandlingPath: errorHandlingPath);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseExceptionHandler(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func UseExceptionHandler(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configure);
        return try aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseExceptionHandler(options : aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.StatusCodePagesOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePages(options : aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePages() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePages(handler : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), handler: handler);
    }
    // delegate closure overload
    public func UseStatusCodePages(handler : @escaping (aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_handler = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Diagnostics.StatusCodeContext,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePages(contentType : dotnet.System.String, bodyFormat : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), contentType: contentType, bodyFormat: bodyFormat);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithRedirects(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePagesWithRedirects(locationFormat : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithRedirects(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), locationFormat: locationFormat);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePages(configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configuration: configuration);
    }
    // delegate closure overload
    public func UseStatusCodePages(configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configuration: del_configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithReExecute(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseStatusCodePagesWithReExecute(pathFormat : dotnet.System.String, queryFormat : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithReExecute(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathFormat: pathFormat, queryFormat: queryFormat);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.WelcomePageOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWelcomePage(options : aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWelcomePage(path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), path: path);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWelcomePage(path : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), path: path);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWelcomePage() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddExceptionHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddExceptionHandler(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddExceptionHandler(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddExceptionHandler<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,TService>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddExceptionHandler<UTService : SGBridgeGenericValue>(configureOptions : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,UTService>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddExceptionHandler<UTService : SGBridgeGenericValue>(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions, UTService) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Builder.ExceptionHandlerOptions,UTService>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.ExceptionHandlerServiceCollectionExtensions.AddExceptionHandler(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

