// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.OptionsBuilderDataAnnotationsExtensions
public struct OptionsBuilderDataAnnotationsExtensions {
    // Microsoft.Extensions.Options.OptionsBuilder<TOptions> ValidateDataAnnotations<TOptions>(Microsoft.Extensions.Options.OptionsBuilder<TOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.OptionsBuilderDataAnnotationsExtensions.ValidateDataAnnotations``1(Microsoft.Extensions.Options.OptionsBuilder{``0})
    /**
    
            Register this options instance for validation of its DataAnnotations.
            

    - Parameter optionsBuilder: The options builder to add the services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func ValidateDataAnnotations<UTOptions : SGBridgeGenericValue>(optionsBuilder : Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<UTOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<UTOptions>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_OptionsBuilderDataAnnotationsExtensions_Microsoft_Extensions_Options_OptionsBuilder_UTOptions___ValidateDataAnnotations_1__1__Microsoft_Extensions_Options_OptionsBuilder_UTOptions_(UTOptions.get_type_handle(), &__thrown, (optionsBuilder?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // OptionsBuilderDataAnnotationsExtensions


}

// Microsoft.Extensions.Options
extension Microsoft.Extensions.Options {
// type: Microsoft.Extensions.Options.DataAnnotationValidateOptions`1
    /**
    
            Implementation of  that uses DataAnnotation's  for validation.
            

    */
open class DataAnnotationValidateOptions_1<TOptions : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Options_DataAnnotationValidateOptions_1_get_type_handle(TOptions.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Options.DataAnnotationValidateOptions`1.#ctor(System.String)
    /**
    
            Constructor.
            

    - Parameter name: The name of the option.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Options_DataAnnotationValidateOptions_1_ctor_0__1__String(TOptions.get_type_handle(), &__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Options.ValidateOptionsResult Validate(System.String, TOptions)
// docid: M:Microsoft.Extensions.Options.DataAnnotationValidateOptions`1.Validate(System.String,`0)
    /**
    
            Validates a specific named options instance (or all when  is null).
            

    - Parameter name: The name of the options instance being validated.
    - Parameter options: The options instance.
    - Returns: The  result.

    */
    open /* method final */ func Validate(name : Optional<dotnet.System.String>, options : TOptions) throws -> Optional<aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_DataAnnotationValidateOptions_1_ValidateOptionsResult__Validate_0__2__String_TOptions(TOptions.get_type_handle(), &__thrown, self.get_handle(), name?.get_handle() ?? nil, options.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Options.ValidateOptionsResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Options.DataAnnotationValidateOptions`1.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Options_DataAnnotationValidateOptions_1_String__get_Name_0__0(TOptions.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The options name.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // DataAnnotationValidateOptions_1


}



// EXTENSION METHOD Microsoft.Extensions.Options.OptionsBuilder<TOptions> ValidateDataAnnotations<TOptions>(Microsoft.Extensions.Options.OptionsBuilder<TOptions>)
extension aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1 {
    public func ValidateDataAnnotations() throws -> Optional<aspnetcore.Microsoft.Extensions.Options.OptionsBuilder_1<TOptions>> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.OptionsBuilderDataAnnotationsExtensions.ValidateDataAnnotations(optionsBuilder: self);
    }
}

