// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.BinderOptions
    /**
    
            Options class used by the .
            

    */
open class BinderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_BinderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.BinderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_BinderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_BindNonPublicProperties()
// docid: M:Microsoft.Extensions.Configuration.BinderOptions.get_BindNonPublicProperties
    open func get_BindNonPublicProperties() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_BinderOptions_bool__get_BindNonPublicProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_BindNonPublicProperties(bool)
// docid: M:Microsoft.Extensions.Configuration.BinderOptions.set_BindNonPublicProperties(System.Boolean)
    open func set_BindNonPublicProperties(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_BinderOptions_void__set_BindNonPublicProperties_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ErrorOnUnknownConfiguration()
// docid: M:Microsoft.Extensions.Configuration.BinderOptions.get_ErrorOnUnknownConfiguration
    open func get_ErrorOnUnknownConfiguration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_BinderOptions_bool__get_ErrorOnUnknownConfiguration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ErrorOnUnknownConfiguration(bool)
// docid: M:Microsoft.Extensions.Configuration.BinderOptions.set_ErrorOnUnknownConfiguration(System.Boolean)
    open func set_ErrorOnUnknownConfiguration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_BinderOptions_void__set_ErrorOnUnknownConfiguration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            When false (the default), the binder will only attempt to set public properties.
            If true, the binder will attempt to set all non read-only properties.
            

    */
    open var BindNonPublicProperties : Bool {
        get {
            return try! get_BindNonPublicProperties();
        }
        set(v) {
            return try! set_BindNonPublicProperties(value: v);
        }
    }
    /**
    
            When false (the default), no exceptions are thrown when a configuration key is found for which the
            provided model object does not have an appropriate property which matches the key's name.
            When true, an  is thrown with a description
            of the missing properties.
            

    */
    open var ErrorOnUnknownConfiguration : Bool {
        get {
            return try! get_ErrorOnUnknownConfiguration();
        }
        set(v) {
            return try! set_ErrorOnUnknownConfiguration(value: v);
        }
    }
} // BinderOptions


// type: Microsoft.Extensions.Configuration.ConfigurationBinder
public struct ConfigurationBinder {
    // void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.Object)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object)
    /**
    
            Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.
            

    - Parameter configuration: The configuration instance to bind.
    - Parameter instance: The object to bind.
    */
    public static func Bind(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, instance : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationBinder_void__Bind_0__2__IConfiguration_Object(&__thrown, configuration?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.Object, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
    /**
    
            Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.
            

    - Parameter configuration: The configuration instance to bind.
    - Parameter instance: The object to bind.
    - Parameter configureOptions: Configures the binder options.
    */
    public static func Bind(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, instance : Optional<dotnet.System.Object>, configureOptions : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationBinder_void__Bind_0__3__IConfiguration_Object_System_Action_Microsoft_Extensions_Configuration_BinderOptions_(&__thrown, configuration?.get_handle() ?? nil, instance?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Bind(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, instance : Optional<dotnet.System.Object>, configureOptions : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>) throws -> Void) throws {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>(configureOptions);
        return try Bind(configuration: configuration, instance: instance, configureOptions: del_configureOptions);
    }
    // void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.String, System.Object)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Object)
    /**
    
            Attempts to bind the given object instance to the configuration section specified by the key by matching property names against configuration keys recursively.
            

    - Parameter configuration: The configuration instance to bind.
    - Parameter key: The key of the configuration section to bind.
    - Parameter instance: The object to bind.
    */
    public static func Bind(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, key : Optional<dotnet.System.String>, instance : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationBinder_void__Bind_0__3__IConfiguration_String_Object(&__thrown, configuration?.get_handle() ?? nil, key?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Get(Microsoft.Extensions.Configuration.IConfiguration, System.Type)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type)
    /**
    
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            

    - Parameter configuration: The configuration instance to bind.
    - Parameter type: The type of the new instance to bind.
    - Returns: The new instance if successful, null otherwise.

    */
    public static func Get(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBinder_Object__Get_0__2__IConfiguration_Type(&__thrown, configuration?.get_handle() ?? nil, type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Get(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
    /**
    
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            

    - Parameter configuration: The configuration instance to bind.
    - Parameter type: The type of the new instance to bind.
    - Parameter configureOptions: Configures the binder options.
    - Returns: The new instance if successful, null otherwise.

    */
    public static func Get(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, type : Optional<dotnet.System.Type_>, configureOptions : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBinder_Object__Get_0__3__IConfiguration_Type_System_Action_Microsoft_Extensions_Configuration_BinderOptions_(&__thrown, configuration?.get_handle() ?? nil, type?.get_handle() ?? nil, (configureOptions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func Get(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, type : Optional<dotnet.System.Type_>, configureOptions : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>) throws -> Void) throws -> Optional<dotnet.System.Object> {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>(configureOptions);
        return try Get(configuration: configuration, type: type, configureOptions: del_configureOptions);
    }
    // System.Object GetValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)
    /**
    
            Extracts the value with the specified key and converts it to the specified type.
            

    - Parameter configuration: The configuration.
    - Parameter type: The type to convert the value to.
    - Parameter key: The key of the configuration section's value to convert.
    - Returns: The converted value.

    */
    public static func GetValue(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, type : Optional<dotnet.System.Type_>, key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBinder_Object__GetValue_0__3__IConfiguration_Type_String(&__thrown, configuration?.get_handle() ?? nil, type?.get_handle() ?? nil, key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String, System.Object)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.Object)
    /**
    
            Extracts the value with the specified key and converts it to the specified type.
            

    - Parameter configuration: The configuration.
    - Parameter type: The type to convert the value to.
    - Parameter key: The key of the configuration section's value to convert.
    - Parameter defaultValue: The default value to use if no value is found.
    - Returns: The converted value.

    */
    public static func GetValue(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, type : Optional<dotnet.System.Type_>, key : Optional<dotnet.System.String>, defaultValue : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBinder_Object__GetValue_0__4__IConfiguration_Type_String_Object(&__thrown, configuration?.get_handle() ?? nil, type?.get_handle() ?? nil, key?.get_handle() ?? nil, defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String)
    // T GetValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String, T)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)
    /**
    
            Extracts the value with the specified key and converts it to type T.
            

    - Parameter configuration: The configuration.
    - Parameter key: The key of the configuration section's value to convert.
    - Parameter defaultValue: The default value to use if no value is found.
    - Returns: The converted value.

    */
    public static func GetValue<UT : SGBridgeGenericValue>(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, key : Optional<dotnet.System.String>, defaultValue : UT) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBinder_UT__GetValue_1__3__IConfiguration_String_UT(UT.get_type_handle(), &__thrown, configuration?.get_handle() ?? nil, key?.get_handle() ?? nil, defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T Get<T>(Microsoft.Extensions.Configuration.IConfiguration)
// TODO COPE (write_all_methods) (unused generic param) T Get<T>(Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
} // ConfigurationBinder


}



// EXTENSION METHOD void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.Object)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func Bind(instance : Optional<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), instance: instance);
    }
}

// EXTENSION METHOD void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.Object, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func Bind(instance : Optional<dotnet.System.Object>, configureOptions : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>>) throws {
        try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), instance: instance, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func Bind(instance : Optional<dotnet.System.Object>, configureOptions : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>) throws -> Void) throws {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>(configureOptions);
        try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), instance: instance, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD void Bind(Microsoft.Extensions.Configuration.IConfiguration, System.String, System.Object)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func Bind(key : Optional<dotnet.System.String>, instance : Optional<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), key: key, instance: instance);
    }
}

// EXTENSION METHOD System.Object Get(Microsoft.Extensions.Configuration.IConfiguration, System.Type)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func Get(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Get(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), type: type);
    }
}

// EXTENSION METHOD System.Object Get(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func Get(type : Optional<dotnet.System.Type_>, configureOptions : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>>) throws -> Optional<dotnet.System.Object> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Get(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), type: type, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func Get(type : Optional<dotnet.System.Type_>, configureOptions : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>) throws -> Void) throws -> Optional<dotnet.System.Object> {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.BinderOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.Get(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), type: type, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD System.Object GetValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func GetValue(type : Optional<dotnet.System.Type_>, key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Object> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), type: type, key: key);
    }
}

// EXTENSION METHOD System.Object GetValue(Microsoft.Extensions.Configuration.IConfiguration, System.Type, System.String, System.Object)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func GetValue(type : Optional<dotnet.System.Type_>, key : Optional<dotnet.System.String>, defaultValue : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), type: type, key: key, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD T GetValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String)
// TODO COPE extension method (unused generic param) T GetValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String)

// EXTENSION METHOD T GetValue<T>(Microsoft.Extensions.Configuration.IConfiguration, System.String, T)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func GetValue<UT : SGBridgeGenericValue>(key : Optional<dotnet.System.String>, defaultValue : UT) throws -> UT {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), key: key, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD T Get<T>(Microsoft.Extensions.Configuration.IConfiguration)
// TODO COPE extension method (unused generic param) T Get<T>(Microsoft.Extensions.Configuration.IConfiguration)

// EXTENSION METHOD T Get<T>(Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
// TODO COPE extension method (unused generic param) T Get<T>(Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)

