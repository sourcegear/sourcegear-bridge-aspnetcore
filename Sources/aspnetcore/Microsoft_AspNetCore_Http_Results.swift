// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.IResultExtensions
    /**
    
            Provides an interface for registering external methods that provide
            custom  instances.
            

    */
open class IResultExtensions
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IResultExtensions
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IResultExtensions_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IResultExtensions


// type: Microsoft.AspNetCore.Http.Results
public struct Results {
    // Microsoft.AspNetCore.Http.IResult Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Http.Results.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IList{System.String})
    /**
    
            Creates an  that on execution invokes .
            
            The behavior of this method depends on the  in use.
             and 
            are among likely status results.
            
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    public static func Challenge(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> = nil, authenticationSchemes : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Challenge_0__2__AuthenticationProperties_System_Collections_Generic_IList_string_(&__thrown, properties?.get_handle() ?? nil, (authenticationSchemes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Http.Results.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IList{System.String})
    /**
    
            Creates a  that on execution invokes .
            
            By default, executing this result returns a . Some authentication schemes, such as cookies,
            will convert  to a redirect to show a login page.
            
            

    - Parameter properties:  used to perform the authentication
            challenge.
    - Parameter authenticationSchemes: The authentication schemes to challenge.
    - Returns: The created  for the response.

    */
    public static func Forbid(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> = nil, authenticationSchemes : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Forbid_0__2__AuthenticationProperties_System_Collections_Generic_IList_string_(&__thrown, properties?.get_handle() ?? nil, (authenticationSchemes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult SignIn(System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.String)
// docid: M:Microsoft.AspNetCore.Http.Results.SignIn(System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)
    /**
    
            Creates an  that on execution invokes .
            

    - Parameter principal: The  containing the user claims.
    - Parameter properties:  used to perform the sign-in operation.
    - Parameter authenticationScheme: The authentication scheme to use for the sign-in operation.
    - Returns: The created  for the response.

    */
    public static func SignIn(principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> = nil, authenticationScheme : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__SignIn_0__3__ClaimsPrincipal_AuthenticationProperties_String(&__thrown, principal.get_handle(), properties?.get_handle() ?? nil, authenticationScheme?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties, System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Http.Results.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IList{System.String})
    /**
    
            Creates an  that on execution invokes .
            

    - Parameter properties:  used to perform the sign-out operation.
    - Parameter authenticationSchemes: The authentication scheme to use for the sign-out operation.
    - Returns: The created  for the response.

    */
    public static func SignOut(properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties> = nil, authenticationSchemes : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__SignOut_0__2__AuthenticationProperties_System_Collections_Generic_IList_string_(&__thrown, properties?.get_handle() ?? nil, (authenticationSchemes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Content(System.String, System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Http.Results.Content(System.String,System.String,System.Text.Encoding)
    /**
    
            Writes the  string to the HTTP response.
            
            This is an alias for .
            
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Parameter contentEncoding: The content encoding.
    - Returns: The created  object for the response.

    */
    public static func Content(content : dotnet.System.String, contentType : Optional<dotnet.System.String> = nil, contentEncoding : Optional<dotnet.System.Text.Encoding> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Content_0__3__String_String_Encoding(&__thrown, content.get_handle(), contentType?.get_handle() ?? nil, contentEncoding?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Text(System.String, System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.Http.Results.Text(System.String,System.String,System.Text.Encoding)
    /**
    
            Writes the  string to the HTTP response.
            
            This is an alias for .
            
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Parameter contentEncoding: The content encoding.
    - Returns: The created  object for the response.

    */
    public static func Text(content : dotnet.System.String, contentType : Optional<dotnet.System.String> = nil, contentEncoding : Optional<dotnet.System.Text.Encoding> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Text_0__3__String_String_Encoding(&__thrown, content.get_handle(), contentType?.get_handle() ?? nil, contentEncoding?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Content(System.String, Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Results.Content(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Writes the  string to the HTTP response.
            

    - Parameter content: The content to write to the response.
    - Parameter contentType: The content type (MIME type).
    - Returns: The created  object for the response.

    */
    public static func Content(content : dotnet.System.String, contentType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Content_0__2__String_MediaTypeHeaderValue(&__thrown, content.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Json(System.Object, System.Text.Json.JsonSerializerOptions, System.String, System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Http.Results.Json(System.Object,System.Text.Json.JsonSerializerOptions,System.String,System.Nullable{System.Int32})
    /**
    
            Creates a  that serializes the specified  object to JSON.
            

    - Parameter data: The object to write as JSON.
    - Parameter options: The serializer options use when serializing the value.
    - Parameter contentType: The content-type to set on the response.
    - Parameter statusCode: The status code to set on the response.
    - Returns: The created  that serializes the specified 
            as JSON format for the response.

    */
    public static func Json(data : Optional<dotnet.System.Object>, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, contentType : Optional<dotnet.System.String> = nil, statusCode : Optional<Swift.Int32> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Json_0__4__Object_JsonSerializerOptions_String_System_Nullable_i32_(&__thrown, data?.get_handle() ?? nil, options?.get_handle() ?? nil, contentType?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult File(System.Byte[], System.String, System.String, bool, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Results.File(System.Byte[],System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Writes the byte-array content to the response.
            
            This supports range requests ( or
             if the range is not satisfiable).
            
            
            This API is an alias for .
            

    - Parameter fileContents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    public static func File(fileContents : dotnet.System_Arr<Swift.UInt8>, contentType : Optional<dotnet.System.String> = nil, fileDownloadName : Optional<dotnet.System.String> = nil, enableRangeProcessing : Bool = false, lastModified : Optional<dotnet.System.DateTimeOffset> = nil, entityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__File_0__6__u8Array_String_String_bool_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, fileContents.get_handle(), contentType?.get_handle() ?? nil, fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Bytes(System.Byte[], System.String, System.String, bool, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue)
// docid: M:Microsoft.AspNetCore.Http.Results.Bytes(System.Byte[],System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue)
    /**
    
            Writes the byte-array content to the response.
            
            This supports range requests ( or
             if the range is not satisfiable).
            
            
            This API is an alias for .
            

    - Parameter contents: The file contents.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Returns: The created  for the response.

    */
    public static func Bytes(contents : dotnet.System_Arr<Swift.UInt8>, contentType : Optional<dotnet.System.String> = nil, fileDownloadName : Optional<dotnet.System.String> = nil, enableRangeProcessing : Bool = false, lastModified : Optional<dotnet.System.DateTimeOffset> = nil, entityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Bytes_0__6__u8Array_String_String_bool_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue(&__thrown, contents.get_handle(), contentType?.get_handle() ?? nil, fileDownloadName?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0), (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult File(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Http.Results.File(System.IO.Stream,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Writes the specified  to the response.
            
            This supports range requests ( or
             if the range is not satisfiable).
            
            
            This API is an alias for .
            
            

    - Parameter fileStream: The  with the contents of the file.
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The the file name to be used in the Content-Disposition header.
    - Parameter lastModified: The  of when the file was last modified.
            Used to configure the Last-Modified response header and perform conditional range requests.
    - Parameter entityTag: The  to be configure the ETag response header
            and perform conditional requests.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    public static func File(fileStream : dotnet.System.IO.Stream, contentType : Optional<dotnet.System.String> = nil, fileDownloadName : Optional<dotnet.System.String> = nil, lastModified : Optional<dotnet.System.DateTimeOffset> = nil, entityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> = nil, enableRangeProcessing : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__File_0__6__Stream_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, fileStream.get_handle(), contentType?.get_handle() ?? nil, fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Stream(System.IO.Stream, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Http.Results.Stream(System.IO.Stream,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Writes the specified  to the response.
            
            This supports range requests ( or
             if the range is not satisfiable).
            
            
            This API is an alias for .
            
            

    - Parameter stream: The  to write to the response.
    - Parameter contentType: The Content-Type of the response. Defaults to application/octet-stream.
    - Parameter fileDownloadName: The the file name to be used in the Content-Disposition header.
    - Parameter lastModified: The  of when the file was last modified.
            Used to configure the Last-Modified response header and perform conditional range requests.
    - Parameter entityTag: The  to be configure the ETag response header
            and perform conditional requests.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    public static func Stream(stream : dotnet.System.IO.Stream, contentType : Optional<dotnet.System.String> = nil, fileDownloadName : Optional<dotnet.System.String> = nil, lastModified : Optional<dotnet.System.DateTimeOffset> = nil, entityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> = nil, enableRangeProcessing : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Stream_0__6__Stream_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, stream.get_handle(), contentType?.get_handle() ?? nil, fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult File(System.String, System.String, System.String, System.Nullable<System.DateTimeOffset>, Microsoft.Net.Http.Headers.EntityTagHeaderValue, bool)
// docid: M:Microsoft.AspNetCore.Http.Results.File(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},Microsoft.Net.Http.Headers.EntityTagHeaderValue,System.Boolean)
    /**
    
            Writes the file at the specified  to the response.
            
            This supports range requests ( or
             if the range is not satisfiable).
            
            

    - Parameter path: The path to the file. When not rooted, resolves the path relative to .
    - Parameter contentType: The Content-Type of the file.
    - Parameter fileDownloadName: The suggested file name.
    - Parameter lastModified: The  of when the file was last modified.
    - Parameter entityTag: The  associated with the file.
    - Parameter enableRangeProcessing: Set to true to enable range requests processing.
    - Returns: The created  for the response.

    */
    public static func File(path : dotnet.System.String, contentType : Optional<dotnet.System.String> = nil, fileDownloadName : Optional<dotnet.System.String> = nil, lastModified : Optional<dotnet.System.DateTimeOffset> = nil, entityTag : Optional<aspnetcore.Microsoft.Net.Http.Headers.EntityTagHeaderValue> = nil, enableRangeProcessing : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__File_0__6__String_String_String_System_Nullable_System_DateTimeOffset__EntityTagHeaderValue_bool(&__thrown, path.get_handle(), contentType?.get_handle() ?? nil, fileDownloadName?.get_handle() ?? nil, (lastModified != nil) ? lastModified!.get_handle() : nil, entityTag?.get_handle() ?? nil, Swift.Int32(enableRangeProcessing ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Redirect(System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Http.Results.Redirect(System.String,System.Boolean,System.Boolean)
    /**
    
            Redirects to the specified .
            
            When  and  are set, sets the  status code.
            When  is set, sets the  status code.
            When  is set, sets the  status code.
            Otherwise, configures .
            
            

    - Parameter url: The URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    - Returns: The created  for the response.

    */
    public static func Redirect(url : dotnet.System.String, permanent : Bool = false, preserveMethod : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Redirect_0__3__String_bool_bool(&__thrown, url.get_handle(), Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult LocalRedirect(System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Http.Results.LocalRedirect(System.String,System.Boolean,System.Boolean)
    /**
    
            Redirects to the specified .
            
            When  and  are set, sets the  status code.
            When  is set, sets the  status code.
            When  is set, sets the  status code.
            Otherwise, configures .
            
            

    - Parameter localUrl: The local URL to redirect to.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    - Returns: The created  for the response.

    */
    public static func LocalRedirect(localUrl : dotnet.System.String, permanent : Bool = false, preserveMethod : Bool = false) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__LocalRedirect_0__3__String_bool_bool(&__thrown, localUrl.get_handle(), Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult RedirectToRoute(System.String, System.Object, bool, bool, System.String)
// docid: M:Microsoft.AspNetCore.Http.Results.RedirectToRoute(System.String,System.Object,System.Boolean,System.Boolean,System.String)
    /**
    
            Redirects to the specified route.
            
            When  and  are set, sets the  status code.
            When  is set, sets the  status code.
            When  is set, sets the  status code.
            Otherwise, configures .
            
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: The parameters for a route.
    - Parameter permanent: Specifies whether the redirect should be permanent (301) or temporary (302).
    - Parameter preserveMethod: If set to true, make the temporary redirect (307) or permanent redirect (308) preserve the initial request method.
    - Parameter fragment: The fragment to add to the URL.
    - Returns: The created  for the response.

    */
    public static func RedirectToRoute(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, permanent : Bool = false, preserveMethod : Bool = false, fragment : Optional<dotnet.System.String> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__RedirectToRoute_0__5__String_Object_bool_bool_String(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, Swift.Int32(permanent ? 1 : 0), Swift.Int32(preserveMethod ? 1 : 0), fragment?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Results.StatusCode(System.Int32)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter statusCode: The status code to set on the response.
    - Returns: The created  object for the response.

    */
    public static func StatusCode(statusCode : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__StatusCode_0__1__i32(&__thrown, statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult NotFound(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.NotFound(System.Object)
    /**
    
            Produces a  response.
            

    - Parameter value: The value to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func NotFound(value : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__NotFound_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Unauthorized()
// docid: M:Microsoft.AspNetCore.Http.Results.Unauthorized
    /**
    
            Produces a  response.
            

    - Returns: The created  for the response.

    */
    public static func Unauthorized() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Unauthorized_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult BadRequest(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.BadRequest(System.Object)
    /**
    
            Produces a  response.
            

    - Parameter error: An error object to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func BadRequest(error : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__BadRequest_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Conflict(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.Conflict(System.Object)
    /**
    
            Produces a  response.
            

    - Parameter error: An error object to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func Conflict(error : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Conflict_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult NoContent()
// docid: M:Microsoft.AspNetCore.Http.Results.NoContent
    /**
    
            Produces a  response.
            

    - Returns: The created  for the response.

    */
    public static func NoContent() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__NoContent_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Ok(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.Ok(System.Object)
    /**
    
            Produces a  response.
            

    - Parameter value: The value to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func Ok(value : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Ok_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult UnprocessableEntity(System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.UnprocessableEntity(System.Object)
    /**
    
            Produces a  response.
            

    - Parameter error: An error object to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func UnprocessableEntity(error : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__UnprocessableEntity_0__1__Object(&__thrown, error?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Problem(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.Results.Problem(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Produces a  response.
            

    - Parameter statusCode: The value for .
    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Parameter title: The value for .
    - Parameter type: The value for .
    - Parameter extensions: The value for .
    - Returns: The created  for the response.

    */
    public static func Problem(detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil, extensions : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Problem_0__6__String_String_System_Nullable_i32__String_String_System_Collections_Generic_IDictionary_string_object_(&__thrown, detail?.get_handle() ?? nil, instance?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil, (extensions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Problem(Microsoft.AspNetCore.Mvc.ProblemDetails)
// docid: M:Microsoft.AspNetCore.Http.Results.Problem(Microsoft.AspNetCore.Mvc.ProblemDetails)
    /**
    
            Produces a  response.
            

    - Parameter problemDetails: The   object to produce a response from.
    - Returns: The created  for the response.

    */
    public static func Problem(problemDetails : aspnetcore.Microsoft.AspNetCore.Mvc.ProblemDetails) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Problem_0__1__ProblemDetails(&__thrown, problemDetails.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult ValidationProblem(System.Collections.Generic.IDictionary<System.String,System.String[]>, System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.Results.ValidationProblem(System.Collections.Generic.IDictionary{System.String,System.String[]},System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Produces a  response
            with a  value.
            

    - Parameter errors: One or more validation errors.
    - Parameter detail: The value for .
    - Parameter instance: The value for .
    - Parameter statusCode: The status code.
    - Parameter title: The value for . Defaults to "One or more validation errors occurred."
    - Parameter type: The value for .
    - Parameter extensions: The value for .
    - Returns: The created  for the response.

    */
    public static func ValidationProblem(errors : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System_Arr<dotnet.System.String>>, detail : Optional<dotnet.System.String> = nil, instance : Optional<dotnet.System.String> = nil, statusCode : Optional<Swift.Int32> = nil, title : Optional<dotnet.System.String> = nil, type : Optional<dotnet.System.String> = nil, extensions : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__ValidationProblem_0__7__System_Collections_Generic_IDictionary_string_stringArray__String_String_System_Nullable_i32__String_String_System_Collections_Generic_IDictionary_string_object_(&__thrown, errors.get_handle(), detail?.get_handle() ?? nil, instance?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil, title?.get_handle() ?? nil, type?.get_handle() ?? nil, (extensions?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Created(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.Created(System.String,System.Object)
    /**
    
            Produces a  response.
            

    - Parameter uri: The URI at which the content has been created.
    - Parameter value: The value to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func Created(uri : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Created_0__2__String_Object(&__thrown, uri.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Created(System.Uri, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.Created(System.Uri,System.Object)
    /**
    
            Produces a  response.
            

    - Parameter uri: The URI at which the content has been created.
    - Parameter value: The value to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func Created(uri : dotnet.System.Uri, value : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Created_0__2__Uri_Object(&__thrown, uri.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult CreatedAtRoute(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.CreatedAtRoute(System.String,System.Object,System.Object)
    /**
    
            Produces a  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The value to be included in the HTTP response body.
    - Returns: The created  for the response.

    */
    public static func CreatedAtRoute(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, value : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__CreatedAtRoute_0__3__String_Object_Object(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult Accepted(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.Accepted(System.String,System.Object)
    /**
    
            Produces a  response.
            

    - Parameter uri: The URI with the location at which the status of requested content can be monitored.
    - Parameter value: The optional content value to format in the response body.
    - Returns: The created  for the response.

    */
    public static func Accepted(uri : Optional<dotnet.System.String> = nil, value : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__Accepted_0__2__String_Object(&__thrown, uri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.IResult AcceptedAtRoute(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Results.AcceptedAtRoute(System.String,System.Object,System.Object)
    /**
    
            Produces a  response.
            

    - Parameter routeName: The name of the route to use for generating the URL.
    - Parameter routeValues: The route data to use for generating the URL.
    - Parameter value: The optional content value to format in the response body.
    - Returns: The created  for the response.

    */
    public static func AcceptedAtRoute(routeName : Optional<dotnet.System.String> = nil, routeValues : Optional<dotnet.System.Object> = nil, value : Optional<dotnet.System.Object> = nil) throws -> aspnetcore.Microsoft.AspNetCore.Http.IResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResult__AcceptedAtRoute_0__3__String_Object_Object(&__thrown, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResult(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IResultExtensions get_Extensions()
// docid: M:Microsoft.AspNetCore.Http.Results.get_Extensions
    public static func get_Extensions() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResultExtensions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Results_IResultExtensions__get_Extensions_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResultExtensions(hndl : __return);
        }
    }
    /**
    
            Provides a place for external libraries to extend the default  set
            via extension methods returning custom  implementations.
            

    */
    public static var Extensions : aspnetcore.Microsoft.AspNetCore.Http.IResultExtensions {
        get {
            return try! get_Extensions();
        }
    }
} // Results


}



public protocol Microsoft_AspNetCore_Http_IResultExtensions
    :
    SGBridgeGetHandle
{
}

