// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.EndpointBuilder
    /**
    
            A base class for building an new .
            

    */
open class EndpointBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_EndpointBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Http.Endpoint Build()
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.Build
    /**
    
            Creates an instance of  from the .
            

    - Returns: The created .

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Http.Endpoint {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointBuilder_Endpoint__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_RequestDelegate()
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.get_RequestDelegate
    open func get_RequestDelegate() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointBuilder_RequestDelegate__get_RequestDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequestDelegate(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.set_RequestDelegate(Microsoft.AspNetCore.Http.RequestDelegate)
    open func set_RequestDelegate(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_EndpointBuilder_void__set_RequestDelegate_0__1__RequestDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_RequestDelegate(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(value);
        return try set_RequestDelegate(value: del_value);
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointBuilder_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.set_DisplayName(System.String)
    open func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_EndpointBuilder_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Object> get_Metadata()
// docid: M:Microsoft.AspNetCore.Builder.EndpointBuilder.get_Metadata
    open func get_Metadata() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointBuilder_System_Collections_Generic_IList_object___get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets or sets the informational display name of this endpoint.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets the collection of metadata associated with this endpoint.
            

    */
    open var Metadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets or sets the delegate used to process requests for the endpoint.
            

    */
    open var RequestDelegate : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_RequestDelegate();
        }
        set(v) {
            return try! set_RequestDelegate(value: v!);
        }
    }
} // EndpointBuilder


// type: Microsoft.AspNetCore.Builder.IApplicationBuilder
    /**
    
            Defines a class that provides the mechanisms to configure an application's request pipeline.
            

    */
open class IApplicationBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Builder_IApplicationBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_IApplicationBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Builder.IApplicationBuilder Use(System.Func<Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate>)
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.Use(System.Func{Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate})
    /**
    
            Adds a middleware delegate to the application's request pipeline.
            

    - Parameter middleware: The middleware delegate.
    - Returns: The .

    */
    open func Use(middleware : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_IApplicationBuilder__Use_0__1__System_Func_Microsoft_AspNetCore_Http_RequestDelegate_Microsoft_AspNetCore_Http_RequestDelegate_(&__thrown, self.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func Use(middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>(middleware);
        return try Use(middleware: del_middleware);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder New()
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.New
    /**
    
            Creates a new  that shares the  of this
            .
            

    - Returns: The new .

    */
    open func New() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_IApplicationBuilder__New_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.RequestDelegate Build()
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.Build
    /**
    
            Builds the delegate used by this application to process HTTP requests.
            

    - Returns: The request handling delegate.

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_RequestDelegate__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ApplicationServices()
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.get_ApplicationServices
    open func get_ApplicationServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_IServiceProvider__get_ApplicationServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApplicationServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.set_ApplicationServices(System.IServiceProvider)
    open func set_ApplicationServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_IApplicationBuilder_void__set_ApplicationServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_ServerFeatures()
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.get_ServerFeatures
    open func get_ServerFeatures() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_IFeatureCollection__get_ServerFeatures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Builder.IApplicationBuilder.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_IApplicationBuilder_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
} // IApplicationBuilder


// type: Microsoft.AspNetCore.Builder.IEndpointConventionBuilder
    /**
    
            Builds conventions that will be used for customization of  instances.
            

    */
open class IEndpointConventionBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_IEndpointConventionBuilder_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})
    /**
    
            Adds the specified convention to the builder. Conventions are used to customize  instances.
            

    - Parameter convention: The convention to add to the builder.
    */
    open func Add(convention : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_IEndpointConventionBuilder_void__Add_0__1__System_Action_Microsoft_AspNetCore_Builder_EndpointBuilder_(&__thrown, self.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Add(convention : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder) throws -> Void) throws {
        let del_convention = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>(convention);
        return try Add(convention: del_convention);
    }
} // IEndpointConventionBuilder


// type: Microsoft.AspNetCore.Builder.MapExtensions
public struct MapExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Branches the request pipeline based on matches of the given request path. If the request path starts with
            the given path, the branch is executed.
            

    - Parameter app: The  instance.
    - Parameter pathMatch: The request path to match.
    - Parameter configuration: The branch to take for positive path matches.
    - Returns: The  instance.

    */
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : dotnet.System.String, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapExtensions_IApplicationBuilder__Map_0__3__IApplicationBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), pathMatch.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : dotnet.System.String, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try Map(app: app, pathMatch: pathMatch, configuration: del_configuration);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Branches the request pipeline based on matches of the given request path. If the request path starts with
            the given path, the branch is executed.
            

    - Parameter app: The  instance.
    - Parameter pathMatch: The request path to match.
    - Parameter configuration: The branch to take for positive path matches.
    - Returns: The  instance.

    */
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapExtensions_IApplicationBuilder__Map_0__3__IApplicationBuilder_PathString_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), pathMatch.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try Map(app: app, pathMatch: pathMatch, configuration: del_configuration);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString, bool, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Boolean,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Branches the request pipeline based on matches of the given request path. If the request path starts with
            the given path, the branch is executed.
            

    - Parameter app: The  instance.
    - Parameter pathMatch: The request path to match.
    - Parameter preserveMatchedPathSegment: if false, matched path would be removed from Request.Path and added to Request.PathBase.
    - Parameter configuration: The branch to take for positive path matches.
    - Returns: The  instance.

    */
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, preserveMatchedPathSegment : Bool, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapExtensions_IApplicationBuilder__Map_0__4__IApplicationBuilder_PathString_bool_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), pathMatch.get_handle(), Swift.Int32(preserveMatchedPathSegment ? 1 : 0), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Map(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, preserveMatchedPathSegment : Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try Map(app: app, pathMatch: pathMatch, preserveMatchedPathSegment: preserveMatchedPathSegment, configuration: del_configuration);
    }
} // MapExtensions


// type: Microsoft.AspNetCore.Builder.MapWhenExtensions
public struct MapWhenExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Branches the request pipeline based on the result of the given predicate.
            

    - Parameter app: 
    - Parameter predicate: Invoked with the request environment to determine if the branch should be taken
    - Parameter configuration: Configures a branch to take
    - Returns: 

    */
    public static func MapWhen(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, predicate : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapWhenExtensions_IApplicationBuilder__MapWhen_0__3__IApplicationBuilder_System_Func_Microsoft_AspNetCore_Http_HttpContext_bool__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), predicate.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapWhen(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, predicate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_predicate = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(predicate);
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try MapWhen(app: app, predicate: del_predicate, configuration: del_configuration);
    }
} // MapWhenExtensions


// type: Microsoft.AspNetCore.Builder.RunExtensions
public struct RunExtensions {
    // void Run(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.RunExtensions.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a terminal middleware delegate to the application's request pipeline.
            

    - Parameter app: The  instance.
    - Parameter handler: A delegate that handles the request.
    */
    public static func Run(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_RunExtensions_void__Run_0__2__IApplicationBuilder_RequestDelegate(&__thrown, app.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Run(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try Run(app: app, handler: del_handler);
    }
} // RunExtensions


// type: Microsoft.AspNetCore.Builder.UseExtensions
public struct UseExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Use(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,System.Func<System.Threading.Tasks.Task>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Builder.UseExtensions.Use(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
    /**
    
            Adds a middleware delegate defined in-line to the application's request pipeline.
            If you aren't calling the next function, use  instead.
            
            Prefer using  for better performance as shown below:
            
            app.Use((context, next) =>
            {
                return next(context);
            });
            
            
            

    - Parameter app: The  instance.
    - Parameter middleware: A function that handles the request and calls the given next function.
    - Returns: The  instance.

    */
    public static func Use(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, middleware : dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_UseExtensions_IApplicationBuilder__Use_0__2__IApplicationBuilder_System_Func_Microsoft_AspNetCore_Http_HttpContext_System_System_Func_Task__Task_(&__thrown, app.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Use(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext, dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>,dotnet.System.Threading.Tasks.Task>(middleware);
        return try Use(app: app, middleware: del_middleware);
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder Use(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Builder.UseExtensions.Use(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate,System.Threading.Tasks.Task})
    /**
    
            Adds a middleware delegate defined in-line to the application's request pipeline.
            If you aren't calling the next function, use  instead.
            

    - Parameter app: The  instance.
    - Parameter middleware: A function that handles the request and calls the given next function.
    - Returns: The  instance.

    */
    public static func Use(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, middleware : dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_UseExtensions_IApplicationBuilder__Use_0__2__IApplicationBuilder_System_Func_Microsoft_AspNetCore_Http_HttpContext_Microsoft_AspNetCore_Http_RequestDelegate_Task_(&__thrown, app.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Use(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext, aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,dotnet.System.Threading.Tasks.Task>(middleware);
        return try Use(app: app, middleware: del_middleware);
    }
} // UseExtensions


// type: Microsoft.AspNetCore.Builder.UseMiddlewareExtensions
public struct UseMiddlewareExtensions {
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware<TMiddleware>(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Object[])
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Type, System.Object[])
// docid: M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Type,System.Object[])
    /**
    
            Adds a middleware type to the application's request pipeline.
            

    - Parameter app: The  instance.
    - Parameter middleware: The middleware type.
    - Parameter args: The arguments to pass to the middleware type instance's constructor.
    - Returns: The  instance.

    */
    public static func UseMiddleware(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, middleware : dotnet.System.Type_, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_UseMiddlewareExtensions_IApplicationBuilder__UseMiddleware_0__3__IApplicationBuilder_Type_ObjectArray(&__thrown, app.get_handle(), middleware.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // UseMiddlewareExtensions


// type: Microsoft.AspNetCore.Builder.UsePathBaseExtensions
public struct UsePathBaseExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.UsePathBaseExtensions.UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Adds a middleware that extracts the specified path base from request path and postpend it to the request path base.
            

    - Parameter app: The  instance.
    - Parameter pathBase: The path base to extract.
    - Returns: The  instance.

    */
    public static func UsePathBase(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_UsePathBaseExtensions_IApplicationBuilder__UsePathBase_0__2__IApplicationBuilder_PathString(&__thrown, app.get_handle(), pathBase.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // UsePathBaseExtensions


// type: Microsoft.AspNetCore.Builder.UseWhenExtensions
public struct UseWhenExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline.
            

    - Parameter app: 
    - Parameter predicate: Invoked with the request environment to determine if the branch should be taken
    - Parameter configuration: Configures a branch to take
    - Returns: 

    */
    public static func UseWhen(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, predicate : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_UseWhenExtensions_IApplicationBuilder__UseWhen_0__3__IApplicationBuilder_System_Func_Microsoft_AspNetCore_Http_HttpContext_bool__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, app.get_handle(), predicate.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseWhen(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, predicate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_predicate = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(predicate);
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try UseWhen(app: app, predicate: del_predicate, configuration: del_configuration);
    }
} // UseWhenExtensions


}
// Microsoft.AspNetCore.Builder.Extensions
extension Microsoft.AspNetCore.Builder.Extensions {
// type: Microsoft.AspNetCore.Builder.Extensions.MapMiddleware
    /**
    
            Represents a middleware that maps a request path to a sub-request pipeline.
            

    */
open class MapMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_Extensions_MapMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Builder.Extensions.MapOptions)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Builder.Extensions.MapOptions)
    /**
    
            Creates a new instance of .
            

    - Parameter next: The delegate representing the next middleware in the request pipeline.
    - Parameter options: The middleware options.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.AspNetCore.Builder.Extensions.MapOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_Extensions_MapMiddleware_ctor_0__2__RequestDelegate_MapOptions(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // MapMiddleware


// type: Microsoft.AspNetCore.Builder.Extensions.MapOptions
    /**
    
            Options for the .
            

    */
open class MapOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_Extensions_MapOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_Extensions_MapOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_PathMatch()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.get_PathMatch
    open func get_PathMatch() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapOptions_PathString__get_PathMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PathMatch(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.set_PathMatch(Microsoft.AspNetCore.Http.PathString)
    open func set_PathMatch(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_Extensions_MapOptions_void__set_PathMatch_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_Branch()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.get_Branch
    open func get_Branch() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapOptions_RequestDelegate__get_Branch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Branch(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.set_Branch(Microsoft.AspNetCore.Http.RequestDelegate)
    open func set_Branch(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_Extensions_MapOptions_void__set_Branch_0__1__RequestDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Branch(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(value);
        return try set_Branch(value: del_value);
    }
    // [IsSpecialName] bool get_PreserveMatchedPathSegment()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.get_PreserveMatchedPathSegment
    open func get_PreserveMatchedPathSegment() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapOptions_bool__get_PreserveMatchedPathSegment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveMatchedPathSegment(bool)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapOptions.set_PreserveMatchedPathSegment(System.Boolean)
    open func set_PreserveMatchedPathSegment(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_Extensions_MapOptions_void__set_PreserveMatchedPathSegment_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The branch taken for a positive match.
            

    */
    open var Branch : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_Branch();
        }
        set(v) {
            return try! set_Branch(value: v!);
        }
    }
    /**
    
            The path to match.
            

    */
    open var PathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_PathMatch();
        }
        set(v) {
            return try! set_PathMatch(value: v);
        }
    }
    /**
    
            If false, matched path would be removed from Request.Path and added to Request.PathBase
            Defaults to false.
            

    */
    open var PreserveMatchedPathSegment : Bool {
        get {
            return try! get_PreserveMatchedPathSegment();
        }
        set(v) {
            return try! set_PreserveMatchedPathSegment(value: v);
        }
    }
} // MapOptions


// type: Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware
    /**
    
            Represents a middleware that runs a sub-request pipeline when a given predicate is matched.
            

    */
open class MapWhenMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_Extensions_MapWhenMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions)
    /**
    
            Creates a new instance of .
            

    - Parameter next: The delegate representing the next middleware in the request pipeline.
    - Parameter options: The middleware options.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_Extensions_MapWhenMiddleware_ctor_0__2__RequestDelegate_MapWhenOptions(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapWhenMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // MapWhenMiddleware


// type: Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions
    /**
    
            Options for the .
            

    */
open class MapWhenOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Http.HttpContext,bool> get_Predicate()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.get_Predicate
    open func get_Predicate() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_System_Func_Microsoft_AspNetCore_Http_HttpContext_bool___get_Predicate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Predicate(System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.set_Predicate(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean})
    open func set_Predicate(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_void__set_Predicate_0__1__System_Func_Microsoft_AspNetCore_Http_HttpContext_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Predicate(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(value);
        return try set_Predicate(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_Branch()
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.get_Branch
    open func get_Branch() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_RequestDelegate__get_Branch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Branch(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.MapWhenOptions.set_Branch(Microsoft.AspNetCore.Http.RequestDelegate)
    open func set_Branch(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_Extensions_MapWhenOptions_void__set_Branch_0__1__RequestDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Branch(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(value);
        return try set_Branch(value: del_value);
    }
    /**
    
            The branch taken for a positive match.
            

    */
    open var Branch : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_Branch();
        }
        set(v) {
            return try! set_Branch(value: v!);
        }
    }
    /**
    
            The user callback that determines if the branch should be taken.
            

    */
    open var Predicate : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>> {
        get {
            return try! get_Predicate();
        }
        set(v) {
            return try! set_Predicate(value: v!);
        }
    }
} // MapWhenOptions


// type: Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware
    /**
    
            Represents a middleware that extracts the specified path base from request path and postpend it to the request path base.
            

    */
open class UsePathBaseMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_Extensions_UsePathBaseMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Creates a new instance of .
            

    - Parameter next: The delegate representing the next middleware in the request pipeline.
    - Parameter pathBase: The path base to extract.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_Extensions_UsePathBaseMiddleware_ctor_0__2__RequestDelegate_PathString(&__thrown, next.get_handle(), pathBase.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    - Returns: A task that represents the execution of this middleware.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_Extensions_UsePathBaseMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // UsePathBaseMiddleware


}


// Microsoft.AspNetCore.Cors
// Microsoft.AspNetCore.Cors.Infrastructure
extension Microsoft.AspNetCore.Cors.Infrastructure {
// type: Microsoft.AspNetCore.Cors.Infrastructure.ICorsMetadata
    /**
    
            A marker interface which can be used to identify CORS metadata.
            

    */
open class ICorsMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // ICorsMetadata


}


// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.BadHttpRequestException
    /**
    
            Represents an HTTP request error
            

    */
open class BadHttpRequestException
    :
    dotnet.System.IO.IOException
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_BadHttpRequestException_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Http.BadHttpRequestException.#ctor(System.String,System.Int32)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter message: The message to associate with this exception.
    - Parameter statusCode: The HTTP status code to associate with this exception.
    */
    public init(message : dotnet.System.String, statusCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_BadHttpRequestException_ctor_0__2__String_i32(&__thrown, message.get_handle(), statusCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Http.BadHttpRequestException.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class with the  set to 400 Bad Request.
            

    - Parameter message: The message to associate with this exception
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_BadHttpRequestException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Exception)
// docid: M:Microsoft.AspNetCore.Http.BadHttpRequestException.#ctor(System.String,System.Int32,System.Exception)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter message: The message to associate with this exception.
    - Parameter statusCode: The HTTP status code to associate with this exception.
    - Parameter innerException: The inner exception to associate with this exception
    */
    public init(message : dotnet.System.String, statusCode : Swift.Int32, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_BadHttpRequestException_ctor_0__3__String_i32_Exception(&__thrown, message.get_handle(), statusCode, innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Http.BadHttpRequestException.#ctor(System.String,System.Exception)
    /**
    
            Initializes a new instance of the  class with the  set to 400 Bad Request.
            

    - Parameter message: The message to associate with this exception
    - Parameter innerException: The inner exception to associate with this exception
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_BadHttpRequestException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Http.BadHttpRequestException.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_BadHttpRequestException_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the HTTP status code for this exception.
            

    */
    open var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
    }
} // BadHttpRequestException


// type: Microsoft.AspNetCore.Http.ConnectionInfo
    /**
    
            Represents the underlying connection for a request.
            

    */
open class ConnectionInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_ConnectionInfo_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.GetClientCertificateAsync(System.Threading.CancellationToken)
    /**
    
            Retrieves the client certificate.
            

    - Returns: Asynchronously returns an . Can be null.

    */
    open func GetClientCertificateAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_System_Threading_Tasks_Task_System_Security_Cryptography_X509Certificates_X509Certificate2___GetClientCertificateAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // void RequestClose()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.RequestClose
    /**
    
            Close connection gracefully.
            

    */
    open func RequestClose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__RequestClose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_Id
    open func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_Id(System.String)
    open func set_Id(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_Id_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_RemoteIpAddress()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_RemoteIpAddress
    open func get_RemoteIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_IPAddress__get_RemoteIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RemoteIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_RemoteIpAddress(System.Net.IPAddress)
    open func set_RemoteIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_RemoteIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RemotePort()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_RemotePort
    open func get_RemotePort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_i32__get_RemotePort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_RemotePort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_RemotePort(System.Int32)
    open func set_RemotePort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_RemotePort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_LocalIpAddress()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_LocalIpAddress
    open func get_LocalIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_IPAddress__get_LocalIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LocalIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_LocalIpAddress(System.Net.IPAddress)
    open func set_LocalIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_LocalIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LocalPort()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_LocalPort
    open func get_LocalPort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_i32__get_LocalPort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LocalPort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_LocalPort(System.Int32)
    open func set_LocalPort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_LocalPort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509Certificate2 get_ClientCertificate()
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.get_ClientCertificate
    open func get_ClientCertificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ConnectionInfo_X509Certificate2__get_ClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
// docid: M:Microsoft.AspNetCore.Http.ConnectionInfo.set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
    open func set_ClientCertificate(value : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ConnectionInfo_void__set_ClientCertificate_0__1__X509Certificate2(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the client certificate.
            

    */
    open var ClientCertificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        get {
            return try! get_ClientCertificate();
        }
        set(v) {
            return try! set_ClientCertificate(value: v!);
        }
    }
    /**
    
            Gets or sets a unique identifier to represent this connection.
            

    */
    open var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v);
        }
    }
    /**
    
            Gets or sets the IP address of the local host.
            

    */
    open var LocalIpAddress : Optional<dotnet.System.Net.IPAddress> {
        get {
            return try! get_LocalIpAddress();
        }
        set(v) {
            return try! set_LocalIpAddress(value: v!);
        }
    }
    /**
    
            Gets or sets the port of the local host.
            

    */
    open var LocalPort : Swift.Int32 {
        get {
            return try! get_LocalPort();
        }
        set(v) {
            return try! set_LocalPort(value: v);
        }
    }
    /**
    
            Gets or sets the IP address of the remote target. Can be null.
            

    */
    open var RemoteIpAddress : Optional<dotnet.System.Net.IPAddress> {
        get {
            return try! get_RemoteIpAddress();
        }
        set(v) {
            return try! set_RemoteIpAddress(value: v!);
        }
    }
    /**
    
            Gets or sets the port of the remote target.
            

    */
    open var RemotePort : Swift.Int32 {
        get {
            return try! get_RemotePort();
        }
        set(v) {
            return try! set_RemotePort(value: v);
        }
    }
} // ConnectionInfo


// type: Microsoft.AspNetCore.Http.CookieBuilder
    /**
    
            Defines settings used to create a cookie.
            

    */
open class CookieBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_CookieBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_CookieBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.CookieOptions Build(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Creates the cookie options from the given .
            

    - Parameter context: The .
    - Returns: The cookie options.

    */
    open func Build(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_CookieOptions__Build_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.CookieOptions Build(Microsoft.AspNetCore.Http.HttpContext, System.DateTimeOffset)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext,System.DateTimeOffset)
    /**
    
            Creates the cookie options from the given  with an expiration based on  and .
            

    - Parameter context: The .
    - Parameter expiresFrom: The time to use as the base for computing .
    - Returns: The cookie options.

    */
    open func Build(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, expiresFrom : dotnet.System.DateTimeOffset) throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_CookieOptions__Build_0__2__HttpContext_DateTimeOffset(&__thrown, self.get_handle(), context.get_handle(), expiresFrom.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_Path
    open func get_Path() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_Path(System.String)
    open func set_Path(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_Path_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Domain()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_Domain
    open func get_Domain() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_String__get_Domain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Domain(System.String)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_Domain(System.String)
    open func set_Domain(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_Domain_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HttpOnly()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_HttpOnly
    open func get_HttpOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_bool__get_HttpOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HttpOnly(bool)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_HttpOnly(System.Boolean)
    open func set_HttpOnly(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_HttpOnly_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.SameSiteMode get_SameSite()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_SameSite
    open func get_SameSite() throws -> aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_SameSiteMode__get_SameSite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: __return);
        }
    }
    // [IsSpecialName] void set_SameSite(Microsoft.AspNetCore.Http.SameSiteMode)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_SameSite(Microsoft.AspNetCore.Http.SameSiteMode)
    open func set_SameSite(value : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_SameSite_0__1__SameSiteMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieSecurePolicy get_SecurePolicy()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_SecurePolicy
    open func get_SecurePolicy() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_CookieSecurePolicy__get_SecurePolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_SecurePolicy(Microsoft.AspNetCore.Http.CookieSecurePolicy)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_SecurePolicy(Microsoft.AspNetCore.Http.CookieSecurePolicy)
    open func set_SecurePolicy(value : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_SecurePolicy_0__1__CookieSecurePolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_Expiration()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_Expiration
    open func get_Expiration() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_System_Nullable_System_TimeSpan___get_Expiration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expiration(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_Expiration(System.Nullable{System.TimeSpan})
    open func set_Expiration(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_Expiration_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxAge()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_MaxAge
    open func get_MaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_System_Nullable_System_TimeSpan___get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_MaxAge(System.Nullable{System.TimeSpan})
    open func set_MaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_MaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEssential()
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.get_IsEssential
    open func get_IsEssential() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieBuilder_bool__get_IsEssential_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsEssential(bool)
// docid: M:Microsoft.AspNetCore.Http.CookieBuilder.set_IsEssential(System.Boolean)
    open func set_IsEssential(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieBuilder_void__set_IsEssential_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The domain to associate the cookie with.
            

    */
    open var Domain : Optional<dotnet.System.String> {
        get {
            return try! get_Domain();
        }
        set(v) {
            return try! set_Domain(value: v!);
        }
    }
    /**
    
            Gets or sets the lifespan of a cookie.
            

    */
    open var Expiration : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_Expiration();
        }
        set(v) {
            return try! set_Expiration(value: v!);
        }
    }
    /**
    
            Indicates whether a cookie is accessible by client-side script.
            

    */
    open var HttpOnly : Bool {
        get {
            return try! get_HttpOnly();
        }
        set(v) {
            return try! set_HttpOnly(value: v);
        }
    }
    /**
    
            Indicates if this cookie is essential for the application to function correctly. If true then
            consent policy checks may be bypassed. The default value is false.
            

    */
    open var IsEssential : Bool {
        get {
            return try! get_IsEssential();
        }
        set(v) {
            return try! set_IsEssential(value: v);
        }
    }
    /**
    
            Gets or sets the max-age for the cookie.
            

    */
    open var MaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxAge();
        }
        set(v) {
            return try! set_MaxAge(value: v!);
        }
    }
    /**
    
            The name of the cookie.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            The cookie path.
            

    */
    open var Path : Optional<dotnet.System.String> {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v!);
        }
    }
    /**
    
            The SameSite attribute of the cookie. The default value is 
            

    */
    open var SameSite : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
            return try! get_SameSite();
        }
        set(v) {
            return try! set_SameSite(value: v);
        }
    }
    /**
    
            The policy that will be used to determine .
            This is determined from the  passed to .
            

    */
    open var SecurePolicy : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        get {
            return try! get_SecurePolicy();
        }
        set(v) {
            return try! set_SecurePolicy(value: v);
        }
    }
} // CookieBuilder


// type: Microsoft.AspNetCore.Http.CookieSecurePolicy
    /**
    
            Determines how cookie security properties are set.
            

    */
public struct CookieSecurePolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_CookieSecurePolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Http.CookieSecurePolicy SameAsRequest
    /**
    
            If the URI that provides the cookie is HTTPS, then the cookie will only be returned to the server on
            subsequent HTTPS requests. Otherwise if the URI that provides the cookie is HTTP, then the cookie will
            be returned to the server on all HTTP and HTTPS requests. This value ensures
            HTTPS for all authenticated requests on deployed servers, and also supports HTTP for localhost development
            and for servers that do not have HTTPS support.
            

    */
    public static var SameAsRequest : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy(val: Microsoft_AspNetCore_Http_CookieSecurePolicy_get_SameAsRequest());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.CookieSecurePolicy Always
    /**
    
            Secure is always marked true. Use this value when your login page and all subsequent pages
            requiring the authenticated identity are HTTPS. Local development will also need to be done with HTTPS urls.
            

    */
    public static var Always : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy(val: Microsoft_AspNetCore_Http_CookieSecurePolicy_get_Always());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.CookieSecurePolicy None
    /**
    
            Secure is not marked true. Use this value when your login page is HTTPS, but other pages
            on the site which are HTTP also require authentication information. This setting is not recommended because
            the authentication information provided with an HTTP request may be observed and used by other computers
            on your local network or wireless connection.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.CookieSecurePolicy(val: Microsoft_AspNetCore_Http_CookieSecurePolicy_get_None());
            return __return;
        }
    }
} // CookieSecurePolicy


// type: Microsoft.AspNetCore.Http.Endpoint
    /**
    
            Represents a logical endpoint in an application.
            

    */
open class Endpoint
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Endpoint_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.EndpointMetadataCollection, System.String)
// docid: M:Microsoft.AspNetCore.Http.Endpoint.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter requestDelegate: The delegate used to process requests for the endpoint.
    - Parameter metadata: 
            The endpoint . May be null.
            
    - Parameter displayName: 
            The informational display name of the endpoint. May be null.
            
    */
    public init(requestDelegate : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection>, displayName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Endpoint_ctor_0__3__RequestDelegate_EndpointMetadataCollection_String(&__thrown, requestDelegate?.get_handle() ?? nil, metadata?.get_handle() ?? nil, displayName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.Endpoint.ToString
    /**
    
            Returns a string representation of the endpoint.
            

    */
    open override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Endpoint_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Http.Endpoint.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Endpoint_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.EndpointMetadataCollection get_Metadata()
// docid: M:Microsoft.AspNetCore.Http.Endpoint.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Endpoint_EndpointMetadataCollection__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_RequestDelegate()
// docid: M:Microsoft.AspNetCore.Http.Endpoint.get_RequestDelegate
    open func get_RequestDelegate() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Endpoint_RequestDelegate__get_RequestDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the informational display name of this endpoint.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            Gets the collection of metadata associated with this endpoint.
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the delegate used to process requests for the endpoint.
            

    */
    open var RequestDelegate : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_RequestDelegate();
        }
    }
} // Endpoint


// type: Microsoft.AspNetCore.Http.EndpointHttpContextExtensions
public struct EndpointHttpContextExtensions {
    // Microsoft.AspNetCore.Http.Endpoint GetEndpoint(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.GetEndpoint(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Extension method for getting the  for the current request.
            

    - Parameter context: The  context.
    - Returns: The .

    */
    public static func GetEndpoint(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointHttpContextExtensions_Endpoint__GetEndpoint_0__1__HttpContext(&__thrown, context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetEndpoint(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.Endpoint)
// docid: M:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.SetEndpoint(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.Endpoint)
    /**
    
            Extension method for setting the  for the current request.
            

    - Parameter context: The  context.
    - Parameter endpoint: The .
    */
    public static func SetEndpoint(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, endpoint : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_EndpointHttpContextExtensions_void__SetEndpoint_0__2__HttpContext_Endpoint(&__thrown, context.get_handle(), endpoint?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EndpointHttpContextExtensions


// type: Microsoft.AspNetCore.Http.EndpointMetadataCollection
    /**
    
            A collection of arbitrary metadata associated with an endpoint.
            

    */
public final class EndpointMetadataCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_EndpointMetadataCollection_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Http.EndpointMetadataCollection Empty
    /**
    
            An empty .
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection(hndl: Microsoft_AspNetCore_Http_EndpointMetadataCollection_get_Empty());
            return __return;
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Object>)
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object})
    /**
    
            Creates a new .
            

    - Parameter items: The metadata items.
    */
    public init(items : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_EndpointMetadataCollection_ctor_0__1__System_Collections_Generic_IEnumerable_object_(&__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object[])
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.#ctor(System.Object[])
    /**
    
            Creates a new .
            

    - Parameter items: The metadata items.
    */
    public init(items : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_EndpointMetadataCollection_ctor_0__1__ObjectArray(&__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetMetadata<T>()
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IReadOnlyList<T> GetOrderedMetadata<T>()
    // Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.GetEnumerator
    /**
    
            Gets an  of all metadata items.
            

    - Returns: An  of all metadata items.

    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointMetadataCollection_EndpointMetadataCollection_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointMetadataCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.get_Item(System.Int32)
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointMetadataCollection_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            Gets the count of metadata items.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // EndpointMetadataCollection


// type: Microsoft.AspNetCore.Http.EndpointMetadataCollection+Enumerator
// boxed value type
    /**
    
            Enumerates the elements of an .
            

    */
public final class EndpointMetadataCollection_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the element at the current position of the enumerator
            

    */
    public var Current : Optional<dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.Dispose
    /**
    
            Releases all resources used by the .
            

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.MoveNext
    /**
    
            Advances the enumerator to the next element of the .
            

    - Returns: 
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.Reset
    /**
    
            Sets the enumerator to its initial position, which is before the first element in the collection.
            

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Current()
// docid: M:Microsoft.AspNetCore.Http.EndpointMetadataCollection.Enumerator.get_Current
    public func get_Current() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_EndpointMetadataCollection_Enumerator_Object__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EndpointMetadataCollection_Enumerator


// type: Microsoft.AspNetCore.Http.FragmentString
// boxed value type
    /**
    
            Provides correct handling for FragmentString value when needed to generate a URI string
            

    */
public final class FragmentString
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_FragmentString_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Http.FragmentString Empty
    /**
    
            Represents the empty fragment string. This field is read-only.
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Http.FragmentString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.FragmentString(hndl: Microsoft_AspNetCore_Http_FragmentString_get_Empty());
            return __return;
        }
    }
    /**
    
            True if the fragment string is not empty
            

    */
    public var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    
            The escaped fragment string with the leading '#' character
            

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.#ctor(System.String)
    /**
    
            Initialize the fragment string with a given value. This value must be in escaped and delimited format with
            a leading '#' character.
            

    - Parameter value: The fragment string to be assigned to the Value property.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_FragmentString_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_FragmentString_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.FragmentString.ToString
    /**
    
            Provides the fragment string escaped in a way which is correct for combining into the URI representation.
            A leading '#' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            

    - Returns: The fragment string value

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToUriComponent()
// docid: M:Microsoft.AspNetCore.Http.FragmentString.ToUriComponent
    /**
    
            Provides the fragment string escaped in a way which is correct for combining into the URI representation.
            A leading '#' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            

    - Returns: The fragment string value

    */
    public func ToUriComponent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_String__ToUriComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.FragmentString FromUriComponent(System.String)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)
    /**
    
            Returns an FragmentString given the fragment as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a fragment.
            

    - Parameter uriComponent: The escaped fragment as it appears in the URI format.
    - Returns: The resulting FragmentString

    */
    public class func FromUriComponent(uriComponent : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.FragmentString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_FragmentString__FromUriComponent_0__1__String(&__thrown, uriComponent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.FragmentString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.FragmentString FromUriComponent(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)
    /**
    
            Returns an FragmentString given the fragment as from a Uri object. Relative Uri objects are not supported.
            

    - Parameter uri: The Uri object
    - Returns: The resulting FragmentString

    */
    public class func FromUriComponent(uri : dotnet.System.Uri) throws -> aspnetcore.Microsoft.AspNetCore.Http.FragmentString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_FragmentString__FromUriComponent_0__1__Uri(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.FragmentString(hndl : __return);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.Equals(Microsoft.AspNetCore.Http.FragmentString)
    /**
    
            Evaluates if the current fragment is equal to another fragment .
            

    - Parameter other: A  to compare.
    - Returns:  if the fragments are equal.

    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Http.FragmentString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_bool__Equals_0__1__FragmentString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.Equals(System.Object)
    /**
    
            Evaluates if the current fragment is equal to an object .
            

    - Parameter obj: An object to compare.
    - Returns:  if the fragments are equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.FragmentString.GetHashCode
    /**
    
            Gets a hash code for the value.
            

    - Returns: The hash code as an .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.op_Equality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
    /**
    
            Evaluates if one fragment is equal to another.
            

    - Parameter left: A  instance.
    - Parameter right: A  instance.
    - Returns:  if the fragments are equal.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.AspNetCore.Http.FragmentString, right : aspnetcore.Microsoft.AspNetCore.Http.FragmentString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_bool__op_Equality_0__2__FragmentString_FragmentString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Http.FragmentString)
// docid: M:Microsoft.AspNetCore.Http.FragmentString.op_Inequality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
    /**
    
            Evalutes if one framgent is not equal to another.
            

    - Parameter left: A  instance.
    - Parameter right: A  instance.
    - Returns:  if the fragments are not equal.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.AspNetCore.Http.FragmentString, right : aspnetcore.Microsoft.AspNetCore.Http.FragmentString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_bool__op_Inequality_0__2__FragmentString_FragmentString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Http.FragmentString.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:Microsoft.AspNetCore.Http.FragmentString.get_HasValue
    public func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_FragmentString_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // FragmentString


// type: Microsoft.AspNetCore.Http.HeaderDictionaryExtensions
public struct HeaderDictionaryExtensions {
    // void Append(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.Append(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Add new values. Each item remains a separate array entry.
            

    - Parameter headers: The  to use.
    - Parameter key: The header name.
    - Parameter value: The header value.
    */
    public static func Append(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary, key : dotnet.System.String, value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionaryExtensions_void__Append_0__3__IHeaderDictionary_String_StringValues(&__thrown, headers.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])
    /**
    
            Quotes any values containing commas, and then comma joins all of the values with any existing values.
            

    - Parameter headers: The  to use.
    - Parameter key: The header name.
    - Parameter values: The header values.
    */
    public static func AppendCommaSeparatedValues(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary, key : dotnet.System.String, values : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionaryExtensions_void__AppendCommaSeparatedValues_0__3__IHeaderDictionary_String_StringArray(&__thrown, headers.get_handle(), key.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String[] GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)
    /**
    
            Get the associated values from the collection separated into individual values.
            Quoted values will not be split, and the quotes will be removed.
            

    - Parameter headers: The  to use.
    - Parameter key: The header name.
    - Returns: the associated values from the collection separated into individual values, or StringValues.Empty if the key is not present.

    */
    public static func GetCommaSeparatedValues(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary, key : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HeaderDictionaryExtensions_StringArray__GetCommaSeparatedValues_0__2__IHeaderDictionary_String(&__thrown, headers.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // void SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])
    /**
    
            Quotes any values containing commas, and then comma joins all of the values.
            

    - Parameter headers: The  to use.
    - Parameter key: The header name.
    - Parameter values: The header values.
    */
    public static func SetCommaSeparatedValues(headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary, key : dotnet.System.String, values : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HeaderDictionaryExtensions_void__SetCommaSeparatedValues_0__3__IHeaderDictionary_String_StringArray(&__thrown, headers.get_handle(), key.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HeaderDictionaryExtensions


// type: Microsoft.AspNetCore.Http.HostString
// boxed value type
    /**
    
            Represents the host portion of a URI can be used to construct URI's properly formatted and encoded for use in
            HTTP headers.
            

    */
public final class HostString
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HostString_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Returns true if the host is set.
            

    */
    public var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    
            Returns the value of the host part of the value. The port is removed if it was present.
            IPv6 addresses will have brackets added if they are missing.
            

    */
    public var Host : dotnet.System.String {
        get {
            return try! get_Host();
        }
    }
    /**
    
            Returns the value of the port part of the host, or null if none is found.
            

    */
    public var Port : Optional<Swift.Int32> {
        get {
            return try! get_Port();
        }
    }
    /**
    
            Returns the original value from the constructor.
            

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Http.HostString.#ctor(System.String)
    /**
    
            Creates a new HostString without modification. The value should be Unicode rather than punycode, and may have a port.
            IPv4 and IPv6 addresses are also allowed, and also may have ports.
            

    - Parameter value: 
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HostString_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Http.HostString.#ctor(System.String,System.Int32)
    /**
    
            Creates a new HostString from its host and port parts.
            

    - Parameter host: The value should be Unicode rather than punycode. IPv6 addresses must use square braces.
    - Parameter port: A positive, greater than 0 value representing the port in the host string.
    */
    public init(host : dotnet.System.String, port : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_HostString_ctor_0__2__String_i32(&__thrown, host.get_handle(), port);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_HostString_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.HostString.ToString
    /**
    
            Returns the value as normalized by ToUriComponent().
            

    - Returns: The value as normalized by .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToUriComponent()
// docid: M:Microsoft.AspNetCore.Http.HostString.ToUriComponent
    /**
    
            Returns the value properly formatted and encoded for use in a URI in a HTTP header.
            Any Unicode is converted to punycode. IPv6 addresses will have brackets added if they are missing.
            

    - Returns: The  value formated for use in a URI or HTTP header.

    */
    public func ToUriComponent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_String__ToUriComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.HostString FromUriComponent(System.String)
// docid: M:Microsoft.AspNetCore.Http.HostString.FromUriComponent(System.String)
    /**
    
            Creates a new HostString from the given URI component.
            Any punycode will be converted to Unicode.
            

    - Parameter uriComponent: The URI component string to create a  from.
    - Returns: The  that was created.

    */
    public class func FromUriComponent(uriComponent : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.HostString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_HostString__FromUriComponent_0__1__String(&__thrown, uriComponent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HostString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.HostString FromUriComponent(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.HostString.FromUriComponent(System.Uri)
    /**
    
            Creates a new HostString from the host and port of the give Uri instance.
            Punycode will be converted to Unicode.
            

    - Parameter uri: The  to create a  from.
    - Returns: The  that was created.

    */
    public class func FromUriComponent(uri : dotnet.System.Uri) throws -> aspnetcore.Microsoft.AspNetCore.Http.HostString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_HostString__FromUriComponent_0__1__Uri(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HostString(hndl : __return);
        }
    }
    // bool MatchesAny(Microsoft.Extensions.Primitives.StringSegment, System.Collections.Generic.IList<Microsoft.Extensions.Primitives.StringSegment>)
// docid: M:Microsoft.AspNetCore.Http.HostString.MatchesAny(Microsoft.Extensions.Primitives.StringSegment,System.Collections.Generic.IList{Microsoft.Extensions.Primitives.StringSegment})
    /**
    
            Matches the host portion of a host header value against a list of patterns.
            The host may be the encoded punycode or decoded unicode form so long as the pattern
            uses the same format.
            

    - Parameter value: Host header value with or without a port.
    - Parameter patterns: A set of pattern to match, without ports.
    - Returns:  if  matches any of the patterns.

    */
    public class func MatchesAny(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, patterns : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Primitives.StringSegment>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__MatchesAny_0__2__StringSegment_System_Collections_Generic_IList_Microsoft_Extensions_Primitives_StringSegment_(&__thrown, value.get_handle(), patterns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Http.HostString)
// docid: M:Microsoft.AspNetCore.Http.HostString.Equals(Microsoft.AspNetCore.Http.HostString)
    /**
    
            Compares the equality of the Value property, ignoring case.
            

    - Parameter other: The  to compare against.
    - Returns:  if they have the same value.

    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Http.HostString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__Equals_0__1__HostString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.HostString.Equals(System.Object)
    /**
    
            Compares against the given object only if it is a HostString.
            

    - Parameter obj: The  to compare against.
    - Returns:  if they have the same value.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.HostString.GetHashCode
    /**
    
            Gets a hash code for the value.
            

    - Returns: The hash code as an .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.HostString)
// docid: M:Microsoft.AspNetCore.Http.HostString.op_Equality(Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.HostString)
    /**
    
            Compares the two instances for equality.
            

    - Parameter left: The left parameter.
    - Parameter right: The right parameter.
    - Returns:  if both 's have the same value.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.AspNetCore.Http.HostString, right : aspnetcore.Microsoft.AspNetCore.Http.HostString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__op_Equality_0__2__HostString_HostString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.HostString)
// docid: M:Microsoft.AspNetCore.Http.HostString.op_Inequality(Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.HostString)
    /**
    
            Compares the two instances for inequality.
            

    - Parameter left: The left parameter.
    - Parameter right: The right parameter.
    - Returns:  if both 's values are not equal.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.AspNetCore.Http.HostString, right : aspnetcore.Microsoft.AspNetCore.Http.HostString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__op_Inequality_0__2__HostString_HostString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Http.HostString.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:Microsoft.AspNetCore.Http.HostString.get_HasValue
    public func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Http.HostString.get_Host
    public func get_Host() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_Port()
// docid: M:Microsoft.AspNetCore.Http.HostString.get_Port
    public func get_Port() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HostString_System_Nullable_i32___get_Port_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
} // HostString


// type: Microsoft.AspNetCore.Http.HttpContext
    /**
    
            Encapsulates all HTTP-specific information about an individual HTTP request.
            

    */
open class HttpContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HttpContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.Abort
    /**
    
            Aborts the connection underlying this request.
            

    */
    open func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_Features()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Features
    open func get_Features() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_IFeatureCollection__get_Features_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpResponse get_Response()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Response
    open func get_Response() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_HttpResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpResponse(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ConnectionInfo get_Connection()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Connection
    open func get_Connection() throws -> aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_ConnectionInfo__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.WebSocketManager get_WebSockets()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_WebSockets
    open func get_WebSockets() throws -> aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_WebSocketManager__get_WebSockets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_User(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_User(System.Security.Claims.ClaimsPrincipal)
    open func set_User(value : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_User_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_Items(System.Collections.Generic.IDictionary{System.Object,System.Object})
    open func set_Items(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_Items_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_RequestServices()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_RequestServices
    open func get_RequestServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_IServiceProvider__get_RequestServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_RequestServices(System.IServiceProvider)
    open func set_RequestServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_RequestServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_RequestAborted()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_RequestAborted
    open func get_RequestAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_CancellationToken__get_RequestAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestAborted(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_RequestAborted(System.Threading.CancellationToken)
    open func set_RequestAborted(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_RequestAborted_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TraceIdentifier()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_TraceIdentifier
    open func get_TraceIdentifier() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_String__get_TraceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceIdentifier(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_TraceIdentifier(System.String)
    open func set_TraceIdentifier(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_TraceIdentifier_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ISession get_Session()
// docid: M:Microsoft.AspNetCore.Http.HttpContext.get_Session
    open func get_Session() throws -> aspnetcore.Microsoft.AspNetCore.Http.ISession {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpContext_ISession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Session(Microsoft.AspNetCore.Http.ISession)
// docid: M:Microsoft.AspNetCore.Http.HttpContext.set_Session(Microsoft.AspNetCore.Http.ISession)
    open func set_Session(value : aspnetcore.Microsoft.AspNetCore.Http.ISession) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpContext_void__set_Session_0__1__ISession(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets information about the underlying connection for this request.
            

    */
    open var Connection : aspnetcore.Microsoft.AspNetCore.Http.ConnectionInfo {
        get {
            return try! get_Connection();
        }
    }
    /**
    
            Gets the collection of HTTP features provided by the server and middleware available on this request.
            

    */
    open var Features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_Features();
        }
    }
    /**
    
            Gets or sets a key/value collection that can be used to share data within the scope of this request.
            

    */
    open var Items : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v);
        }
    }
    /**
    
            Gets the  object for this request.
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            Notifies when the connection underlying this request is aborted and thus request operations should be
            cancelled.
            

    */
    open var RequestAborted : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_RequestAborted();
        }
        set(v) {
            return try! set_RequestAborted(value: v);
        }
    }
    /**
    
            Gets or sets the  that provides access to the request's service container.
            

    */
    open var RequestServices : dotnet.System.IServiceProvider {
        get {
            return try! get_RequestServices();
        }
        set(v) {
            return try! set_RequestServices(value: v);
        }
    }
    /**
    
            Gets the  object for this request.
            

    */
    open var Response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
        get {
            return try! get_Response();
        }
    }
    /**
    
            Gets or sets the object used to manage user session data for this request.
            

    */
    open var Session : aspnetcore.Microsoft.AspNetCore.Http.ISession {
        get {
            return try! get_Session();
        }
        set(v) {
            return try! set_Session(value: v);
        }
    }
    /**
    
            Gets or sets a unique identifier to represent this request in trace logs.
            

    */
    open var TraceIdentifier : dotnet.System.String {
        get {
            return try! get_TraceIdentifier();
        }
        set(v) {
            return try! set_TraceIdentifier(value: v);
        }
    }
    /**
    
            Gets or sets the user for this request.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
        set(v) {
            return try! set_User(value: v);
        }
    }
    /**
    
            Gets an object that manages the establishment of WebSocket connections for this request.
            

    */
    open var WebSockets : aspnetcore.Microsoft.AspNetCore.Http.WebSocketManager {
        get {
            return try! get_WebSockets();
        }
    }
} // HttpContext


// type: Microsoft.AspNetCore.Http.HttpMethods
public struct HttpMethods {
    // static field: System.String Connect
    /**
    
            HTTP "CONNECT" method.
            

    */
    public static var Connect : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Connect());
            return __return;
        }
    }
    // static field: System.String Delete
    /**
    
            HTTP "DELETE" method.
            

    */
    public static var Delete : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Delete());
            return __return;
        }
    }
    // static field: System.String Get
    /**
    
            HTTP "GET" method.
            

    */
    public static var Get : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Get());
            return __return;
        }
    }
    // static field: System.String Head
    /**
    
            HTTP "HEAD" method.
            

    */
    public static var Head : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Head());
            return __return;
        }
    }
    // static field: System.String Options
    /**
    
            HTTP "OPTIONS" method.
            

    */
    public static var Options : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Options());
            return __return;
        }
    }
    // static field: System.String Patch
    /**
    
            HTTP "PATCH" method.
            

    */
    public static var Patch : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Patch());
            return __return;
        }
    }
    // static field: System.String Post
    /**
    
            HTTP "POST" method.
            

    */
    public static var Post : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Post());
            return __return;
        }
    }
    // static field: System.String Put
    /**
    
            HTTP "PUT" method.
            

    */
    public static var Put : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Put());
            return __return;
        }
    }
    // static field: System.String Trace
    /**
    
            HTTP "TRACE" method.
            

    */
    public static var Trace : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpMethods_get_Trace());
            return __return;
        }
    }
    // bool IsConnect(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsConnect(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is CONNECT.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is CONNECT; otherwise, .
            

    */
    public static func IsConnect(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsConnect_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsDelete(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsDelete(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is DELETE.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is DELETE; otherwise, .
            

    */
    public static func IsDelete(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsDelete_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsGet(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsGet(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is GET.
            

    - Parameter method: The  HTTP request method.
    - Returns: 
             if the method is GET; otherwise, .
            

    */
    public static func IsGet(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsGet_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsHead(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsHead(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is HEAD.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is HEAD; otherwise, .
            

    */
    public static func IsHead(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsHead_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsOptions(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsOptions(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is OPTIONS.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is OPTIONS; otherwise, .
            

    */
    public static func IsOptions(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsOptions_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsPatch(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsPatch(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is PATCH.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is PATCH; otherwise, .
            

    */
    public static func IsPatch(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsPatch_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsPost(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsPost(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is POST.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is POST; otherwise, .
            

    */
    public static func IsPost(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsPost_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsPut(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsPut(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is PUT.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is PUT; otherwise, .
            

    */
    public static func IsPut(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsPut_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsTrace(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.IsTrace(System.String)
    /**
    
            Returns a value that indicates if the HTTP request method is TRACE.
            

    - Parameter method: The HTTP request method.
    - Returns: 
             if the method is TRACE; otherwise, .
            

    */
    public static func IsTrace(method : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__IsTrace_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String GetCanonicalizedValue(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.GetCanonicalizedValue(System.String)
    /**
    
             Returns the equivalent static instance, or the original instance if none match. This conversion is optional but allows for performance optimizations when comparing method values elsewhere.
            

    - Parameter method: 
    - Returns: 

    */
    public static func GetCanonicalizedValue(method : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_String__GetCanonicalizedValue_0__1__String(&__thrown, method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpMethods.Equals(System.String,System.String)
    /**
    
            Returns a value that indicates if the HTTP methods are the same.
            

    - Parameter methodA: The first HTTP request method to compare.
    - Parameter methodB: The second HTTP request method to compare.
    - Returns: 
             if the methods are the same; otherwise, .
            

    */
    public static func Equals(methodA : dotnet.System.String, methodB : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpMethods_bool__Equals_0__2__String_String(&__thrown, methodA.get_handle(), methodB.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // HttpMethods


// type: Microsoft.AspNetCore.Http.HttpProtocol
public struct HttpProtocol {
    // static field: System.String Http09
    /**
    
             HTTP protocol version 0.9.
            

    */
    public static var Http09 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpProtocol_get_Http09());
            return __return;
        }
    }
    // static field: System.String Http10
    /**
    
             HTTP protocol version 1.0.
            

    */
    public static var Http10 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpProtocol_get_Http10());
            return __return;
        }
    }
    // static field: System.String Http11
    /**
    
             HTTP protocol version 1.1.
            

    */
    public static var Http11 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpProtocol_get_Http11());
            return __return;
        }
    }
    // static field: System.String Http2
    /**
    
             HTTP protocol version 2.
            

    */
    public static var Http2 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpProtocol_get_Http2());
            return __return;
        }
    }
    // static field: System.String Http3
    /**
    
             HTTP protcol version 3.
            

    */
    public static var Http3 : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Http_HttpProtocol_get_Http3());
            return __return;
        }
    }
    // bool IsHttp09(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.IsHttp09(System.String)
    /**
    
            Returns a value that indicates if the HTTP request protocol is HTTP/0.9.
            

    - Parameter protocol: The HTTP request protocol.
    - Returns: 
             if the protocol is HTTP/0.9; otherwise, .
            

    */
    public static func IsHttp09(protocol_ : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_bool__IsHttp09_0__1__String(&__thrown, protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsHttp10(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.IsHttp10(System.String)
    /**
    
            Returns a value that indicates if the HTTP request protocol is HTTP/1.0.
            

    - Parameter protocol: The HTTP request protocol.
    - Returns: 
             if the protocol is HTTP/1.0; otherwise, .
            

    */
    public static func IsHttp10(protocol_ : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_bool__IsHttp10_0__1__String(&__thrown, protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsHttp11(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.IsHttp11(System.String)
    /**
    
            Returns a value that indicates if the HTTP request protocol is HTTP/1.1.
            

    - Parameter protocol: The HTTP request protocol.
    - Returns: 
             if the protocol is HTTP/1.1; otherwise, .
            

    */
    public static func IsHttp11(protocol_ : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_bool__IsHttp11_0__1__String(&__thrown, protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsHttp2(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.IsHttp2(System.String)
    /**
    
            Returns a value that indicates if the HTTP request protocol is HTTP/2.
            

    - Parameter protocol: The HTTP request protocol.
    - Returns: 
             if the protocol is HTTP/2; otherwise, .
            

    */
    public static func IsHttp2(protocol_ : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_bool__IsHttp2_0__1__String(&__thrown, protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsHttp3(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.IsHttp3(System.String)
    /**
    
            Returns a value that indicates if the HTTP request protocol is HTTP/3.
            

    - Parameter protocol: The HTTP request protocol.
    - Returns: 
             if the protocol is HTTP/3; otherwise, .
            

    */
    public static func IsHttp3(protocol_ : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_bool__IsHttp3_0__1__String(&__thrown, protocol_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String GetHttpProtocol(System.Version)
// docid: M:Microsoft.AspNetCore.Http.HttpProtocol.GetHttpProtocol(System.Version)
    /**
    
            Gets the HTTP request protocol for the specified .
            

    - Parameter version: The version.
    - Returns: A HTTP request protocol.

    */
    public static func GetHttpProtocol(version : dotnet.System.Version) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpProtocol_String__GetHttpProtocol_0__1__Version(&__thrown, version.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // HttpProtocol


// type: Microsoft.AspNetCore.Http.HttpRequest
    /**
    
            Represents the incoming side of an individual HTTP request.
            

    */
open class HttpRequest
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HttpRequest_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.ReadFormAsync(System.Threading.CancellationToken)
    /**
    
            Reads the request body if it is a form.
            

    - Returns: 

    */
    open func ReadFormAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_System_Threading_Tasks_Task_Microsoft_AspNetCore_Http_IFormCollection___ReadFormAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Method
    open func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Method(System.String)
    open func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Scheme()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Scheme
    open func get_Scheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_String__get_Scheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Scheme(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Scheme(System.String)
    open func set_Scheme(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Scheme_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsHttps()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_IsHttps
    open func get_IsHttps() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_bool__get_IsHttps_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsHttps(bool)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_IsHttps(System.Boolean)
    open func set_IsHttps(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_IsHttps_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HostString get_Host()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Host
    open func get_Host() throws -> aspnetcore.Microsoft.AspNetCore.Http.HostString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_HostString__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HostString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Host(Microsoft.AspNetCore.Http.HostString)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Host(Microsoft.AspNetCore.Http.HostString)
    open func set_Host(value : aspnetcore.Microsoft.AspNetCore.Http.HostString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Host_0__1__HostString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_PathBase()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_PathBase
    open func get_PathBase() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_PathString__get_PathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PathBase(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_PathBase(Microsoft.AspNetCore.Http.PathString)
    open func set_PathBase(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_PathBase_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_Path()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Path
    open func get_Path() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_PathString__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Path(Microsoft.AspNetCore.Http.PathString)
    open func set_Path(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Path_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.QueryString get_QueryString()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_QueryString
    open func get_QueryString() throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_QueryString__get_QueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QueryString(Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_QueryString(Microsoft.AspNetCore.Http.QueryString)
    open func set_QueryString(value : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_QueryString_0__1__QueryString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IQueryCollection get_Query()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Query
    open func get_Query() throws -> aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_IQueryCollection__get_Query_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
    open func set_Query(value : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Query_0__1__IQueryCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Protocol
    open func get_Protocol() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Protocol(System.String)
    open func set_Protocol(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IRequestCookieCollection get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Cookies
    open func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_IRequestCookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
    open func set_Cookies(value : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Cookies_0__1__IRequestCookieCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_ContentLength
    open func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_ContentLength(System.Nullable{System.Int64})
    open func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Body
    open func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Body(System.IO.Stream)
    open func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Pipelines.PipeReader get_BodyReader()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_BodyReader
    open func get_BodyReader() throws -> aspnetcore.System.IO.Pipelines.PipeReader {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_PipeReader__get_BodyReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeReader(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasFormContentType()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_HasFormContentType
    open func get_HasFormContentType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_bool__get_HasFormContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormCollection get_Form()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_Form
    open func get_Form() throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_IFormCollection__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IFormCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Form(Microsoft.AspNetCore.Http.IFormCollection)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_Form(Microsoft.AspNetCore.Http.IFormCollection)
    open func set_Form(value : aspnetcore.Microsoft.AspNetCore.Http.IFormCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_Form_0__1__IFormCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.get_RouteValues
    open func get_RouteValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpRequest_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Http.HttpRequest.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpRequest_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the request body .
            

    */
    open var Body : dotnet.System.IO.Stream {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    
            Gets the request body .
            

    */
    open var BodyReader : aspnetcore.System.IO.Pipelines.PipeReader {
        get {
            return try! get_BodyReader();
        }
    }
    /**
    
            Gets or sets the Content-Length header.
            

    */
    open var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Type header.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets the collection of Cookies for this request.
            

    */
    open var Cookies : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection {
        get {
            return try! get_Cookies();
        }
        set(v) {
            return try! set_Cookies(value: v);
        }
    }
    /**
    
            Gets or sets the request body as a form.
            

    */
    open var Form : aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        get {
            return try! get_Form();
        }
        set(v) {
            return try! set_Form(value: v);
        }
    }
    /**
    
            Checks the Content-Type header for form types.
            

    */
    open var HasFormContentType : Bool {
        get {
            return try! get_HasFormContentType();
        }
    }
    /**
    
            Gets the request headers.
            

    */
    open var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
    }
    /**
    
            Gets or sets the Host header. May include the port.
            

    */
    open var Host : aspnetcore.Microsoft.AspNetCore.Http.HostString {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v);
        }
    }
    /**
    
            Gets the  for this request.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Returns true if the RequestScheme is https.
            

    */
    open var IsHttps : Bool {
        get {
            return try! get_IsHttps();
        }
        set(v) {
            return try! set_IsHttps(value: v);
        }
    }
    /**
    
            Gets or sets the HTTP method.
            

    */
    open var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    
            Gets or sets the request path from RequestPath.
            

    */
    open var Path : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    
            Gets or sets the base path for the request. The path base should not end with a trailing slash.
            

    */
    open var PathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_PathBase();
        }
        set(v) {
            return try! set_PathBase(value: v);
        }
    }
    /**
    
            Gets or sets the request protocol (e.g. HTTP/1.1).
            

    */
    open var Protocol_ : dotnet.System.String {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v);
        }
    }
    /**
    
            Gets the query value collection parsed from Request.QueryString.
            

    */
    open var Query : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection {
        get {
            return try! get_Query();
        }
        set(v) {
            return try! set_Query(value: v);
        }
    }
    /**
    
            Gets or sets the raw query string used to create the query collection in Request.Query.
            

    */
    open var QueryString : aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        get {
            return try! get_QueryString();
        }
        set(v) {
            return try! set_QueryString(value: v);
        }
    }
    /**
    
            Gets the collection of route values for this request.
            

    */
    open var RouteValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v);
        }
    }
    /**
    
            Gets or sets the HTTP request scheme.
            

    */
    open var Scheme : dotnet.System.String {
        get {
            return try! get_Scheme();
        }
        set(v) {
            return try! set_Scheme(value: v);
        }
    }
} // HttpRequest


// type: Microsoft.AspNetCore.Http.HttpResponse
    /**
    
            Represents the outgoing side of an individual HTTP request.
            

    */
open class HttpResponse
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_HttpResponse_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void OnStarting(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.OnStarting(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    
            Adds a delegate to be invoked just before response headers will be sent to the client.
            Callbacks registered here run in reverse order.
            

    - Parameter callback: The delegate to execute.
    - Parameter state: A state object to capture and pass back to the delegate.
    */
    open func OnStarting(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__OnStarting_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnStarting(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnStarting(callback: del_callback, state: state);
    }
    // void OnStarting(System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.OnStarting(System.Func{System.Threading.Tasks.Task})
    /**
    
            Adds a delegate to be invoked just before response headers will be sent to the client.
            Callbacks registered here run in reverse order.
            

    - Parameter callback: The delegate to execute.
    */
    open func OnStarting(callback : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__OnStarting_0__1__System_Func_Task_(&__thrown, self.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnStarting(callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_callback = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(callback);
        return try OnStarting(callback: del_callback);
    }
    // void OnCompleted(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.OnCompleted(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    
            Adds a delegate to be invoked after the response has finished being sent to the client.
            

    - Parameter callback: The delegate to invoke.
    - Parameter state: A state object to capture and pass back to the delegate.
    */
    open func OnCompleted(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__OnCompleted_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnCompleted(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnCompleted(callback: del_callback, state: state);
    }
    // void RegisterForDispose(System.IDisposable)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.RegisterForDispose(System.IDisposable)
    /**
    
            Registers an object for disposal by the host once the request has finished processing.
            

    - Parameter disposable: The object to be disposed.
    */
    open func RegisterForDispose(disposable : dotnet.System.IDisposable) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__RegisterForDispose_0__1__IDisposable(&__thrown, self.get_handle(), disposable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterForDisposeAsync(System.IAsyncDisposable)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.RegisterForDisposeAsync(System.IAsyncDisposable)
    /**
    
            Registers an object for asynchronous disposal by the host once the request has finished processing.
            

    - Parameter disposable: The object to be disposed asynchronously.
    */
    open func RegisterForDisposeAsync(disposable : dotnet.System.IAsyncDisposable) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__RegisterForDisposeAsync_0__1__IAsyncDisposable(&__thrown, self.get_handle(), disposable.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnCompleted(System.Func<System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.OnCompleted(System.Func{System.Threading.Tasks.Task})
    /**
    
            Adds a delegate to be invoked after the response has finished being sent to the client.
            

    - Parameter callback: The delegate to invoke.
    */
    open func OnCompleted(callback : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__OnCompleted_0__1__System_Func_Task_(&__thrown, self.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnCompleted(callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_callback = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(callback);
        return try OnCompleted(callback: del_callback);
    }
    // void Redirect(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.Redirect(System.String)
    /**
    
            Returns a temporary redirect response (HTTP 302) to the client.
            

    - Parameter location: The URL to redirect the client to. This must be properly encoded for use in http headers
            where only ASCII characters are allowed.
    */
    open func Redirect(location : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__Redirect_0__1__String(&__thrown, self.get_handle(), location.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Redirect(System.String, bool)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.Redirect(System.String,System.Boolean)
    /**
    
            Returns a redirect response (HTTP 301 or HTTP 302) to the client.
            

    - Parameter location: The URL to redirect the client to. This must be properly encoded for use in http headers
            where only ASCII characters are allowed.
    - Parameter permanent: True if the redirect is permanent (301), otherwise false (302).
    */
    open func Redirect(location : dotnet.System.String, permanent : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__Redirect_0__2__String_bool(&__thrown, self.get_handle(), location.get_handle(), Swift.Int32(permanent ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.StartAsync(System.Threading.CancellationToken)
    /**
    
            Starts the response by calling OnStarting() and making headers unmodifiable.
            

    - Parameter cancellationToken: 
    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task CompleteAsync()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.CompleteAsync
    /**
    
            Flush any remaining response headers, data, or trailers.
            This may throw if the response is in an invalid state such as a Content-Length mismatch.
            

    - Returns: 

    */
    open func CompleteAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_Task__CompleteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.set_StatusCode(System.Int32)
    open func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_Body
    open func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.set_Body(System.IO.Stream)
    open func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Pipelines.PipeWriter get_BodyWriter()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_BodyWriter
    open func get_BodyWriter() throws -> aspnetcore.System.IO.Pipelines.PipeWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_PipeWriter__get_BodyWriter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeWriter(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_ContentLength
    open func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.set_ContentLength(System.Nullable{System.Int64})
    open func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_ContentType
    open func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.set_ContentType(System.String)
    open func set_ContentType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_HttpResponse_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IResponseCookies get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_Cookies
    open func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_IResponseCookies__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasStarted()
// docid: M:Microsoft.AspNetCore.Http.HttpResponse.get_HasStarted
    open func get_HasStarted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponse_bool__get_HasStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets or sets the response body .
            

    */
    open var Body : dotnet.System.IO.Stream {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    
            Gets the response body 
            

    */
    open var BodyWriter : aspnetcore.System.IO.Pipelines.PipeWriter {
        get {
            return try! get_BodyWriter();
        }
    }
    /**
    
            Gets or sets the value for the Content-Length response header.
            

    */
    open var ContentLength : Optional<Swift.Int64> {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v!);
        }
    }
    /**
    
            Gets or sets the value for the Content-Type response header.
            

    */
    open var ContentType : dotnet.System.String {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    
            Gets an object that can be used to manage cookies for this response.
            

    */
    open var Cookies : aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies {
        get {
            return try! get_Cookies();
        }
    }
    /**
    
            Gets a value indicating whether response headers have been sent to the client.
            

    */
    open var HasStarted : Bool {
        get {
            return try! get_HasStarted();
        }
    }
    /**
    
            Gets the response headers.
            

    */
    open var Headers : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        get {
            return try! get_Headers();
        }
    }
    /**
    
            Gets the  for this response.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets the HTTP response code.
            

    */
    open var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
} // HttpResponse


// type: Microsoft.AspNetCore.Http.HttpResponseWritingExtensions
public struct HttpResponseWritingExtensions {
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)
    /**
    
            Writes the given text to the response body. UTF-8 encoding will be used.
            

    - Parameter response: The .
    - Parameter text: The text to write to the response.
    - Parameter cancellationToken: Notifies when request operations should be cancelled.
    - Returns: A task that represents the completion of the write operation.

    */
    public static func WriteAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, text : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseWritingExtensions_Task__WriteAsync_0__3__HttpResponse_String_CancellationToken(&__thrown, response.get_handle(), text.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Text.Encoding, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Text.Encoding,System.Threading.CancellationToken)
    /**
    
            Writes the given text to the response body using the given encoding.
            

    - Parameter response: The .
    - Parameter text: The text to write to the response.
    - Parameter encoding: The encoding to use.
    - Parameter cancellationToken: Notifies when request operations should be cancelled.
    - Returns: A task that represents the completion of the write operation.

    */
    public static func WriteAsync(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, text : dotnet.System.String, encoding : dotnet.System.Text.Encoding, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_HttpResponseWritingExtensions_Task__WriteAsync_0__4__HttpResponse_String_Encoding_CancellationToken(&__thrown, response.get_handle(), text.get_handle(), encoding.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // HttpResponseWritingExtensions


// type: Microsoft.AspNetCore.Http.IHttpContextAccessor
    /**
    
            Provides access to the current , if one is available.
            

    */
open class IHttpContextAccessor
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IHttpContextAccessor
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IHttpContextAccessor_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Http.IHttpContextAccessor.get_HttpContext
    open func get_HttpContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHttpContextAccessor_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.IHttpContextAccessor.set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
    open func set_HttpContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHttpContextAccessor_void__set_HttpContext_0__1__HttpContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpContextAccessor


// type: Microsoft.AspNetCore.Http.IHttpContextFactory
    /**
    
            Provides methods to create and dispose of  instances.
            

    */
open class IHttpContextFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IHttpContextFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IHttpContextFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Http.HttpContext Create(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.IHttpContextFactory.Create(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Creates an  instance for the specified set of HTTP features.
            

    - Parameter featureCollection: The collection of HTTP features to set on the created instance.
    - Returns: The  instance.

    */
    open func Create(featureCollection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHttpContextFactory_HttpContext__Create_0__1__IFeatureCollection(&__thrown, self.get_handle(), featureCollection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // void Dispose(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.IHttpContextFactory.Dispose(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Releases resources held by the .
            

    - Parameter httpContext: The  to dispose.
    */
    open func Dispose(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHttpContextFactory_void__Dispose_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpContextFactory


// type: Microsoft.AspNetCore.Http.IMiddleware
    /**
    
            Defines middleware that can be added to the application's request pipeline.
            

    */
open class IMiddleware
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IMiddleware
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IMiddleware_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Http.IMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Request handling method.
            

    - Parameter context: The  for the current request.
    - Parameter next: The delegate representing the remaining middleware in the request pipeline.
    - Returns: A  that represents the execution of this middleware.

    */
    open func InvokeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IMiddleware_Task__InvokeAsync_0__2__HttpContext_RequestDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
    // delegate closure overload
    open func InvokeAsync(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, next : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) async throws {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(next);
        return try await InvokeAsync(context: context, next: del_next);
    }
} // IMiddleware


// type: Microsoft.AspNetCore.Http.IMiddlewareFactory
    /**
    
            Provides methods to create middleware.
            

    */
open class IMiddlewareFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IMiddlewareFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IMiddlewareFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Http.IMiddleware Create(System.Type)
// docid: M:Microsoft.AspNetCore.Http.IMiddlewareFactory.Create(System.Type)
    /**
    
            Creates a middleware instance for each request.
            

    - Parameter middlewareType: The concrete  of the .
    - Returns: The  instance.

    */
    open func Create(middlewareType : dotnet.System.Type_) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IMiddleware> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IMiddlewareFactory_IMiddleware__Create_0__1__Type(&__thrown, self.get_handle(), middlewareType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IMiddleware(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Release(Microsoft.AspNetCore.Http.IMiddleware)
// docid: M:Microsoft.AspNetCore.Http.IMiddlewareFactory.Release(Microsoft.AspNetCore.Http.IMiddleware)
    /**
    
            Releases a  instance at the end of each request.
            

    - Parameter middleware: The  instance to release.
    */
    open func Release(middleware : aspnetcore.Microsoft.AspNetCore.Http.IMiddleware) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IMiddlewareFactory_void__Release_0__1__IMiddleware(&__thrown, self.get_handle(), middleware.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IMiddlewareFactory


// type: Microsoft.AspNetCore.Http.IResult
    /**
    
            Defines a contract that represents the result of an HTTP endpoint.
            

    */
open class IResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IResult_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.IResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Write an HTTP response reflecting the result.
            

    - Parameter httpContext: The  for the current request.
    - Returns: A task that represents the asynchronous execute operation.

    */
    open func ExecuteAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IResult_Task__ExecuteAsync_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).ToAsync();
        }
    }
} // IResult


// type: Microsoft.AspNetCore.Http.PathString
// boxed value type
    /**
    
            Provides correct escaping for Path and PathBase values when needed to reconstruct a request or redirect URI string
            

    */
public final class PathString
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_PathString_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Http.PathString Empty
    /**
    
            Represents the empty path. This field is read-only.
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: Microsoft_AspNetCore_Http_PathString_get_Empty());
            return __return;
        }
    }
    /**
    
            True if the path is not empty
            

    */
    public var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    
            The unescaped path value
            

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Http.PathString.#ctor(System.String)
    /**
    
            Initialize the path string with a given value. This value must be in unescaped format. Use
            PathString.FromUriComponent(value) if you have a path value which is in an escaped format.
            

    - Parameter value: The unescaped path to be assigned to the Value property.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_PathString_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_PathString_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.PathString.ToString
    /**
    
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            

    - Returns: The escaped path value

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToUriComponent()
// docid: M:Microsoft.AspNetCore.Http.PathString.ToUriComponent
    /**
    
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            

    - Returns: The escaped path value

    */
    public func ToUriComponent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__ToUriComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.PathString FromUriComponent(System.String)
// docid: M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)
    /**
    
            Returns an PathString given the path as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a path.
            

    - Parameter uriComponent: The escaped path as it appears in the URI format.
    - Returns: The resulting PathString

    */
    public class func FromUriComponent(uriComponent : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_PathString__FromUriComponent_0__1__String(&__thrown, uriComponent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.PathString FromUriComponent(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)
    /**
    
            Returns an PathString given the path as from a Uri object. Relative Uri objects are not supported.
            

    - Parameter uri: The Uri object
    - Returns: The resulting PathString

    */
    public class func FromUriComponent(uri : dotnet.System.Uri) throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_PathString__FromUriComponent_0__1__Uri(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
    /**
    
            Determines whether the beginning of this  instance matches the specified .
            

    - Parameter other: The  to compare.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__1__PathString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
    /**
    
            Determines whether the beginning of this  instance matches the specified  when compared
            using the specified comparison option.
            

    - Parameter other: The  to compare.
    - Parameter comparisonType: One of the enumeration values that determines how this  and value are compared.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__2__PathString_StringComparison(&__thrown, self.get_handle(), other.get_handle(), comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString, ref Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)
    /**
    
            Determines whether the beginning of this  instance matches the specified  and returns
            the remaining segments.
            

    - Parameter other: The  to compare.
    - Parameter remaining: The remaining segments after the match.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, remaining : inout aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_remaining = remaining.get_handle();
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__2__PathString_outPathString(&__thrown, self.get_handle(), other.get_handle(), &_tmp_out_remaining);
        let _tmp2_remaining = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_remaining);
            remaining = _tmp2_remaining;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison, ref Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)
    /**
    
            Determines whether the beginning of this  instance matches the specified  when compared
            using the specified comparison option and returns the remaining segments.
            

    - Parameter other: The  to compare.
    - Parameter comparisonType: One of the enumeration values that determines how this  and value are compared.
    - Parameter remaining: The remaining segments after the match.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, comparisonType : dotnet.System.StringComparison, remaining : inout aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_remaining = remaining.get_handle();
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__3__PathString_StringComparison_outPathString(&__thrown, self.get_handle(), other.get_handle(), comparisonType.get_value(), &_tmp_out_remaining);
        let _tmp2_remaining = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_remaining);
            remaining = _tmp2_remaining;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString, ref Microsoft.AspNetCore.Http.PathString, ref Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@,Microsoft.AspNetCore.Http.PathString@)
    /**
    
            Determines whether the beginning of this  instance matches the specified  and returns
            the matched and remaining segments.
            

    - Parameter other: The  to compare.
    - Parameter matched: The matched segments with the original casing in the source value.
    - Parameter remaining: The remaining segments after the match.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, matched : inout aspnetcore.Microsoft.AspNetCore.Http.PathString, remaining : inout aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_matched = matched.get_handle();
            var _tmp_out_remaining = remaining.get_handle();
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__3__PathString_outPathString_outPathString(&__thrown, self.get_handle(), other.get_handle(), &_tmp_out_matched, &_tmp_out_remaining);
        let _tmp2_matched = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_matched);
            matched = _tmp2_matched;
        let _tmp2_remaining = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_remaining);
            remaining = _tmp2_remaining;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison, ref Microsoft.AspNetCore.Http.PathString, ref Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@,Microsoft.AspNetCore.Http.PathString@)
    /**
    
            Determines whether the beginning of this  instance matches the specified  when compared
            using the specified comparison option and returns the matched and remaining segments.
            

    - Parameter other: The  to compare.
    - Parameter comparisonType: One of the enumeration values that determines how this  and value are compared.
    - Parameter matched: The matched segments with the original casing in the source value.
    - Parameter remaining: The remaining segments after the match.
    - Returns: true if value matches the beginning of this string; otherwise, false.

    */
    public func StartsWithSegments(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, comparisonType : dotnet.System.StringComparison, matched : inout aspnetcore.Microsoft.AspNetCore.Http.PathString, remaining : inout aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_matched = matched.get_handle();
            var _tmp_out_remaining = remaining.get_handle();
        let __return = Microsoft_AspNetCore_Http_PathString_bool__StartsWithSegments_0__4__PathString_StringComparison_outPathString_outPathString(&__thrown, self.get_handle(), other.get_handle(), comparisonType.get_value(), &_tmp_out_matched, &_tmp_out_remaining);
        let _tmp2_matched = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_matched);
            matched = _tmp2_matched;
        let _tmp2_remaining = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: _tmp_out_remaining);
            remaining = _tmp2_remaining;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Http.PathString Add(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)
    /**
    
            Adds two PathString instances into a combined PathString value.
            

    - Returns: The combined PathString value

    */
    public func Add(other : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_PathString__Add_0__1__PathString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // System.String Add(Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Combines a PathString and QueryString into the joined URI formatted string value.
            

    - Returns: The joined URI formatted string value

    */
    public func Add(other : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__Add_0__1__QueryString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)
    /**
    
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            

    - Parameter other: The second PathString for comparison.
    - Returns: True if both PathString values are equal

    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__Equals_0__1__PathString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Http.PathString, System.StringComparison)
// docid: M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
    /**
    
            Compares this PathString value to another value using a specific StringComparison type
            

    - Parameter other: The second PathString for comparison
    - Parameter comparisonType: The StringComparison type to use
    - Returns: True if both PathString values are equal

    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Http.PathString, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__Equals_0__2__PathString_StringComparison(&__thrown, self.get_handle(), other.get_handle(), comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.PathString.Equals(System.Object)
    /**
    
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            

    - Parameter obj: The second PathString for comparison.
    - Returns: True if both PathString values are equal

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.PathString.GetHashCode
    /**
    
            Returns the hash code for the PathString value. The hash code is provided by the OrdinalIgnoreCase implementation.
            

    - Returns: The hash code

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Operator call through to Equals
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: True if both PathString values are equal

    */
    public class func op_Equality(left : aspnetcore.Microsoft.AspNetCore.Http.PathString, right : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__op_Equality_0__2__PathString_PathString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Operator call through to Equals
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: True if both PathString values are not equal

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.AspNetCore.Http.PathString, right : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__op_Inequality_0__2__PathString_PathString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String op_Addition(System.String, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)
    /**
    
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: The ToString combination of both values

    */
    public class func op_Addition(left : dotnet.System.String, right : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__op_Addition_0__2__String_PathString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String op_Addition(Microsoft.AspNetCore.Http.PathString, System.String)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)
    /**
    
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: The ToString combination of both values

    */
    public class func op_Addition(left : aspnetcore.Microsoft.AspNetCore.Http.PathString, right : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__op_Addition_0__2__PathString_String(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString op_Addition(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Operator call through to Add
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: The PathString combination of both values

    */
    public class func op_Addition(left : aspnetcore.Microsoft.AspNetCore.Http.PathString, right : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_PathString__op_Addition_0__2__PathString_PathString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] System.String op_Addition(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Operator call through to Add
            

    - Parameter left: The left parameter
    - Parameter right: The right parameter
    - Returns: The PathString combination of both values

    */
    public class func op_Addition(left : aspnetcore.Microsoft.AspNetCore.Http.PathString, right : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__op_Addition_0__2__PathString_QueryString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString op_Implicit(System.String)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Implicit(System.String)
    public class func op_Implicit(s : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_PathString__op_Implicit_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] System.String op_Implicit(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Http.PathString.op_Implicit(Microsoft.AspNetCore.Http.PathString)
    public class func op_Implicit(path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__op_Implicit_0__1__PathString(&__thrown, path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Http.PathString.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:Microsoft.AspNetCore.Http.PathString.get_HasValue
    public func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_PathString_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // PathString


// type: Microsoft.AspNetCore.Http.QueryString
// boxed value type
    /**
    
            Provides correct handling for QueryString value when needed to reconstruct a request or redirect URI string
            

    */
public final class QueryString
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_QueryString_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Http.QueryString Empty
    /**
    
            Represents the empty query string. This field is read-only.
            

    */
    public class var Empty : aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl: Microsoft_AspNetCore_Http_QueryString_get_Empty());
            return __return;
        }
    }
    /**
    
            True if the query string is not empty
            

    */
    public var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    
            The escaped query string with the leading '?' character
            

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryString.#ctor(System.String)
    /**
    
            Initialize the query string with a given value. This value must be in escaped and delimited format with
            a leading '?' character.
            

    - Parameter value: The query string to be assigned to the Value property.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_QueryString_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_QueryString_implicit_ctor();
            super.init(hndl: h);
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Http.QueryString.ToString
    /**
    
            Provides the query string escaped in a way which is correct for combining into the URI representation.
            A leading '?' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            

    - Returns: The query string value

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToUriComponent()
// docid: M:Microsoft.AspNetCore.Http.QueryString.ToUriComponent
    /**
    
            Provides the query string escaped in a way which is correct for combining into the URI representation.
            A leading '?' character will be included unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            

    - Returns: The query string value

    */
    public func ToUriComponent() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_String__ToUriComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString FromUriComponent(System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)
    /**
    
            Returns an QueryString given the query as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a query.
            

    - Parameter uriComponent: The escaped query as it appears in the URI format.
    - Returns: The resulting QueryString

    */
    public class func FromUriComponent(uriComponent : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__FromUriComponent_0__1__String(&__thrown, uriComponent.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString FromUriComponent(System.Uri)
// docid: M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)
    /**
    
            Returns an QueryString given the query as from a Uri object. Relative Uri objects are not supported.
            

    - Parameter uri: The Uri object
    - Returns: The resulting QueryString

    */
    public class func FromUriComponent(uri : dotnet.System.Uri) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__FromUriComponent_0__1__Uri(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString Create(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Create(System.String,System.String)
    /**
    
            Create a query string with a single given parameter name and value.
            

    - Parameter name: The un-encoded parameter name
    - Parameter value: The un-encoded parameter value
    - Returns: The resulting QueryString

    */
    public class func Create(name : dotnet.System.String, value : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__Create_0__2__String_String(&__thrown, name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    /**
    
            Creates a query string composed from the given name value pairs.
            

    - Parameter parameters: 
    - Returns: The resulting QueryString

    */
    public class func Create(parameters : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__Create_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
    /**
    
            Creates a query string composed from the given name value pairs.
            

    - Parameter parameters: 
    - Returns: The resulting QueryString

    */
    public class func Create(parameters : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__Create_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues__(&__thrown, parameters.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString Add(Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Add(Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Concatenates  to the current query string.
            

    - Parameter other: The  to concatenate.
    - Returns: The concatenated .

    */
    public func Add(other : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__Add_0__1__QueryString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Http.QueryString Add(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Add(System.String,System.String)
    /**
    
            Concatenates a query string with  and 
            to the current query string.
            

    - Parameter name: The name of the query string to concatenate.
    - Parameter value: The value of the query string to concatenate.
    - Returns: The concatenated .

    */
    public func Add(name : dotnet.System.String, value : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__Add_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Equals(Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Evalutes if the current query string is equal to .
            

    - Parameter other: The  to compare.
    - Returns:  if the query strings are equal.

    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_bool__Equals_0__1__QueryString(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Http.QueryString.Equals(System.Object)
    /**
    
            Evaluates if the current query string is equal to an object .
            

    - Parameter obj: An object to compare.
    - Returns:  if the query strings are equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Http.QueryString.GetHashCode
    /**
    
            Gets a hash code for the value.
            

    - Returns: The hash code as an .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.QueryString.op_Equality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Evaluates if one query string is equal to another.
            

    - Parameter left: A  instance.
    - Parameter right: A  instance.
    - Returns:  if the query strings are equal.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.AspNetCore.Http.QueryString, right : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_bool__op_Equality_0__2__QueryString_QueryString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.QueryString.op_Inequality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Evaluates if one query string is not equal to another.
            

    - Parameter left: A  instance.
    - Parameter right: A  instance.
    - Returns:  if the query strings are not equal.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.AspNetCore.Http.QueryString, right : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_bool__op_Inequality_0__2__QueryString_QueryString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.QueryString op_Addition(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
// docid: M:Microsoft.AspNetCore.Http.QueryString.op_Addition(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
    /**
    
            Concatenates  and  into a single query string.
            

    - Parameter left: A  instance.
    - Parameter right: A  instance.
    - Returns: The concatenated .

    */
    public class func op_Addition(left : aspnetcore.Microsoft.AspNetCore.Http.QueryString, right : aspnetcore.Microsoft.AspNetCore.Http.QueryString) throws -> aspnetcore.Microsoft.AspNetCore.Http.QueryString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_QueryString__op_Addition_0__2__QueryString_QueryString(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.QueryString(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Http.QueryString.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:Microsoft.AspNetCore.Http.QueryString.get_HasValue
    public func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_QueryString_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // QueryString


// type: Microsoft.AspNetCore.Http.RequestDelegate
    /**
    
            A function that can process an HTTP request.
            

    */
public final class RequestDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_RequestDelegate_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegate.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    public func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegate_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(Microsoft.AspNetCore.Http.HttpContext, System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegate.BeginInvoke(Microsoft.AspNetCore.Http.HttpContext,System.AsyncCallback,System.Object)
    public func BeginInvoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegate_IAsyncResult__BeginInvoke_0__3__HttpContext_AsyncCallback_Object(&__thrown, self.get_handle(), context.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegate_Task__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, context : NonnullHandle) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let tcs = try System.Threading.Tasks.TaskCompletionSource();
                Task
                {
                    do
                    {
                    try await __closure_Invoke(aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl: context));
                    try tcs.SetResult();
                    }
                    catch let e as dotnet.System.Exception
                    {
                        try! tcs.SetException(exception: e);
                    }
                    catch
                    {
                        let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                        try! tcs.SetException(exception: e);
                    }
                }

                let t = try tcs.get_Task();
                let h_task = __copy_handle(t.get_handle());
                return h_task;
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, context : NonnullHandle) -> NonnullHandle
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> NonnullHandle;
            return f_interlude(thrown, context);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_RequestDelegate_create(
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegate.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    public func callAsFunction(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegate_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RequestDelegate


// type: Microsoft.AspNetCore.Http.RequestDelegateResult
    /**
    
            The result of creating a  from a 
            

    */
public final class RequestDelegateResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_RequestDelegateResult_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, System.Collections.Generic.IReadOnlyList<System.Object>)
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateResult.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.Collections.Generic.IReadOnlyList{System.Object})
    /**
    
            Creates a new instance of .
            

    */
    public init(requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, metadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_RequestDelegateResult_ctor_0__2__RequestDelegate_System_Collections_Generic_IReadOnlyList_object_(&__thrown, requestDelegate.get_handle(), metadata.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_RequestDelegate()
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateResult.get_RequestDelegate
    public func get_RequestDelegate() throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateResult_RequestDelegate__get_RequestDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_EndpointMetadata()
// docid: M:Microsoft.AspNetCore.Http.RequestDelegateResult.get_EndpointMetadata
    public func get_EndpointMetadata() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestDelegateResult_System_Collections_Generic_IReadOnlyList_object___get_EndpointMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Gets endpoint metadata inferred from creating the 
            

    */
    public var EndpointMetadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_EndpointMetadata();
        }
    }
    /**
    
            Gets the 
            

    */
    public var RequestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        get {
            return try! get_RequestDelegate();
        }
    }
} // RequestDelegateResult


// type: Microsoft.AspNetCore.Http.RequestTrailerExtensions
public struct RequestTrailerExtensions {
    // Microsoft.Extensions.Primitives.StringValues GetDeclaredTrailers(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetDeclaredTrailers(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Gets the request "Trailer" header that lists which trailers to expect after the body.
            

    - Parameter request: 
    - Returns: 

    */
    public static func GetDeclaredTrailers(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestTrailerExtensions_StringValues__GetDeclaredTrailers_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // bool SupportsTrailers(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Indicates if the request supports receiving trailer headers.
            

    - Parameter request: 
    - Returns: 

    */
    public static func SupportsTrailers(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestTrailerExtensions_bool__SupportsTrailers_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckTrailersAvailable(Microsoft.AspNetCore.Http.HttpRequest)
// docid: M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.CheckTrailersAvailable(Microsoft.AspNetCore.Http.HttpRequest)
    /**
    
            Checks if the request supports trailers and they are available to be read now.
            This does not mean that there are any trailers to read.
            

    - Parameter request: 
    - Returns: 

    */
    public static func CheckTrailersAvailable(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestTrailerExtensions_bool__CheckTrailersAvailable_0__1__HttpRequest(&__thrown, request.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringValues GetTrailer(Microsoft.AspNetCore.Http.HttpRequest, System.String)
// docid: M:Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetTrailer(Microsoft.AspNetCore.Http.HttpRequest,System.String)
    /**
    
            Gets the requested trailing header from the response. Check 
            or a NotSupportedException may be thrown.
            Check  or an InvalidOperationException may be thrown.
            

    - Parameter request: 
    - Parameter trailerName: 
    */
    public static func GetTrailer(request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest, trailerName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_RequestTrailerExtensions_StringValues__GetTrailer_0__2__HttpRequest_String(&__thrown, request.get_handle(), trailerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
} // RequestTrailerExtensions


// type: Microsoft.AspNetCore.Http.ResponseTrailerExtensions
public struct ResponseTrailerExtensions {
    // void DeclareTrailer(Microsoft.AspNetCore.Http.HttpResponse, System.String)
// docid: M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.DeclareTrailer(Microsoft.AspNetCore.Http.HttpResponse,System.String)
    /**
    
            Adds the given trailer name to the 'Trailer' response header. This must happen before the response headers are sent.
            

    - Parameter response: 
    - Parameter trailerName: 
    */
    public static func DeclareTrailer(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, trailerName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ResponseTrailerExtensions_void__DeclareTrailer_0__2__HttpResponse_String(&__thrown, response.get_handle(), trailerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool SupportsTrailers(Microsoft.AspNetCore.Http.HttpResponse)
// docid: M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.SupportsTrailers(Microsoft.AspNetCore.Http.HttpResponse)
    /**
    
            Indicates if the server supports sending trailer headers for this response.
            

    - Parameter response: 
    - Returns: 

    */
    public static func SupportsTrailers(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ResponseTrailerExtensions_bool__SupportsTrailers_0__1__HttpResponse(&__thrown, response.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void AppendTrailer(Microsoft.AspNetCore.Http.HttpResponse, System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.ResponseTrailerExtensions.AppendTrailer(Microsoft.AspNetCore.Http.HttpResponse,System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Adds the given trailer header to the trailers collection to be sent at the end of the response body.
            Check  or an InvalidOperationException may be thrown.
            

    - Parameter response: 
    - Parameter trailerName: 
    - Parameter trailerValues: 
    */
    public static func AppendTrailer(response : aspnetcore.Microsoft.AspNetCore.Http.HttpResponse, trailerName : dotnet.System.String, trailerValues : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ResponseTrailerExtensions_void__AppendTrailer_0__3__HttpResponse_String_StringValues(&__thrown, response.get_handle(), trailerName.get_handle(), trailerValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ResponseTrailerExtensions


// type: Microsoft.AspNetCore.Http.StatusCodes
public struct StatusCodes {
    // static field: System.Int32 Status100Continue
    /**
    
            HTTP status code 100.
            

    */
    public static var Status100Continue : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status100Continue();
            return __return;
        }
    }
    // static field: System.Int32 Status101SwitchingProtocols
    /**
    
            HTTP status code 101.
            

    */
    public static var Status101SwitchingProtocols : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status101SwitchingProtocols();
            return __return;
        }
    }
    // static field: System.Int32 Status102Processing
    /**
    
            HTTP status code 102.
            

    */
    public static var Status102Processing : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status102Processing();
            return __return;
        }
    }
    // static field: System.Int32 Status200OK
    /**
    
            HTTP status code 200.
            

    */
    public static var Status200OK : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status200OK();
            return __return;
        }
    }
    // static field: System.Int32 Status201Created
    /**
    
            HTTP status code 201.
            

    */
    public static var Status201Created : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status201Created();
            return __return;
        }
    }
    // static field: System.Int32 Status202Accepted
    /**
    
            HTTP status code 202.
            

    */
    public static var Status202Accepted : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status202Accepted();
            return __return;
        }
    }
    // static field: System.Int32 Status203NonAuthoritative
    /**
    
            HTTP status code 203.
            

    */
    public static var Status203NonAuthoritative : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status203NonAuthoritative();
            return __return;
        }
    }
    // static field: System.Int32 Status204NoContent
    /**
    
            HTTP status code 204.
            

    */
    public static var Status204NoContent : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status204NoContent();
            return __return;
        }
    }
    // static field: System.Int32 Status205ResetContent
    /**
    
            HTTP status code 205.
            

    */
    public static var Status205ResetContent : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status205ResetContent();
            return __return;
        }
    }
    // static field: System.Int32 Status206PartialContent
    /**
    
            HTTP status code 206.
            

    */
    public static var Status206PartialContent : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status206PartialContent();
            return __return;
        }
    }
    // static field: System.Int32 Status207MultiStatus
    /**
    
            HTTP status code 207.
            

    */
    public static var Status207MultiStatus : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status207MultiStatus();
            return __return;
        }
    }
    // static field: System.Int32 Status208AlreadyReported
    /**
    
            HTTP status code 208.
            

    */
    public static var Status208AlreadyReported : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status208AlreadyReported();
            return __return;
        }
    }
    // static field: System.Int32 Status226IMUsed
    /**
    
            HTTP status code 226.
            

    */
    public static var Status226IMUsed : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status226IMUsed();
            return __return;
        }
    }
    // static field: System.Int32 Status300MultipleChoices
    /**
    
            HTTP status code 300.
            

    */
    public static var Status300MultipleChoices : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status300MultipleChoices();
            return __return;
        }
    }
    // static field: System.Int32 Status301MovedPermanently
    /**
    
            HTTP status code 301.
            

    */
    public static var Status301MovedPermanently : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status301MovedPermanently();
            return __return;
        }
    }
    // static field: System.Int32 Status302Found
    /**
    
            HTTP status code 302.
            

    */
    public static var Status302Found : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status302Found();
            return __return;
        }
    }
    // static field: System.Int32 Status303SeeOther
    /**
    
            HTTP status code 303.
            

    */
    public static var Status303SeeOther : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status303SeeOther();
            return __return;
        }
    }
    // static field: System.Int32 Status304NotModified
    /**
    
            HTTP status code 304.
            

    */
    public static var Status304NotModified : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status304NotModified();
            return __return;
        }
    }
    // static field: System.Int32 Status305UseProxy
    /**
    
            HTTP status code 305.
            

    */
    public static var Status305UseProxy : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status305UseProxy();
            return __return;
        }
    }
    // static field: System.Int32 Status306SwitchProxy
    /**
    
            HTTP status code 306.
            

    */
    public static var Status306SwitchProxy : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status306SwitchProxy();
            return __return;
        }
    }
    // static field: System.Int32 Status307TemporaryRedirect
    /**
    
            HTTP status code 307.
            

    */
    public static var Status307TemporaryRedirect : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status307TemporaryRedirect();
            return __return;
        }
    }
    // static field: System.Int32 Status308PermanentRedirect
    /**
    
            HTTP status code 308.
            

    */
    public static var Status308PermanentRedirect : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status308PermanentRedirect();
            return __return;
        }
    }
    // static field: System.Int32 Status400BadRequest
    /**
    
            HTTP status code 400.
            

    */
    public static var Status400BadRequest : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status400BadRequest();
            return __return;
        }
    }
    // static field: System.Int32 Status401Unauthorized
    /**
    
            HTTP status code 401.
            

    */
    public static var Status401Unauthorized : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status401Unauthorized();
            return __return;
        }
    }
    // static field: System.Int32 Status402PaymentRequired
    /**
    
            HTTP status code 402.
            

    */
    public static var Status402PaymentRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status402PaymentRequired();
            return __return;
        }
    }
    // static field: System.Int32 Status403Forbidden
    /**
    
            HTTP status code 403.
            

    */
    public static var Status403Forbidden : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status403Forbidden();
            return __return;
        }
    }
    // static field: System.Int32 Status404NotFound
    /**
    
            HTTP status code 404.
            

    */
    public static var Status404NotFound : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status404NotFound();
            return __return;
        }
    }
    // static field: System.Int32 Status405MethodNotAllowed
    /**
    
            HTTP status code 405.
            

    */
    public static var Status405MethodNotAllowed : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status405MethodNotAllowed();
            return __return;
        }
    }
    // static field: System.Int32 Status406NotAcceptable
    /**
    
            HTTP status code 406.
            

    */
    public static var Status406NotAcceptable : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status406NotAcceptable();
            return __return;
        }
    }
    // static field: System.Int32 Status407ProxyAuthenticationRequired
    /**
    
            HTTP status code 407.
            

    */
    public static var Status407ProxyAuthenticationRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status407ProxyAuthenticationRequired();
            return __return;
        }
    }
    // static field: System.Int32 Status408RequestTimeout
    /**
    
            HTTP status code 408.
            

    */
    public static var Status408RequestTimeout : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status408RequestTimeout();
            return __return;
        }
    }
    // static field: System.Int32 Status409Conflict
    /**
    
            HTTP status code 409.
            

    */
    public static var Status409Conflict : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status409Conflict();
            return __return;
        }
    }
    // static field: System.Int32 Status410Gone
    /**
    
            HTTP status code 410.
            

    */
    public static var Status410Gone : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status410Gone();
            return __return;
        }
    }
    // static field: System.Int32 Status411LengthRequired
    /**
    
            HTTP status code 411.
            

    */
    public static var Status411LengthRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status411LengthRequired();
            return __return;
        }
    }
    // static field: System.Int32 Status412PreconditionFailed
    /**
    
            HTTP status code 412.
            

    */
    public static var Status412PreconditionFailed : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status412PreconditionFailed();
            return __return;
        }
    }
    // static field: System.Int32 Status413RequestEntityTooLarge
    /**
    
            HTTP status code 413.
            

    */
    public static var Status413RequestEntityTooLarge : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status413RequestEntityTooLarge();
            return __return;
        }
    }
    // static field: System.Int32 Status413PayloadTooLarge
    /**
    
            HTTP status code 413.
            

    */
    public static var Status413PayloadTooLarge : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status413PayloadTooLarge();
            return __return;
        }
    }
    // static field: System.Int32 Status414RequestUriTooLong
    /**
    
            HTTP status code 414.
            

    */
    public static var Status414RequestUriTooLong : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status414RequestUriTooLong();
            return __return;
        }
    }
    // static field: System.Int32 Status414UriTooLong
    /**
    
            HTTP status code 414.
            

    */
    public static var Status414UriTooLong : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status414UriTooLong();
            return __return;
        }
    }
    // static field: System.Int32 Status415UnsupportedMediaType
    /**
    
            HTTP status code 415.
            

    */
    public static var Status415UnsupportedMediaType : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status415UnsupportedMediaType();
            return __return;
        }
    }
    // static field: System.Int32 Status416RequestedRangeNotSatisfiable
    /**
    
            HTTP status code 416.
            

    */
    public static var Status416RequestedRangeNotSatisfiable : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status416RequestedRangeNotSatisfiable();
            return __return;
        }
    }
    // static field: System.Int32 Status416RangeNotSatisfiable
    /**
    
            HTTP status code 416.
            

    */
    public static var Status416RangeNotSatisfiable : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status416RangeNotSatisfiable();
            return __return;
        }
    }
    // static field: System.Int32 Status417ExpectationFailed
    /**
    
            HTTP status code 417.
            

    */
    public static var Status417ExpectationFailed : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status417ExpectationFailed();
            return __return;
        }
    }
    // static field: System.Int32 Status418ImATeapot
    /**
    
            HTTP status code 418.
            

    */
    public static var Status418ImATeapot : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status418ImATeapot();
            return __return;
        }
    }
    // static field: System.Int32 Status419AuthenticationTimeout
    /**
    
            HTTP status code 419.
            

    */
    public static var Status419AuthenticationTimeout : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status419AuthenticationTimeout();
            return __return;
        }
    }
    // static field: System.Int32 Status421MisdirectedRequest
    /**
    
            HTTP status code 422.
            

    */
    public static var Status421MisdirectedRequest : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status421MisdirectedRequest();
            return __return;
        }
    }
    // static field: System.Int32 Status422UnprocessableEntity
    /**
    
            HTTP status code 422.
            

    */
    public static var Status422UnprocessableEntity : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status422UnprocessableEntity();
            return __return;
        }
    }
    // static field: System.Int32 Status423Locked
    /**
    
            HTTP status code 423.
            

    */
    public static var Status423Locked : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status423Locked();
            return __return;
        }
    }
    // static field: System.Int32 Status424FailedDependency
    /**
    
            HTTP status code 424.
            

    */
    public static var Status424FailedDependency : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status424FailedDependency();
            return __return;
        }
    }
    // static field: System.Int32 Status426UpgradeRequired
    /**
    
            HTTP status code 426.
            

    */
    public static var Status426UpgradeRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status426UpgradeRequired();
            return __return;
        }
    }
    // static field: System.Int32 Status428PreconditionRequired
    /**
    
            HTTP status code 428.
            

    */
    public static var Status428PreconditionRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status428PreconditionRequired();
            return __return;
        }
    }
    // static field: System.Int32 Status429TooManyRequests
    /**
    
            HTTP status code 429.
            

    */
    public static var Status429TooManyRequests : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status429TooManyRequests();
            return __return;
        }
    }
    // static field: System.Int32 Status431RequestHeaderFieldsTooLarge
    /**
    
            HTTP status code 431.
            

    */
    public static var Status431RequestHeaderFieldsTooLarge : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status431RequestHeaderFieldsTooLarge();
            return __return;
        }
    }
    // static field: System.Int32 Status451UnavailableForLegalReasons
    /**
    
            HTTP status code 451.
            

    */
    public static var Status451UnavailableForLegalReasons : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status451UnavailableForLegalReasons();
            return __return;
        }
    }
    // static field: System.Int32 Status500InternalServerError
    /**
    
            HTTP status code 500.
            

    */
    public static var Status500InternalServerError : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status500InternalServerError();
            return __return;
        }
    }
    // static field: System.Int32 Status501NotImplemented
    /**
    
            HTTP status code 501.
            

    */
    public static var Status501NotImplemented : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status501NotImplemented();
            return __return;
        }
    }
    // static field: System.Int32 Status502BadGateway
    /**
    
            HTTP status code 502.
            

    */
    public static var Status502BadGateway : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status502BadGateway();
            return __return;
        }
    }
    // static field: System.Int32 Status503ServiceUnavailable
    /**
    
            HTTP status code 503.
            

    */
    public static var Status503ServiceUnavailable : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status503ServiceUnavailable();
            return __return;
        }
    }
    // static field: System.Int32 Status504GatewayTimeout
    /**
    
            HTTP status code 504.
            

    */
    public static var Status504GatewayTimeout : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status504GatewayTimeout();
            return __return;
        }
    }
    // static field: System.Int32 Status505HttpVersionNotsupported
    /**
    
            HTTP status code 505.
            

    */
    public static var Status505HttpVersionNotsupported : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status505HttpVersionNotsupported();
            return __return;
        }
    }
    // static field: System.Int32 Status506VariantAlsoNegotiates
    /**
    
            HTTP status code 506.
            

    */
    public static var Status506VariantAlsoNegotiates : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status506VariantAlsoNegotiates();
            return __return;
        }
    }
    // static field: System.Int32 Status507InsufficientStorage
    /**
    
            HTTP status code 507.
            

    */
    public static var Status507InsufficientStorage : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status507InsufficientStorage();
            return __return;
        }
    }
    // static field: System.Int32 Status508LoopDetected
    /**
    
            HTTP status code 508.
            

    */
    public static var Status508LoopDetected : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status508LoopDetected();
            return __return;
        }
    }
    // static field: System.Int32 Status510NotExtended
    /**
    
            HTTP status code 510.
            

    */
    public static var Status510NotExtended : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status510NotExtended();
            return __return;
        }
    }
    // static field: System.Int32 Status511NetworkAuthenticationRequired
    /**
    
            HTTP status code 511.
            

    */
    public static var Status511NetworkAuthenticationRequired : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Http_StatusCodes_get_Status511NetworkAuthenticationRequired();
            return __return;
        }
    }
} // StatusCodes


// type: Microsoft.AspNetCore.Http.WebSocketManager
    /**
    
            Manages the establishment of WebSocket connections for a specific HTTP request.
            

    */
open class WebSocketManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_WebSocketManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket> AcceptWebSocketAsync()
// docid: M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync
    /**
    
            Transitions the request to a WebSocket connection.
            

    - Returns: A task representing the completion of the transition.

    */
    open func AcceptWebSocketAsync() async throws -> dotnet.System.Net.WebSockets.WebSocket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketManager_System_Threading_Tasks_Task_System_Net_WebSockets_WebSocket___AcceptWebSocketAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket> AcceptWebSocketAsync(System.String)
// docid: M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)
    /**
    
            Transitions the request to a WebSocket connection using the specified sub-protocol.
            

    - Parameter subProtocol: The sub-protocol to use.
    - Returns: A task representing the completion of the transition.

    */
    open func AcceptWebSocketAsync(subProtocol : Optional<dotnet.System.String>) async throws -> dotnet.System.Net.WebSockets.WebSocket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketManager_System_Threading_Tasks_Task_System_Net_WebSockets_WebSocket___AcceptWebSocketAsync_0__1__String(&__thrown, self.get_handle(), subProtocol?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket> AcceptWebSocketAsync(Microsoft.AspNetCore.Http.WebSocketAcceptContext)
// docid: M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(Microsoft.AspNetCore.Http.WebSocketAcceptContext)
    /**
    
            
             

    - Parameter acceptContext: 
    - Returns: 

    */
    open func AcceptWebSocketAsync(acceptContext : aspnetcore.Microsoft.AspNetCore.Http.WebSocketAcceptContext) async throws -> dotnet.System.Net.WebSockets.WebSocket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketManager_System_Threading_Tasks_Task_System_Net_WebSockets_WebSocket___AcceptWebSocketAsync_0__1__WebSocketAcceptContext(&__thrown, self.get_handle(), acceptContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).ToAsync();
        }
    }
    // [IsSpecialName] bool get_IsWebSocketRequest()
// docid: M:Microsoft.AspNetCore.Http.WebSocketManager.get_IsWebSocketRequest
    open func get_IsWebSocketRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketManager_bool__get_IsWebSocketRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_WebSocketRequestedProtocols()
// docid: M:Microsoft.AspNetCore.Http.WebSocketManager.get_WebSocketRequestedProtocols
    open func get_WebSocketRequestedProtocols() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketManager_System_Collections_Generic_IList_string___get_WebSocketRequestedProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets a value indicating whether the request is a WebSocket establishment request.
            

    */
    open var IsWebSocketRequest : Bool {
        get {
            return try! get_IsWebSocketRequest();
        }
    }
    /**
    
            Gets the list of requested WebSocket sub-protocols.
            

    */
    open var WebSocketRequestedProtocols : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_WebSocketRequestedProtocols();
        }
    }
} // WebSocketManager


}
// Microsoft.AspNetCore.Http.Features
extension Microsoft.AspNetCore.Http.Features {
// type: Microsoft.AspNetCore.Http.Features.IEndpointFeature
    /**
    
            A feature interface for endpoint routing. Use 
            to access an instance associated with the current request.
            

    */
open class IEndpointFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IEndpointFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IEndpointFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.Endpoint get_Endpoint()
// docid: M:Microsoft.AspNetCore.Http.Features.IEndpointFeature.get_Endpoint
    open func get_Endpoint() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IEndpointFeature_Endpoint__get_Endpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
// docid: M:Microsoft.AspNetCore.Http.Features.IEndpointFeature.set_Endpoint(Microsoft.AspNetCore.Http.Endpoint)
    open func set_Endpoint(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IEndpointFeature_void__set_Endpoint_0__1__Endpoint(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IEndpointFeature


// type: Microsoft.AspNetCore.Http.Features.IRouteValuesFeature
    /**
    
            A feature interface for routing values. Use 
            to access the values associated with the current request.
            

    */
open class IRouteValuesFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IRouteValuesFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IRouteValuesFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RouteValues()
// docid: M:Microsoft.AspNetCore.Http.Features.IRouteValuesFeature.get_RouteValues
    open func get_RouteValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IRouteValuesFeature_RouteValueDictionary__get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.IRouteValuesFeature.set_RouteValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RouteValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IRouteValuesFeature_void__set_RouteValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRouteValuesFeature


}

// Microsoft.AspNetCore.Http.Metadata
extension Microsoft.AspNetCore.Http.Metadata {
// type: Microsoft.AspNetCore.Http.Metadata.IAcceptsMetadata
    /**
    
            Interface for accepting request media types.
            

    */
open class IAcceptsMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_ContentTypes()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IAcceptsMetadata.get_ContentTypes
    open func get_ContentTypes() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata_System_Collections_Generic_IReadOnlyList_string___get_ContentTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_RequestType()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IAcceptsMetadata.get_RequestType
    open func get_RequestType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata_Type__get_RequestType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IAcceptsMetadata.get_IsOptional
    open func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IAcceptsMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IFromBodyMetadata
    /**
    
            Interface marking attributes that specify a parameter should be bound using the request body.
            

    */
open class IFromBodyMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IFromBodyMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IFromBodyMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_AllowEmpty()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IFromBodyMetadata.get_AllowEmpty
    open func get_AllowEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IFromBodyMetadata_bool__get_AllowEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IFromBodyMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IFromHeaderMetadata
    /**
    
            Interface marking attributes that specify a parameter should be bound using the request headers.
            

    */
open class IFromHeaderMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IFromHeaderMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IFromHeaderMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IFromHeaderMetadata.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IFromHeaderMetadata_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IFromHeaderMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IFromQueryMetadata
    /**
    
            Interface marking attributes that specify a parameter should be bound using the request query string.
            

    */
open class IFromQueryMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IFromQueryMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IFromQueryMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IFromQueryMetadata.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IFromQueryMetadata_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IFromQueryMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IFromRouteMetadata
    /**
    
            Interface marking attributes that specify a parameter should be bound using route-data from the current request.
            

    */
open class IFromRouteMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IFromRouteMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IFromRouteMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IFromRouteMetadata.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IFromRouteMetadata_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IFromRouteMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IFromServiceMetadata
    /**
    
            Interface marking attributes that specify a parameter should be bound using request services.
            

    */
open class IFromServiceMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IFromServiceMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IFromServiceMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IFromServiceMetadata


// type: Microsoft.AspNetCore.Http.Metadata.IProducesResponseTypeMetadata
    /**
    
            Defines a contract for outline the response type returned from an endpoint.
            

    */
open class IProducesResponseTypeMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IProducesResponseTypeMetadata.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IProducesResponseTypeMetadata.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_ContentTypes()
// docid: M:Microsoft.AspNetCore.Http.Metadata.IProducesResponseTypeMetadata.get_ContentTypes
    open func get_ContentTypes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata_System_Collections_Generic_IEnumerable_string___get_ContentTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IProducesResponseTypeMetadata


// type: Microsoft.AspNetCore.Http.Metadata.ITagsMetadata
    /**
    
            Defines a contract used to specify a collection of tags in .
            

    */
open class ITagsMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Metadata_ITagsMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Metadata_ITagsMetadata_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_Tags()
// docid: M:Microsoft.AspNetCore.Http.Metadata.ITagsMetadata.get_Tags
    open func get_Tags() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Metadata_ITagsMetadata_System_Collections_Generic_IReadOnlyList_string___get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // ITagsMetadata


}


// Microsoft.AspNetCore.Routing
extension Microsoft.AspNetCore.Routing {
// type: Microsoft.AspNetCore.Routing.RouteValueDictionary
    /**
    
            An  type for route values.
            

    */
open class RouteValueDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteValueDictionary_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.#ctor
    /**
    
            Creates an empty .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteValueDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.#ctor(System.Object)
    /**
    
            Creates a  initialized with the specified .
            

    - Parameter values: An object to initialize the dictionary. The value can be of type
             or 
            or an object with public properties as key-value pairs.
            
    */
    public init(values : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteValueDictionary_ctor_0__1__Object(&__thrown, values?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.RouteValueDictionary FromArray(System.Collections.Generic.KeyValuePair<System.String,System.Object>[])
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(System.Collections.Generic.KeyValuePair`2[])
    open class func FromArray(items : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_RouteValueDictionary__FromArray_0__1__System_Collections_Generic_KeyValuePair_string_object_Array(&__thrown, items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // void Add(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Add(System.String,System.Object)
    /**
    */
    open /* method final */ func Add(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValueDictionary_void__Add_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValueDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.GetEnumerator
    /**
    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_RouteValueDictionary_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary_Enumerator(hndl : __return);
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Remove(System.String)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String, ref System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Remove(System.String,System.Object@)
    /**
    
            Attempts to remove and return the value that has the specified key from the .
            

    - Parameter key: The key of the element to remove and return.
    - Parameter value: When this method returns, contains the object removed from the , or null if key does not exist.
    - Returns: 
            true if the object was removed successfully; otherwise, false.
            

    */
    open func Remove(key : dotnet.System.String, value : inout Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_bool__Remove_0__2__String_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.Object(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryAdd(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.TryAdd(System.String,System.Object)
    /**
    
            Attempts to the add the provided  and  to the dictionary.
            

    - Parameter key: The key.
    - Parameter value: The value.
    - Returns: Returns true if the value was added. Returns false if the key was already present.

    */
    open func TryAdd(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_bool__TryAdd_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.TryGetValue(System.String,System.Object@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_bool__TryGetValue_0__2__String_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.Object(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<System.String> get_Comparer()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_System_Collections_Generic_IEqualityComparer_string___get_Comparer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Object> get_Values()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_System_Collections_Generic_ICollection_object___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.get_Item(System.String)
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_Object__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.set_Item(System.String,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValueDictionary_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the comparer for this dictionary.
            

    */
    open var Comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<dotnet.System.String> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
    }
} // RouteValueDictionary


// type: Microsoft.AspNetCore.Routing.RouteValueDictionary+Enumerator
// boxed value type
    /**
    */
public final class RouteValueDictionary_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator.#ctor(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Instantiates a new enumerator with the values provided in .
            

    - Parameter dictionary: A .
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_ctor_0__1__RouteValueDictionary(&__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator.Dispose
    /**
    
            Releases resources used by the .
            

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator.Reset
    /**
    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Object> get_Current()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueDictionary.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueDictionary_Enumerator_System_Collections_Generic_KeyValuePair_string_object___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // RouteValueDictionary_Enumerator


}



public protocol Microsoft_AspNetCore_Builder_IApplicationBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Cors_Infrastructure_ICorsMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IEndpointFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IRouteValuesFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IHttpContextAccessor
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IHttpContextFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IMiddleware
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IMiddlewareFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IResult
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IAcceptsMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IFromBodyMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IFromHeaderMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IFromQueryMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IFromRouteMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IFromServiceMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_IProducesResponseTypeMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Metadata_ITagsMetadata
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Map(pathMatch : dotnet.System.String, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, configuration: configuration);
    }
    // delegate closure overload
    public func Map(pathMatch : dotnet.System.String, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, configuration: del_configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Map(pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, configuration: configuration);
    }
    // delegate closure overload
    public func Map(pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, configuration: del_configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder Map(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString, bool, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Map(pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, preserveMatchedPathSegment : Bool, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, preserveMatchedPathSegment: preserveMatchedPathSegment, configuration: configuration);
    }
    // delegate closure overload
    public func Map(pathMatch : aspnetcore.Microsoft.AspNetCore.Http.PathString, preserveMatchedPathSegment : Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapExtensions.Map(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathMatch: pathMatch, preserveMatchedPathSegment: preserveMatchedPathSegment, configuration: del_configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func MapWhen(predicate : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), predicate: predicate, configuration: configuration);
    }
    // delegate closure overload
    public func MapWhen(predicate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_predicate = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(predicate);
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), predicate: del_predicate, configuration: del_configuration);
    }
}

// EXTENSION METHOD void Run(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Run(handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws {
        try aspnetcore.Microsoft.AspNetCore.Builder.RunExtensions.Run(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), handler: handler);
    }
    // delegate closure overload
    public func Run(handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        try aspnetcore.Microsoft.AspNetCore.Builder.RunExtensions.Run(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder Use(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,System.Func<System.Threading.Tasks.Task>,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Use(middleware : dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseExtensions.Use(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), middleware: middleware);
    }
    // delegate closure overload
    public func Use(middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext, dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>,dotnet.System.Threading.Tasks.Task>(middleware);
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseExtensions.Use(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), middleware: del_middleware);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder Use(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.RequestDelegate,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func Use(middleware : dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseExtensions.Use(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), middleware: middleware);
    }
    // delegate closure overload
    public func Use(middleware : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext, aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_middleware = try dotnet.System.Func_3<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate,dotnet.System.Threading.Tasks.Task>(middleware);
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseExtensions.Use(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), middleware: del_middleware);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware<TMiddleware>(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Object[])
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware<TMiddleware>(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Object[])

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Type, System.Object[])
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseMiddleware(middleware : dotnet.System.Type_, args : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), middleware: middleware, args: args);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Http.PathString)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UsePathBase(pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.UsePathBaseExtensions.UsePathBase(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), pathBase: pathBase);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Func<Microsoft.AspNetCore.Http.HttpContext,bool>, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseWhen(predicate : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Bool>, configuration : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), predicate: predicate, configuration: configuration);
    }
    // delegate closure overload
    public func UseWhen(predicate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Bool, configuration : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_predicate = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.HttpContext,Swift.Bool>(predicate);
        let del_configuration = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configuration);
        return try aspnetcore.Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), predicate: del_predicate, configuration: del_configuration);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Http.Endpoint GetEndpoint(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetEndpoint() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        return try aspnetcore.Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.GetEndpoint(context: self);
    }
}

// EXTENSION METHOD void SetEndpoint(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.Endpoint)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func SetEndpoint(endpoint : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.SetEndpoint(context: self, endpoint: endpoint);
    }
}

// EXTENSION METHOD void Append(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, Microsoft.Extensions.Primitives.StringValues)
extension Microsoft_AspNetCore_Http_IHeaderDictionary {
    public func Append(key : dotnet.System.String, value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.Append(headers: aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl: __copy_handle(self.get_handle())), key: key, value: value);
    }
}

// EXTENSION METHOD void AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.String[])
extension Microsoft_AspNetCore_Http_IHeaderDictionary {
    public func AppendCommaSeparatedValues(key : dotnet.System.String, values : dotnet.System_Arr<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.AppendCommaSeparatedValues(headers: aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl: __copy_handle(self.get_handle())), key: key, values: values);
    }
}

// EXTENSION METHOD System.String[] GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String)
extension Microsoft_AspNetCore_Http_IHeaderDictionary {
    public func GetCommaSeparatedValues(key : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.GetCommaSeparatedValues(headers: aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl: __copy_handle(self.get_handle())), key: key);
    }
}

// EXTENSION METHOD void SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary, System.String, System.String[])
extension Microsoft_AspNetCore_Http_IHeaderDictionary {
    public func SetCommaSeparatedValues(key : dotnet.System.String, values : dotnet.System_Arr<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.SetCommaSeparatedValues(headers: aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl: __copy_handle(self.get_handle())), key: key, values: values);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsync(text : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(response: self, text: text, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String, System.Text.Encoding, System.Threading.CancellationToken)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func WriteAsync(text : dotnet.System.String, encoding : dotnet.System.Text.Encoding, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(response: self, text: text, encoding: encoding, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Primitives.StringValues GetDeclaredTrailers(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetDeclaredTrailers() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        return try aspnetcore.Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetDeclaredTrailers(request: self);
    }
}

// EXTENSION METHOD bool SupportsTrailers(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func SupportsTrailers() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Http.RequestTrailerExtensions.SupportsTrailers(request: self);
    }
}

// EXTENSION METHOD bool CheckTrailersAvailable(Microsoft.AspNetCore.Http.HttpRequest)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func CheckTrailersAvailable() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Http.RequestTrailerExtensions.CheckTrailersAvailable(request: self);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Primitives.StringValues GetTrailer(Microsoft.AspNetCore.Http.HttpRequest, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
    public func GetTrailer(trailerName : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        return try aspnetcore.Microsoft.AspNetCore.Http.RequestTrailerExtensions.GetTrailer(request: self, trailerName: trailerName);
    }
}

// EXTENSION METHOD void DeclareTrailer(Microsoft.AspNetCore.Http.HttpResponse, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func DeclareTrailer(trailerName : dotnet.System.String) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.ResponseTrailerExtensions.DeclareTrailer(response: self, trailerName: trailerName);
    }
}

// EXTENSION METHOD bool SupportsTrailers(Microsoft.AspNetCore.Http.HttpResponse)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func SupportsTrailers() throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Http.ResponseTrailerExtensions.SupportsTrailers(response: self);
    }
}

// EXTENSION METHOD void AppendTrailer(Microsoft.AspNetCore.Http.HttpResponse, System.String, Microsoft.Extensions.Primitives.StringValues)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpResponse {
    public func AppendTrailer(trailerName : dotnet.System.String, trailerValues : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        try aspnetcore.Microsoft.AspNetCore.Http.ResponseTrailerExtensions.AppendTrailer(response: self, trailerName: trailerName, trailerValues: trailerValues);
    }
}

