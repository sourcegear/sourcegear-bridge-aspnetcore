// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.Localization
extension Microsoft.AspNetCore.Mvc.Localization {
// type: Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer
    /**
    
            An  that uses the provided  to do HTML-aware
            localization of content.
            

    */
open class HtmlLocalizer
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Localization.IStringLocalizer)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.#ctor(Microsoft.Extensions.Localization.IStringLocalizer)
    /**
    
            Creates a new .
            

    - Parameter localizer: The  to read strings from.
    */
    public init(localizer : aspnetcore.Microsoft.Extensions.Localization.IStringLocalizer) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_ctor_0__1__IStringLocalizer(&__thrown, localizer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.GetString(System.String)
    /**
    */
    open func GetString(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_LocalizedString__GetString_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.GetString(System.String,System.Object[])
    /**
    */
    open func GetString(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_LocalizedString__GetString_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.GetAllStrings(System.Boolean)
    /**
    */
    open func GetAllStrings(includeParentCultures : Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(includeParentCultures ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_LocalizedHtmlString__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer.get_Item(System.String,System.Object[])
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_LocalizedHtmlString__get_Item_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
} // HtmlLocalizer


// type: Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions
public struct HtmlLocalizerExtensions {
    // Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String)
    /**
    
            Gets the  resource for a specific name.
            

    - Parameter htmlLocalizer: The .
    - Parameter name: The key to use.
    - Returns: The  resource.

    */
    public static func GetHtml(htmlLocalizer : aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, name : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerExtensions_LocalizedHtmlString__GetHtml_0__2__IHtmlLocalizer_String(&__thrown, htmlLocalizer.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String,System.Object[])
    /**
    
            Gets the  resource for a specific name.
            

    - Parameter htmlLocalizer: The .
    - Parameter name: The key to use.
    - Parameter arguments: The values to format the string with.
    - Returns: The  resource.

    */
    public static func GetHtml(htmlLocalizer : aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerExtensions_LocalizedHtmlString__GetHtml_0__3__IHtmlLocalizer_String_ObjectArray(&__thrown, htmlLocalizer.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetAllStrings(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer)
    /**
    
            Gets all string resources including those for parent cultures.
            

    - Parameter htmlLocalizer: The .
    - Returns: The string resources.

    */
    public static func GetAllStrings(htmlLocalizer : aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerExtensions_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__IHtmlLocalizer(&__thrown, htmlLocalizer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // HtmlLocalizerExtensions


// type: Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerFactory
    /**
    
            An  that creates instances of  using the
            registered .
            

    */
open class HtmlLocalizerFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Localization.IStringLocalizerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerFactory.#ctor(Microsoft.Extensions.Localization.IStringLocalizerFactory)
    /**
    
            Creates a new .
            

    - Parameter localizerFactory: The .
    */
    public init(localizerFactory : aspnetcore.Microsoft.Extensions.Localization.IStringLocalizerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerFactory_ctor_0__1__IStringLocalizerFactory(&__thrown, localizerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer Create(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerFactory.Create(System.Type)
    /**
    
            Creates an  using the specified .
            

    - Parameter resourceSource: The  to load resources for.
    - Returns: The .

    */
    open func Create(resourceSource : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerFactory_IHtmlLocalizer__Create_0__1__Type(&__thrown, self.get_handle(), resourceSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer Create(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerFactory.Create(System.String,System.String)
    /**
    
            Creates an  using the specified base name and location.
            

    - Parameter baseName: The base name of the resource to load strings from.
    - Parameter location: The location to load resources from.
    - Returns: The .

    */
    open func Create(baseName : dotnet.System.String, location : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizerFactory_IHtmlLocalizer__Create_0__2__String_String(&__thrown, self.get_handle(), baseName.get_handle(), location.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl : __return);
        }
    }
} // HtmlLocalizerFactory


// type: Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1
    /**
    
            An  implementation that provides localized HTML content for the specified type
            .
            

    */
open class HtmlLocalizer_1<TResource : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_get_type_handle(TResource.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.#ctor(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory)
    /**
    
            Creates a new .
            

    - Parameter factory: The .
    */
    public init(factory : aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_ctor_0__1__IHtmlLocalizerFactory(TResource.get_type_handle(), &__thrown, factory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.GetString(System.String)
    /**
    */
    open func GetString(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_LocalizedString__GetString_0__1__String(TResource.get_type_handle(), &__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.GetString(System.String,System.Object[])
    /**
    */
    open func GetString(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_LocalizedString__GetString_0__2__String_ObjectArray(TResource.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.GetAllStrings(System.Boolean)
    /**
    */
    open func GetAllStrings(includeParentCultures : Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__bool(TResource.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(includeParentCultures ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_LocalizedHtmlString__get_Item_0__1__String(TResource.get_type_handle(), &__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizer`1.get_Item(System.String,System.Object[])
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_HtmlLocalizer_1_LocalizedHtmlString__get_Item_0__2__String_ObjectArray(TResource.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
} // HtmlLocalizer_1


// type: Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer
    /**
    
            Represents a type that does HTML-aware localization of strings, by HTML encoding arguments that are
            formatted in the resource string.
            

    */
open class IHtmlLocalizer
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer.GetString(System.String)
    /**
    
            Gets the string resource with the given name.
            

    - Parameter name: The name of the string resource.
    - Returns: The string resource as a .

    */
    open func GetString(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_LocalizedString__GetString_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer.GetString(System.String,System.Object[])
    /**
    
            Gets the string resource with the given name and formatted with the supplied arguments.
            

    - Parameter name: The name of the string resource.
    - Parameter arguments: The values to format the string with.
    - Returns: The formatted string resource as a .

    */
    open func GetString(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_LocalizedString__GetString_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer.GetAllStrings(System.Boolean)
    /**
    
            Gets all string resources.
            

    - Parameter includeParentCultures: 
            A  indicating whether to include strings from parent cultures.
            
    - Returns: The strings.

    */
    open func GetAllStrings(includeParentCultures : Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(includeParentCultures ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_LocalizedHtmlString__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer.get_Item(System.String,System.Object[])
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_LocalizedHtmlString__get_Item_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
} // IHtmlLocalizer


// type: Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory
    /**
    
            A factory that creates  instances.
            

    */
open class IHtmlLocalizerFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer Create(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory.Create(System.Type)
    /**
    
            Creates an  using the  and
             of the specified .
            

    - Parameter resourceSource: The .
    - Returns: The .

    */
    open func Create(resourceSource : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory_IHtmlLocalizer__Create_0__1__Type(&__thrown, self.get_handle(), resourceSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer Create(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory.Create(System.String,System.String)
    /**
    
            Creates an .
            

    - Parameter baseName: The base name of the resource to load strings from.
    - Parameter location: The location to load resources from.
    - Returns: The .

    */
    open func Create(baseName : dotnet.System.String, location : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory_IHtmlLocalizer__Create_0__2__String_String(&__thrown, self.get_handle(), baseName.get_handle(), location.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl : __return);
        }
    }
} // IHtmlLocalizerFactory


// type: Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer`1
    /**
    
            An  that provides localized HTML content.
            

    */
open class IHtmlLocalizer_1<TResource : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_1,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    public typealias TResource_IHtmlLocalizer_1 = TResource;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_1_get_type_handle(TResource.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IHtmlLocalizer_1


// type: Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer
    /**
    
            Represents a type that provides HTML-aware localization for views.
            

    */
open class IViewLocalizer
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Localization_IViewLocalizer,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_IViewLocalizer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IViewLocalizer


// type: Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString
    /**
    
            An  with localized content.
            

    */
open class LocalizedHtmlString
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.#ctor(System.String,System.String)
    /**
    
            Creates an instance of .
            

    - Parameter name: The name of the string resource.
    - Parameter value: The string resource.
    */
    public init(name : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_ctor_0__2__String_String(&__thrown, name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.#ctor(System.String,System.String,System.Boolean)
    /**
    
            Creates an instance of .
            

    - Parameter name: The name of the string resource.
    - Parameter value: The string resource.
    - Parameter isResourceNotFound: A flag that indicates if the resource is not found.
    */
    public init(name : dotnet.System.String, value : dotnet.System.String, isResourceNotFound : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_ctor_0__3__String_String_bool(&__thrown, name.get_handle(), value.get_handle(), Swift.Int32(isResourceNotFound ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, bool, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.#ctor(System.String,System.String,System.Boolean,System.Object[])
    /**
    
            Creates an instance of .
            

    - Parameter name: The name of the string resource.
    - Parameter value: The string resource.
    - Parameter isResourceNotFound: A flag that indicates if the resource is not found.
    - Parameter arguments: The values to format the  with.
    */
    public init(name : dotnet.System.String, value : dotnet.System.String, isResourceNotFound : Bool, arguments : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_ctor_0__4__String_String_bool_ObjectArray(&__thrown, name.get_handle(), value.get_handle(), Swift.Int32(isResourceNotFound ? 1 : 0), arguments.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsResourceNotFound()
// docid: M:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString.get_IsResourceNotFound
    open func get_IsResourceNotFound() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_LocalizedHtmlString_bool__get_IsResourceNotFound_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a flag that indicates if the resource is not found.
            

    */
    open var IsResourceNotFound : Bool {
        get {
            return try! get_IsResourceNotFound();
        }
    }
    /**
    
            The name of the string resource.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The original resource string, prior to formatting with any constructor arguments.
            

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // LocalizedHtmlString


// type: Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer
    /**
    
            An  implementation that derives the resource location from the executing view's
            file path.
            

    */
open class ViewLocalizer
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Localization_IViewLocalizer,
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.#ctor(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
    /**
    
            Creates a new .
            

    - Parameter localizerFactory: The .
    - Parameter hostingEnvironment: The .
    */
    public init(localizerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory, hostingEnvironment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_ctor_0__2__IHtmlLocalizerFactory_IWebHostEnvironment(&__thrown, localizerFactory.get_handle(), hostingEnvironment.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.GetString(System.String)
    /**
    */
    open /* method final */ func GetString(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_LocalizedString__GetString_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // Microsoft.Extensions.Localization.LocalizedString GetString(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.GetString(System.String,System.Object[])
    /**
    */
    open /* method final */ func GetString(name : dotnet.System.String, values : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_LocalizedString__GetString_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.GetAllStrings(System.Boolean)
    /**
    */
    open /* method final */ func GetAllStrings(includeParentCultures : Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(includeParentCultures ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // void Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Apply the specified .
            

    - Parameter viewContext: The .
    */
    open /* method final */ func Contextualize(viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_void__Contextualize_0__1__ViewContext(&__thrown, self.get_handle(), viewContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_LocalizedHtmlString__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString get_Item(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Mvc.Localization.ViewLocalizer.get_Item(System.String,System.Object[])
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Localization_ViewLocalizer_LocalizedHtmlString__get_Item_0__2__String_ObjectArray(&__thrown, self.get_handle(), key.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString(hndl : __return);
        }
    }
} // ViewLocalizer


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions
public struct MvcLocalizationMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddViewLocalization_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
             Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddViewLocalization_0__2__IMvcBuilder_LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
             Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddViewLocalization_0__2__IMvcBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try AddViewLocalization(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
             Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddViewLocalization_0__3__IMvcBuilder_LanguageViewLocationExpanderFormat_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), format.get_value(), (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try AddViewLocalization(builder: builder, format: format, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__1__IMvcBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__2__IMvcBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__2__IMvcBuilder_LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the
            .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__3__IMvcBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure the
            .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the
            .
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure the
            .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__3__IMvcBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure the
            .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__3__IMvcBuilder_LanguageViewLocationExpanderFormat_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), format.get_value(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the .
            Can be null.
    - Parameter format: The view format for localized views.
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure
            the . Can be null.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcBuilderExtensions_IMvcBuilder__AddMvcLocalization_0__4__IMvcBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__LanguageViewLocationExpanderFormat_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), format.get_value(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
} // MvcLocalizationMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions
public struct MvcLocalizationMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViewLocalization_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
             Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViewLocalization_0__2__IMvcCoreBuilder_LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
            Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViewLocalization_0__2__IMvcCoreBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try AddViewLocalization(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
             Adds MVC view localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Parameter setupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViewLocalization_0__3__IMvcCoreBuilder_LanguageViewLocationExpanderFormat_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), format.get_value(), (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddViewLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try AddViewLocalization(builder: builder, format: format, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__1__IMvcCoreBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__2__IMvcCoreBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__2__IMvcCoreBuilder_LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the
            .
    - Parameter format: The view format for localized views.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__3__IMvcCoreBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__LanguageViewLocationExpanderFormat(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure
            the .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure the
            .
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure the
            .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__3__IMvcCoreBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter format: The view format for localized views.
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure the
            .
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__3__IMvcCoreBuilder_LanguageViewLocationExpanderFormat_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), format.get_value(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions},Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})
    /**
    
            Adds MVC view and data annotations localization services to the application.
            

    - Parameter builder: The .
    - Parameter localizationOptionsSetupAction: An action to configure
            the . Can be null.
    - Parameter format: The view format for localized views.
    - Parameter dataAnnotationsLocalizationOptionsSetupAction: An action to configure
            the . Can be null.
    - Returns: The .

    */
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcLocalizationMvcCoreBuilderExtensions_IMvcCoreBuilder__AddMvcLocalization_0__4__IMvcCoreBuilder_System_Action_Microsoft_Extensions_Localization_LocalizationOptions__LanguageViewLocationExpanderFormat_System_Action_Microsoft_AspNetCore_Mvc_DataAnnotations_MvcDataAnnotationsLocalizationOptions_(&__thrown, builder.get_handle(), (localizationOptionsSetupAction?.get_handle()), format.get_value(), (dataAnnotationsLocalizationOptionsSetupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddMvcLocalization(builder : aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try AddMvcLocalization(builder: builder, localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
} // MvcLocalizationMvcCoreBuilderExtensions


}



public protocol Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizerFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer_1
    :
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
    associatedtype TResource_IHtmlLocalizer_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Mvc_Localization_IViewLocalizer
    :
    Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, System.String)
extension Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer {
    public func GetHtml(name : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(htmlLocalizer: aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl: __copy_handle(self.get_handle())), name: name);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer, System.String, System.Object[])
extension Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer {
    public func GetHtml(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(htmlLocalizer: aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl: __copy_handle(self.get_handle())), name: name, arguments: arguments);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer)
extension Microsoft_AspNetCore_Mvc_Localization_IHtmlLocalizer {
    public func GetAllStrings() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetAllStrings(htmlLocalizer: aspnetcore.Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewLocalization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewLocalization(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViewLocalization(setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format, setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format, setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, format: format);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViewLocalization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViewLocalization(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViewLocalization(setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format, setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViewLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, setupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format, setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, format: format);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, System.Action<Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddMvcLocalization(localizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>>, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: dataAnnotationsLocalizationOptionsSetupAction);
    }
    // delegate closure overload
    public func AddMvcLocalization(localizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> Void, format : aspnetcore.Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat, dataAnnotationsLocalizationOptionsSetupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
        let del_localizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(localizationOptionsSetupAction);
        let del_dataAnnotationsLocalizationOptionsSetupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions>(dataAnnotationsLocalizationOptionsSetupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddMvcLocalization(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), localizationOptionsSetupAction: del_localizationOptionsSetupAction, format: format, dataAnnotationsLocalizationOptionsSetupAction: del_dataAnnotationsLocalizationOptionsSetupAction);
    }
}

