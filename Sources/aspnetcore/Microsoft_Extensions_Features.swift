// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Http
// Microsoft.AspNetCore.Http.Features
extension Microsoft.AspNetCore.Http.Features {
// type: Microsoft.AspNetCore.Http.Features.FeatureCollection
    /**
    
            Default implementation for .
            

    */
open class FeatureCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_FeatureCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FeatureCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.#ctor(System.Int32)
    /**
    
            Initializes a new instance of  with the specified initial capacity.
            

    - Parameter initialCapacity: The initial number of elements that the collection can contain.
    */
    public init(initialCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FeatureCollection_ctor_0__1__i32(&__thrown, initialCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new instance of  with the specified defaults.
            

    - Parameter defaults: The feature defaults.
    */
    public init(defaults : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FeatureCollection_ctor_0__1__IFeatureCollection(&__thrown, defaults.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Type,System.Object>> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.GetEnumerator
    /**
    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Type_,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureCollection_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_System_Type_object____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TFeature Get<TFeature>()
    // void Set<TFeature>(TFeature)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.Set``1(``0)
    /**
    */
    open /* method final */ func Set<UTFeature : SGBridgeGenericValue>(instance : UTFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FeatureCollection_void__Set_1__1__UTFeature(UTFeature.get_type_handle(), &__thrown, self.get_handle(), instance.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Revision()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.get_Revision
    open func get_Revision() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureCollection_i32__get_Revision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Type)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureCollection_Object__get_Item_0__1__Type(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureCollection.set_Item(System.Type,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.Type_, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FeatureCollection_void__set_Item_0__2__Type_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    */
    open var Revision : Swift.Int32 {
        get {
            return try! get_Revision();
        }
    }
} // FeatureCollection


// type: Microsoft.AspNetCore.Http.Features.FeatureReference`1
// boxed value type
    /**
    
            A cached reference to a feature.
            

    */
public final class FeatureReference_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_FeatureReference_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = Microsoft_AspNetCore_Http_Features_FeatureReference_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // T Fetch(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReference`1.Fetch(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Gets the feature of type  from .
            

    - Parameter features: The .
    - Returns: The feature.

    */
    public func Fetch(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReference_1_T__Fetch_0__1__IFeatureCollection(T.get_type_handle(), &__thrown, self.get_handle(), features.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // T Update(Microsoft.AspNetCore.Http.Features.IFeatureCollection, T)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReference`1.Update(Microsoft.AspNetCore.Http.Features.IFeatureCollection,`0)
    /**
    
            Updates the reference to the feature.
            

    - Parameter features: The  to update.
    - Parameter feature: The instance of the feature.
    - Returns: A reference to  after the operation has completed.

    */
    public func Update(features : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection, feature : T) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReference_1_T__Update_0__2__IFeatureCollection_T(T.get_type_handle(), &__thrown, self.get_handle(), features.get_handle(), feature.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // FeatureReference_1


// type: Microsoft.AspNetCore.Http.Features.FeatureReferences`1
// boxed value type
    /**
    
            A reference to a collection of features.
            

    */
public final class FeatureReferences_1<TCache : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_FeatureReferences_1_get_type_handle(TCache.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the .
            

    */
    public var Collection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        get {
            return try! get_Collection();
        }
    }
    /**
    
            Gets the revision number.
            

    */
    public var Revision : Swift.Int32 {
        get {
            return try! get_Revision();
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.#ctor(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes a new instance of .
            

    - Parameter collection: The .
    */
    public init(collection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_ctor_0__1__IFeatureCollection(TCache.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_implicit_ctor(TCache.get_type_handle());
            super.init(hndl: h);
    }
    // void Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Initializes the .
            

    - Parameter collection: The  to initialize with.
    */
    public func Initalize(collection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FeatureReferences_1_void__Initalize_0__1__IFeatureCollection(TCache.get_type_handle(), &__thrown, self.get_handle(), collection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection, System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.Initalize(Microsoft.AspNetCore.Http.Features.IFeatureCollection,System.Int32)
    /**
    
            Initializes the .
            

    - Parameter collection: The  to initialize with.
    - Parameter revision: The version of the .
    */
    public func Initalize(collection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection, revision : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_FeatureReferences_1_void__Initalize_0__2__IFeatureCollection_i32(TCache.get_type_handle(), &__thrown, self.get_handle(), collection.get_handle(), revision);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // TFeature Fetch<TFeature, TState>(ref TFeature, TState, System.Func<TState,TFeature>)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.Fetch``2(``0@,``1,System.Func{``1,``0})
    /**
    
            This API is part of ASP.NET Core's infrastructure and should not be referenced by application code.
            

    */
    public func Fetch<UTFeature : SGBridgeGenericValue,UTState : SGBridgeGenericValue>(cached : inout UTFeature, state : UTState, factory : dotnet.System.Func_2<UTState,UTFeature>) throws -> UTFeature {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_cached = cached.to_gval();
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_UTFeature__Fetch_2__3__refUTFeature_UTState_System_Func_UTState_UTFeature_(TCache.get_type_handle(), UTFeature.get_type_handle(), UTState.get_type_handle(), &__thrown, self.get_handle(), &_tmp_ref_cached, state.to_gval(), factory.get_handle());
            let _tmp2_cached = UTFeature(gval: _tmp_ref_cached);
            cached = _tmp2_cached;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTFeature(gval: __return);
        }
    }
    // delegate closure overload
    public func Fetch<UTFeature : SGBridgeGenericValue,UTState : SGBridgeGenericValue>(cached : inout UTFeature, state : UTState, factory : @escaping (UTState) throws -> UTFeature) throws -> UTFeature {
        let del_factory = try dotnet.System.Func_2<UTState,UTFeature>(factory);
        return try Fetch(cached: &cached, state: state, factory: del_factory);
    }
    // TFeature Fetch<TFeature>(ref TFeature, System.Func<Microsoft.AspNetCore.Http.Features.IFeatureCollection,TFeature>)
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.Fetch``1(``0@,System.Func{Microsoft.AspNetCore.Http.Features.IFeatureCollection,``0})
    /**
    
            This API is part of ASP.NET Core's infrastructure and should not be referenced by application code.
            

    */
    public func Fetch<UTFeature : SGBridgeGenericValue>(cached : inout UTFeature, factory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection,UTFeature>) throws -> UTFeature {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_cached = cached.to_gval();
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_UTFeature__Fetch_1__2__refUTFeature_System_Func_Microsoft_AspNetCore_Http_Features_IFeatureCollection_UTFeature_(TCache.get_type_handle(), UTFeature.get_type_handle(), &__thrown, self.get_handle(), &_tmp_ref_cached, factory.get_handle());
            let _tmp2_cached = UTFeature(gval: _tmp_ref_cached);
            cached = _tmp2_cached;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTFeature(gval: __return);
        }
    }
    // delegate closure overload
    public func Fetch<UTFeature : SGBridgeGenericValue>(cached : inout UTFeature, factory : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection>) throws -> UTFeature) throws -> UTFeature {
        let del_factory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection,UTFeature>(factory);
        return try Fetch(cached: &cached, factory: del_factory);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.IFeatureCollection get_Collection()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.get_Collection
    public func get_Collection() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_IFeatureCollection__get_Collection_0__0(TCache.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Revision()
// docid: M:Microsoft.AspNetCore.Http.Features.FeatureReferences`1.get_Revision
    public func get_Revision() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_FeatureReferences_1_i32__get_Revision_0__0(TCache.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // FeatureReferences_1


// type: Microsoft.AspNetCore.Http.Features.IFeatureCollection
    /**
    
            Represents a collection of HTTP features.
            

    */
open class IFeatureCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IFeatureCollection
{
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Type_,dotnet.System.Object>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IFeatureCollection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TFeature Get<TFeature>()
    // void Set<TFeature>(TFeature)
// docid: M:Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set``1(``0)
    /**
    
            Sets the given feature in the collection.
            

    - Parameter instance: The feature value.
    */
    open func Set<UTFeature : SGBridgeGenericValue>(instance : UTFeature) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IFeatureCollection_void__Set_1__1__UTFeature(UTFeature.get_type_handle(), &__thrown, self.get_handle(), instance.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFeatureCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Revision()
// docid: M:Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision
    open func get_Revision() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFeatureCollection_i32__get_Revision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Type)
// docid: M:Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFeatureCollection_Object__get_Item_0__1__Type(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(System.Type,System.Object)
    open func set_Item(key : dotnet.System.Type_, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IFeatureCollection_void__set_Item_0__2__Type_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IFeatureCollection


}




public protocol Microsoft_AspNetCore_Http_Features_IFeatureCollection
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Type_,dotnet.System.Object>
{
}

