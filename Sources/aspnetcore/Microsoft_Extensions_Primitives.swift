// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Primitives
extension Microsoft.Extensions.Primitives {
// type: Microsoft.Extensions.Primitives.CancellationChangeToken
    /**
    
            A  implementation using .
            

    */
open class CancellationChangeToken
    :
    dotnet.System.Object,
    Microsoft_Extensions_Primitives_IChangeToken
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_CancellationChangeToken_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Threading.CancellationToken)
// docid: M:Microsoft.Extensions.Primitives.CancellationChangeToken.#ctor(System.Threading.CancellationToken)
    /**
    
            Initializes a new instance of .
            

    - Parameter cancellationToken: The .
    */
    public init(cancellationToken : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_CancellationChangeToken_ctor_0__1__CancellationToken(&__thrown, cancellationToken.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IDisposable RegisterChangeCallback(System.Action<System.Object>, System.Object)
// docid: M:Microsoft.Extensions.Primitives.CancellationChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)
    /**
    */
    open /* method final */ func RegisterChangeCallback(callback : Optional<dotnet.System.Action_1<dotnet.System.Object>>, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CancellationChangeToken_IDisposable__RegisterChangeCallback_0__2__System_Action_object__Object(&__thrown, self.get_handle(), (callback?.get_handle()), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open /* method final */ func RegisterChangeCallback(callback : @escaping (Optional<dotnet.System.Object>) throws -> Void, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.Object>(callback);
        return try RegisterChangeCallback(callback: del_callback, state: state);
    }
    // [IsSpecialName] bool get_ActiveChangeCallbacks()
// docid: M:Microsoft.Extensions.Primitives.CancellationChangeToken.get_ActiveChangeCallbacks
    open /* method final */ func get_ActiveChangeCallbacks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CancellationChangeToken_bool__get_ActiveChangeCallbacks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasChanged()
// docid: M:Microsoft.Extensions.Primitives.CancellationChangeToken.get_HasChanged
    open /* method final */ func get_HasChanged() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CancellationChangeToken_bool__get_HasChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var ActiveChangeCallbacks : Bool {
        get {
            return try! get_ActiveChangeCallbacks();
        }
    }
    /**
    */
    public var HasChanged : Bool {
        get {
            return try! get_HasChanged();
        }
    }
} // CancellationChangeToken


// type: Microsoft.Extensions.Primitives.ChangeToken
public struct ChangeToken {
    // System.IDisposable OnChange(System.Func<Microsoft.Extensions.Primitives.IChangeToken>, System.Action)
// docid: M:Microsoft.Extensions.Primitives.ChangeToken.OnChange(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action)
    /**
    
            Registers the  action to be called whenever the token produced changes.
            

    - Parameter changeTokenProducer: Produces the change token.
    - Parameter changeTokenConsumer: Action called when the token changes.
    - Returns: 

    */
    public static func OnChange(changeTokenProducer : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>>, changeTokenConsumer : Optional<dotnet.System.Action>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_ChangeToken_IDisposable__OnChange_0__2__System_Func_Microsoft_Extensions_Primitives_IChangeToken__Action(&__thrown, (changeTokenProducer?.get_handle()), changeTokenConsumer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func OnChange(changeTokenProducer : @escaping () throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken, changeTokenConsumer : @escaping () throws -> Void) throws -> Optional<dotnet.System.IDisposable> {
        let del_changeTokenProducer = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>(changeTokenProducer);
        let del_changeTokenConsumer = try dotnet.System.Action(changeTokenConsumer);
        return try OnChange(changeTokenProducer: del_changeTokenProducer, changeTokenConsumer: del_changeTokenConsumer);
    }
    // System.IDisposable OnChange<TState>(System.Func<Microsoft.Extensions.Primitives.IChangeToken>, System.Action<TState>, TState)
// docid: M:Microsoft.Extensions.Primitives.ChangeToken.OnChange``1(System.Func{Microsoft.Extensions.Primitives.IChangeToken},System.Action{``0},``0)
    /**
    
            Registers the  action to be called whenever the token produced changes.
            

    - Parameter changeTokenProducer: Produces the change token.
    - Parameter changeTokenConsumer: Action called when the token changes.
    - Parameter state: state for the consumer.
    - Returns: 

    */
    public static func OnChange<UTState : SGBridgeGenericValue>(changeTokenProducer : Optional<dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>>, changeTokenConsumer : Optional<dotnet.System.Action_1<UTState>>, state : UTState) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_ChangeToken_IDisposable__OnChange_1__3__System_Func_Microsoft_Extensions_Primitives_IChangeToken__System_Action_UTState__UTState(UTState.get_type_handle(), &__thrown, (changeTokenProducer?.get_handle()), (changeTokenConsumer?.get_handle()), state.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func OnChange<UTState : SGBridgeGenericValue>(changeTokenProducer : @escaping () throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken, changeTokenConsumer : @escaping (UTState) throws -> Void, state : UTState) throws -> Optional<dotnet.System.IDisposable> {
        let del_changeTokenProducer = try dotnet.System.Func_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>(changeTokenProducer);
        let del_changeTokenConsumer = try dotnet.System.Action_1<UTState>(changeTokenConsumer);
        return try OnChange(changeTokenProducer: del_changeTokenProducer, changeTokenConsumer: del_changeTokenConsumer, state: state);
    }
} // ChangeToken


// type: Microsoft.Extensions.Primitives.CompositeChangeToken
    /**
    
            An  which represents one or more  instances.
            

    */
open class CompositeChangeToken
    :
    dotnet.System.Object,
    Microsoft_Extensions_Primitives_IChangeToken
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_CompositeChangeToken_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Primitives.IChangeToken>)
// docid: M:Microsoft.Extensions.Primitives.CompositeChangeToken.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.Primitives.IChangeToken})
    /**
    
            Creates a new instance of .
            

    - Parameter changeTokens: The list of  to compose.
    */
    public init(changeTokens : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_CompositeChangeToken_ctor_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_Extensions_Primitives_IChangeToken_(&__thrown, (changeTokens?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IDisposable RegisterChangeCallback(System.Action<System.Object>, System.Object)
// docid: M:Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)
    /**
    */
    open /* method final */ func RegisterChangeCallback(callback : Optional<dotnet.System.Action_1<dotnet.System.Object>>, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CompositeChangeToken_IDisposable__RegisterChangeCallback_0__2__System_Action_object__Object(&__thrown, self.get_handle(), (callback?.get_handle()), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open /* method final */ func RegisterChangeCallback(callback : @escaping (Optional<dotnet.System.Object>) throws -> Void, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.Object>(callback);
        return try RegisterChangeCallback(callback: del_callback, state: state);
    }
    // [IsSpecialName] bool get_ActiveChangeCallbacks()
// docid: M:Microsoft.Extensions.Primitives.CompositeChangeToken.get_ActiveChangeCallbacks
    open /* method final */ func get_ActiveChangeCallbacks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CompositeChangeToken_bool__get_ActiveChangeCallbacks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Primitives.IChangeToken> get_ChangeTokens()
// docid: M:Microsoft.Extensions.Primitives.CompositeChangeToken.get_ChangeTokens
    open func get_ChangeTokens() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CompositeChangeToken_System_Collections_Generic_IReadOnlyList_Microsoft_Extensions_Primitives_IChangeToken___get_ChangeTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasChanged()
// docid: M:Microsoft.Extensions.Primitives.CompositeChangeToken.get_HasChanged
    open /* method final */ func get_HasChanged() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_CompositeChangeToken_bool__get_HasChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var ActiveChangeCallbacks : Bool {
        get {
            return try! get_ActiveChangeCallbacks();
        }
    }
    /**
    
            Returns the list of  which compose the current .
            

    */
    open var ChangeTokens : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken>> {
        get {
            return try! get_ChangeTokens();
        }
    }
    /**
    */
    public var HasChanged : Bool {
        get {
            return try! get_HasChanged();
        }
    }
} // CompositeChangeToken


// type: Microsoft.Extensions.Primitives.Extensions
public struct Extensions {
    // System.Text.StringBuilder Append(System.Text.StringBuilder, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.Extensions.Append(System.Text.StringBuilder,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Add the given  to the .
            

    - Parameter builder: The  to add to.
    - Parameter segment: The  to add.
    - Returns: The original .

    */
    public static func Append(builder : Optional<dotnet.System.Text.StringBuilder>, segment : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Optional<dotnet.System.Text.StringBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_Extensions_StringBuilder__Append_0__2__StringBuilder_StringSegment(&__thrown, builder?.get_handle() ?? nil, segment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.StringBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // Extensions


// type: Microsoft.Extensions.Primitives.IChangeToken
    /**
    
            Propagates notifications that a change has occurred.
            

    */
open class IChangeToken
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Primitives_IChangeToken
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_IChangeToken_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IDisposable RegisterChangeCallback(System.Action<System.Object>, System.Object)
// docid: M:Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)
    /**
    
            Registers for a callback that will be invoked when the entry has changed.
             MUST be set before the callback is invoked.
            

    - Parameter callback: The  to invoke.
    - Parameter state: State to be passed into the callback.
    - Returns: An  that is used to unregister the callback.

    */
    open func RegisterChangeCallback(callback : Optional<dotnet.System.Action_1<dotnet.System.Object>>, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_IChangeToken_IDisposable__RegisterChangeCallback_0__2__System_Action_object__Object(&__thrown, self.get_handle(), (callback?.get_handle()), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func RegisterChangeCallback(callback : @escaping (Optional<dotnet.System.Object>) throws -> Void, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.Object>(callback);
        return try RegisterChangeCallback(callback: del_callback, state: state);
    }
    // [IsSpecialName] bool get_ActiveChangeCallbacks()
// docid: M:Microsoft.Extensions.Primitives.IChangeToken.get_ActiveChangeCallbacks
    open func get_ActiveChangeCallbacks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_IChangeToken_bool__get_ActiveChangeCallbacks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasChanged()
// docid: M:Microsoft.Extensions.Primitives.IChangeToken.get_HasChanged
    open func get_HasChanged() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_IChangeToken_bool__get_HasChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IChangeToken


// type: Microsoft.Extensions.Primitives.StringSegment
// boxed value type
    /**
    
            An optimized representation of a substring.
            

    */
public final class StringSegment
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringSegment_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.Extensions.Primitives.StringSegment Empty
    /**
    
            A  for .
            

    */
    public class var Empty : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl: Microsoft_Extensions_Primitives_StringSegment_get_Empty());
            return __return;
        }
    }
    /**
    
            Gets the  buffer for this .
            

    */
    public var Buffer : Optional<dotnet.System.String> {
        get {
            return try! get_Buffer();
        }
    }
    /**
    
            Gets whether this  contains a valid value.
            

    */
    public var HasValue : Bool {
        get {
            return try! get_HasValue();
        }
    }
    /**
    
            Gets the length of this .
            

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    
            Gets the offset within the buffer for this .
            

    */
    public var Offset : Swift.Int32 {
        get {
            return try! get_Offset();
        }
    }
    /**
    
            Gets the value of this segment as a .
            

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
    /**
    
            Initializes an instance of the  struct.
            

    - Parameter buffer: 
            The original . The  includes the whole .
            
    */
    public init(buffer : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringSegment_ctor_0__1__String(&__thrown, buffer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
    /**
    
            Initializes an instance of the  struct.
            

    - Parameter buffer: The original  used as buffer.
    - Parameter offset: The offset of the segment within the .
    - Parameter length: The length of the segment.
    */
    public init(buffer : Optional<dotnet.System.String>, offset : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringSegment_ctor_0__3__String_i32_i32(&__thrown, buffer?.get_handle() ?? nil, offset, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Primitives_StringSegment_implicit_ctor();
            super.init(hndl: h);
    }
    // System.ReadOnlyMemory<System.Char> AsMemory()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.AsMemory
    /**
    
            Gets a  from the current .
            

    - Returns: The  from this .

    */
    public func AsMemory() throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_System_ReadOnlyMemory_System_Char___AsMemory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
// TODO COPE (returns byreflike): System.ReadOnlySpan<System.Char> AsSpan()
// TODO COPE (returns byreflike): System.ReadOnlySpan<System.Char> AsSpan(System.Int32)
// TODO COPE (returns byreflike): System.ReadOnlySpan<System.Char> AsSpan(System.Int32, System.Int32)
    // System.Int32 Compare(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Compare(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
    /**
    
            Compares substrings of two specified  objects using the specified rules,
            and returns an integer that indicates their relative position in the sort order.
            

    - Parameter a: The first  to compare.
    - Parameter b: The second  to compare.
    - Parameter comparisonType: One of the enumeration values that specifies the rules for the comparison.
    - Returns: 
            A 32-bit signed integer indicating the lexical relationship between the two comparands.
            The value is negative if  is less than , 0 if the two comparands are equal,
            and positive if  is greater than .
            

    */
    public class func Compare(a : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, b : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, comparisonType : dotnet.System.StringComparison) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__Compare_0__3__StringSegment_StringSegment_StringComparison(&__thrown, a.get_handle(), b.get_handle(), comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool EndsWith(System.String, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)
    /**
    
            Checks if the end of this  matches the specified  when compared using the specified .
            

    - Parameter text: The to compare.
    - Parameter comparisonType: One of the enumeration values that specifies the rules to use in the comparison.
    - Returns:  if  matches the end of this ; otherwise, .

    */
    public func EndsWith(text : Optional<dotnet.System.String>, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__EndsWith_0__2__String_StringComparison(&__thrown, self.get_handle(), text?.get_handle() ?? nil, comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Indicates whether the current object is equal to another object of the same type.
            

    - Parameter other: An object to compare with this object.
    - Returns:  if the current object is equal to the other parameter; otherwise, .

    */
    public func Equals(other : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__1__StringSegment(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
    /**
    
            Determines whether two specified  objects have the same value. A parameter specifies the culture, case, and
            sort rules used in the comparison.
            

    - Parameter a: The first  to compare.
    - Parameter b: The second  to compare.
    - Parameter comparisonType: One of the enumeration values that specifies the rules for the comparison.
    - Returns:  if the objects are equal; otherwise, .

    */
    public class func Equals(a : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, b : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__3__StringSegment_StringSegment_StringComparison(&__thrown, a.get_handle(), b.get_handle(), comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringSegment, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
    /**
    
            Indicates whether the current object is equal to another object of the same type.
            

    - Parameter other: An object to compare with this object.
    - Parameter comparisonType: One of the enumeration values that specifies the rules to use in the comparison.
    - Returns:  if the current object is equal to the other parameter; otherwise, .

    */
    public func Equals(other : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__2__StringSegment_StringComparison(&__thrown, self.get_handle(), other.get_handle(), comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
    /**
    
            Indicates whether the current object is equal to another object of the same type.
            

    - Parameter obj: An object to compare with this object.
    - Returns:  if the current object is equal to the other parameter; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
    /**
    
            Checks if the specified  is equal to the current .
            

    - Parameter text: The  to compare with the current .
    - Returns:  if the specified  is equal to the current ; otherwise, .

    */
    public func Equals(text : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)
    /**
    
            Checks if the specified  is equal to the current .
            

    - Parameter text: The  to compare with the current .
    - Parameter comparisonType: One of the enumeration values that specifies the rules to use in the comparison.
    - Returns:  if the specified  is equal to the current ; otherwise, .

    */
    public func Equals(text : Optional<dotnet.System.String>, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__Equals_0__2__String_StringComparison(&__thrown, self.get_handle(), text?.get_handle() ?? nil, comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.GetHashCode
    /**
    
            Returns a hash code for this instance.
            

    - Returns: 
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.Char)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
    /**
    
            Gets the zero-based index of the first occurrence of the character  in this .
            

    - Parameter c: The Unicode character to seek.
    - Returns: The zero-based index position of  from the beginning of the  if that character is found, or -1 if it is not.

    */
    public func IndexOf(c : dotnet.System.Char) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOf_0__1__Char(&__thrown, self.get_handle(), c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.Char, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
    /**
    
            Gets the zero-based index of the first occurrence of the character  in this .
            The search starts at .
            

    - Parameter c: The Unicode character to seek.
    - Parameter start: The zero-based index position at which the search starts. 
    - Returns: The zero-based index position of  from the beginning of the  if that character is found, or -1 if it is not.

    */
    public func IndexOf(c : dotnet.System.Char, start : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOf_0__2__Char_i32(&__thrown, self.get_handle(), c.get_value(), start);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOf(System.Char, System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
    /**
    
            Gets the zero-based index of the first occurrence of the character  in this .
            The search starts at  and examines a specified number of  character positions.
            

    - Parameter c: The Unicode character to seek.
    - Parameter start: The zero-based index position at which the search starts. 
    - Parameter count: The number of characters to examine.
    - Returns: The zero-based index position of  from the beginning of the  if that character is found, or -1 if it is not.

    */
    public func IndexOf(c : dotnet.System.Char, start : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOf_0__3__Char_i32_i32(&__thrown, self.get_handle(), c.get_value(), start, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfAny(System.Char[])
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[])
    /**
    
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters.
            

    - Parameter anyOf: A Unicode character array containing one or more characters to seek.
    - Returns: The zero-based index position of the first occurrence in this instance where any character in 
            was found; -1 if no character in  was found.

    */
    public func IndexOfAny(anyOf : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOfAny_0__1__CharArray(&__thrown, self.get_handle(), (anyOf?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfAny(System.Char[], System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32)
    /**
    
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position.
            

    - Parameter anyOf: A Unicode character array containing one or more characters to seek.
    - Parameter startIndex: The search starting position.
    - Returns: The zero-based index position of the first occurrence in this instance where any character in 
            was found; -1 if no character in  was found.

    */
    public func IndexOfAny(anyOf : Optional<dotnet.System_Arr<dotnet.System.Char>>, startIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOfAny_0__2__CharArray_i32(&__thrown, self.get_handle(), (anyOf?.get_handle()), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfAny(System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IndexOfAny(System.Char[],System.Int32,System.Int32)
    /**
    
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array
            of Unicode characters. The search starts at a specified character position and examines a specified number
            of character positions.
            

    - Parameter anyOf: A Unicode character array containing one or more characters to seek.
    - Parameter startIndex: The search starting position.
    - Parameter count: The number of character positions to examine.
    - Returns: The zero-based index position of the first occurrence in this instance where any character in 
            was found; -1 if no character in  was found.

    */
    public func IndexOfAny(anyOf : Optional<dotnet.System_Arr<dotnet.System.Char>>, startIndex : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__IndexOfAny_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), (anyOf?.get_handle()), startIndex, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsNullOrEmpty(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Indicates whether the specified  is null or an Empty string.
            

    - Parameter value: The  to test.
    - Returns: 

    */
    public class func IsNullOrEmpty(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__IsNullOrEmpty_0__1__StringSegment(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 LastIndexOf(System.Char)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.LastIndexOf(System.Char)
    /**
    
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            

    - Parameter value: The Unicode character to seek.
    - Returns: The zero-based index position of value if that character is found, or -1 if it is not.

    */
    public func LastIndexOf(value : dotnet.System.Char) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__LastIndexOf_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Checks if two specified  have the same value.
            

    - Parameter left: The first  to compare, or .
    - Parameter right: The second  to compare, or .
    - Returns:  if the value of  is the same as the value of ; otherwise, .

    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, right : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__op_Equality_0__2__StringSegment_StringSegment(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ReadOnlyMemory<System.Char> op_Implicit(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(Microsoft.Extensions.Primitives.StringSegment)
    public class func op_Implicit(segment : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_System_ReadOnlyMemory_System_Char___op_Implicit_0__1__StringSegment(&__thrown, segment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
// TODO COPE (returns byreflike): [IsSpecialName] System.ReadOnlySpan<System.Char> op_Implicit(Microsoft.Extensions.Primitives.StringSegment)
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment op_Implicit(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.op_Implicit(System.String)
    public class func op_Implicit(value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__op_Implicit_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    /**
    
            Checks if two specified  have different values.
            

    - Parameter left: The first  to compare, or .
    - Parameter right: The second  to compare, or .
    - Returns:  if the value of  is different from the value of ; otherwise, .

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, right : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__op_Inequality_0__2__StringSegment_StringSegment(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringTokenizer Split(System.Char[])
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Split(System.Char[])
    /**
    
            Splits a string into s that are based on the characters in an array.
            

    - Parameter chars: A character array that delimits the substrings in this string, an empty array that
            contains no delimiters, or null.
    - Returns: An  whose elements contain the s from this instance
            that are delimited by one or more characters in .

    */
    public func Split(chars : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringTokenizer__Split_0__1__CharArray(&__thrown, self.get_handle(), (chars?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer(hndl : __return);
        }
    }
    // bool StartsWith(System.String, System.StringComparison)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)
    /**
    
            Checks if the beginning of this  matches the specified  when compared using the specified .
            

    - Parameter text: The to compare.
    - Parameter comparisonType: One of the enumeration values that specifies the rules to use in the comparison.
    - Returns:  if  matches the beginning of this ; otherwise, .

    */
    public func StartsWith(text : Optional<dotnet.System.String>, comparisonType : dotnet.System.StringComparison) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__StartsWith_0__2__String_StringComparison(&__thrown, self.get_handle(), text?.get_handle() ?? nil, comparisonType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment Subsegment(System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32)
    /**
    
            Retrieves a  that represents a substring from this .
            The  starts at the position specified by .
            

    - Parameter offset: The zero-based starting character position of a substring in this .
    - Returns: A  that begins at  in this 
            whose length is the remainder.

    */
    public func Subsegment(offset : Swift.Int32) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__Subsegment_0__1__i32(&__thrown, self.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment Subsegment(System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
    /**
    
            Retrieves a  that represents a substring from this .
            The  starts at the position specified by  and has the specified .
            

    - Parameter offset: The zero-based starting character position of a substring in this .
    - Parameter length: The number of characters in the substring.
    - Returns: A  that is equivalent to the substring of length  that begins at  in this 

    */
    public func Subsegment(offset : Swift.Int32, length : Swift.Int32) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__Subsegment_0__2__i32_i32(&__thrown, self.get_handle(), offset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // System.String Substring(System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32)
    /**
    
            Retrieves a substring from this .
            The substring starts at the position specified by  and has the remaining length.
            

    - Parameter offset: The zero-based starting character position of a substring in this .
    - Returns: A  that is equivalent to the substring of remaining length that begins at
             in this 

    */
    public func Substring(offset : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_String__Substring_0__1__i32(&__thrown, self.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Substring(System.Int32, System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
    /**
    
            Retrieves a substring from this .
            The substring starts at the position specified by  and has the specified .
            

    - Parameter offset: The zero-based starting character position of a substring in this .
    - Parameter length: The number of characters in the substring.
    - Returns: A  that is equivalent to the substring of length  that begins at
             in this 

    */
    public func Substring(offset : Swift.Int32, length : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_String__Substring_0__2__i32_i32(&__thrown, self.get_handle(), offset, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.ToString
    /**
    
            Returns the  represented by this  or  if the  does not contain a value.
            

    - Returns: The  represented by this  or  if the  does not contain a value.

    */
    public override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment Trim()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.Trim
    /**
    
            Removes all leading and trailing whitespaces.
            

    - Returns: The trimmed .

    */
    public func Trim() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__Trim_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment TrimEnd()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.TrimEnd
    /**
    
            Removes all trailing whitespaces.
            

    - Returns: The trimmed .

    */
    public func TrimEnd() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__TrimEnd_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringSegment TrimStart()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.TrimStart
    /**
    
            Removes all leading whitespaces.
            

    - Returns: The trimmed .

    */
    public func TrimStart() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_StringSegment__TrimStart_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Buffer()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_Buffer
    public func get_Buffer() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_String__get_Buffer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasValue()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_HasValue
    public func get_HasValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_bool__get_HasValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Offset()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_Offset
    public func get_Offset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_i32__get_Offset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Char get_Item(System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringSegment.get_Item(System.Int32)
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegment_Char__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
} // StringSegment


// type: Microsoft.Extensions.Primitives.StringSegmentComparer
open class StringSegmentComparer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringSegmentComparer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Compare(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegmentComparer.Compare(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    open /* method final */ func Compare(x : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, y : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegmentComparer_i32__Compare_0__2__StringSegment_StringSegment(&__thrown, self.get_handle(), x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegmentComparer.Equals(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
    open /* method final */ func Equals(x : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, y : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegmentComparer_bool__Equals_0__2__StringSegment_StringSegment(&__thrown, self.get_handle(), x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.Extensions.Primitives.StringSegmentComparer.GetHashCode(Microsoft.Extensions.Primitives.StringSegment)
    open /* method final */ func GetHashCode(obj : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegmentComparer_i32__GetHashCode_0__1__StringSegment(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegmentComparer get_Ordinal()
// docid: M:Microsoft.Extensions.Primitives.StringSegmentComparer.get_Ordinal
    open class func get_Ordinal() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegmentComparer_StringSegmentComparer__get_Ordinal_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegmentComparer get_OrdinalIgnoreCase()
// docid: M:Microsoft.Extensions.Primitives.StringSegmentComparer.get_OrdinalIgnoreCase
    open class func get_OrdinalIgnoreCase() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringSegmentComparer_StringSegmentComparer__get_OrdinalIgnoreCase_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public static var Ordinal : Optional<aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer> {
        get {
            return try! get_Ordinal();
        }
    }
    public static var OrdinalIgnoreCase : Optional<aspnetcore.Microsoft.Extensions.Primitives.StringSegmentComparer> {
        get {
            return try! get_OrdinalIgnoreCase();
        }
    }
} // StringSegmentComparer


// type: Microsoft.Extensions.Primitives.StringTokenizer
// boxed value type
    /**
    
            Tokenizes a  into s.
            

    */
public final class StringTokenizer
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringTokenizer_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Primitives.StringSegment, System.Char[])
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(Microsoft.Extensions.Primitives.StringSegment,System.Char[])
    /**
    
            Initializes a new instance of .
            

    - Parameter value: The  to tokenize.
    - Parameter separators: The characters to tokenize by.
    */
    public init(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment, separators : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringTokenizer_ctor_0__2__StringSegment_CharArray(&__thrown, value.get_handle(), (separators?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Char[])
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.#ctor(System.String,System.Char[])
    /**
    
            Initializes a new instance of .
            

    - Parameter value: The  to tokenize.
    - Parameter separators: The characters to tokenize by.
    */
    public init(value : Optional<dotnet.System.String>, separators : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringTokenizer_ctor_0__2__String_CharArray(&__thrown, value?.get_handle() ?? nil, (separators?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Primitives_StringTokenizer_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.Extensions.Primitives.StringTokenizer.Enumerator GetEnumerator()
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.GetEnumerator
    public func GetEnumerator() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringTokenizer_StringTokenizer_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer_Enumerator(hndl : __return);
        }
    }
} // StringTokenizer


// type: Microsoft.Extensions.Primitives.StringTokenizer+Enumerator
// boxed value type
public final class StringTokenizer_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_Current();
        }
    }
    // .ctor(ref Microsoft.Extensions.Primitives.StringTokenizer)
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.Enumerator.#ctor(Microsoft.Extensions.Primitives.StringTokenizer@)
    public init(tokenizer : inout Optional<aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_tokenizer = (tokenizer != nil) ? (tokenizer!.get_handle()) : nil;
        let h = Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_ctor_0__1__refStringTokenizer(&__thrown, &_tmp_ref_tokenizer);
        let __h__tmp2_tokenizer = _tmp_ref_tokenizer;
        let _tmp2_tokenizer = (__h__tmp2_tokenizer != nil) ? aspnetcore.Microsoft.Extensions.Primitives.StringTokenizer(hndl: __h__tmp2_tokenizer!) : nil;
            tokenizer = _tmp2_tokenizer;
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.Enumerator.Reset
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_Current()
// docid: M:Microsoft.Extensions.Primitives.StringTokenizer.Enumerator.get_Current
    public func get_Current() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringTokenizer_Enumerator_StringSegment__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
} // StringTokenizer_Enumerator


// type: Microsoft.Extensions.Primitives.StringValues
// boxed value type
    /**
    
            Represents zero/null, one, or many strings in an efficient way.
            

    */
public final class StringValues
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringValues_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.Extensions.Primitives.StringValues Empty
    /**
    
            A readonly instance of the  struct whose value is an empty string array.
            

    */
    public class var Empty : aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        get {
        let __return = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: Microsoft_Extensions_Primitives_StringValues_get_Empty());
            return __return;
        }
    }
    /**
    
            Gets the number of  elements contained in this .
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String)
    /**
    
            Initializes a new instance of the  structure using the specified string.
            

    - Parameter value: A string value or null.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringValues_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String[])
    /**
    
            Initializes a new instance of the  structure using the specified array of strings.
            

    - Parameter values: A string array.
    */
    public init(values : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Primitives_StringValues_ctor_0__1__StringArray(&__thrown, (values?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Primitives_StringValues_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.Extensions.Primitives.StringValues Concat(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Concatenates two specified instances of .
            

    - Parameter values1: The first  to concatenate.
    - Parameter values2: The second  to concatenate.
    - Returns: The concatenation of  and .

    */
    public class func Concat(values1 : aspnetcore.Microsoft.Extensions.Primitives.StringValues, values2 : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues__Concat_0__2__StringValues_StringValues(&__thrown, values1.get_handle(), values2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringValues Concat(ref Microsoft.Extensions.Primitives.StringValues, System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues@,System.String)
    /**
    
            Concatenates specified instance of  with specified .
            

    - Parameter values: The  to concatenate.
    - Parameter value: The  to concatenate.
    - Returns: The concatenation of  and .

    */
    public class func Concat(values : inout Optional<aspnetcore.Microsoft.Extensions.Primitives.StringValues>, value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
            var _tmp_in_values = (values != nil) ? (values!.get_handle()) : nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues__Concat_0__2__inStringValues_String(&__thrown, &_tmp_in_values, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // Microsoft.Extensions.Primitives.StringValues Concat(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Concat(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    
            Concatenates specified instance of  with specified .
            

    - Parameter value: The  to concatenate.
    - Parameter values: The  to concatenate.
    - Returns: The concatenation of  and .

    */
    public class func Concat(value : Optional<dotnet.System.String>, values : inout Optional<aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
            var _tmp_in_values = (values != nil) ? (values!.get_handle()) : nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues__Concat_0__2__String_inStringValues(&__thrown, value?.get_handle() ?? nil, &_tmp_in_values);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether this instance and another specified  object have the same values.
            

    - Parameter other: The string to compare to this instance.
    - Returns: true if the value of  is the same as the value of this instance; otherwise, false.

    */
    public func Equals(other : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__1__StringValues(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether two specified  objects have the same values in the same order.
            

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false.

    */
    public class func Equals(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__2__StringValues_StringValues(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringValues, System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)
    /**
    
            Determines whether the specified  and  objects have the same values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false. If  is null, the method returns false.

    */
    public class func Equals(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__2__StringValues_String(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.Extensions.Primitives.StringValues, System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])
    /**
    
            Determines whether the specified  and string array objects have the same values.
            

    - Parameter left: The  to compare.
    - Parameter right: The string array to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false.

    */
    public class func Equals(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__2__StringValues_StringArray(&__thrown, left.get_handle(), (right?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)
    /**
    
            Determines whether this instance and a specified object have the same value.
            

    - Parameter obj: An object to compare with this object.
    - Returns: true if the current object is equal to ; otherwise, false.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String)
    /**
    
            Determines whether this instance and a specified , have the same value.
            

    - Parameter other: The  to compare to this instance.
    - Returns: true if the value of  is the same as this instance; otherwise, false. If  is null, returns false.

    */
    public func Equals(other : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__1__String(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified  and  objects have the same values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false. If  is null, the method returns false.

    */
    public class func Equals(left : Optional<dotnet.System.String>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__2__String_StringValues(&__thrown, left?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])
    /**
    
            Determines whether this instance and a specified string array have the same values.
            

    - Parameter other: The string array to compare to this instance.
    - Returns: true if the value of  is the same as this instance; otherwise, false.

    */
    public func Equals(other : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__1__StringArray(&__thrown, self.get_handle(), (other?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.String[], Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified string array and  objects have the same values.
            

    - Parameter left: The string array to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false.

    */
    public class func Equals(left : Optional<dotnet.System_Arr<dotnet.System.String>>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__Equals_0__2__StringArray_StringValues(&__thrown, (left?.get_handle()), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.Extensions.Primitives.StringValues.Enumerator GetEnumerator()
// docid: M:Microsoft.Extensions.Primitives.StringValues.GetEnumerator
    /**
    Retrieves an object that can iterate through the individual strings in this .

    - Returns: An enumerator that can be used to iterate through the .

    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues_Enumerator(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.Extensions.Primitives.StringValues.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Indicates whether the specified  contains no string values.
            

    - Parameter value: The  to test.
    - Returns: true if value contains a single null or empty string or an empty array; otherwise, false.

    */
    public class func IsNullOrEmpty(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__IsNullOrEmpty_0__1__StringValues(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether two specified  have the same values.
            

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: true if the value of  is the same as the value of ; otherwise, false.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__StringValues_StringValues(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Primitives.StringValues, System.Object)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)
    /**
    
            Determines whether the specified  and , which must be a
            , , or array of , have the same value.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the  object is equal to the ; otherwise, false.

    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__StringValues_Object(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Primitives.StringValues, System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)
    /**
    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__StringValues_String(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.Extensions.Primitives.StringValues, System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])
    /**
    */
    public class func op_Equality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__StringValues_StringArray(&__thrown, left.get_handle(), (right?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Object, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified , which must be a
            , , or array of , and specified ,  have the same value.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the  object is equal to the ; otherwise, false.

    */
    public class func op_Equality(left : Optional<dotnet.System.Object>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__Object_StringValues(&__thrown, left?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    */
    public class func op_Equality(left : Optional<dotnet.System.String>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__String_StringValues(&__thrown, left?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.String[], Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)
    /**
    */
    public class func op_Equality(left : Optional<dotnet.System_Arr<dotnet.System.String>>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Equality_0__2__StringArray_StringValues(&__thrown, (left?.get_handle()), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String op_Implicit(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)
    public class func op_Implicit(values : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_String__op_Implicit_0__1__StringValues(&__thrown, values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String[] op_Implicit(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)
    public class func op_Implicit(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringArray__op_Implicit_0__1__StringValues(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues op_Implicit(System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String)
    public class func op_Implicit(value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues__op_Implicit_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues op_Implicit(System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String[])
    public class func op_Implicit(values : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringValues__op_Implicit_0__1__StringArray(&__thrown, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether two specified  have different values.
            

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: true if the value of  is different to the value of ; otherwise, false.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__StringValues_StringValues(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Primitives.StringValues, System.Object)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)
    /**
    
            Determines whether the specified  and , which must be a
            , , or array of , have different values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the  object is equal to the ; otherwise, false.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__StringValues_Object(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Primitives.StringValues, System.String)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)
    /**
    
            Determines whether the specified  and  objects have different values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is different to the value of ; otherwise, false.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__StringValues_String(&__thrown, left.get_handle(), right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.Extensions.Primitives.StringValues, System.String[])
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])
    /**
    
            Determines whether the specified  and string array have different values.
            

    - Parameter left: The  to compare.
    - Parameter right: The string array to compare.
    - Returns: true if the value of  is different to the value of ; otherwise, false.

    */
    public class func op_Inequality(left : aspnetcore.Microsoft.Extensions.Primitives.StringValues, right : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__StringValues_StringArray(&__thrown, left.get_handle(), (right?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Object, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified  and  object have the same values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the  object is equal to the ; otherwise, false.

    */
    public class func op_Inequality(left : Optional<dotnet.System.Object>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__Object_StringValues(&__thrown, left?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified  and  objects have different values.
            

    - Parameter left: The  to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is different to the value of ; otherwise, false.

    */
    public class func op_Inequality(left : Optional<dotnet.System.String>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__String_StringValues(&__thrown, left?.get_handle() ?? nil, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.String[], Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Determines whether the specified string array and  have different values.
            

    - Parameter left: The string array to compare.
    - Parameter right: The  to compare.
    - Returns: true if the value of  is different to the value of ; otherwise, false.

    */
    public class func op_Inequality(left : Optional<dotnet.System_Arr<dotnet.System.String>>, right : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_bool__op_Inequality_0__2__StringArray_StringValues(&__thrown, (left?.get_handle()), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String[] ToArray()
// docid: M:Microsoft.Extensions.Primitives.StringValues.ToArray
    /**
    
            Creates a string array from the current  object.
            

    - Returns: A string array represented by this instance.

    */
    public func ToArray() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_StringArray__ToArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Extensions.Primitives.StringValues.ToString
    /**
    
            Converts the value of the current  object to its equivalent string representation, with multiple values joined as a comma separated string.
            

    - Returns: A string representation of the value of the current  object.

    */
    public override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.Extensions.Primitives.StringValues.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Item(System.Int32)
// docid: M:Microsoft.Extensions.Primitives.StringValues.get_Item(System.Int32)
    public func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_String__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // StringValues


// type: Microsoft.Extensions.Primitives.StringValues+Enumerator
// boxed value type
    /**
    
            Enumerates the string values of a .
            

    */
public final class StringValues_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Primitives_StringValues_Enumerator_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : Optional<dotnet.System.String> {
        get {
            return try! get_Current();
        }
    }
    // .ctor(ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.Extensions.Primitives.StringValues.Enumerator.#ctor(Microsoft.Extensions.Primitives.StringValues@)
    public init(values : inout Optional<aspnetcore.Microsoft.Extensions.Primitives.StringValues>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_values = (values != nil) ? (values!.get_handle()) : nil;
        let h = Microsoft_Extensions_Primitives_StringValues_Enumerator_ctor_0__1__refStringValues(&__thrown, &_tmp_ref_values);
        let __h__tmp2_values = _tmp_ref_values;
        let _tmp2_values = (__h__tmp2_values != nil) ? aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: __h__tmp2_values!) : nil;
            values = _tmp2_values;
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_Extensions_Primitives_StringValues_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Primitives.StringValues.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Primitives_StringValues_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.Extensions.Primitives.StringValues.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Current()
// docid: M:Microsoft.Extensions.Primitives.StringValues.Enumerator.get_Current
    public func get_Current() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Primitives_StringValues_Enumerator_String__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // StringValues_Enumerator


}



public protocol Microsoft_Extensions_Primitives_IChangeToken
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Text.StringBuilder Append(System.Text.StringBuilder, Microsoft.Extensions.Primitives.StringSegment)
extension dotnet.System.Text.StringBuilder {
    public func Append(segment : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws -> Optional<dotnet.System.Text.StringBuilder> {
        return try aspnetcore.Microsoft.Extensions.Primitives.Extensions.Append(builder: self, segment: segment);
    }
}

