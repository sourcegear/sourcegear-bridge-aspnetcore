// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.CertificateForwardingBuilderExtensions
public struct CertificateForwardingBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseCertificateForwarding(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.CertificateForwardingBuilderExtensions.UseCertificateForwarding(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a middleware to the pipeline that will look for a certificate in a request header
            decode it, and updates HttpContext.Connection.ClientCertificate.
            

    - Parameter app: 
    - Returns: 

    */
    public static func UseCertificateForwarding(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_CertificateForwardingBuilderExtensions_IApplicationBuilder__UseCertificateForwarding_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // CertificateForwardingBuilderExtensions


// type: Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions
public struct ForwardedHeadersExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Applies forwarded headers to their matching fields on the current request.
            
            By convention, HTTP proxies forward information from the client in well-known HTTP headers.
            The  reads these headers and fills in the associated fields on HttpContext.
            
            

    - Parameter builder: The .
    - Returns: A reference to  after the operation has completed.

    */
    public static func UseForwardedHeaders(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersExtensions_IApplicationBuilder__UseForwardedHeaders_0__1__IApplicationBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.ForwardedHeadersOptions)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ForwardedHeadersOptions)
    /**
    
            Applies forwarded headers to their matching fields on the current request.
            
            By convention, HTTP proxies forward information from the client in well-known HTTP headers.
            The  reads these headers and fills in the associated fields on HttpContext.
            
            

    - Parameter builder: The .
    - Parameter options: Enables the different forwarding options.
    - Returns: A reference to  after the operation has completed.

    */
    public static func UseForwardedHeaders(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.ForwardedHeadersOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersExtensions_IApplicationBuilder__UseForwardedHeaders_0__2__IApplicationBuilder_ForwardedHeadersOptions(&__thrown, builder.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // ForwardedHeadersExtensions


// type: Microsoft.AspNetCore.Builder.ForwardedHeadersOptions
    /**
    
            Options for 
            

    */
open class ForwardedHeadersOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ForwardedForHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_ForwardedForHeaderName
    open func get_ForwardedForHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_ForwardedForHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ForwardedForHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_ForwardedForHeaderName(System.String)
    open func set_ForwardedForHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_ForwardedForHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardedHostHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_ForwardedHostHeaderName
    open func get_ForwardedHostHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_ForwardedHostHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ForwardedHostHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_ForwardedHostHeaderName(System.String)
    open func set_ForwardedHostHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_ForwardedHostHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ForwardedProtoHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_ForwardedProtoHeaderName
    open func get_ForwardedProtoHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_ForwardedProtoHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ForwardedProtoHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_ForwardedProtoHeaderName(System.String)
    open func set_ForwardedProtoHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_ForwardedProtoHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalForHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_OriginalForHeaderName
    open func get_OriginalForHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_OriginalForHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalForHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_OriginalForHeaderName(System.String)
    open func set_OriginalForHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_OriginalForHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalHostHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_OriginalHostHeaderName
    open func get_OriginalHostHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_OriginalHostHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalHostHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_OriginalHostHeaderName(System.String)
    open func set_OriginalHostHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_OriginalHostHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalProtoHeaderName()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_OriginalProtoHeaderName
    open func get_OriginalProtoHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_String__get_OriginalProtoHeaderName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalProtoHeaderName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_OriginalProtoHeaderName(System.String)
    open func set_OriginalProtoHeaderName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_OriginalProtoHeaderName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders get_ForwardedHeaders()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_ForwardedHeaders
    open func get_ForwardedHeaders() throws -> aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_ForwardedHeaders__get_ForwardedHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: __return);
        }
    }
    // [IsSpecialName] void set_ForwardedHeaders(Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_ForwardedHeaders(Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders)
    open func set_ForwardedHeaders(value : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_ForwardedHeaders_0__1__ForwardedHeaders(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ForwardLimit()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_ForwardLimit
    open func get_ForwardLimit() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_System_Nullable_i32___get_ForwardLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ForwardLimit(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_ForwardLimit(System.Nullable{System.Int32})
    open func set_ForwardLimit(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_ForwardLimit_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Net.IPAddress> get_KnownProxies()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_KnownProxies
    open func get_KnownProxies() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_System_Collections_Generic_IList_System_Net_IPAddress___get_KnownProxies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.HttpOverrides.IPNetwork> get_KnownNetworks()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_KnownNetworks
    open func get_KnownNetworks() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.IPNetwork> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_HttpOverrides_IPNetwork___get_KnownNetworks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedHosts()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_AllowedHosts
    open func get_AllowedHosts() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_System_Collections_Generic_IList_string___get_AllowedHosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AllowedHosts(System.Collections.Generic.IList<System.String>)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_AllowedHosts(System.Collections.Generic.IList{System.String})
    open func set_AllowedHosts(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_AllowedHosts_0__1__System_Collections_Generic_IList_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RequireHeaderSymmetry()
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.get_RequireHeaderSymmetry
    open func get_RequireHeaderSymmetry() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_bool__get_RequireHeaderSymmetry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RequireHeaderSymmetry(bool)
// docid: M:Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.set_RequireHeaderSymmetry(System.Boolean)
    open func set_RequireHeaderSymmetry(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_void__set_RequireHeaderSymmetry_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The allowed values from x-forwarded-host. If the list is empty then all hosts are allowed.
            Failing to restrict this these values may allow an attacker to spoof links generated by your service.
            

    */
    open var AllowedHosts : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedHosts();
        }
        set(v) {
            return try! set_AllowedHosts(value: v);
        }
    }
    /**
    
            Limits the number of entries in the headers that will be processed. The default value is 1.
            Set to null to disable the limit, but this should only be done if
            KnownProxies or KnownNetworks are configured.
            

    */
    open var ForwardLimit : Optional<Swift.Int32> {
        get {
            return try! get_ForwardLimit();
        }
        set(v) {
            return try! set_ForwardLimit(value: v!);
        }
    }
    /**
    
            Gets or sets the header used to retrieve the originating client IP. Defaults to the value specified by
            .
            

    */
    open var ForwardedForHeaderName : dotnet.System.String {
        get {
            return try! get_ForwardedForHeaderName();
        }
        set(v) {
            return try! set_ForwardedForHeaderName(value: v);
        }
    }
    /**
    
            Identifies which forwarders should be processed.
            

    */
    open var ForwardedHeaders : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
            return try! get_ForwardedHeaders();
        }
        set(v) {
            return try! set_ForwardedHeaders(value: v);
        }
    }
    /**
    
            Gets or sets the header used to retrieve the original value of the Host header field.
            Defaults to the value specified by 
            

    */
    open var ForwardedHostHeaderName : dotnet.System.String {
        get {
            return try! get_ForwardedHostHeaderName();
        }
        set(v) {
            return try! set_ForwardedHostHeaderName(value: v);
        }
    }
    /**
    
            Gets or sets the header used to retrieve the value for the originating scheme (HTTP/HTTPS).
            Defaults to the value specified by 
            

    */
    open var ForwardedProtoHeaderName : dotnet.System.String {
        get {
            return try! get_ForwardedProtoHeaderName();
        }
        set(v) {
            return try! set_ForwardedProtoHeaderName(value: v);
        }
    }
    /**
    
            Address ranges of known proxies to accept forwarded headers from.
            

    */
    open var KnownNetworks : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.IPNetwork> {
        get {
            return try! get_KnownNetworks();
        }
    }
    /**
    
            Addresses of known proxies to accept forwarded headers from.
            

    */
    open var KnownProxies : dotnet.System.Collections.Generic.IList_1<dotnet.System.Net.IPAddress> {
        get {
            return try! get_KnownProxies();
        }
    }
    /**
    
            Gets or sets the header used to store the original value of client IP before applying forwarded headers.
            Defaults to the value specified by 
            

    */
    open var OriginalForHeaderName : dotnet.System.String {
        get {
            return try! get_OriginalForHeaderName();
        }
        set(v) {
            return try! set_OriginalForHeaderName(value: v);
        }
    }
    /**
    
            Gets or sets the header used to store the original value of the Host header field before applying forwarded headers.
            Defaults to the value specified by 
            

    */
    open var OriginalHostHeaderName : dotnet.System.String {
        get {
            return try! get_OriginalHostHeaderName();
        }
        set(v) {
            return try! set_OriginalHostHeaderName(value: v);
        }
    }
    /**
    
            Gets or sets the header used to store the original scheme (HTTP/HTTPS) before applying forwarded headers.
            Defaults to the value specified by 
            

    */
    open var OriginalProtoHeaderName : dotnet.System.String {
        get {
            return try! get_OriginalProtoHeaderName();
        }
        set(v) {
            return try! set_OriginalProtoHeaderName(value: v);
        }
    }
    /**
    
            Require the number of header values to be in sync between the different headers being processed.
            The default is 'false'.
            

    */
    open var RequireHeaderSymmetry : Bool {
        get {
            return try! get_RequireHeaderSymmetry();
        }
        set(v) {
            return try! set_RequireHeaderSymmetry(value: v);
        }
    }
} // ForwardedHeadersOptions


// type: Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions
public struct HttpMethodOverrideExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Allows incoming POST request to override method type with type specified in header. This middleware
            is used when a client is limited to sending GET or POST methods but wants to invoke other HTTP methods.
            By default, the X-HTTP-Method-Override request header is used to specify the HTTP method being tunneled.
            

    - Parameter builder: The  instance this method extends.
    */
    public static func UseHttpMethodOverride(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpMethodOverrideExtensions_IApplicationBuilder__UseHttpMethodOverride_0__1__IApplicationBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions)
// docid: M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions)
    /**
    
            Allows incoming POST request to override method type with type specified in form. This middleware
            is used when a client is limited to sending GET or POST methods but wants to invoke other HTTP methods.
            

    - Parameter builder: The  instance this method extends.
    - Parameter options: 
            The  which indicates which form type specifies the override method.
            
    */
    public static func UseHttpMethodOverride(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpMethodOverrideExtensions_IApplicationBuilder__UseHttpMethodOverride_0__2__IApplicationBuilder_HttpMethodOverrideOptions(&__thrown, builder.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // HttpMethodOverrideExtensions


// type: Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions
    /**
    
            Options for configuring 
            

    */
open class HttpMethodOverrideOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_FormFieldName()
// docid: M:Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions.get_FormFieldName
    open func get_FormFieldName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_String__get_FormFieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FormFieldName(System.String)
// docid: M:Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions.set_FormFieldName(System.String)
    open func set_FormFieldName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_void__set_FormFieldName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Denotes the form element that contains the name of the resulting method type.
            If not set the X-Http-Method-Override header will be used.
            

    */
    open var FormFieldName : Optional<dotnet.System.String> {
        get {
            return try! get_FormFieldName();
        }
        set(v) {
            return try! set_FormFieldName(value: v!);
        }
    }
} // HttpMethodOverrideOptions


}

// Microsoft.AspNetCore.HttpOverrides
extension Microsoft.AspNetCore.HttpOverrides {
// type: Microsoft.AspNetCore.HttpOverrides.CertificateForwardingMiddleware
    /**
    
            Middleware that converts a forward header into a client certificate if found.
            

    */
open class CertificateForwardingMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_CertificateForwardingMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>)
// docid: M:Microsoft.AspNetCore.HttpOverrides.CertificateForwardingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions})
    /**
    
            Constructor.
            

    - Parameter next: 
    - Parameter loggerFactory: 
    - Parameter options: 
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingMiddleware_ctor_0__3__RequestDelegate_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_(&__thrown, next.get_handle(), loggerFactory.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpOverrides.CertificateForwardingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Looks for the presence of a  header in the request,
            if found, converts this header to a ClientCertificate set on the connection.
            

    - Parameter httpContext: The .
    - Returns: A .

    */
    open func Invoke(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // CertificateForwardingMiddleware


// type: Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions
    /**
    
            Used to configure the .
            

    */
open class CertificateForwardingOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // instance field: System.Func`2[[System.String, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]] HeaderConverter
    /**
    
            The function used to convert the header to an instance of .
            

    */
    open var HeaderConverter : dotnet.System.Func_2<dotnet.System.String,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        get {
        let __return = dotnet.System.Func_2<dotnet.System.String,dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>(hndl: Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_get_HeaderConverter(self.get_handle()));
            return __return;
        }
        set(v) {
            Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_set_HeaderConverter(self.get_handle(), v.get_handle());
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_CertificateHeader()
// docid: M:Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions.get_CertificateHeader
    open func get_CertificateHeader() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_String__get_CertificateHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CertificateHeader(System.String)
// docid: M:Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions.set_CertificateHeader(System.String)
    open func set_CertificateHeader(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_void__set_CertificateHeader_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the header containing the client certificate.
            

    */
    open var CertificateHeader : dotnet.System.String {
        get {
            return try! get_CertificateHeader();
        }
        set(v) {
            return try! set_CertificateHeader(value: v);
        }
    }
} // CertificateForwardingOptions


// type: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders
    /**
    
            Flags for controlling which forwarders are processed.
            

    */
public struct ForwardedHeaders : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders None
    /**
    
            Do not process any forwarders
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders XForwardedFor
    /**
    
            Process X-Forwarded-For, which identifies the originating IP address of the client.
            

    */
    public static var XForwardedFor : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_XForwardedFor());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders XForwardedHost
    /**
    
            Process X-Forwarded-Host, which identifies the original host requested by the client.
            

    */
    public static var XForwardedHost : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_XForwardedHost());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders XForwardedProto
    /**
    
            Process X-Forwarded-Proto, which identifies the protocol (HTTP or HTTPS) the client used to connect.
            

    */
    public static var XForwardedProto : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_XForwardedProto());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders All
    /**
    
            Process X-Forwarded-For, X-Forwarded-Host and X-Forwarded-Proto.
            

    */
    public static var All : aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpOverrides.ForwardedHeaders(val: Microsoft_AspNetCore_HttpOverrides_ForwardedHeaders_get_All());
            return __return;
        }
    }
} // ForwardedHeaders


// type: Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults
public struct ForwardedHeadersDefaults {
    // [IsSpecialName] System.String get_XForwardedForHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XForwardedForHeaderName
    public static func get_XForwardedForHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XForwardedForHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XForwardedHostHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XForwardedHostHeaderName
    public static func get_XForwardedHostHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XForwardedHostHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XForwardedProtoHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XForwardedProtoHeaderName
    public static func get_XForwardedProtoHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XForwardedProtoHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XOriginalForHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XOriginalForHeaderName
    public static func get_XOriginalForHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XOriginalForHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XOriginalHostHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XOriginalHostHeaderName
    public static func get_XOriginalHostHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XOriginalHostHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_XOriginalProtoHeaderName()
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersDefaults.get_XOriginalProtoHeaderName
    public static func get_XOriginalProtoHeaderName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersDefaults_String__get_XOriginalProtoHeaderName_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            X-Forwarded-For
            

    */
    public static var XForwardedForHeaderName : dotnet.System.String {
        get {
            return try! get_XForwardedForHeaderName();
        }
    }
    /**
    
            X-Forwarded-Host
            

    */
    public static var XForwardedHostHeaderName : dotnet.System.String {
        get {
            return try! get_XForwardedHostHeaderName();
        }
    }
    /**
    
            X-Forwarded-Proto
            

    */
    public static var XForwardedProtoHeaderName : dotnet.System.String {
        get {
            return try! get_XForwardedProtoHeaderName();
        }
    }
    /**
    
            X-Original-For
            

    */
    public static var XOriginalForHeaderName : dotnet.System.String {
        get {
            return try! get_XOriginalForHeaderName();
        }
    }
    /**
    
            X-Original-Host
            

    */
    public static var XOriginalHostHeaderName : dotnet.System.String {
        get {
            return try! get_XOriginalHostHeaderName();
        }
    }
    /**
    
            X-Original-Proto
            

    */
    public static var XOriginalProtoHeaderName : dotnet.System.String {
        get {
            return try! get_XOriginalProtoHeaderName();
        }
    }
} // ForwardedHeadersDefaults


// type: Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware
    /**
    
            A middleware for forwarding proxied headers onto the current request.
            

    */
open class ForwardedHeadersMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.ForwardedHeadersOptions>)
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.ForwardedHeadersOptions})
    /**
    
            Create a new .
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter loggerFactory: The  used for logging.
    - Parameter options: The  for configuring the middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.ForwardedHeadersOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersMiddleware_ctor_0__3__RequestDelegate_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_ForwardedHeadersOptions_(&__thrown, next.get_handle(), loggerFactory.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void ApplyForwarders(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware.ApplyForwarders(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Forward the proxied headers to the given .
            

    - Parameter context: The .
    */
    open func ApplyForwarders(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpOverrides_ForwardedHeadersMiddleware_void__ApplyForwarders_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ForwardedHeadersMiddleware


// type: Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware
    /**
    
            A middleware for overriding the HTTP method of an incoming POST request.
            

    */
open class HttpMethodOverrideMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_HttpMethodOverrideMiddleware_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_HttpOverrides_HttpMethodOverrideMiddleware_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions>)
// docid: M:Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions})
    /**
    
            Create a new .
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter options: The  for configuring the middleware.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpOverrides_HttpMethodOverrideMiddleware_ctor_0__2__RequestDelegate_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_HttpMethodOverrideOptions_(&__thrown, next.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.HttpOverrides.HttpMethodOverrideMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Executes the middleware.
            

    - Parameter context: The  for the current request.
    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_HttpMethodOverrideMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // HttpMethodOverrideMiddleware


// type: Microsoft.AspNetCore.HttpOverrides.IPNetwork
    /**
    
            A representation of an IP network based on CIDR notation.
            

    */
open class IPNetwork
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpOverrides_IPNetwork_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_HttpOverrides_IPNetwork_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Net.IPAddress, System.Int32)
// docid: M:Microsoft.AspNetCore.HttpOverrides.IPNetwork.#ctor(System.Net.IPAddress,System.Int32)
    /**
    
            Create a new  with the specified  and prefix length.
            

    - Parameter prefix: The .
    - Parameter prefixLength: The prefix length.
    */
    public init(prefix : dotnet.System.Net.IPAddress, prefixLength : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpOverrides_IPNetwork_ctor_0__2__IPAddress_i32(&__thrown, prefix.get_handle(), prefixLength);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Contains(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.HttpOverrides.IPNetwork.Contains(System.Net.IPAddress)
    /**
    
            Determine whether a given The  is part of the IP network.
            

    - Parameter address: The .
    - Returns:  if the  is part of the IP network. Otherwise, .

    */
    open func Contains(address : dotnet.System.Net.IPAddress) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_IPNetwork_bool__Contains_0__1__IPAddress(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_Prefix()
// docid: M:Microsoft.AspNetCore.HttpOverrides.IPNetwork.get_Prefix
    open func get_Prefix() throws -> dotnet.System.Net.IPAddress {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_IPNetwork_IPAddress__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPAddress(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_PrefixLength()
// docid: M:Microsoft.AspNetCore.HttpOverrides.IPNetwork.get_PrefixLength
    open func get_PrefixLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpOverrides_IPNetwork_i32__get_PrefixLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Get the  that represents the prefix for the network.
            

    */
    open var Prefix : dotnet.System.Net.IPAddress {
        get {
            return try! get_Prefix();
        }
    }
    /**
    
            The CIDR notation of the subnet mask
            

    */
    open var PrefixLength : Swift.Int32 {
        get {
            return try! get_PrefixLength();
        }
    }
} // IPNetwork


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions
public struct CertificateForwardingServiceExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddCertificateForwarding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions.AddCertificateForwarding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions})
    /**
    
            Adds certificate forwarding to the specified .
            

    - Parameter services: The .
    - Parameter configure: An action delegate to configure the provided .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddCertificateForwarding(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CertificateForwardingServiceExtensions_IServiceCollection__AddCertificateForwarding_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HttpOverrides_CertificateForwardingOptions_(&__thrown, services.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCertificateForwarding(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>(configure);
        return try AddCertificateForwarding(services: services, configure: del_configure);
    }
} // CertificateForwardingServiceExtensions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseCertificateForwarding(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseCertificateForwarding() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.CertificateForwardingBuilderExtensions.UseCertificateForwarding(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseForwardedHeaders() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.ForwardedHeadersOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseForwardedHeaders(options : aspnetcore.Microsoft.AspNetCore.Builder.ForwardedHeadersOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHttpMethodOverride() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHttpMethodOverride(options : aspnetcore.Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddCertificateForwarding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddCertificateForwarding(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions.AddCertificateForwarding(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddCertificateForwarding(configure : @escaping (aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpOverrides.CertificateForwardingOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CertificateForwardingServiceExtensions.AddCertificateForwarding(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

