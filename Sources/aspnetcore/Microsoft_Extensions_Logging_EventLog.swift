// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Logging
extension Microsoft.Extensions.Logging {
// type: Microsoft.Extensions.Logging.EventLoggerFactoryExtensions
public struct EventLoggerFactoryExtensions {
    // Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Adds an event logger named 'EventLog' to the factory.
            

    - Parameter builder: The extension method argument.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddEventLog(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLoggerFactoryExtensions_ILoggingBuilder__AddEventLog_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder, Microsoft.Extensions.Logging.EventLog.EventLogSettings)
// docid: M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.EventLog.EventLogSettings)
    /**
    
            Adds an event logger. Use  to enable logging for specific s.
            

    - Parameter builder: The extension method argument.
    - Parameter settings: The .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddEventLog(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, settings : Optional<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLoggerFactoryExtensions_ILoggingBuilder__AddEventLog_0__2__ILoggingBuilder_EventLogSettings(&__thrown, builder?.get_handle() ?? nil, settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.EventLog.EventLogSettings>)
// docid: M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.EventLog.EventLogSettings})
    /**
    
            Adds an event logger. Use  to enable logging for specific s.
            

    - Parameter builder: The extension method argument.
    - Parameter configure: A delegate to configure the .
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddEventLog(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLoggerFactoryExtensions_ILoggingBuilder__AddEventLog_0__2__ILoggingBuilder_System_Action_Microsoft_Extensions_Logging_EventLog_EventLogSettings_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddEventLog(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>(configure);
        return try AddEventLog(builder: builder, configure: del_configure);
    }
} // EventLoggerFactoryExtensions


}
// Microsoft.Extensions.Logging.EventLog
extension Microsoft.Extensions.Logging.EventLog {
// type: Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider
    /**
    
            The provider for the .
            

    */
open class EventLogLoggerProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Logging_ILoggerProvider,
    System_IDisposable,
    Microsoft_Extensions_Logging_ISupportExternalScope
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Logging.EventLog.EventLogSettings)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.#ctor(Microsoft.Extensions.Logging.EventLog.EventLogSettings)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter settings: The .
    */
    public init(settings : Optional<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_ctor_0__1__EventLogSettings(&__thrown, settings?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Logging.EventLog.EventLogSettings>)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Logging.EventLog.EventLogSettings})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter options: The .
    */
    public init(options : Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Logging_EventLog_EventLogSettings_(&__thrown, (options?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Logging.ILogger CreateLogger(System.String)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.CreateLogger(System.String)
    /**
    */
    open /* method final */ func CreateLogger(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILogger> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_ILogger__CreateLogger_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Logging.ILogger(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)
    /**
    */
    open /* method final */ func SetScopeProvider(scopeProvider : Optional<aspnetcore.Microsoft.Extensions.Logging.IExternalScopeProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogLoggerProvider_void__SetScopeProvider_0__1__IExternalScopeProvider(&__thrown, self.get_handle(), scopeProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventLogLoggerProvider


// type: Microsoft.Extensions.Logging.EventLog.EventLogSettings
    /**
    
            Settings for .
            

    */
open class EventLogSettings
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_EventLog_EventLogSettings_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Logging_EventLog_EventLogSettings_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_EventLog_EventLogSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<System.String,Microsoft.Extensions.Logging.LogLevel,bool> get_Filter()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.get_Filter
    open func get_Filter() throws -> Optional<dotnet.System.Func_3<dotnet.System.String,aspnetcore.Microsoft.Extensions.Logging.LogLevel,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLog_EventLogSettings_System_Func_string_Microsoft_Extensions_Logging_LogLevel_bool___get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_3(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Filter(System.Func<System.String,Microsoft.Extensions.Logging.LogLevel,bool>)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.set_Filter(System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})
    open func set_Filter(value : Optional<dotnet.System.Func_3<dotnet.System.String,aspnetcore.Microsoft.Extensions.Logging.LogLevel,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogSettings_void__set_Filter_0__1__System_Func_string_Microsoft_Extensions_Logging_LogLevel_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Filter(value : @escaping (Optional<dotnet.System.String>, aspnetcore.Microsoft.Extensions.Logging.LogLevel) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_3<dotnet.System.String,aspnetcore.Microsoft.Extensions.Logging.LogLevel,Swift.Bool>(value);
        return try set_Filter(value: del_value);
    }
    // [IsSpecialName] System.String get_LogName()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.get_LogName
    open func get_LogName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLog_EventLogSettings_String__get_LogName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LogName(System.String)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.set_LogName(System.String)
    open func set_LogName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogSettings_void__set_LogName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.get_MachineName
    open func get_MachineName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLog_EventLogSettings_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MachineName(System.String)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.set_MachineName(System.String)
    open func set_MachineName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogSettings_void__set_MachineName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SourceName()
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.get_SourceName
    open func get_SourceName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_EventLog_EventLogSettings_String__get_SourceName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SourceName(System.String)
// docid: M:Microsoft.Extensions.Logging.EventLog.EventLogSettings.set_SourceName(System.String)
    open func set_SourceName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_EventLog_EventLogSettings_void__set_SourceName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The function used to filter events based on the log level.
            

    */
    open var Filter : Optional<dotnet.System.Func_3<dotnet.System.String,aspnetcore.Microsoft.Extensions.Logging.LogLevel,Bool>> {
        get {
            return try! get_Filter();
        }
        set(v) {
            return try! set_Filter(value: v!);
        }
    }
    /**
    
            Name of the event log. If null or not specified, "Application" is the default.
            

    */
    open var LogName : Optional<dotnet.System.String> {
        get {
            return try! get_LogName();
        }
        set(v) {
            return try! set_LogName(value: v!);
        }
    }
    /**
    
            Name of the machine having the event log. If null or not specified, local machine is the default.
            

    */
    open var MachineName : Optional<dotnet.System.String> {
        get {
            return try! get_MachineName();
        }
        set(v) {
            return try! set_MachineName(value: v!);
        }
    }
    /**
    
            Name of the event log source. If null or not specified, ".NET Runtime" is the default.
            

    */
    open var SourceName : Optional<dotnet.System.String> {
        get {
            return try! get_SourceName();
        }
        set(v) {
            return try! set_SourceName(value: v!);
        }
    }
} // EventLogSettings


}




// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddEventLog() throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder, Microsoft.Extensions.Logging.EventLog.EventLogSettings)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddEventLog(settings : Optional<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), settings: settings);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Microsoft.Extensions.Logging.EventLog.EventLogSettings>)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddEventLog(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        return try aspnetcore.Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddEventLog(configure : @escaping (Optional<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.EventLog.EventLogSettings>(configure);
        return try aspnetcore.Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

