// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
public struct CommandLineConfigurationExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>)
// docid: M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource})
    /**
    
            Adds an  that reads configuration values from the command line.
            

    - Parameter builder: The  to add to.
    - Parameter configureSource: Configures the source.
    - Returns: The .

    */
    public static func AddCommandLine(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLineConfigurationExtensions_IConfigurationBuilder__AddCommandLine_0__2__IConfigurationBuilder_System_Action_Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_(&__thrown, builder?.get_handle() ?? nil, (configureSource?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddCommandLine(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>(configureSource);
        return try AddCommandLine(builder: builder, configureSource: del_configureSource);
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[])
// docid: M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[])
    /**
    
               Adds a  
               that reads configuration values from the command line.
             

    - Parameter configurationBuilder: The  to add to.
    - Parameter args: The command line args.
    - Returns: The .

    */
    public static func AddCommandLine(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, args : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLineConfigurationExtensions_IConfigurationBuilder__AddCommandLine_0__2__IConfigurationBuilder_StringArray(&__thrown, configurationBuilder?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[], System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[],System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
               Adds a   that reads
               configuration values from the command line using the specified switch mappings.
             

    - Parameter configurationBuilder: The  to add to.
    - Parameter args: The command line args.
    - Parameter switchMappings: 
               The switch mappings. A dictionary of short (with prefix "-") and
               alias keys (with prefix "--"), mapped to the configuration key (no prefix).
             
    - Returns: The .

    */
    public static func AddCommandLine(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, args : Optional<dotnet.System_Arr<dotnet.System.String>>, switchMappings : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLineConfigurationExtensions_IConfigurationBuilder__AddCommandLine_0__3__IConfigurationBuilder_StringArray_System_Collections_Generic_IDictionary_string_string_(&__thrown, configurationBuilder?.get_handle() ?? nil, (args?.get_handle()), (switchMappings?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CommandLineConfigurationExtensions


}
// Microsoft.Extensions.Configuration.CommandLine
extension Microsoft.Extensions.Configuration.CommandLine {
// type: Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider
    /**
    
            A command line based .
            

    */
open class CommandLineConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.ConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Initializes a new instance.
            

    - Parameter args: The command line args.
    - Parameter switchMappings: The switch mappings.
    */
    public init(args : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, switchMappings : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationProvider_ctor_0__2__System_Collections_Generic_IEnumerable_string__System_Collections_Generic_IDictionary_string_string_(&__thrown, (args?.get_handle()), (switchMappings?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider.Load
    /**
    
            Loads the configuration data from the command line args.
            

    */
    open override func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CommandLineConfigurationProvider


// type: Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource
    /**
    
            Represents command line arguments as an .
            

    */
open class CommandLineConfigurationSource
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: A 

    */
    open /* method final */ func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Args()
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.get_Args
    open func get_Args() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_System_Collections_Generic_IEnumerable_string___get_Args_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Args(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.set_Args(System.Collections.Generic.IEnumerable{System.String})
    open func set_Args(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_void__set_Args_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_SwitchMappings()
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.get_SwitchMappings
    open func get_SwitchMappings() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_System_Collections_Generic_IDictionary_string_string___get_SwitchMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SwitchMappings(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource.set_SwitchMappings(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_SwitchMappings(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_CommandLine_CommandLineConfigurationSource_void__set_SwitchMappings_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the command line args.
            

    */
    open var Args : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_Args();
        }
        set(v) {
            return try! set_Args(value: v!);
        }
    }
    /**
    
            Gets or sets the switch mappings.
            

    */
    open var SwitchMappings : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_SwitchMappings();
        }
        set(v) {
            return try! set_SwitchMappings(value: v!);
        }
    }
} // CommandLineConfigurationSource


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddCommandLine(configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: configureSource);
    }
    // delegate closure overload
    public func AddCommandLine(configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource>(configureSource);
        return try aspnetcore.Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: del_configureSource);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[])
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddCommandLine(args : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), args: args);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[], System.Collections.Generic.IDictionary<System.String,System.String>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddCommandLine(args : Optional<dotnet.System_Arr<dotnet.System.String>>, switchMappings : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), args: args, switchMappings: switchMappings);
    }
}

