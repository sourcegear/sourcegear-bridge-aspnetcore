// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
extension Microsoft.AspNetCore.Mvc {
// type: Microsoft.AspNetCore.Mvc.ActionContext
    /**
    
            Context object for execution of action which has been selected as part of an HTTP request.
            

    */
open class ActionContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.#ctor
    /**
    
            Creates an empty .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Creates a new .
            

    - Parameter actionContext: The  to copy.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionContext_ctor_0__1__ActionContext(&__thrown, actionContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
    /**
    
            Creates a new .
            

    - Parameter httpContext: The  for the current request.
    - Parameter routeData: The  for the current request.
    - Parameter actionDescriptor: The  for the selected action.
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData, actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionContext_ctor_0__3__HttpContext_RouteData_ActionDescriptor(&__thrown, httpContext.get_handle(), routeData.get_handle(), actionDescriptor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Creates a new .
            

    - Parameter httpContext: The  for the current request.
    - Parameter routeData: The  for the current request.
    - Parameter actionDescriptor: The  for the selected action.
    - Parameter modelState: The .
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData, actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionContext_ctor_0__4__HttpContext_RouteData_ActionDescriptor_ModelStateDictionary(&__thrown, httpContext.get_handle(), routeData.get_handle(), actionDescriptor.get_handle(), modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.get_ActionDescriptor
    open func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionContext_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
    open func set_ActionDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionContext_void__set_ActionDescriptor_0__1__ActionDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
    open func set_HttpContext(value : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionContext_void__set_HttpContext_0__1__HttpContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionContext_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionContext_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Mvc.ActionContext.set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
    open func set_RouteData(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionContext_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  for the selected action.
            

    */
    open var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
        set(v) {
            return try! set_ActionDescriptor(value: v);
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
        set(v) {
            return try! set_HttpContext(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
        set(v) {
            return try! set_RouteData(value: v);
        }
    }
} // ActionContext


// type: Microsoft.AspNetCore.Mvc.IActionResult
    /**
    
            Defines a contract that represents the result of an action method.
            

    */
open class IActionResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IActionResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IActionResult_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.IActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Executes the result operation of the action method asynchronously. This method is called by MVC to process
            the result of an action method.
            

    - Parameter context: The context in which the result is executed. The context information includes
            information about the action that was executed and request information.
    - Returns: A task that represents the asynchronous execute operation.

    */
    open func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IActionResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IActionResult


// type: Microsoft.AspNetCore.Mvc.IUrlHelper
    /**
    
            Defines the contract for the helper to build URLs for ASP.NET MVC within an application.
            

    */
open class IUrlHelper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IUrlHelper
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IUrlHelper_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext)
    /**
    
            Generates a URL with an absolute path for an action method, which contains the action
            name, controller name, route values, protocol to use, host name, and fragment specified by
            . Generates an absolute URL if  and
             are non-null. See the remarks section for important security information.
            

    - Parameter actionContext: The context object for the generated URLs for an action method.
    - Returns: The generated URL.

    */
    open func Action(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlActionContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_String__Action_0__1__UrlActionContext(&__thrown, self.get_handle(), actionContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.Content(System.String)
    /**
    
            Converts a virtual (relative, starting with ~/) path to an application absolute path.
            

    - Parameter contentPath: The virtual path of the content.
    - Returns: The application absolute path.

    */
    open func Content(contentPath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_String__Content_0__1__String(&__thrown, self.get_handle(), contentPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsLocalUrl(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.IsLocalUrl(System.String)
    /**
    
            Returns a value that indicates whether the URL is local. A URL is considered local if it does not have a
            host / authority part and it has an absolute path. URLs using virtual paths ('~/') are also local.
            

    - Parameter url: The URL.
    - Returns: true if the URL is local; otherwise, false.

    */
    open func IsLocalUrl(url : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_bool__IsLocalUrl_0__1__String(&__thrown, self.get_handle(), url?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext)
    /**
    
            Generates a URL with an absolute path, which contains the route name, route values, protocol to use, host
            name, and fragment specified by . Generates an absolute URL if
             and  are non-null.
            See the remarks section for important security information.
            

    - Parameter routeContext: The context object for the generated URLs for a route.
    - Returns: The generated URL.

    */
    open func RouteUrl(routeContext : aspnetcore.Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_String__RouteUrl_0__1__UrlRouteContext(&__thrown, self.get_handle(), routeContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Link(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.Link(System.String,System.Object)
    /**
    
            Generates an absolute URL for the specified  and route
            , which contains the protocol (such as "http" or "https") and host name from the
            current request. See the remarks section for important security information.
            

    - Parameter routeName: The name of the route that is used to generate URL.
    - Parameter values: An object that contains route values.
    - Returns: The generated absolute URL.

    */
    open func Link(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_String__Link_0__2__String_Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.IUrlHelper.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IUrlHelper_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
} // IUrlHelper


}
// Microsoft.AspNetCore.Mvc.Abstractions
extension Microsoft.AspNetCore.Mvc.Abstractions {
// type: Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor
    /**
    
            Describes an MVC action.
            

    */
open class ActionDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_Id
    open func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_RouteValues
    open func get_RouteValues() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteValues(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_RouteValues(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_RouteValues(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_RouteValues_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo get_AttributeRouteInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_AttributeRouteInfo
    open func get_AttributeRouteInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_AttributeRouteInfo__get_AttributeRouteInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AttributeRouteInfo(Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_AttributeRouteInfo(Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo)
    open func set_AttributeRouteInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_AttributeRouteInfo_0__1__AttributeRouteInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata> get_ActionConstraints()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_ActionConstraints
    open func get_ActionConstraints() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata___get_ActionConstraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActionConstraints(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_ActionConstraints(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata})
    open func set_ActionConstraints(value : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_ActionConstraints_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Object> get_EndpointMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_EndpointMetadata
    open func get_EndpointMetadata() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IList_object___get_EndpointMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_EndpointMetadata(System.Collections.Generic.IList<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_EndpointMetadata(System.Collections.Generic.IList{System.Object})
    open func set_EndpointMetadata(value : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_EndpointMetadata_0__1__System_Collections_Generic_IList_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Parameters(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_Parameters(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor})
    open func set_Parameters(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_Parameters_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> get_BoundProperties()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_BoundProperties
    open func get_BoundProperties() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor___get_BoundProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BoundProperties(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_BoundProperties(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor})
    open func set_BoundProperties(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_BoundProperties_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor> get_FilterDescriptors()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_FilterDescriptors
    open func get_FilterDescriptors() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor___get_FilterDescriptors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FilterDescriptors(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_FilterDescriptors(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor})
    open func set_FilterDescriptors(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_FilterDescriptors_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_DisplayName(System.String)
    open func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Properties(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.set_Properties(System.Collections.Generic.IDictionary{System.Object,System.Object})
    open func set_Properties(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_void__set_Properties_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The set of constraints for this action. Must all be satisfied for the action to be selected.
            

    */
    open var ActionConstraints : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata>> {
        get {
            return try! get_ActionConstraints();
        }
        set(v) {
            return try! set_ActionConstraints(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var AttributeRouteInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo> {
        get {
            return try! get_AttributeRouteInfo();
        }
        set(v) {
            return try! set_AttributeRouteInfo(value: v!);
        }
    }
    /**
    
            The set of properties which are model bound.
            

    */
    open var BoundProperties : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> {
        get {
            return try! get_BoundProperties();
        }
        set(v) {
            return try! set_BoundProperties(value: v);
        }
    }
    /**
    
            A friendly name for this action.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets the endpoint metadata for this action.
            This API is meant for infrastructure and should not be used by application code.
            

    */
    open var EndpointMetadata : dotnet.System.Collections.Generic.IList_1<dotnet.System.Object> {
        get {
            return try! get_EndpointMetadata();
        }
        set(v) {
            return try! set_EndpointMetadata(value: v);
        }
    }
    /**
    
            The set of filters associated with this action.
            

    */
    open var FilterDescriptors : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor> {
        get {
            return try! get_FilterDescriptors();
        }
        set(v) {
            return try! set_FilterDescriptors(value: v);
        }
    }
    /**
    
            Gets an id which uniquely identifies the action.
            

    */
    open var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
    }
    /**
    
            The set of parameters associated with this action.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v);
        }
    }
    /**
    
            Stores arbitrary metadata properties associated with the .
            

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
        set(v) {
            return try! set_Properties(value: v);
        }
    }
    /**
    
            Gets or sets the collection of route values that must be provided by routing
            for the action to be selected.
            

    */
    open var RouteValues : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v);
        }
    }
} // ActionDescriptor


// type: Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions
public struct ActionDescriptorExtensions {
// TODO COPE (write_all_methods) (unused generic param) T GetProperty<T>(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
    // void SetProperty<T>(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, T)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,``0)
    /**
    
            Sets the value of an property in the  collection using
            the provided value of  as the key.
            

    - Parameter actionDescriptor: The action descriptor.
    - Parameter value: The value of the property.
    */
    public static func SetProperty<UT : SGBridgeGenericValue>(actionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, value : UT) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptorExtensions_void__SetProperty_1__2__ActionDescriptor_UT(UT.get_type_handle(), &__thrown, actionDescriptor.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ActionDescriptorExtensions


// type: Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext
    /**
    
            A context for .
            

    */
open class ActionDescriptorProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptorProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptorProviderContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptorProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the  of  instances of 
            can populate.
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_Results();
        }
    }
} // ActionDescriptorProviderContext


// type: Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext
    /**
    
            A context for .
            

    */
open class ActionInvokerProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_ActionInvokerProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The  to invoke.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Abstractions_ActionInvokerProviderContext_ctor_0__1__ActionContext(&__thrown, actionContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionInvokerProviderContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ActionInvokerProviderContext_IActionInvoker__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext.set_Result(Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ActionInvokerProviderContext_void__set_Result_0__1__IActionInvoker(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  to invoke.
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            Gets or sets the  that will be used to invoke 
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // ActionInvokerProviderContext


// type: Microsoft.AspNetCore.Mvc.Abstractions.IActionDescriptorProvider
    /**
    
            Defines a contract for specifying  instances.
            

    */
open class IActionDescriptorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionDescriptorProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    
            Called to execute the provider.
             for details on the order of execution of .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider_void__OnProvidersExecuting_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionDescriptorProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext)
    /**
    
            Called to execute the provider, after the  methods of all providers,
            have been called.
             for details on the order of execution of .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider_void__OnProvidersExecuted_0__1__ActionDescriptorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionDescriptorProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IActionDescriptorProvider


// type: Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker
    /**
    
            Defines an interface for invoking an MVC action.
            

    */
open class IActionInvoker
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Abstractions_IActionInvoker
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_IActionInvoker_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task InvokeAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker.InvokeAsync
    /**
    
            Invokes an MVC action.
            

    - Returns: A  which will complete when action processing has completed.

    */
    open func InvokeAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_IActionInvoker_Task__InvokeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IActionInvoker


// type: Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider
    /**
    
            Defines an interface for components that can create an  for the
            current request.
            

    */
open class IActionInvokerProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext)
    /**
    
            Called to execute the provider.
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider_void__OnProvidersExecuting_0__1__ActionInvokerProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext)
    /**
    
            Called to execute the provider, after the  methods of all providers,
            have been called.
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionInvokerProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider_void__OnProvidersExecuted_0__1__ActionInvokerProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IActionInvokerProvider


// type: Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor
    /**
    
            Describes a parameter in an action.
            

    */
open class ParameterDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ParameterType()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.get_ParameterType
    open func get_ParameterType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_Type__get_ParameterType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.set_ParameterType(System.Type)
    open func set_ParameterType(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_void__set_ParameterType_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.get_BindingInfo
    open func get_BindingInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor.set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    open func set_BindingInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Abstractions_ParameterDescriptor_void__set_BindingInfo_0__1__BindingInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  for the parameter.
            

    */
    open var BindingInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        get {
            return try! get_BindingInfo();
        }
        set(v) {
            return try! set_BindingInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the parameter name.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets or sets the type of the parameter.
            

    */
    open var ParameterType : dotnet.System.Type_ {
        get {
            return try! get_ParameterType();
        }
        set(v) {
            return try! set_ParameterType(value: v);
        }
    }
} // ParameterDescriptor


}

// Microsoft.AspNetCore.Mvc.ActionConstraints
extension Microsoft.AspNetCore.Mvc.ActionConstraints {
// type: Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext
    /**
    
            Context for  execution.
            

    */
open class ActionConstraintContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate> get_Candidates()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.get_Candidates
    open func get_Candidates() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate___get_Candidates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Candidates(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate>)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.set_Candidates(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate})
    open func set_Candidates(value : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_void__set_Candidates_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate get_CurrentCandidate()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.get_CurrentCandidate
    open func get_CurrentCandidate() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_ActionSelectorCandidate__get_CurrentCandidate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CurrentCandidate(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.set_CurrentCandidate(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate)
    open func set_CurrentCandidate(value : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_void__set_CurrentCandidate_0__1__ActionSelectorCandidate(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteContext get_RouteContext()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.get_RouteContext
    open func get_RouteContext() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_RouteContext__get_RouteContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteContext(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext.set_RouteContext(Microsoft.AspNetCore.Routing.RouteContext)
    open func set_RouteContext(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintContext_void__set_RouteContext_0__1__RouteContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The list of . This includes all actions that are valid for the current
            request, as well as their constraints.
            

    */
    open var Candidates : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate> {
        get {
            return try! get_Candidates();
        }
        set(v) {
            return try! set_Candidates(value: v);
        }
    }
    /**
    
            The current .
            

    */
    open var CurrentCandidate : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate {
        get {
            return try! get_CurrentCandidate();
        }
        set(v) {
            return try! set_CurrentCandidate(value: v);
        }
    }
    /**
    
            The .
            

    */
    open var RouteContext : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext {
        get {
            return try! get_RouteContext();
        }
        set(v) {
            return try! set_RouteContext(value: v);
        }
    }
} // ActionConstraintContext


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem
    /**
    
            Represents an  with or without a corresponding
            .
            

    */
open class ActionConstraintItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.#ctor(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata)
    /**
    
            Creates a new .
            

    - Parameter metadata: The  instance.
    */
    public init(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_ctor_0__1__IActionConstraintMetadata(&__thrown, metadata.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint get_Constraint()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.get_Constraint
    open func get_Constraint() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_IActionConstraint__get_Constraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Constraint(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.set_Constraint(Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint)
    open func set_Constraint(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_void__set_Constraint_0__1__IActionConstraint(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_IActionConstraintMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The  associated with .
            

    */
    open var Constraint : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint> {
        get {
            return try! get_Constraint();
        }
        set(v) {
            return try! set_Constraint(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not  can be reused across requests.
            

    */
    open var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
    /**
    
            The  instance.
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata {
        get {
            return try! get_Metadata();
        }
    }
} // ActionConstraintItem


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext
    /**
    
            Context for an action constraint provider.
            

    */
open class ActionConstraintProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem>)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem})
    /**
    
            Creates a new .
            

    - Parameter context: The  associated with the request.
    - Parameter action: The  for which constraints are being created.
    - Parameter items: The list of  objects.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, action : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, items : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintProviderContext_ctor_0__3__HttpContext_ActionDescriptor_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem_(&__thrown, context.get_handle(), action.get_handle(), items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintProviderContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext.get_Action
    open func get_Action() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintProviderContext_ActionDescriptor__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ActionConstraints_ActionConstraintItem___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            The  for which constraints are being created.
            

    */
    open var Action : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The  associated with the request.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            The list of  objects.
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintItem> {
        get {
            return try! get_Results();
        }
    }
} // ActionConstraintProviderContext


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate
// boxed value type
    /**
    
            A candidate action for action selection.
            

    */
public final class ActionSelectorCandidate
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The  representing a candidate for selection.
            

    */
    public var Action : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_Action();
        }
    }
    /**
    
            The list of  instances associated with .
            

    */
    public var Constraints : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint>> {
        get {
            return try! get_Constraints();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint>)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint})
    /**
    
            Creates a new .
            

    - Parameter action: The  representing a candidate for selection.
    - Parameter constraints: 
            The list of  instances associated with .
            
    */
    public init(action : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, constraints : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_ctor_0__2__ActionDescriptor_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint_(&__thrown, action.get_handle(), (constraints?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate.get_Action
    public func get_Action() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_ActionDescriptor__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.ActionSelectorCandidate.get_Constraints
    public func get_Constraints() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_ActionSelectorCandidate_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ActionSelectorCandidate


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint
    /**
    
             Supports conditional logic to determine whether or not an associated action is valid to be selected
             for the given request.
             

    */
open class IActionConstraint
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext)
    /**
    
            Determines whether an action is a valid candidate for selection.
            

    - Parameter context: The .
    - Returns: True if the action is valid for selection, otherwise false.

    */
    open func Accept(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint_bool__Accept_0__1__ActionConstraintContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IActionConstraint


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintFactory
    /**
    
             A factory for .
             

    */
open class IActionConstraintFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintFactory,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintFactory.CreateInstance(System.IServiceProvider)
    /**
    
            Creates a new .
            

    - Parameter services: The per-request services.
    - Returns: An .

    */
    open func CreateInstance(services : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintFactory_IActionConstraint__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintFactory.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintFactory_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IActionConstraintFactory


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata
    /**
    
            A marker interface that identifies a type as metadata for an .
            

    */
open class IActionConstraintMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IActionConstraintMetadata


// type: Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintProvider
    /**
    
            Provider for .
            

    */
open class IActionConstraintProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext)
    /**
    
            Called to execute the provider.
             for details on the order of execution of .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider_void__OnProvidersExecuting_0__1__ActionConstraintProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext)
    /**
    
            Called to execute the provider, after the  methods of all providers,
            have been called.
             for details on the order of execution of .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider_void__OnProvidersExecuted_0__1__ActionConstraintProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IActionConstraintProvider


}

// Microsoft.AspNetCore.Mvc.ApiExplorer
extension Microsoft.AspNetCore.Mvc.ApiExplorer {
// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription
    /**
    
            Represents an API exposed by this application.
            

    */
open class ApiDescription
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_ActionDescriptor
    open func get_ActionDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.set_ActionDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
    open func set_ActionDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_void__set_ActionDescriptor_0__1__ActionDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_GroupName()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_GroupName
    open func get_GroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_String__get_GroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_GroupName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.set_GroupName(System.String)
    open func set_GroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_void__set_GroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HttpMethod()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_HttpMethod
    open func get_HttpMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_String__get_HttpMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HttpMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.set_HttpMethod(System.String)
    open func set_HttpMethod(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_void__set_HttpMethod_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription> get_ParameterDescriptions()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_ParameterDescriptions
    open func get_ParameterDescriptions() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription___get_ParameterDescriptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_System_Collections_Generic_IDictionary_object_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RelativePath()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_RelativePath
    open func get_RelativePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_String__get_RelativePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RelativePath(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.set_RelativePath(System.String)
    open func set_RelativePath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_void__set_RelativePath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat> get_SupportedRequestFormats()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_SupportedRequestFormats
    open func get_SupportedRequestFormats() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat___get_SupportedRequestFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType> get_SupportedResponseTypes()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.get_SupportedResponseTypes
    open func get_SupportedResponseTypes() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType___get_SupportedResponseTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets or sets  for this api.
            

    */
    open var ActionDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        get {
            return try! get_ActionDescriptor();
        }
        set(v) {
            return try! set_ActionDescriptor(value: v);
        }
    }
    /**
    
            Gets or sets group name for this api.
            

    */
    open var GroupName : Optional<dotnet.System.String> {
        get {
            return try! get_GroupName();
        }
        set(v) {
            return try! set_GroupName(value: v!);
        }
    }
    /**
    
            Gets or sets the supported HTTP method for this api, or null if all HTTP methods are supported.
            

    */
    open var HttpMethod : Optional<dotnet.System.String> {
        get {
            return try! get_HttpMethod();
        }
        set(v) {
            return try! set_HttpMethod(value: v!);
        }
    }
    /**
    
            Gets a list of  for this api.
            

    */
    open var ParameterDescriptions : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription> {
        get {
            return try! get_ParameterDescriptions();
        }
    }
    /**
    
            Gets arbitrary metadata properties associated with the .
            

    */
    open var Properties : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets or sets relative url path template (relative to application root) for this api.
            

    */
    open var RelativePath : Optional<dotnet.System.String> {
        get {
            return try! get_RelativePath();
        }
        set(v) {
            return try! set_RelativePath(value: v!);
        }
    }
    /**
    
            Gets the list of possible formats for a request.
            

    */
    open var SupportedRequestFormats : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat> {
        get {
            return try! get_SupportedRequestFormats();
        }
    }
    /**
    
            Gets the list of possible formats for a response.
            

    */
    open var SupportedResponseTypes : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType> {
        get {
            return try! get_SupportedResponseTypes();
        }
    }
} // ApiDescription


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext
    /**
    
            A context object for  providers.
            

    */
open class ApiDescriptionProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor})
    /**
    
            Creates a new instance of .
            

    - Parameter actions: The list of actions.
    */
    public init(actions : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionProviderContext_ctor_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor_(&__thrown, actions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> get_Actions()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext.get_Actions
    open func get_Actions() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionProviderContext_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_Abstractions_ActionDescriptor___get_Actions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescriptionProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiDescription___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            The list of actions.
            

    */
    open var Actions : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_Actions();
        }
    }
    /**
    
            The list of resulting .
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription> {
        get {
            return try! get_Results();
        }
    }
} // ApiDescriptionProviderContext


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription
    /**
    
            A metadata description of an input to an API.
            

    */
open class ApiParameterDescription
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_ModelMetadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_ModelMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo get_RouteInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_RouteInfo
    open func get_RouteInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_ApiParameterRouteInfo__get_RouteInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteInfo(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_RouteInfo(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo)
    open func set_RouteInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_RouteInfo_0__1__ApiParameterRouteInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_Source()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_Source
    open func get_Source() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_BindingSource__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Source(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_Source(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_Source(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_Source_0__1__BindingSource(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_BindingInfo
    open func get_BindingInfo() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_BindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    open func set_BindingInfo(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_BindingInfo_0__1__BindingInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_Type
    open func get_Type() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_Type(System.Type)
    open func set_Type(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor get_ParameterDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_ParameterDescriptor
    open func get_ParameterDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_ParameterDescriptor__get_ParameterDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_ParameterDescriptor(Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor)
    open func set_ParameterDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_ParameterDescriptor_0__1__ParameterDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_IsRequired
    open func get_IsRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_bool__get_IsRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsRequired(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_IsRequired(System.Boolean)
    open func set_IsRequired(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_IsRequired_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_DefaultValue()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.get_DefaultValue
    open func get_DefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_Object__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterDescription.set_DefaultValue(System.Object)
    open func set_DefaultValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterDescription_void__set_DefaultValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var BindingInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        get {
            return try! get_BindingInfo();
        }
        set(v) {
            return try! set_BindingInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the default value for a parameter.
            

    */
    open var DefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the parameter is required.
            

    */
    open var IsRequired : Bool {
        get {
            return try! get_IsRequired();
        }
        set(v) {
            return try! set_IsRequired(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
        set(v) {
            return try! set_ModelMetadata(value: v);
        }
    }
    /**
    
            Gets or sets the name.
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    
            Gets or sets the parameter descriptor.
            

    */
    open var ParameterDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor {
        get {
            return try! get_ParameterDescriptor();
        }
        set(v) {
            return try! set_ParameterDescriptor(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var RouteInfo : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo> {
        get {
            return try! get_RouteInfo();
        }
        set(v) {
            return try! set_RouteInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Source : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v);
        }
    }
    /**
    
            Gets or sets the parameter type.
            

    */
    open var Type_ : dotnet.System.Type_ {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v);
        }
    }
} // ApiParameterDescription


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo
    /**
    
            A metadata description of routing information for an .
            

    */
open class ApiParameterRouteInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.IRouteConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.get_Constraints
    open func get_Constraints() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_IRouteConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Constraints(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.IRouteConstraint>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.set_Constraints(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.IRouteConstraint})
    open func set_Constraints(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_void__set_Constraints_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_IRouteConstraint_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_DefaultValue()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.get_DefaultValue
    open func get_DefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_Object__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.set_DefaultValue(System.Object)
    open func set_DefaultValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_void__set_DefaultValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.get_IsOptional
    open func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsOptional(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiParameterRouteInfo.set_IsOptional(System.Boolean)
    open func set_IsOptional(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiParameterRouteInfo_void__set_IsOptional_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the set of  objects for the parameter.
            

    */
    open var Constraints : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        get {
            return try! get_Constraints();
        }
        set(v) {
            return try! set_Constraints(value: v!);
        }
    }
    /**
    
            Gets or sets the default value for the parameter.
            

    */
    open var DefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v!);
        }
    }
    /**
    
             Gets a value indicating whether not a parameter is considered optional by routing.
             

    */
    open var IsOptional : Bool {
        get {
            return try! get_IsOptional();
        }
        set(v) {
            return try! set_IsOptional(value: v);
        }
    }
} // ApiParameterRouteInfo


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat
    /**
    
            A possible format for the body of a request.
            

    */
open class ApiRequestFormat
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter get_Formatter()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat.get_Formatter
    open func get_Formatter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_IInputFormatter__get_Formatter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Formatter(Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat.set_Formatter(Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter)
    open func set_Formatter(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_void__set_Formatter_0__1__IInputFormatter(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MediaType()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat.get_MediaType
    open func get_MediaType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_String__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MediaType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiRequestFormat.set_MediaType(System.String)
    open func set_MediaType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiRequestFormat_void__set_MediaType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The formatter used to read this request.
            

    */
    open var Formatter : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter {
        get {
            return try! get_Formatter();
        }
        set(v) {
            return try! set_Formatter(value: v);
        }
    }
    /**
    
            The media type of the request.
            

    */
    open var MediaType : dotnet.System.String {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v);
        }
    }
} // ApiRequestFormat


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat
    /**
    
            Possible format for an .
            

    */
open class ApiResponseFormat
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter get_Formatter()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat.get_Formatter
    open func get_Formatter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_IOutputFormatter__get_Formatter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Formatter(Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat.set_Formatter(Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter)
    open func set_Formatter(value : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_void__set_Formatter_0__1__IOutputFormatter(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MediaType()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat.get_MediaType
    open func get_MediaType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_String__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MediaType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat.set_MediaType(System.String)
    open func set_MediaType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_void__set_MediaType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the formatter used to output this response.
            

    */
    open var Formatter : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter {
        get {
            return try! get_Formatter();
        }
        set(v) {
            return try! set_Formatter(value: v);
        }
    }
    /**
    
            Gets or sets the media type of the response.
            

    */
    open var MediaType : dotnet.System.String {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v);
        }
    }
} // ApiResponseFormat


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType
    /**
    
            Possible type of the response body which is formatted by .
            

    */
open class ApiResponseType
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat> get_ApiResponseFormats()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.get_ApiResponseFormats
    open func get_ApiResponseFormats() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat___get_ApiResponseFormats_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ApiResponseFormats(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat>)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.set_ApiResponseFormats(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat})
    open func set_ApiResponseFormats(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_void__set_ApiResponseFormats_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseFormat_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.get_ModelMetadata
    open func get_ModelMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_ModelMetadata(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_void__set_ModelMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_Type()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.get_Type
    open func get_Type() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_Type__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.set_Type(System.Type)
    open func set_Type(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_void__set_Type_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.set_StatusCode(System.Int32)
    open func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsDefaultResponse()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.get_IsDefaultResponse
    open func get_IsDefaultResponse() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_bool__get_IsDefaultResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsDefaultResponse(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseType.set_IsDefaultResponse(System.Boolean)
    open func set_IsDefaultResponse(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_ApiResponseType_void__set_IsDefaultResponse_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the response formats supported by this type.
            

    */
    open var ApiResponseFormats : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiResponseFormat> {
        get {
            return try! get_ApiResponseFormats();
        }
        set(v) {
            return try! set_ApiResponseFormats(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether the response type represents a default response.
            

    */
    open var IsDefaultResponse : Bool {
        get {
            return try! get_IsDefaultResponse();
        }
        set(v) {
            return try! set_IsDefaultResponse(value: v);
        }
    }
    /**
    
            Gets or sets  for the  or null.
            

    */
    open var ModelMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ModelMetadata();
        }
        set(v) {
            return try! set_ModelMetadata(value: v!);
        }
    }
    /**
    
            Gets or sets the HTTP response status code.
            

    */
    open var StatusCode : Swift.Int32 {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
    /**
    
            Gets or sets the CLR data type of the response or null.
            

    */
    open var Type_ : Optional<dotnet.System.Type_> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // ApiResponseType


// type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider
    /**
    
            Defines a contract for specifying  instances.
            

    */
open class IApiDescriptionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
    /**
    
            Creates or modifies s.
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider_void__OnProvidersExecuting_0__1__ApiDescriptionProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext)
    /**
    
            Called after  implementations with higher  values have been called.
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider_void__OnProvidersExecuted_0__1__ApiDescriptionProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IApiDescriptionProvider


}

// Microsoft.AspNetCore.Mvc.Authorization
extension Microsoft.AspNetCore.Mvc.Authorization {
// type: Microsoft.AspNetCore.Mvc.Authorization.IAllowAnonymousFilter
    /**
    
            A filter that allows anonymous requests, disabling some s.
            

    */
open class IAllowAnonymousFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Authorization_IAllowAnonymousFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Authorization_IAllowAnonymousFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IAllowAnonymousFilter


}

// Microsoft.AspNetCore.Mvc.Filters
extension Microsoft.AspNetCore.Mvc.Filters {
// type: Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext
    /**
    
            A context for action filters, specifically  calls.
            

    */
open class ActionExecutedContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},System.Object)
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    - Parameter controller: The controller instance containing the action.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_ctor_0__3__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__Object(&__thrown, actionContext.get_handle(), filters.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Canceled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_Canceled
    open func get_Canceled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_bool__get_Canceled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Canceled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.set_Canceled(System.Boolean)
    open func set_Canceled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_void__set_Canceled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_Controller
    open func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_Exception
    open func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Exception(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.set_Exception(System.Exception)
    open func set_Exception(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_void__set_Exception_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.ExceptionServices.ExceptionDispatchInfo get_ExceptionDispatchInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_ExceptionDispatchInfo
    open func get_ExceptionDispatchInfo() throws -> Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_ExceptionDispatchInfo__get_ExceptionDispatchInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
    open func set_ExceptionDispatchInfo(value : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_void__set_ExceptionDispatchInfo_0__1__ExceptionDispatchInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ExceptionHandled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_ExceptionHandled
    open func get_ExceptionHandled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_bool__get_ExceptionHandled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ExceptionHandled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.set_ExceptionHandled(System.Boolean)
    open func set_ExceptionHandled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_void__set_ExceptionHandled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets an indication that an action filter short-circuited the action and the action filter pipeline.
            

    */
    open var Canceled : Bool {
        get {
            return try! get_Canceled();
        }
        set(v) {
            return try! set_Canceled(value: v);
        }
    }
    /**
    
            Gets the controller instance containing the action.
            

    */
    open var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
    /**
    
            Gets or sets the  caught while executing the action or action filters, if
            any.
            

    */
    open var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
        set(v) {
            return try! set_Exception(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the
            , if an  was caught and this information captured.
            

    */
    open var ExceptionDispatchInfo : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        get {
            return try! get_ExceptionDispatchInfo();
        }
        set(v) {
            return try! set_ExceptionDispatchInfo(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the  has been handled.
            

    */
    open var ExceptionHandled : Bool {
        get {
            return try! get_ExceptionHandled();
        }
        set(v) {
            return try! set_ExceptionHandled(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // ActionExecutedContext


// type: Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext
    /**
    
            A context for action filters, specifically  and
             calls.
            

    */
open class ActionExecutingContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, System.Collections.Generic.IDictionary<System.String,System.Object>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    - Parameter actionArguments: 
            The arguments to pass when invoking the action. Keys are parameter names.
            
    - Parameter controller: The controller instance containing the action.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, actionArguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_ctor_0__4__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__System_Collections_Generic_IDictionary_string_object__Object(&__thrown, actionContext.get_handle(), filters.get_handle(), actionArguments.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_ActionArguments()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.get_ActionArguments
    open func get_ActionArguments() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_System_Collections_Generic_IDictionary_string_object___get_ActionArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext.get_Controller
    open func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutingContext_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            Gets the arguments to pass when invoking the action. Keys are parameter names.
            

    */
    open var ActionArguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_ActionArguments();
        }
    }
    /**
    
            Gets the controller instance containing the action.
            

    */
    open var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
    /**
    
            Gets or sets the  to execute. Setting  to a non-null
            value inside an action filter will short-circuit the action and any remaining action filters.
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // ActionExecutingContext


// type: Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate
    /**
    
            A delegate that asynchronously returns an  indicating the action or the next
            action filter has executed.
            

    */
public final class ActionExecutionDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate.Invoke
    public func Invoke() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext___EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext>) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate.Invoke
    public func callAsFunction() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ActionExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ActionExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // ActionExecutionDelegate


// type: Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext
    /**
    
            A context for authorization filters i.e.  and
             implementations.
            

    */
open class AuthorizationFilterContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_AuthorizationFilterContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    */
    public override init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_AuthorizationFilterContext_ctor_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_(&__thrown, actionContext.get_handle(), filters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_AuthorizationFilterContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_AuthorizationFilterContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the result of the request. Setting  to a non-null value inside
            an authorization filter will short-circuit the remainder of the filter pipeline.
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // AuthorizationFilterContext


// type: Microsoft.AspNetCore.Mvc.Filters.ExceptionContext
    /**
    
            A context for exception filters i.e.  and
             implementations.
            

    */
open class ExceptionContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    */
    public override init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_ctor_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_(&__thrown, actionContext.get_handle(), filters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.get_Exception
    open func get_Exception() throws -> dotnet.System.Exception {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Exception(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Exception(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.set_Exception(System.Exception)
    open func set_Exception(value : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_void__set_Exception_0__1__Exception(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.ExceptionServices.ExceptionDispatchInfo get_ExceptionDispatchInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.get_ExceptionDispatchInfo
    open func get_ExceptionDispatchInfo() throws -> Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_ExceptionDispatchInfo__get_ExceptionDispatchInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
    open func set_ExceptionDispatchInfo(value : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_void__set_ExceptionDispatchInfo_0__1__ExceptionDispatchInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ExceptionHandled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.get_ExceptionHandled
    open func get_ExceptionHandled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_bool__get_ExceptionHandled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ExceptionHandled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.set_ExceptionHandled(System.Boolean)
    open func set_ExceptionHandled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_void__set_ExceptionHandled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  caught while executing the action.
            

    */
    open var Exception : dotnet.System.Exception {
        get {
            return try! get_Exception();
        }
        set(v) {
            return try! set_Exception(value: v);
        }
    }
    /**
    
            Gets or sets the  for the
            , if this information was captured.
            

    */
    open var ExceptionDispatchInfo : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        get {
            return try! get_ExceptionDispatchInfo();
        }
        set(v) {
            return try! set_ExceptionDispatchInfo(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the  has been handled.
            

    */
    open var ExceptionHandled : Bool {
        get {
            return try! get_ExceptionHandled();
        }
        set(v) {
            return try! set_ExceptionHandled(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // ExceptionContext


// type: Microsoft.AspNetCore.Mvc.Filters.FilterContext
    /**
    
            An abstract context for filters.
            

    */
open class FilterContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_FilterContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterContext_ctor_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_(&__thrown, actionContext.get_handle(), filters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsEffectivePolicy<TMetadata>(TMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterContext.IsEffectivePolicy``1(``0)
    /**
    
            Returns a value indicating whether the provided  is the most effective
            policy (most specific) applied to the action associated with the .
            

    - Parameter policy: The filter policy instance.
    - Returns: 
            true if the provided  is the most effective policy, otherwise false.
            

    */
    open func IsEffectivePolicy<UTMetadata : SGBridgeGenericValue>(policy : UTMetadata) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterContext_bool__IsEffectivePolicy_1__1__UTMetadata(UTMetadata.get_type_handle(), &__thrown, self.get_handle(), policy.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TMetadata FindEffectivePolicy<TMetadata>()
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> get_Filters()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterContext.get_Filters
    open func get_Filters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets all applicable  implementations.
            

    */
    open var Filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filters();
        }
    }
} // FilterContext


// type: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
    /**
    
             Descriptor for an .
             

    */
open class FilterDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Int32)
    /**
    
            Creates a new .
            

    - Parameter filter: The .
    - Parameter filterScope: The filter scope.
    */
    public init(filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, filterScope : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_ctor_0__2__IFilterMetadata_i32(&__thrown, filter.get_handle(), filterScope);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.get_Filter
    open func get_Filter() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Scope()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.get_Scope
    open func get_Scope() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterDescriptor_i32__get_Scope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            The  instance.
            

    */
    open var Filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        get {
            return try! get_Filter();
        }
    }
    /**
    
            The filter order.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            The filter scope.
            

    */
    open var Scope : Swift.Int32 {
        get {
            return try! get_Scope();
        }
    }
} // FilterDescriptor


// type: Microsoft.AspNetCore.Mvc.Filters.FilterItem
    /**
    
            Used to associate executable filters with  instances
            as part of . An  should
            inspect  and set  and
             as appropriate.
            

    */
open class FilterItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_FilterItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.#ctor(Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor)
    /**
    
            Creates a new .
            

    - Parameter descriptor: The .
    */
    public init(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterItem_ctor_0__1__FilterDescriptor(&__thrown, descriptor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.#ctor(Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    /**
    
            Creates a new .
            

    - Parameter descriptor: The .
    - Parameter filter: 
    */
    public init(descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor, filter : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterItem_ctor_0__2__FilterDescriptor_IFilterMetadata(&__thrown, descriptor.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor get_Descriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.get_Descriptor
    open func get_Descriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterItem_FilterDescriptor__get_Descriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_Filter()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.get_Filter
    open func get_Filter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterItem_IFilterMetadata__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Filter(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.set_Filter(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    open func set_Filter(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_FilterItem_void__set_Filter_0__1__IFilterMetadata(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterItem_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterItem.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_FilterItem_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  containing the filter metadata.
            

    */
    open var Descriptor : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor {
        get {
            return try! get_Descriptor();
        }
    }
    /**
    
            Gets or sets the executable  associated with .
            

    */
    open var Filter : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata> {
        get {
            return try! get_Filter();
        }
        set(v) {
            return try! set_Filter(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether or not  can be reused across requests.
            

    */
    open var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
} // FilterItem


// type: Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext
    /**
    
            A context for filter providers i.e.  implementations.
            

    */
open class FilterProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.FilterItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.FilterItem})
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter items: 
            The s, initially created from s or a cache entry.
            
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, items : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterItem>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_ctor_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_FilterItem_(&__thrown, actionContext.get_handle(), items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext.set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
    open func set_ActionContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_void__set_ActionContext_0__1__ActionContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.FilterItem> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_FilterItem___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Results(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.FilterItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext.set_Results(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.FilterItem})
    open func set_Results(value : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterItem>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_FilterProviderContext_void__set_Results_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_FilterItem_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
        set(v) {
            return try! set_ActionContext(value: v);
        }
    }
    /**
    
            Gets or sets the s, initially created from s or a
            cache entry. s should set  on existing items or
            add new s to make executable filters available.
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterItem> {
        get {
            return try! get_Results();
        }
        set(v) {
            return try! set_Results(value: v);
        }
    }
} // FilterProviderContext


// type: Microsoft.AspNetCore.Mvc.Filters.IActionFilter
    /**
    
            A filter that surrounds execution of the action.
            

    */
open class IActionFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IActionFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    /**
    
            Called before the action executes, after model binding is complete.
            

    - Parameter context: The .
    */
    open func OnActionExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IActionFilter_void__OnActionExecuting_0__1__ActionExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
    /**
    
            Called after the action executes, before the action result.
            

    - Parameter context: The .
    */
    open func OnActionExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IActionFilter_void__OnActionExecuted_0__1__ActionExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IActionFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAlwaysRunResultFilter
    /**
    
            A filter that surrounds execution of all action results.
            

    */
open class IAlwaysRunResultFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAlwaysRunResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAlwaysRunResultFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IAlwaysRunResultFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter
    /**
    
            A filter that asynchronously surrounds execution of the action, after model binding is complete.
            

    */
open class IAsyncActionFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
    /**
    
            Called asynchronously before the action, after model binding is complete.
            

    - Parameter context: The .
    - Parameter next: 
            The . Invoked to execute the next action filter or the action itself.
            
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter_Task__OnActionExecutionAsync_0__2__ActionExecutingContext_ActionExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate(next);
        return try OnActionExecutionAsync(context: context, next: del_next);
    }
} // IAsyncActionFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncAlwaysRunResultFilter
    /**
    
            A filter that asynchronously surrounds execution of all action results.
            

    */
open class IAsyncAlwaysRunResultFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncAlwaysRunResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncAlwaysRunResultFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IAsyncAlwaysRunResultFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter
    /**
    
            A filter that asynchronously confirms request authorization.
            

    */
open class IAsyncAuthorizationFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
    /**
    
            Called early in the filter pipeline to confirm request is authorized.
            

    - Parameter context: The .
    - Returns: 
            A  that on completion indicates the filter has executed.
            

    */
    open func OnAuthorizationAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter_Task__OnAuthorizationAsync_0__1__AuthorizationFilterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAsyncAuthorizationFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter
    /**
    
            A filter that runs asynchronously after an action has thrown an .
            

    */
open class IAsyncExceptionFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncExceptionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncExceptionFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
    /**
    
            Called after an action has thrown an .
            

    - Parameter context: The .
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnExceptionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncExceptionFilter_Task__OnExceptionAsync_0__1__ExceptionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IAsyncExceptionFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter
    /**
    
            A filter that asynchronously surrounds execution of model binding, the action (and filters) and the action
            result (and filters).
            

    */
open class IAsyncResourceFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResourceFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncResourceFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnResourceExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter.OnResourceExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate)
    /**
    
            Called asynchronously before the rest of the pipeline.
            

    - Parameter context: The .
    - Parameter next: 
            The . Invoked to execute the next resource filter or the remainder
            of the pipeline.
            
    - Returns: 
            A  which will complete when the remainder of the pipeline completes.
            

    */
    open func OnResourceExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncResourceFilter_Task__OnResourceExecutionAsync_0__2__ResourceExecutingContext_ResourceExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnResourceExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate(next);
        return try OnResourceExecutionAsync(context: context, next: del_next);
    }
} // IAsyncResourceFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter
    /**
    
            A filter that asynchronously surrounds execution of action results successfully returned from an action.
            

    */
open class IAsyncResultFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate)
    /**
    
            Called asynchronously before the action result.
            

    - Parameter context: The .
    - Parameter next: 
            The . Invoked to execute the next result filter or the result itself.
            
    - Returns: A  that on completion indicates the filter has executed.

    */
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter_Task__OnResultExecutionAsync_0__2__ResultExecutingContext_ResultExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnResultExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate(next);
        return try OnResultExecutionAsync(context: context, next: del_next);
    }
} // IAsyncResultFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter
    /**
    
            A filter that confirms request authorization.
            

    */
open class IAuthorizationFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IAuthorizationFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IAuthorizationFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)
    /**
    
            Called early in the filter pipeline to confirm request is authorized.
            

    - Parameter context: The .
    */
    open func OnAuthorization(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IAuthorizationFilter_void__OnAuthorization_0__1__AuthorizationFilterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAuthorizationFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter
    /**
    
            A filter that runs after an action has thrown an .
            

    */
open class IExceptionFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IExceptionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IExceptionFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
    /**
    
            Called after an action has thrown an .
            

    - Parameter context: The .
    */
    open func OnException(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ExceptionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IExceptionFilter_void__OnException_0__1__ExceptionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IExceptionFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IFilterContainer
    /**
    
            A filter that requires a reference back to the  that created it.
            

    */
open class IFilterContainer
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IFilterContainer
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IFilterContainer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata get_FilterDefinition()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterContainer.get_FilterDefinition
    open func get_FilterDefinition() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IFilterContainer_IFilterMetadata__get_FilterDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FilterDefinition(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterContainer.set_FilterDefinition(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)
    open func set_FilterDefinition(value : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IFilterContainer_void__set_FilterDefinition_0__1__IFilterMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IFilterContainer


// type: Microsoft.AspNetCore.Mvc.Filters.IFilterFactory
    /**
    
            An interface for filter metadata which can create an instance of an executable filter.
            

    */
open class IFilterFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IFilterFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider)
    /**
    
            Creates an instance of the executable filter.
            

    - Parameter serviceProvider: The request .
    - Returns: An instance of the executable filter.

    */
    open func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IFilterFactory_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IFilterFactory_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IFilterFactory


// type: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
    /**
    
            Marker interface for filters handled in the MVC request pipeline.
            

    */
open class IFilterMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IFilterMetadata


// type: Microsoft.AspNetCore.Mvc.Filters.IFilterProvider
    /**
    
            A  provider. Implementations should update 
            to make executable filters available.
            

    */
open class IFilterProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IFilterProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IFilterProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext)
    /**
    
            Called in increasing .
            

    - Parameter context: The .
    */
    open func OnProvidersExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IFilterProvider_void__OnProvidersExecuting_0__1__FilterProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext)
    /**
    
            Called in decreasing , after all s have executed once.
            

    - Parameter context: The .
    */
    open func OnProvidersExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IFilterProvider_void__OnProvidersExecuted_0__1__FilterProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IFilterProvider.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IFilterProvider_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IFilterProvider


// type: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
    /**
    
            A filter that specifies the relative order it should run.
            

    */
open class IOrderedFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IOrderedFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IResourceFilter
    /**
    
            A filter that surrounds execution of model binding, the action (and filters) and the action result
            (and filters).
            

    */
open class IResourceFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IResourceFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IResourceFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
    /**
    
            Executes the resource filter. Called before execution of the remainder of the pipeline.
            

    - Parameter context: The .
    */
    open func OnResourceExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IResourceFilter_void__OnResourceExecuting_0__1__ResourceExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IResourceFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
    /**
    
            Executes the resource filter. Called after execution of the remainder of the pipeline.
            

    - Parameter context: The .
    */
    open func OnResourceExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IResourceFilter_void__OnResourceExecuted_0__1__ResourceExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IResourceFilter


// type: Microsoft.AspNetCore.Mvc.Filters.IResultFilter
    /**
    
            A filter that surrounds execution of action results successfully returned from an action.
            

    */
open class IResultFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_IResultFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IResultFilter.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)
    /**
    
            Called before the action result executes.
            

    - Parameter context: The .
    */
    open func OnResultExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IResultFilter_void__OnResultExecuting_0__1__ResultExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.IResultFilter.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext)
    /**
    
            Called after the action result executes.
            

    - Parameter context: The .
    */
    open func OnResultExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_IResultFilter_void__OnResultExecuted_0__1__ResultExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IResultFilter


// type: Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext
    /**
    
            A context for resource filters, specifically  calls.
            

    */
open class ResourceExecutedContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})
    /**
    
            Creates a new .
            

    - Parameter actionContext: The .
    - Parameter filters: The list of  instances.
    */
    public override init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_ctor_0__2__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata_(&__thrown, actionContext.get_handle(), filters.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Canceled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.get_Canceled
    open func get_Canceled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_bool__get_Canceled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Canceled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.set_Canceled(System.Boolean)
    open func set_Canceled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_void__set_Canceled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.get_Exception
    open func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Exception(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.set_Exception(System.Exception)
    open func set_Exception(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_void__set_Exception_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.ExceptionServices.ExceptionDispatchInfo get_ExceptionDispatchInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.get_ExceptionDispatchInfo
    open func get_ExceptionDispatchInfo() throws -> Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_ExceptionDispatchInfo__get_ExceptionDispatchInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
    open func set_ExceptionDispatchInfo(value : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_void__set_ExceptionDispatchInfo_0__1__ExceptionDispatchInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ExceptionHandled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.get_ExceptionHandled
    open func get_ExceptionHandled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_bool__get_ExceptionHandled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ExceptionHandled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.set_ExceptionHandled(System.Boolean)
    open func set_ExceptionHandled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_void__set_ExceptionHandled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value which indicates whether or not execution was canceled by a resource filter.
            If true, then a resource filter short-circuited execution by setting
            .
            

    */
    open var Canceled : Bool {
        get {
            return try! get_Canceled();
        }
        set(v) {
            return try! set_Canceled(value: v);
        }
    }
    /**
    
            Gets or set the current .
            

    */
    open var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
        set(v) {
            return try! set_Exception(value: v!);
        }
    }
    /**
    
            Gets or set the current .
            

    */
    open var ExceptionDispatchInfo : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        get {
            return try! get_ExceptionDispatchInfo();
        }
        set(v) {
            return try! set_ExceptionDispatchInfo(value: v!);
        }
    }
    /**
    
            
            Gets or sets a value indicating whether or not the current  has been handled.
            
            
            If false the  will be rethrown by the runtime after resource filters
            have executed.
            
            

    */
    open var ExceptionHandled : Bool {
        get {
            return try! get_ExceptionHandled();
        }
        set(v) {
            return try! set_ExceptionHandled(value: v);
        }
    }
    /**
    
            Gets or sets the result.
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
} // ResourceExecutedContext


// type: Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext
    /**
    
            A context for resource filters, specifically  and
             calls.
            

    */
open class ResourceExecutingContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResourceExecutingContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})
    /**
    
            Creates a new .
            

    - Parameter actionContext: The .
    - Parameter filters: The list of  instances.
    - Parameter valueProviderFactories: The list of  instances.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, valueProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutingContext_ctor_0__3__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_(&__thrown, actionContext.get_handle(), filters.get_handle(), valueProviderFactories.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext.get_Result
    open func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutingContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResourceExecutingContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> get_ValueProviderFactories()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext.get_ValueProviderFactories
    open func get_ValueProviderFactories() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutingContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory___get_ValueProviderFactories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets or sets the result of the action to be executed.
            

    */
    open var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult> {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v!);
        }
    }
    /**
    
            Gets the list of  instances used by model binding.
            

    */
    open var ValueProviderFactories : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory> {
        get {
            return try! get_ValueProviderFactories();
        }
    }
} // ResourceExecutingContext


// type: Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate
    /**
    
            A delegate that asynchronously returns a  indicating model binding, the
            action, the action's result, result filters, and exception filters have executed.
            

    */
public final class ResourceExecutionDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate.Invoke
    public func Invoke() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext___EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext>) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate.Invoke
    public func callAsFunction() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResourceExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResourceExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // ResourceExecutionDelegate


// type: Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext
    /**
    
            A context for result filters, specifically  calls.
            

    */
open class ResultExecutedContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, Microsoft.AspNetCore.Mvc.IActionResult, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},Microsoft.AspNetCore.Mvc.IActionResult,System.Object)
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    - Parameter result: 
            The  copied from .
            
    - Parameter controller: The controller instance containing the action.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_ctor_0__4__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__IActionResult_Object(&__thrown, actionContext.get_handle(), filters.get_handle(), result.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Canceled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_Canceled
    open func get_Canceled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_bool__get_Canceled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Canceled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.set_Canceled(System.Boolean)
    open func set_Canceled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_void__set_Canceled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_Controller
    open func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_Exception
    open func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Exception(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.set_Exception(System.Exception)
    open func set_Exception(value : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_void__set_Exception_0__1__Exception(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.ExceptionServices.ExceptionDispatchInfo get_ExceptionDispatchInfo()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_ExceptionDispatchInfo
    open func get_ExceptionDispatchInfo() throws -> Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_ExceptionDispatchInfo__get_ExceptionDispatchInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.set_ExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo)
    open func set_ExceptionDispatchInfo(value : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_void__set_ExceptionDispatchInfo_0__1__ExceptionDispatchInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ExceptionHandled()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_ExceptionHandled
    open func get_ExceptionHandled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_bool__get_ExceptionHandled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ExceptionHandled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.set_ExceptionHandled(System.Boolean)
    open func set_ExceptionHandled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_void__set_ExceptionHandled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
    /**
    
            Gets or sets an indication that a result filter set  to
            true and short-circuited the filter pipeline.
            

    */
    open var Canceled : Bool {
        get {
            return try! get_Canceled();
        }
        set(v) {
            return try! set_Canceled(value: v);
        }
    }
    /**
    
            Gets the controller instance containing the action.
            

    */
    open var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
    /**
    
            Gets or sets the  caught while executing the result or result filters, if
            any.
            

    */
    open var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
        set(v) {
            return try! set_Exception(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the
            , if an  was caught and this information captured.
            

    */
    open var ExceptionDispatchInfo : Optional<dotnet.System.Runtime.ExceptionServices.ExceptionDispatchInfo> {
        get {
            return try! get_ExceptionDispatchInfo();
        }
        set(v) {
            return try! set_ExceptionDispatchInfo(value: v!);
        }
    }
    /**
    
            Gets or sets an indication that the  has been handled.
            

    */
    open var ExceptionHandled : Bool {
        get {
            return try! get_ExceptionHandled();
        }
        set(v) {
            return try! set_ExceptionHandled(value: v);
        }
    }
    /**
    
            Gets the  copied from .
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        get {
            return try! get_Result();
        }
    }
} // ResultExecutedContext


// type: Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext
    /**
    
            A context for result filters, specifically  and
             calls.
            

    */
open class ResultExecutingContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Filters.FilterContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, Microsoft.AspNetCore.Mvc.IActionResult, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata},Microsoft.AspNetCore.Mvc.IActionResult,System.Object)
    /**
    
            Instantiates a new  instance.
            

    - Parameter actionContext: The .
    - Parameter filters: All applicable  implementations.
    - Parameter result: The  of the action and action filters.
    - Parameter controller: The controller instance containing the action.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, filters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>, result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult, controller : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_ctor_0__4__ActionContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata__IActionResult_Object(&__thrown, actionContext.get_handle(), filters.get_handle(), result.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.get_Controller
    open func get_Controller() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_Object__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_IActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.set_Result(Microsoft.AspNetCore.Mvc.IActionResult)
    open func set_Result(value : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_void__set_Result_0__1__IActionResult(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Cancel()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.get_Cancel
    open func get_Cancel() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_bool__get_Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Cancel(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext.set_Cancel(System.Boolean)
    open func set_Cancel(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Filters_ResultExecutingContext_void__set_Cancel_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets an indication the result filter pipeline should be short-circuited.
            

    */
    open var Cancel : Bool {
        get {
            return try! get_Cancel();
        }
        set(v) {
            return try! set_Cancel(value: v);
        }
    }
    /**
    
            Gets the controller instance containing the action.
            

    */
    open var Controller : dotnet.System.Object {
        get {
            return try! get_Controller();
        }
    }
    /**
    
            Gets or sets the  to execute. Setting  to a non-null
            value inside a result filter will short-circuit the result and any remaining result filters.
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Mvc.IActionResult {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v);
        }
    }
} // ResultExecutingContext


// type: Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate
    /**
    
            A delegate that asynchronously returns an  indicating the action result or
            the next result filter has executed.
            

    */
public final class ResultExecutionDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate.Invoke
    public func Invoke() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate.BeginInvoke(System.AsyncCallback,System.Object)
    public func BeginInvoke(callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_IAsyncResult__BeginInvoke_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext___EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    public init(_ callback : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext>) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback();
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>) -> NonnullHandle;
            return f(thrown);
        }
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> Invoke()
// docid: M:Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate.Invoke
    public func callAsFunction() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Filters_ResultExecutionDelegate_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Filters_ResultExecutedContext___Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // ResultExecutionDelegate


}

// Microsoft.AspNetCore.Mvc.Formatters
extension Microsoft.AspNetCore.Mvc.Formatters {
// type: Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection`1
    /**
    
            Represents a collection of formatters.
            

    */
open class FormatterCollection_1<TFormatter : SGBridgeGenericValue>
    :
    dotnet.System.Collections.ObjectModel.Collection_1<TFormatter>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_1_get_type_handle(TFormatter.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection`1.#ctor
    /**
    
            Initializes a new instance of the  class that is empty.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_1_ctor_0__0(TFormatter.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<TFormatter>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection`1.#ctor(System.Collections.Generic.IList{`0})
    /**
    
            Initializes a new instance of the  class
            as a wrapper for the specified list.
            

    - Parameter list: The list that is wrapped by the new collection.
    */
    public override init(list : dotnet.System.Collections.Generic.IList_1<TFormatter>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_1_ctor_0__1__System_Collections_Generic_IList_TFormatter_(TFormatter.get_type_handle(), &__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void RemoveType<T>()
    // void RemoveType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection`1.RemoveType(System.Type)
    /**
    
            Removes all formatters of the specified type.
            

    - Parameter formatterType: The type to remove.
    */
    open func RemoveType(formatterType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_FormatterCollection_1_void__RemoveType_0__1__Type(TFormatter.get_type_handle(), &__thrown, self.get_handle(), formatterType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // FormatterCollection_1


// type: Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter
    /**
    
            Reads an object from the request body.
            

    */
open class IInputFormatter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    
            Determines whether this  can deserialize an object of the
            's .
            

    - Parameter context: The .
    - Returns: 
            true if this  can deserialize an object of the
            's . false otherwise.
            

    */
    open func CanRead(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter_bool__CanRead_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter.ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)
    /**
    
            Reads an object from the request body.
            

    - Parameter context: The .
    - Returns: A  that on completion deserializes the request body.

    */
    open func ReadAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___ReadAsync_0__1__InputFormatterContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IInputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.IInputFormatterExceptionPolicy
    /**
    
            A policy which s can implement to indicate if they want the body model binder
            to handle all exceptions. By default, all default s implement this interface and
            have a default value of .
            

    */
open class IInputFormatterExceptionPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy get_ExceptionPolicy()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.IInputFormatterExceptionPolicy.get_ExceptionPolicy
    open func get_ExceptionPolicy() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy_InputFormatterExceptionPolicy__get_ExceptionPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy(val: __return);
        }
    }
} // IInputFormatterExceptionPolicy


// type: Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter
    /**
    
            Writes an object to the output stream.
            

    */
open class IOutputFormatter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext)
    /**
    
            Determines whether this  can serialize
            an object of the specified type.
            

    - Parameter context: The formatter context associated with the call.
    - Returns: Returns true if the formatter can write the response; false otherwise.

    */
    open func CanWriteResult(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter_bool__CanWriteResult_0__1__OutputFormatterCanWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext)
    /**
    
            Writes the object represented by 's Object property.
            

    - Parameter context: The formatter context associated with the call.
    - Returns: A Task that serializes the value to the 's response message.

    */
    open func WriteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter_Task__WriteAsync_0__1__OutputFormatterWriteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IOutputFormatter


// type: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext
    /**
    
            A context object used by an input formatter for deserializing the request body into an object.
            

    */
open class InputFormatterContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextReader>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Func{System.IO.Stream,System.Text.Encoding,System.IO.TextReader})
    /**
    
            Creates a new instance of .
            

    - Parameter httpContext: 
            The  for the current operation.
            
    - Parameter modelName: The name of the model.
    - Parameter modelState: 
            The  for recording errors.
            
    - Parameter metadata: 
            The  of the model to deserialize.
            
    - Parameter readerFactory: 
            A delegate which can create a  for the request body.
            
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, modelName : dotnet.System.String, modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, readerFactory : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextReader>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_ctor_0__5__HttpContext_String_ModelStateDictionary_ModelMetadata_System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextReader_(&__thrown, httpContext.get_handle(), modelName.get_handle(), modelState.get_handle(), metadata.get_handle(), readerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextReader>, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Func{System.IO.Stream,System.Text.Encoding,System.IO.TextReader},System.Boolean)
    /**
    
            Creates a new instance of .
            

    - Parameter httpContext: 
            The  for the current operation.
            
    - Parameter modelName: The name of the model.
    - Parameter modelState: 
            The  for recording errors.
            
    - Parameter metadata: 
            The  of the model to deserialize.
            
    - Parameter readerFactory: 
            A delegate which can create a  for the request body.
            
    - Parameter treatEmptyInputAsDefaultValue: 
            A value for the  property.
            
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, modelName : dotnet.System.String, modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, readerFactory : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextReader>, treatEmptyInputAsDefaultValue : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_ctor_0__6__HttpContext_String_ModelStateDictionary_ModelMetadata_System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextReader__bool(&__thrown, httpContext.get_handle(), modelName.get_handle(), modelState.get_handle(), metadata.get_handle(), readerFactory.get_handle(), Swift.Int32(treatEmptyInputAsDefaultValue ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_TreatEmptyInputAsDefaultValue()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_TreatEmptyInputAsDefaultValue
    open func get_TreatEmptyInputAsDefaultValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_bool__get_TreatEmptyInputAsDefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ModelName()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_ModelName
    open func get_ModelName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_String__get_ModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_ModelType
    open func get_ModelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_Type__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextReader> get_ReaderFactory()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext.get_ReaderFactory
    open func get_ReaderFactory() throws -> dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextReader> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterContext_System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextReader___get_ReaderFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    /**
    
            Gets the  associated with the current operation.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets the requested  of the request body deserialization.
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the name of the model. Used as the key or key prefix for errors added to .
            

    */
    open var ModelName : dotnet.System.String {
        get {
            return try! get_ModelName();
        }
    }
    /**
    
            Gets the  associated with the current operation.
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets the requested  of the request body deserialization.
            

    */
    open var ModelType : dotnet.System.Type_ {
        get {
            return try! get_ModelType();
        }
    }
    /**
    
            Gets a delegate which can create a  for the request body.
            

    */
    open var ReaderFactory : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextReader> {
        get {
            return try! get_ReaderFactory();
        }
    }
    /**
    
            Gets a flag to indicate whether the input formatter should allow no value to be provided.
            If , the input formatter should handle empty input by returning
            . If , the input
            formatter should handle empty input by returning the default value for the type
            .
            

    */
    open var TreatEmptyInputAsDefaultValue : Bool {
        get {
            return try! get_TreatEmptyInputAsDefaultValue();
        }
    }
} // InputFormatterContext


// type: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException
    /**
    
            Exception thrown by  when the input is not in an expected format.
            

    */
open class InputFormatterException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_InputFormatterException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the specified .
            

    - Parameter message: The exception message.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.#ctor(System.String,System.Exception)
    /**
    
            Initializes a new instance of  with the specified  and
            inner exception that is the cause of this exception.
            

    - Parameter message: The exception message.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InputFormatterException


// type: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy
    /**
    
            Defines the set of policies that determine how the model binding system interprets exceptions
            thrown by an . 
            

    */
public struct InputFormatterExceptionPolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_InputFormatterExceptionPolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy AllExceptions
    /**
    
            This value indicates that all exceptions thrown by an  will be treated
            as model state errors.
            

    */
    public static var AllExceptions : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy(val: Microsoft_AspNetCore_Mvc_Formatters_InputFormatterExceptionPolicy_get_AllExceptions());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy MalformedInputExceptions
    /**
    
            This value indicates that only  and subclasses will be treated
            as model state errors. All other exceptions types will be re-thrown and can be handled by a higher
            level exception handler, such as exception-handling middleware.
            

    */
    public static var MalformedInputExceptions : aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy(val: Microsoft_AspNetCore_Mvc_Formatters_InputFormatterExceptionPolicy_get_MalformedInputExceptions());
            return __return;
        }
    }
} // InputFormatterExceptionPolicy


// type: Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult
    /**
    
            Result of a  operation.
            

    */
open class InputFormatterResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult Failure()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.Failure
    /**
    
            Returns an  indicating the 
            operation failed.
            

    - Returns: 
            An  indicating the 
            operation failed i.e. with  true.
            

    */
    open class func Failure() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_InputFormatterResult__Failure_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> FailureAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.FailureAsync
    /**
    
            Returns a  that on completion provides an  indicating
            the  operation failed.
            

    - Returns: 
            A  that on completion provides an  indicating the
             operation failed i.e. with  true.
            

    */
    open class func FailureAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___FailureAsync_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult Success(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.Success(System.Object)
    /**
    
            Returns an  indicating the 
            operation was successful.
            

    - Parameter model: The deserialized .
    - Returns: 
            An  indicating the 
            operation succeeded i.e. with  false.
            

    */
    open class func Success(model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_InputFormatterResult__Success_0__1__Object(&__thrown, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> SuccessAsync(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.SuccessAsync(System.Object)
    /**
    
            Returns a  that on completion provides an  indicating
            the  operation was successful.
            

    - Parameter model: The deserialized .
    - Returns: 
            A  that on completion provides an  indicating the
             operation succeeded i.e. with  false.
            

    */
    open class func SuccessAsync(model : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___SuccessAsync_0__1__Object(&__thrown, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult NoValue()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.NoValue
    /**
    
            Returns an  indicating the 
            operation produced no value.
            

    - Returns: 
            An  indicating the 
            operation produced no value.
            

    */
    open class func NoValue() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_InputFormatterResult__NoValue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> NoValueAsync()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.NoValueAsync
    /**
    
            Returns a  that on completion provides an  indicating
            the  operation produced no value.
            

    - Returns: 
            A  that on completion provides an  indicating the
             operation produced no value.
            

    */
    open class func NoValueAsync() throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_System_Threading_Tasks_Task_Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult___NoValueAsync_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasError()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.get_HasError
    open func get_HasError() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_bool__get_HasError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsModelSet()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.get_IsModelSet
    open func get_IsModelSet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_bool__get_IsModelSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_InputFormatterResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets an indication whether the  operation had an error.
            

    */
    open var HasError : Bool {
        get {
            return try! get_HasError();
        }
    }
    /**
    
            Gets an indication whether a value for the  property was supplied.
            

    */
    open var IsModelSet : Bool {
        get {
            return try! get_IsModelSet();
        }
    }
    /**
    
            Gets the deserialized .
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
} // InputFormatterResult


// type: Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext
    /**
    
            A context object for .
            

    */
open class OutputFormatterCanWriteContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.set_HttpContext(Microsoft.AspNetCore.Http.HttpContext)
    open func set_HttpContext(value : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_void__set_HttpContext_0__1__HttpContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringSegment get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.get_ContentType
    open func get_ContentType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_StringSegment__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringSegment(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(Microsoft.Extensions.Primitives.StringSegment)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.set_ContentType(Microsoft.Extensions.Primitives.StringSegment)
    open func set_ContentType(value : aspnetcore.Microsoft.Extensions.Primitives.StringSegment) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_void__set_ContentType_0__1__StringSegment(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ContentTypeIsServerDefined()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.get_ContentTypeIsServerDefined
    open func get_ContentTypeIsServerDefined() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_bool__get_ContentTypeIsServerDefined_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ContentTypeIsServerDefined(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.set_ContentTypeIsServerDefined(System.Boolean)
    open func set_ContentTypeIsServerDefined(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_void__set_ContentTypeIsServerDefined_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Object()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.get_Object
    open func get_Object() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_Object__get_Object_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Object(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.set_Object(System.Object)
    open func set_Object(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_void__set_Object_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ObjectType()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.get_ObjectType
    open func get_ObjectType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_Type__get_ObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ObjectType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext.set_ObjectType(System.Type)
    open func set_ObjectType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterCanWriteContext_void__set_ObjectType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the content type to write to the response.
            

    */
    open var ContentType : aspnetcore.Microsoft.Extensions.Primitives.StringSegment {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    
            Gets or sets a value to indicate whether the content type was specified by server-side code.
            This allows  to
            implement stricter filtering on content types that, for example, are being considered purely
            because of an incoming Accept header.
            

    */
    open var ContentTypeIsServerDefined : Bool {
        get {
            return try! get_ContentTypeIsServerDefined();
        }
        set(v) {
            return try! set_ContentTypeIsServerDefined(value: v);
        }
    }
    /**
    
            Gets or sets the  context associated with the current operation.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
        set(v) {
            return try! set_HttpContext(value: v);
        }
    }
    /**
    
            Gets or sets the object to write to the response.
            

    */
    open var Object : Optional<dotnet.System.Object> {
        get {
            return try! get_Object();
        }
        set(v) {
            return try! set_Object(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the object to write to the response.
            

    */
    open var ObjectType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ObjectType();
        }
        set(v) {
            return try! set_ObjectType(value: v!);
        }
    }
} // OutputFormatterCanWriteContext


// type: Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext
    /**
    
            A context object for .
            

    */
open class OutputFormatterWriteContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterWriteContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextWriter>, System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,System.Func{System.IO.Stream,System.Text.Encoding,System.IO.TextWriter},System.Type,System.Object)
    /**
    
            Creates a new .
            

    - Parameter httpContext: The  for the current request.
    - Parameter writerFactory: The delegate used to create a  for writing the response.
    - Parameter objectType: The  of the object to write to the response.
    - Parameter object: The object to write to the response.
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, writerFactory : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextWriter>, objectType : Optional<dotnet.System.Type_>, object : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterWriteContext_ctor_0__4__HttpContext_System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextWriter__Type_Object(&__thrown, httpContext.get_handle(), writerFactory.get_handle(), objectType?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextWriter> get_WriterFactory()
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext.get_WriterFactory
    open func get_WriterFactory() throws -> dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextWriter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterWriteContext_System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextWriter___get_WriterFactory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WriterFactory(System.Func<System.IO.Stream,System.Text.Encoding,System.IO.TextWriter>)
// docid: M:Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext.set_WriterFactory(System.Func{System.IO.Stream,System.Text.Encoding,System.IO.TextWriter})
    open func set_WriterFactory(value : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Formatters_OutputFormatterWriteContext_void__set_WriterFactory_0__1__System_Func_System_IO_Stream_System_Text_Encoding_System_IO_TextWriter_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_WriterFactory(value : @escaping (Optional<dotnet.System.IO.Stream>, Optional<dotnet.System.Text.Encoding>) throws -> dotnet.System.IO.TextWriter) throws {
        let del_value = try dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextWriter>(value);
        return try set_WriterFactory(value: del_value);
    }
    /**
    
            
            Gets or sets a delegate used to create a  for writing text to the response.
            
            
            Write to  directly to write binary data to the response.
            
            

    */
    open var WriterFactory : dotnet.System.Func_3<dotnet.System.IO.Stream,dotnet.System.Text.Encoding,dotnet.System.IO.TextWriter> {
        get {
            return try! get_WriterFactory();
        }
        set(v) {
            return try! set_WriterFactory(value: v);
        }
    }
} // OutputFormatterWriteContext


}

// Microsoft.AspNetCore.Mvc.ModelBinding
extension Microsoft.AspNetCore.Mvc.ModelBinding {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo
    /**
    
            Binding info which represents metadata associated to an action parameter.
            

    */
open class BindingInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    /**
    
            Creates a copy of a .
            

    - Parameter other: The  to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_ctor_0__1__BindingInfo(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo GetBindingInfo(System.Collections.Generic.IEnumerable<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.GetBindingInfo(System.Collections.Generic.IEnumerable{System.Object})
    /**
    
            Constructs a new instance of  from the given .
            
            This overload does not account for  specified via . Consider using
             overload, or 
            on the result of this method to get a more accurate  instance.
            
            

    - Parameter attributes: A collection of attributes which are used to construct 
            
    - Returns: A new instance of .

    */
    open class func GetBindingInfo(attributes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_BindingInfo__GetBindingInfo_0__1__System_Collections_Generic_IEnumerable_object_(&__thrown, attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo GetBindingInfo(System.Collections.Generic.IEnumerable<System.Object>, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.GetBindingInfo(System.Collections.Generic.IEnumerable{System.Object},Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Constructs a new instance of  from the given  and .
            

    - Parameter attributes: A collection of attributes which are used to construct .
    - Parameter modelMetadata: The .
    - Returns: A new instance of  if any binding metadata was discovered; otherwise or .

    */
    open class func GetBindingInfo(attributes : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object>, modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_BindingInfo__GetBindingInfo_0__2__System_Collections_Generic_IEnumerable_object__ModelMetadata(&__thrown, attributes.get_handle(), modelMetadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool TryApplyBindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.TryApplyBindingInfo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Applies binding metadata from the specified .
            
            Uses values from  if no value is already available.
            
            

    - Parameter modelMetadata: The .
    - Returns:  if any binding metadata from  was applied;
             otherwise.

    */
    open func TryApplyBindingInfo(modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_bool__TryApplyBindingInfo_0__1__ModelMetadata(&__thrown, self.get_handle(), modelMetadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_BinderModelName
    open func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_BinderModelName(System.String)
    open func set_BinderModelName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_BinderModelName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_BinderType
    open func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_BinderType(System.Type)
    open func set_BinderType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_BinderType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider get_PropertyFilterProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_PropertyFilterProvider
    open func get_PropertyFilterProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_IPropertyFilterProvider__get_PropertyFilterProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyFilterProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_PropertyFilterProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider)
    open func set_PropertyFilterProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_PropertyFilterProvider_0__1__IPropertyFilterProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ActionContext,bool> get_RequestPredicate()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_RequestPredicate
    open func get_RequestPredicate() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_System_Func_Microsoft_AspNetCore_Mvc_ActionContext_bool___get_RequestPredicate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequestPredicate(System.Func<Microsoft.AspNetCore.Mvc.ActionContext,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_RequestPredicate(System.Func{Microsoft.AspNetCore.Mvc.ActionContext,System.Boolean})
    open func set_RequestPredicate(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_RequestPredicate_0__1__System_Func_Microsoft_AspNetCore_Mvc_ActionContext_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_RequestPredicate(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,Swift.Bool>(value);
        return try set_RequestPredicate(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior get_EmptyBodyBehavior()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.get_EmptyBodyBehavior
    open func get_EmptyBodyBehavior() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_EmptyBodyBehavior__get_EmptyBodyBehavior_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior(val: __return);
        }
    }
    // [IsSpecialName] void set_EmptyBodyBehavior(Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo.set_EmptyBodyBehavior(Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior)
    open func set_EmptyBodyBehavior(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_BindingInfo_void__set_EmptyBodyBehavior_0__1__EmptyBodyBehavior(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the binder model name.
            

    */
    open var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
        set(v) {
            return try! set_BinderModelName(value: v!);
        }
    }
    /**
    
            Gets or sets the  of the  implementation used to bind the
            model.
            

    */
    open var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
        set(v) {
            return try! set_BinderType(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    
            Gets or sets the value which decides if empty bodies are treated as valid inputs.
            

    */
    open var EmptyBodyBehavior : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        get {
            return try! get_EmptyBodyBehavior();
        }
        set(v) {
            return try! set_EmptyBodyBehavior(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var PropertyFilterProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        get {
            return try! get_PropertyFilterProvider();
        }
        set(v) {
            return try! set_PropertyFilterProvider(value: v!);
        }
    }
    /**
    
            Gets or sets a predicate which determines whether or not the model should be bound based on state
            from the current request.
            

    */
    open var RequestPredicate : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,Bool>> {
        get {
            return try! get_RequestPredicate();
        }
        set(v) {
            return try! set_RequestPredicate(value: v!);
        }
    }
} // BindingInfo


// type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
    /**
    
            A metadata object representing a source of data for model binding.
            

    */
open class BindingSource
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Body
    /**
    
            A  for the request body.
            

    */
    open class var Body : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Body());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Custom
    /**
    
            A  for a custom model binder (unknown data source).
            

    */
    open class var Custom : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Custom());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Form
    /**
    
            A  for the request form-data.
            

    */
    open class var Form : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Form());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Header
    /**
    
            A  for the request headers.
            

    */
    open class var Header : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Header());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource ModelBinding
    /**
    
            A  for model binding. Includes form-data, query-string
            and route data from the request.
            

    */
    open class var ModelBinding : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_ModelBinding());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Path
    /**
    
            A  for the request url path.
            

    */
    open class var Path : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Path());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Query
    /**
    
            A  for the request query-string.
            

    */
    open class var Query : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Query());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Services
    /**
    
            A  for request services.
            

    */
    open class var Services : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Services());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource Special
    /**
    
            A  for special parameter types that are not user input.
            

    */
    open class var Special : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_Special());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource FormFile
    /**
    
            A  for , , and .
            

    */
    open class var FormFile : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_get_FormFile());
            return __return;
        }
    }
    // .ctor(System.String, System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.#ctor(System.String,System.String,System.Boolean,System.Boolean)
    /**
    
            Creates a new .
            

    - Parameter id: The id, a unique identifier.
    - Parameter displayName: The display name.
    - Parameter isGreedy: A value indicating whether or not the source is greedy.
    - Parameter isFromRequest: 
            A value indicating whether or not the data comes from the HTTP request.
            
    */
    public init(id : dotnet.System.String, displayName : dotnet.System.String, isGreedy : Bool, isFromRequest : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_ctor_0__4__String_String_bool_bool(&__thrown, id.get_handle(), displayName.get_handle(), Swift.Int32(isGreedy ? 1 : 0), Swift.Int32(isFromRequest ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanAcceptDataFrom(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.CanAcceptDataFrom(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    
             Gets a value indicating whether or not the  can accept
             data from .
             

    - Parameter bindingSource: The  to consider as input.
    - Returns: True if the source is compatible, otherwise false.

    */
    open func CanAcceptDataFrom(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__CanAcceptDataFrom_0__1__BindingSource(&__thrown, self.get_handle(), bindingSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open /* method final */ func Equals(other : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__Equals_0__1__BindingSource(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open class func op_Equality(s1 : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>, s2 : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__op_Equality_0__2__BindingSource_BindingSource(&__thrown, s1?.get_handle() ?? nil, s2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource, Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource,Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open class func op_Inequality(s1 : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>, s2 : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__op_Inequality_0__2__BindingSource_BindingSource(&__thrown, s1?.get_handle() ?? nil, s2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.get_Id
    open func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsGreedy()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.get_IsGreedy
    open func get_IsGreedy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__get_IsGreedy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsFromRequest()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource.get_IsFromRequest
    open func get_IsFromRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource_bool__get_IsFromRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets the display name for the source.
            

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            Gets the unique identifier for the source. Sources are compared based on their Id.
            

    */
    open var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
    }
    /**
    
            Gets a value indicating whether or not the binding source uses input from the current HTTP request.
            

    */
    open var IsFromRequest : Bool {
        get {
            return try! get_IsFromRequest();
        }
    }
    /**
    
            Gets a value indicating whether or not a source is greedy. A greedy source will bind a model in
            a single operation, and will not decompose the model into sub-properties.
            

    */
    open var IsGreedy : Bool {
        get {
            return try! get_IsGreedy();
        }
    }
} // BindingSource


// type: Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource
    /**
    
            A  which can represent multiple value-provider data sources.
            

    */
open class CompositeBindingSource
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_CompositeBindingSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource Create(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource.Create(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource},System.String)
    /**
    
            Creates a new .
            

    - Parameter bindingSources: 
            The set of  entries.
            Must be value-provider sources and user input.
            
    - Parameter displayName: The display name for the composite source.
    - Returns: A .

    */
    open class func Create(bindingSources : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>, displayName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeBindingSource_CompositeBindingSource__Create_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource__String(&__thrown, bindingSources.get_handle(), displayName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource(hndl : __return);
        }
    }
    // bool CanAcceptDataFrom(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource.CanAcceptDataFrom(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    /**
    */
    open override func CanAcceptDataFrom(bindingSource : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeBindingSource_bool__CanAcceptDataFrom_0__1__BindingSource(&__thrown, self.get_handle(), bindingSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> get_BindingSources()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.CompositeBindingSource.get_BindingSources
    open func get_BindingSources() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_CompositeBindingSource_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_BindingSource___get_BindingSources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    
            Gets the set of  entries.
            

    */
    open var BindingSources : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSources();
        }
    }
} // CompositeBindingSource


// type: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior
    /**
    
            Determines the behavior for processing empty bodies during input formatting.
            

    */
public struct EmptyBodyBehavior : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_EmptyBodyBehavior_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior Default
    /**
    
            Uses the framework default behavior for processing empty bodies.
            This is typically configured using MvcOptions.AllowEmptyInputInBodyModelBinding.
            

    */
    public static var Default : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_EmptyBodyBehavior_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior Allow
    /**
    
            Empty bodies are treated as valid inputs.
            

    */
    public static var Allow : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_EmptyBodyBehavior_get_Allow());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior Disallow
    /**
    
            Empty bodies are treated as invalid inputs.
            

    */
    public static var Disallow : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior(val: Microsoft_AspNetCore_Mvc_ModelBinding_EmptyBodyBehavior_get_Disallow());
            return __return;
        }
    }
} // EmptyBodyBehavior


// type: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
// boxed value type
    /**
    
            An abstraction used when grouping enum values for .
            

    */
public final class EnumGroupAndName
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the Group name.
            

    */
    public var Group : dotnet.System.String {
        get {
            return try! get_Group();
        }
    }
    /**
    
            Gets the name.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of the  structure. This constructor should
            not be used in any site where localization is important.
            

    - Parameter group: The group name.
    - Parameter name: The name.
    */
    public init(group : dotnet.System.String, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_ctor_0__2__String_String(&__thrown, group.get_handle(), name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.Func{System.String})
    /**
    
            Initializes a new instance of the  structure.
            

    - Parameter group: The group name.
    - Parameter name: A  which will return the name.
    */
    public init(group : dotnet.System.String, name : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_ctor_0__2__String_System_Func_string_(&__thrown, group.get_handle(), name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Group()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.get_Group
    public func get_Group() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_String__get_Group_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // EnumGroupAndName


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata
    /**
    
            Provides a  which implements .
            

    */
open class IBinderTypeProviderMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata.get_BinderType
    open func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IBinderTypeProviderMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceMetadata
    /**
    
            Metadata which specifies the data source for model binding.
            

    */
open class IBindingSourceMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceMetadata.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IBindingSourceMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    /**
    
            Defines an interface for model binders.
            

    */
open class IModelBinder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    
            Attempts to bind a model.
            

    - Parameter bindingContext: The .
    - Returns: 
            
            A  which will complete when the model binding process completes.
            
            
            If model binding was successful, the  should have
             set to true.
            
            
            A model binder that completes successfully should set  to
            a value returned from .
            
            

    */
    open func BindModelAsync(bindingContext : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder_Task__BindModelAsync_0__1__ModelBindingContext(&__thrown, self.get_handle(), bindingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IModelBinder


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider
    /**
    
            Creates  instances. Register 
            instances in MvcOptions.
            

    */
open class IModelBinderProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)
    /**
    
            Creates a  based on .
            

    - Parameter context: The .
    - Returns: An .

    */
    open func GetBinder(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider_IModelBinder__GetBinder_0__1__ModelBinderProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IModelBinderProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
    /**
    
            A provider that can supply instances of .
            

    */
open class IModelMetadataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider.GetMetadataForType(System.Type)
    /**
    
            Supplies metadata describing a .
            

    - Parameter modelType: The .
    - Returns: A  instance describing the .

    */
    open func GetMetadataForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider_ModelMetadata__GetMetadataForType_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> GetMetadataForProperties(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider.GetMetadataForProperties(System.Type)
    /**
    
            Supplies metadata describing the properties of a .
            

    - Parameter modelType: The .
    - Returns: A set of  instances describing properties of the .

    */
    open func GetMetadataForProperties(modelType : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___GetMetadataForProperties_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IModelMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider
    /**
    
            Represents an entity which can provide model name as metadata.
            

    */
open class IModelNameProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IModelNameProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider
    /**
    
            Provides a predicate which can determines which model properties or parameters should be bound by model binding.
            

    */
open class IPropertyFilterProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool> get_PropertyFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider.get_PropertyFilter
    open func get_PropertyFilter() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool___get_PropertyFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
} // IPropertyFilterProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IRequestPredicateProvider
    /**
    
            An interface that allows a top-level model to be bound or not bound based on state associated
            with the current request.
            

    */
open class IRequestPredicateProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IRequestPredicateProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IRequestPredicateProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ActionContext,bool> get_RequestPredicate()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IRequestPredicateProvider.get_RequestPredicate
    open func get_RequestPredicate() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext,Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IRequestPredicateProvider_System_Func_Microsoft_AspNetCore_Mvc_ActionContext_bool___get_RequestPredicate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
} // IRequestPredicateProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider
    /**
    
            Defines the methods that are required for a value provider.
            

    */
open class IValueProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ContainsPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider.ContainsPrefix(System.String)
    /**
    
            Determines whether the collection contains the specified prefix.
            

    - Parameter prefix: The prefix to search for.
    - Returns: true if the collection contains the specified prefix; otherwise, false.

    */
    open func ContainsPrefix(prefix : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider_bool__ContainsPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult GetValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider.GetValue(System.String)
    /**
    
            Retrieves a value object using the specified key.
            

    - Parameter key: The key of the value object to retrieve.
    - Returns: The value object for the specified key. If the exact key is not found, .

    */
    open func GetValue(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider_ValueProviderResult__GetValue_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl : __return);
        }
    }
} // IValueProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory
    /**
    
            A factory for creating  instances.
            

    */
open class IValueProviderFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext)
    /**
    
            Creates a  with values from the current request
            and adds it to  list.
            

    - Parameter context: The .
    - Returns: A  that when completed will add an  instance
            to  list if applicable.

    */
    open func CreateValueProviderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory_Task__CreateValueProviderAsync_0__1__ValueProviderFactoryContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IValueProviderFactory


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext
    /**
    
            A context object for .
            

    */
open class ModelBinderProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Creates an  for the given .
            

    - Parameter metadata: The  for the model.
    - Returns: An .

    */
    open func CreateBinder(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_IModelBinder__CreateBinder_0__1__ModelMetadata(&__thrown, self.get_handle(), metadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo)
    /**
    
            Creates an  for the given 
            and .
            

    - Parameter metadata: The  for the model.
    - Parameter bindingInfo: The  that should be used
            for creating the binder.
    - Returns: An .

    */
    open func CreateBinder(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, bindingInfo : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_IModelBinder__CreateBinder_0__2__ModelMetadata_BindingInfo(&__thrown, self.get_handle(), metadata.get_handle(), bindingInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo get_BindingInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.get_BindingInfo
    open func get_BindingInfo() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_BindingInfo__get_BindingInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.get_MetadataProvider
    open func get_MetadataProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_Services()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext.get_Services
    open func get_Services() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBinderProviderContext_IServiceProvider__get_Services_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var BindingInfo : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo {
        get {
            return try! get_BindingInfo();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the .
            

    */
    open var MetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        get {
            return try! get_MetadataProvider();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Services : dotnet.System.IServiceProvider {
        get {
            return try! get_Services();
        }
    }
} // ModelBinderProviderContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    /**
    
            A context that contains operating information for model binding and validation.
            

    */
open class ModelBindingContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope EnterNestedScope(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.EnterNestedScope(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.String,System.Object)
    /**
    
            Pushes a layer of state onto this context.  implementations will call this as
            part of recursion when binding properties or collection items.
            

    - Parameter modelMetadata: 
             to assign to the  property.
            
    - Parameter fieldName: Name to assign to the  property.
    - Parameter modelName: Name to assign to the  property.
    - Parameter model: Instance to assign to the  property.
    - Returns: 
            A  scope object which should be used in a using statement where
             is called.
            

    */
    open func EnterNestedScope(modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, fieldName : dotnet.System.String, modelName : dotnet.System.String, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ModelBindingContext_NestedScope__EnterNestedScope_0__4__ModelMetadata_String_String_Object(&__thrown, self.get_handle(), modelMetadata.get_handle(), fieldName.get_handle(), modelName.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope EnterNestedScope()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.EnterNestedScope
    /**
    
            Pushes a layer of state onto this context.  implementations will call this as
            part of recursion when binding properties or collection items.
            

    - Returns: 
            A  scope object which should be used in a using statement where
             is called.
            

    */
    open func EnterNestedScope() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ModelBindingContext_NestedScope__EnterNestedScope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext_NestedScope(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ActionContext(Microsoft.AspNetCore.Mvc.ActionContext)
    open func set_ActionContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ActionContext_0__1__ActionContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_BinderModelName
    open func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BinderModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_BinderModelName(System.String)
    open func set_BinderModelName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_BinderModelName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_BindingSource(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource)
    open func set_BindingSource(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_BindingSource_0__1__BindingSource(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FieldName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_FieldName
    open func get_FieldName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_String__get_FieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FieldName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_FieldName(System.String)
    open func set_FieldName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_FieldName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsTopLevelObject()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_IsTopLevelObject
    open func get_IsTopLevelObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_bool__get_IsTopLevelObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsTopLevelObject(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_IsTopLevelObject(System.Boolean)
    open func set_IsTopLevelObject(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_IsTopLevelObject_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_Model(System.Object)
    open func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_ModelMetadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ModelMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ModelName
    open func get_ModelName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_String__get_ModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ModelName(System.String)
    open func set_ModelName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ModelName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OriginalModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_OriginalModelName
    open func get_OriginalModelName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_String__get_OriginalModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OriginalModelName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_OriginalModelName(System.String)
    open func set_OriginalModelName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_OriginalModelName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    open func set_ModelState(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ModelState_0__1__ModelStateDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ModelType
    open func get_ModelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_Type__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool> get_PropertyFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_PropertyFilter
    open func get_PropertyFilter() throws -> Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool___get_PropertyFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyFilter(System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,bool>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_PropertyFilter(System.Func{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Boolean})
    open func set_PropertyFilter(value : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_PropertyFilter_0__1__System_Func_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_PropertyFilter(value : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Swift.Bool>(value);
        return try set_PropertyFilter(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary get_ValidationState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ValidationState
    open func get_ValidationState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ValidationStateDictionary__get_ValidationState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary)
    open func set_ValidationState(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ValidationState_0__1__ValidationStateDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider get_ValueProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_ValueProvider
    open func get_ValueProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_IValueProvider__get_ValueProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_ValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider)
    open func set_ValueProvider(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_ValueProvider_0__1__IValueProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.get_Result
    open func get_Result() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_ModelBindingResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Result(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.set_Result(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
    open func set_Result(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_void__set_Result_0__1__ModelBindingResult(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Represents the  associated with this context.
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
        set(v) {
            return try! set_ActionContext(value: v);
        }
    }
    /**
    
            Gets or sets a model name which is explicitly set using an .
            

    */
    open var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
        set(v) {
            return try! set_BinderModelName(value: v!);
        }
    }
    /**
    
            Gets or sets a value which represents the  associated with the
            .
            

    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
        set(v) {
            return try! set_BindingSource(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the current field being bound.
            

    */
    open var FieldName : dotnet.System.String {
        get {
            return try! get_FieldName();
        }
        set(v) {
            return try! set_FieldName(value: v);
        }
    }
    /**
    
            Gets the  associated with this context.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets an indication that the current binder is handling the top-level object.
            

    */
    open var IsTopLevelObject : Bool {
        get {
            return try! get_IsTopLevelObject();
        }
        set(v) {
            return try! set_IsTopLevelObject(value: v);
        }
    }
    /**
    
            Gets or sets the model value for the current operation.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
    /**
    
            Gets or sets the metadata for the model associated with this context.
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
        set(v) {
            return try! set_ModelMetadata(value: v);
        }
    }
    /**
    
            Gets or sets the name of the model. This property is used as a key for looking up values in
             during model binding.
            

    */
    open var ModelName : dotnet.System.String {
        get {
            return try! get_ModelName();
        }
        set(v) {
            return try! set_ModelName(value: v);
        }
    }
    /**
    
            Gets or sets the  used to capture  values
            for properties in the object graph of the model when binding.
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
        set(v) {
            return try! set_ModelState(value: v);
        }
    }
    /**
    
            Gets the type of the model.
            

    */
    open var ModelType : dotnet.System.Type_ {
        get {
            return try! get_ModelType();
        }
    }
    /**
    
            Gets or sets the name of the top-level model. This is not reset to  when value
            providers have no match for that model.
            

    */
    open var OriginalModelName : dotnet.System.String {
        get {
            return try! get_OriginalModelName();
        }
        set(v) {
            return try! set_OriginalModelName(value: v);
        }
    }
    /**
    
            Gets or sets a predicate which will be evaluated for each property to determine if the property
            is eligible for model binding.
            

    */
    open var PropertyFilter : Optional<dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Bool>> {
        get {
            return try! get_PropertyFilter();
        }
        set(v) {
            return try! set_PropertyFilter(value: v!);
        }
    }
    /**
    
            
            Gets or sets a  which represents the result of the model binding process.
            
            
            Before an  is called,  will be set to a value indicating
            failure. The binder should set  to a value created with
             if model binding succeeded.
            
            

    */
    open var Result : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        get {
            return try! get_Result();
        }
        set(v) {
            return try! set_Result(value: v);
        }
    }
    /**
    
            Gets or sets the . Used for tracking validation state to
            customize validation behavior for a model object.
            

    */
    open var ValidationState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary {
        get {
            return try! get_ValidationState();
        }
        set(v) {
            return try! set_ValidationState(value: v);
        }
    }
    /**
    
            Gets or sets the  associated with this context.
            

    */
    open var ValueProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider {
        get {
            return try! get_ValueProvider();
        }
        set(v) {
            return try! set_ValueProvider(value: v);
        }
    }
} // ModelBindingContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext+NestedScope
// boxed value type
    /**
    
            Return value of . Should be disposed
            by caller when child binding context state should be popped off of
            the .
            

    */
public final class ModelBindingContext_NestedScope
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_NestedScope_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    /**
    
            Initializes the  for a .
            

    - Parameter context: 
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_NestedScope_ctor_0__1__ModelBindingContext(&__thrown, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_NestedScope_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope.Dispose
    /**
    
            Exits the  created by calling .
            

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingContext_NestedScope_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ModelBindingContext_NestedScope


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
// boxed value type
    /**
    
            Contains the result of model binding.
            

    */
public final class ModelBindingResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            
            Gets a value indicating whether or not the  value has been set.
            
            
            This property can be used to distinguish between a model binder which does not find a value and
            the case where a model binder sets the null value.
            
            

    */
    public var IsModelSet : Bool {
        get {
            return try! get_IsModelSet();
        }
    }
    /**
    
            Gets the model associated with this context.
            

    */
    public var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult Failed()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Failed
    /**
    
            Creates a  representing a failed model binding operation.
            

    - Returns: A  representing a failed model binding operation.

    */
    public class func Failed() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_ModelBindingResult__Failed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult Success(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Success(System.Object)
    /**
    
            Creates a  representing a successful model binding operation.
            

    - Parameter model: The model value. May be null.
    - Returns: A  representing a successful model bind.

    */
    public class func Success(model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_ModelBindingResult__Success_0__1__Object(&__thrown, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Equals(System.Object)
    /**
    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
    /**
    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_bool__Equals_0__1__ModelBindingResult(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.ToString
    /**
    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
    /**
    
            Compares  objects for equality.
            

    - Parameter x: A .
    - Parameter y: A .
    - Returns: true if the objects are equal, otherwise false.

    */
    public class func op_Equality(x : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult, y : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_bool__op_Equality_0__2__ModelBindingResult_ModelBindingResult(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
    /**
    
            Compares  objects for inequality.
            

    - Parameter x: A .
    - Parameter y: A .
    - Returns: true if the objects are not equal, otherwise false.

    */
    public class func op_Inequality(x : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult, y : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_bool__op_Inequality_0__2__ModelBindingResult_ModelBindingResult(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.get_Model
    public func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsModelSet()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult.get_IsModelSet
    public func get_IsModelSet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelBindingResult_bool__get_IsModelSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ModelBindingResult


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelError
    /**
    
            An error that occurred during model binding and validation.
            

    */
open class ModelError
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.#ctor(System.Exception)
    /**
    
            Initializes a new instance of  with the specified .
            

    - Parameter exception: The .
    */
    public init(exception : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_ctor_0__1__Exception(&__thrown, exception.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Exception, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.#ctor(System.Exception,System.String)
    /**
    
            Initializes a new instance of  with the specified 
            and specified .
            

    - Parameter exception: The .
    - Parameter errorMessage: The error message.
    */
    public init(exception : dotnet.System.Exception, errorMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_ctor_0__2__Exception_String(&__thrown, exception.get_handle(), errorMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the specified .
            

    - Parameter errorMessage: The error message.
    */
    public init(errorMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_ctor_0__1__String(&__thrown, errorMessage?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.get_Exception
    open func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ErrorMessage()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.get_ErrorMessage
    open func get_ErrorMessage() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelError_String__get_ErrorMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the error message associated with this  instance.
            

    */
    open var ErrorMessage : dotnet.System.String {
        get {
            return try! get_ErrorMessage();
        }
    }
    /**
    
            Gets the  associated with this  instance.
            

    */
    open var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
    }
} // ModelError


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection
    /**
    
            A collection of  instances.
            

    */
open class ModelErrorCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelErrorCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelErrorCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection.Add(System.Exception)
    /**
    
            Adds the specified  instance.
            

    - Parameter exception: The 
    */
    open func Add(exception : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelErrorCollection_void__Add_0__1__Exception(&__thrown, self.get_handle(), exception.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection.Add(System.String)
    /**
    
            Adds the specified error message.
            

    - Parameter errorMessage: The error message.
    */
    open func Add(errorMessage : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelErrorCollection_void__Add_0__1__String(&__thrown, self.get_handle(), errorMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ModelErrorCollection


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    /**
    
            A metadata representation of a model type, property or parameter.
            

    */
open class ModelMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultOrder
    /**
    
            The default value of .
            

    */
    open class var DefaultOrder : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_get_DefaultOrder();
            return __return;
        }
    }
    // System.String GetDisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
    /**
    
            Gets a display name for the model.
            

    - Returns: The display name.

    */
    open func GetDisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__GetDisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    */
    open /* method final */ func Equals(other : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__Equals_0__1__ModelMetadata(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetMetadataForType(System.Type)
    /**
    */
    open func GetMetadataForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelMetadata__GetMetadataForType_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> GetMetadataForProperties(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetMetadataForProperties(System.Type)
    /**
    */
    open func GetMetadataForProperties(modelType : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___GetMetadataForProperties_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ContainerType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ContainerType
    open func get_ContainerType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Type__get_ContainerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ContainerMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ContainerMetadata
    open func get_ContainerMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelMetadata__get_ContainerMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind get_MetadataKind()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_MetadataKind
    open func get_MetadataKind() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelMetadataKind__get_MetadataKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ModelType
    open func get_ModelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Type__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ParameterName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ParameterName
    open func get_ParameterName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_ParameterName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_PropertyName
    open func get_PropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.Object,System.Object> get_AdditionalValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_AdditionalValues
    open func get_AdditionalValues() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IReadOnlyDictionary_object_object___get_AdditionalValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_Properties
    open func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelPropertyCollection__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_BoundConstructor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BoundConstructor
    open func get_BoundConstructor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelMetadata__get_BoundConstructor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> get_BoundConstructorParameters()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BoundConstructorParameters
    open func get_BoundConstructorParameters() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___get_BoundConstructorParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_BinderModelName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BinderModelName
    open func get_BinderModelName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_BinderModelName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_BinderType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BinderType
    open func get_BinderType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Type__get_BinderType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource get_BindingSource()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BindingSource
    open func get_BindingSource() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_BindingSource__get_BindingSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ConvertEmptyStringToNull()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ConvertEmptyStringToNull
    open func get_ConvertEmptyStringToNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_ConvertEmptyStringToNull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_DataTypeName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_DataTypeName
    open func get_DataTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_DataTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_Description
    open func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_DisplayFormatString
    open func get_DisplayFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_DisplayFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_EditFormatString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_EditFormatString
    open func get_EditFormatString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_EditFormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ElementMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ElementMetadata
    open func get_ElementMetadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelMetadata__get_ElementMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String>> get_EnumGroupedDisplayNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_EnumGroupedDisplayNamesAndValues
    open func get_EnumGroupedDisplayNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_Microsoft_AspNetCore_Mvc_ModelBinding_EnumGroupAndName_string____get_EnumGroupedDisplayNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.String> get_EnumNamesAndValues()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_EnumNamesAndValues
    open func get_EnumNamesAndValues() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IReadOnlyDictionary_string_string___get_EnumNamesAndValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasNonDefaultEditFormat()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_HasNonDefaultEditFormat
    open func get_HasNonDefaultEditFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_HasNonDefaultEditFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HtmlEncode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_HtmlEncode
    open func get_HtmlEncode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_HtmlEncode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HideSurroundingHtml()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_HideSurroundingHtml
    open func get_HideSurroundingHtml() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_HideSurroundingHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBindingAllowed()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsBindingAllowed
    open func get_IsBindingAllowed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsBindingAllowed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsBindingRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsBindingRequired
    open func get_IsBindingRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsBindingRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsEnum
    open func get_IsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsFlagsEnum()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsFlagsEnum
    open func get_IsFlagsEnum() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsFlagsEnum_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsRequired()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsRequired
    open func get_IsRequired() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider get_ModelBindingMessageProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ModelBindingMessageProvider
    open func get_ModelBindingMessageProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_ModelBindingMessageProvider__get_ModelBindingMessageProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Placeholder()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_Placeholder
    open func get_Placeholder() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_Placeholder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_NullDisplayText()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_NullDisplayText
    open func get_NullDisplayText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_NullDisplayText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider get_PropertyFilterProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_PropertyFilterProvider
    open func get_PropertyFilterProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_IPropertyFilterProvider__get_PropertyFilterProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ShowForDisplay()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ShowForDisplay
    open func get_ShowForDisplay() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_ShowForDisplay_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_ShowForEdit()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ShowForEdit
    open func get_ShowForEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_ShowForEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_SimpleDisplayProperty()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_SimpleDisplayProperty
    open func get_SimpleDisplayProperty() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_SimpleDisplayProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TemplateHint()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_TemplateHint
    open func get_TemplateHint() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_String__get_TemplateHint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter get_PropertyValidationFilter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_PropertyValidationFilter
    open func get_PropertyValidationFilter() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_IPropertyValidationFilter__get_PropertyValidationFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ValidateChildren()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ValidateChildren
    open func get_ValidateChildren() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_ValidateChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_HasValidators()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_HasValidators
    open func get_HasValidators() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Nullable_bool___get_HasValidators_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Collections_Generic_IReadOnlyList_object___get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ElementType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_ElementType
    open func get_ElementType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Type__get_ElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsComplexType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsComplexType
    open func get_IsComplexType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsComplexType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNullableValueType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsNullableValueType
    open func get_IsNullableValueType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsNullableValueType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsCollectionType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsCollectionType
    open func get_IsCollectionType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsCollectionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEnumerableType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsEnumerableType
    open func get_IsEnumerableType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsEnumerableType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReferenceOrNullableType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_IsReferenceOrNullableType
    open func get_IsReferenceOrNullableType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_bool__get_IsReferenceOrNullableType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_UnderlyingOrModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_UnderlyingOrModelType
    open func get_UnderlyingOrModelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_Type__get_UnderlyingOrModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.Object,System.Object> get_PropertyGetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_PropertyGetter
    open func get_PropertyGetter() throws -> Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Func_object_object___get_PropertyGetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Action<System.Object,System.Object> get_PropertySetter()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_PropertySetter
    open func get_PropertySetter() throws -> Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Action_object_object___get_PropertySetter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<System.Object[],System.Object> get_BoundConstructorInvoker()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.get_BoundConstructorInvoker
    open func get_BoundConstructorInvoker() throws -> Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_System_Func_objectArray_object___get_BoundConstructorInvoker_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets a collection of additional information about the model.
            

    */
    open var AdditionalValues : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        get {
            return try! get_AdditionalValues();
        }
    }
    /**
    
            Gets the name of a model if specified explicitly using .
            

    */
    open var BinderModelName : Optional<dotnet.System.String> {
        get {
            return try! get_BinderModelName();
        }
    }
    /**
    
            Gets the  of an  of a model if specified explicitly using
            .
            

    */
    open var BinderType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BinderType();
        }
    }
    /**
    
            Gets a binder metadata for this model.
            

    */
    open var BindingSource : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource> {
        get {
            return try! get_BindingSource();
        }
    }
    /**
    
            Gets  instance for a constructor of a record type that is used during binding and validation.
            

    */
    open var BoundConstructor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_BoundConstructor();
        }
    }
    /**
    
            Gets a delegate that invokes the bound constructor  if non-.
            

    */
    open var BoundConstructorInvoker : Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,dotnet.System.Object>> {
        get {
            return try! get_BoundConstructorInvoker();
        }
    }
    /**
    
            Gets the collection of  instances for parameters on a .
            This is only available when  is .
            

    */
    open var BoundConstructorParameters : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>> {
        get {
            return try! get_BoundConstructorParameters();
        }
    }
    /**
    
            Gets the metadata for  if this metadata is for a property;
             otherwise.
            

    */
    open var ContainerMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ContainerMetadata();
        }
    }
    /**
    
            Gets the type containing the property if this metadata is for a property;  otherwise.
            

    */
    open var ContainerType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ContainerType();
        }
    }
    /**
    
            Gets a value indicating whether or not to convert an empty string value or one containing only whitespace
            characters to null when representing a model as text.
            

    */
    open var ConvertEmptyStringToNull : Bool {
        get {
            return try! get_ConvertEmptyStringToNull();
        }
    }
    /**
    
            Gets the name of the model's datatype.  Overrides  in some
            display scenarios.
            

    */
    open var DataTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_DataTypeName();
        }
    }
    /**
    
            Gets the description of the model.
            

    */
    open var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    /**
    
            Gets the format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to display the
            model.
            

    */
    open var DisplayFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayFormatString();
        }
    }
    /**
    
            Gets the display name of the model.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    
            Gets the format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to edit the model.
            

    */
    open var EditFormatString : Optional<dotnet.System.String> {
        get {
            return try! get_EditFormatString();
        }
    }
    /**
    
            Gets the  for elements of  if that 
            implements .
            

    */
    open var ElementMetadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_ElementMetadata();
        }
    }
    /**
    
            Gets the  for elements of  if that 
            implements .
            

    */
    open var ElementType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ElementType();
        }
    }
    /**
    
            Gets the ordered and grouped display names and values of all  values in
            .
            

    */
    open var EnumGroupedDisplayNamesAndValues : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,dotnet.System.String>>> {
        get {
            return try! get_EnumGroupedDisplayNamesAndValues();
        }
    }
    /**
    
            Gets the names and values of all  values in .
            

    */
    open var EnumNamesAndValues : Optional<dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_EnumNamesAndValues();
        }
    }
    /**
    
            Gets a value indicating whether  has a non-null, non-empty
            value different from the default for the datatype.
            

    */
    open var HasNonDefaultEditFormat : Bool {
        get {
            return try! get_HasNonDefaultEditFormat();
        }
    }
    /**
    
            Gets a value that indicates if the model, or one of it's properties, or elements has associated validators.
            

    */
    open var HasValidators : Optional<Bool> {
        get {
            return try! get_HasValidators();
        }
    }
    /**
    
            Gets a value indicating whether the "HiddenInput" display template should return
            string.Empty (not the expression value) and whether the "HiddenInput" editor template should not
            also return the expression value (together with the hidden <input> element).
            

    */
    open var HideSurroundingHtml : Bool {
        get {
            return try! get_HideSurroundingHtml();
        }
    }
    /**
    
            Gets a value indicating whether the value should be HTML-encoded.
            

    */
    open var HtmlEncode : Bool {
        get {
            return try! get_HtmlEncode();
        }
    }
    /**
    
            Gets a value indicating whether or not the model value can be bound by model binding. This is only
            applicable when the current instance represents a property.
            

    */
    open var IsBindingAllowed : Bool {
        get {
            return try! get_IsBindingAllowed();
        }
    }
    /**
    
            Gets a value indicating whether or not the model value is required by model binding. This is only
            applicable when the current instance represents a property.
            

    */
    open var IsBindingRequired : Bool {
        get {
            return try! get_IsBindingRequired();
        }
    }
    /**
    
            Gets a value indicating whether or not  is a collection type.
            

    */
    open var IsCollectionType : Bool {
        get {
            return try! get_IsCollectionType();
        }
    }
    /**
    
            Gets a value indicating whether  is a complex type.
            

    */
    open var IsComplexType : Bool {
        get {
            return try! get_IsComplexType();
        }
    }
    /**
    
            Gets a value indicating whether  is for an .
            

    */
    open var IsEnum : Bool {
        get {
            return try! get_IsEnum();
        }
    }
    /**
    
            Gets a value indicating whether or not  is an enumerable type.
            

    */
    open var IsEnumerableType : Bool {
        get {
            return try! get_IsEnumerableType();
        }
    }
    /**
    
            Gets a value indicating whether  is for an  with an
            associated .
            

    */
    open var IsFlagsEnum : Bool {
        get {
            return try! get_IsFlagsEnum();
        }
    }
    /**
    
            Gets a value indicating whether or not  is a .
            

    */
    open var IsNullableValueType : Bool {
        get {
            return try! get_IsNullableValueType();
        }
    }
    /**
    
            Gets a value indicating whether or not the model value is read-only. This is only applicable when
            the current instance represents a property.
            

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    
            Gets a value indicating whether or not  allows null values.
            

    */
    open var IsReferenceOrNullableType : Bool {
        get {
            return try! get_IsReferenceOrNullableType();
        }
    }
    /**
    
            Gets a value indicating whether or not the model value is required. This is only applicable when
            the current instance represents a property.
            

    */
    open var IsRequired : Bool {
        get {
            return try! get_IsRequired();
        }
    }
    /**
    
            Gets a value indicating the kind of metadata element represented by the current instance.
            

    */
    open var MetadataKind : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
            return try! get_MetadataKind();
        }
    }
    /**
    
            Gets the  instance.
            

    */
    open var ModelBindingMessageProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider {
        get {
            return try! get_ModelBindingMessageProvider();
        }
    }
    /**
    
            Gets the model type represented by the current instance.
            

    */
    open var ModelType : dotnet.System.Type_ {
        get {
            return try! get_ModelType();
        }
    }
    /**
    
            Gets the name of the parameter or property if this metadata is for a parameter or property;
             otherwise i.e. if this is the metadata for a type.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the text to display when the model is null.
            

    */
    open var NullDisplayText : Optional<dotnet.System.String> {
        get {
            return try! get_NullDisplayText();
        }
    }
    /**
    
            Gets a value indicating where the current metadata should be ordered relative to other properties
            in its containing type.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the name of the parameter if this metadata is for a parameter;  otherwise.
            

    */
    open var ParameterName : Optional<dotnet.System.String> {
        get {
            return try! get_ParameterName();
        }
    }
    /**
    
            Gets the text to display as a placeholder value for an editor.
            

    */
    open var Placeholder : Optional<dotnet.System.String> {
        get {
            return try! get_Placeholder();
        }
    }
    /**
    
            Gets the collection of  instances for the model's properties.
            

    */
    open var Properties : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Gets the , which can determine which properties
            should be model bound.
            

    */
    open var PropertyFilterProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider> {
        get {
            return try! get_PropertyFilterProvider();
        }
    }
    /**
    
            Gets a property getter delegate to get the property value from a model object.
            

    */
    open var PropertyGetter : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertyGetter();
        }
    }
    /**
    
            Gets the name of the property if this metadata is for a property;  otherwise.
            

    */
    open var PropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_PropertyName();
        }
    }
    /**
    
            Gets a property setter delegate to set the property value on a model object.
            

    */
    open var PropertySetter : Optional<dotnet.System.Action_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_PropertySetter();
        }
    }
    /**
    
            Gets an  implementation that indicates whether this model should be
            validated. If null, properties with this  are validated.
            

    */
    open var PropertyValidationFilter : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter> {
        get {
            return try! get_PropertyValidationFilter();
        }
    }
    /**
    
            Gets a value that indicates whether the property should be displayed in read-only views.
            

    */
    open var ShowForDisplay : Bool {
        get {
            return try! get_ShowForDisplay();
        }
    }
    /**
    
            Gets a value that indicates whether the property should be displayed in editable views.
            

    */
    open var ShowForEdit : Bool {
        get {
            return try! get_ShowForEdit();
        }
    }
    /**
    
            Gets  a value which is the name of the property used to display the model.
            

    */
    open var SimpleDisplayProperty : Optional<dotnet.System.String> {
        get {
            return try! get_SimpleDisplayProperty();
        }
    }
    /**
    
            Gets a string used by the templating system to discover display-templates and editor-templates.
            

    */
    open var TemplateHint : Optional<dotnet.System.String> {
        get {
            return try! get_TemplateHint();
        }
    }
    /**
    
            Gets the underlying type argument if  inherits from .
            Otherwise gets .
            

    */
    open var UnderlyingOrModelType : dotnet.System.Type_ {
        get {
            return try! get_UnderlyingOrModelType();
        }
    }
    /**
    
            Gets a value that indicates whether properties or elements of the model should be validated.
            

    */
    open var ValidateChildren : Bool {
        get {
            return try! get_ValidateChildren();
        }
    }
    /**
    
            Gets a collection of metadata items for validators.
            

    */
    open var ValidatorMetadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ModelMetadata


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider
    /**
    
            A provider that can supply instances of .
            

    */
open class ModelMetadataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> GetMetadataForProperties(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForProperties(System.Type)
    /**
    
            Supplies metadata describing the properties of a .
            

    - Parameter modelType: The .
    - Returns: A set of  instances describing properties of the .

    */
    open func GetMetadataForProperties(modelType : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata___GetMetadataForProperties_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForType(System.Type)
    /**
    
            Supplies metadata describing a .
            

    - Parameter modelType: The .
    - Returns: A  instance describing the .

    */
    open func GetMetadataForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_ModelMetadata__GetMetadataForType_0__1__Type(&__thrown, self.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForParameter(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo)
    /**
    
            Supplies metadata describing a parameter.
            

    - Parameter parameter: The .
    - Returns: A  instance describing the .

    */
    open func GetMetadataForParameter(parameter : dotnet.System.Reflection.ParameterInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_ModelMetadata__GetMetadataForParameter_0__1__ParameterInfo(&__thrown, self.get_handle(), parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForParameter(System.Reflection.ParameterInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo,System.Type)
    /**
    
            Supplies metadata describing a parameter.
            

    - Parameter parameter: The 
    - Parameter modelType: The actual model type.
    - Returns: A  instance describing the .

    */
    open func GetMetadataForParameter(parameter : dotnet.System.Reflection.ParameterInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_ModelMetadata__GetMetadataForParameter_0__2__ParameterInfo_Type(&__thrown, self.get_handle(), parameter.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty(System.Reflection.PropertyInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForProperty(System.Reflection.PropertyInfo,System.Type)
    /**
    
            Supplies metadata describing a property.
            

    - Parameter propertyInfo: The .
    - Parameter modelType: The actual model type.
    - Returns: A  instance describing the .

    */
    open func GetMetadataForProperty(propertyInfo : dotnet.System.Reflection.PropertyInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_ModelMetadata__GetMetadataForProperty_0__2__PropertyInfo_Type(&__thrown, self.get_handle(), propertyInfo.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForConstructor(System.Reflection.ConstructorInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProvider.GetMetadataForConstructor(System.Reflection.ConstructorInfo,System.Type)
    /**
    
            Supplies metadata describing a constructor.
            

    - Parameter constructor: The .
    - Parameter modelType: The type declaring the constructor.
    - Returns: A  instance describing the .

    */
    open func GetMetadataForConstructor(constructor : dotnet.System.Reflection.ConstructorInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadataProvider_ModelMetadata__GetMetadataForConstructor_0__2__ConstructorInfo_Type(&__thrown, self.get_handle(), constructor.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
} // ModelMetadataProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection
    /**
    
            A read-only collection of  objects which represent model properties.
            

    */
open class ModelPropertyCollection
    :
    dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelPropertyCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata})
    /**
    
            Creates a new .
            

    - Parameter properties: The properties.
    */
    public init(properties : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelPropertyCollection_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_ModelMetadata_(&__thrown, properties.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(propertyName : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelPropertyCollection_ModelMetadata__get_Item_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ModelPropertyCollection


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
    /**
    
            Represents the state of an attempt to bind values from an HTTP Request to an action method, which includes
            validation information.
            

    */
open class ModelStateDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultMaxAllowedErrors
    /**
    
            The default value for  of 200.
            

    */
    open class var DefaultMaxAllowedErrors : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_get_DefaultMaxAllowedErrors();
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.#ctor(System.Int32)
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init(maxAllowedErrors : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ctor_0__1__i32(&__thrown, maxAllowedErrors);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of the  class by using values that are copied
            from the specified .
            

    - Parameter dictionary: The  to copy values from.
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ctor_0__1__ModelStateDictionary(&__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool TryAddModelException(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.TryAddModelException(System.String,System.Exception)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter key: The key of the  to add errors to.
    - Parameter exception: The  to add.
    - Returns: 
            True if the given error was added, false if the error was ignored.
            See .
            

    */
    open func TryAddModelException(key : dotnet.System.String, exception : dotnet.System.Exception) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__TryAddModelException_0__2__String_Exception(&__thrown, self.get_handle(), key.get_handle(), exception.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void AddModelError(System.String, System.Exception, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter key: The key of the  to add errors to.
    - Parameter exception: The  to add. Some exception types will be replaced with
            a descriptive error message.
    - Parameter metadata: The  associated with the model.
    */
    open func AddModelError(key : dotnet.System.String, exception : dotnet.System.Exception, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__AddModelError_0__3__String_Exception_ModelMetadata(&__thrown, self.get_handle(), key.get_handle(), exception.get_handle(), metadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAddModelError(System.String, System.Exception, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.TryAddModelError(System.String,System.Exception,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Attempts to add the specified  to the 
            instance that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter key: The key of the  to add errors to.
    - Parameter exception: The  to add. Some exception types will be replaced with
            a descriptive error message.
    - Parameter metadata: The  associated with the model.
    - Returns: 
            True if the given error was added, false if the error was ignored.
            See .
            

    */
    open func TryAddModelError(key : dotnet.System.String, exception : dotnet.System.Exception, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__TryAddModelError_0__3__String_Exception_ModelMetadata(&__thrown, self.get_handle(), key.get_handle(), exception.get_handle(), metadata.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void AddModelError(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter key: The key of the  to add errors to.
    - Parameter errorMessage: The error message to add.
    */
    open func AddModelError(key : dotnet.System.String, errorMessage : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__AddModelError_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), errorMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAddModelError(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.TryAddModelError(System.String,System.String)
    /**
    
            Attempts to add the specified  to the 
            instance that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter key: The key of the  to add errors to.
    - Parameter errorMessage: The error message to add.
    - Returns: 
            True if the given error was added, false if the error was ignored.
            See .
            

    */
    open func TryAddModelError(key : dotnet.System.String, errorMessage : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__TryAddModelError_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), errorMessage.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState GetFieldValidationState(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.GetFieldValidationState(System.String)
    /**
    
            Returns the aggregate  for items starting with the
            specified .
            

    - Parameter key: The key to look up model state errors for.
    - Returns: Returns  if no entries are found for the specified
            key,  if at least one instance is found with one or more model
            state errors;  otherwise.

    */
    open func GetFieldValidationState(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelValidationState__GetFieldValidationState_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState GetValidationState(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.GetValidationState(System.String)
    /**
    
            Returns  for the .
            

    - Parameter key: The key to look up model state errors for.
    - Returns: Returns  if no entry is found for the specified
            key,  if an instance is found with one or more model
            state errors;  otherwise.

    */
    open func GetValidationState(key : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelValidationState__GetValidationState_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: __return);
        }
    }
    // void MarkFieldValid(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.MarkFieldValid(System.String)
    /**
    
            Marks the  for the entry with the specified
             as .
            

    - Parameter key: The key of the  to mark as valid.
    */
    open func MarkFieldValid(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__MarkFieldValid_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MarkFieldSkipped(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.MarkFieldSkipped(System.String)
    /**
    
            Marks the  for the entry with the specified 
            as .
            

    - Parameter key: The key of the  to mark as skipped.
    */
    open func MarkFieldSkipped(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__MarkFieldSkipped_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Merge(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Merge(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Copies the values from the specified  into this instance, overwriting
            existing values if keys are the same.
            

    - Parameter dictionary: The  to copy values from.
    */
    open func Merge(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__Merge_0__1__ModelStateDictionary(&__thrown, self.get_handle(), dictionary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetModelValue(System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Object,System.String)
    /**
    
            Sets the of  and  for
            the  with the specified .
            

    - Parameter key: The key for the  entry.
    - Parameter rawValue: The raw value for the  entry.
    - Parameter attemptedValue: 
            The values of  in a comma-separated .
            
    */
    open func SetModelValue(key : dotnet.System.String, rawValue : Optional<dotnet.System.Object>, attemptedValue : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__SetModelValue_0__3__String_Object_String(&__thrown, self.get_handle(), key.get_handle(), rawValue?.get_handle() ?? nil, attemptedValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetModelValue(System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.SetModelValue(System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    /**
    
            Sets the value for the  with the specified .
            

    - Parameter key: The key for the  entry
    - Parameter valueProviderResult: 
            A  with data for the  entry.
            
    */
    open func SetModelValue(key : dotnet.System.String, valueProviderResult : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__SetModelValue_0__2__String_ValueProviderResult(&__thrown, self.get_handle(), key.get_handle(), valueProviderResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearValidationState(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ClearValidationState(System.String)
    /**
    
            Clears  entries that match the key that is passed as parameter.
            

    - Parameter key: The key of  to clear.
    */
    open func ClearValidationState(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__ClearValidationState_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Clear
    /**
    
            Removes all keys and values from this instance of .
            

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Remove(System.String)
    /**
    
            Removes the  with the specified .
            

    - Parameter key: The key.
    - Returns: true if the element is successfully removed; otherwise false. This method also
            returns false if key was not found.

    */
    open func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.TryGetValue(System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__TryGetValue_0__2__String_outModelStateEntry(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.GetEnumerator
    /**
    
            Returns an enumerator that iterates through this instance of .
            

    - Returns: An .

    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateDictionary_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_Enumerator(hndl : __return);
        }
    }
    // bool StartsWithPrefix(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.StartsWithPrefix(System.String,System.String)
    /**
    
            
            This API supports the MVC's infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            
            

    */
    open class func StartsWithPrefix(prefix : dotnet.System.String, key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__StartsWithPrefix_0__2__String_String(&__thrown, prefix.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.PrefixEnumerable FindKeysWithPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.FindKeysWithPrefix(System.String)
    /**
    
            Gets a  that iterates over this instance of 
            using the specified .
            

    - Parameter prefix: The prefix.
    - Returns: The .

    */
    open func FindKeysWithPrefix(prefix : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_PrefixEnumerable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateDictionary_PrefixEnumerable__FindKeysWithPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_PrefixEnumerable(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry get_Root()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_Root
    open func get_Root() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateEntry__get_Root_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxAllowedErrors()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_MaxAllowedErrors
    open func get_MaxAllowedErrors() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_i32__get_MaxAllowedErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxAllowedErrors(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.set_MaxAllowedErrors(System.Int32)
    open func set_MaxAllowedErrors(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_void__set_MaxAllowedErrors_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasReachedMaxErrors()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_HasReachedMaxErrors
    open func get_HasReachedMaxErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__get_HasReachedMaxErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_ErrorCount()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_ErrorCount
    open func get_ErrorCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_i32__get_ErrorCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerable get_Keys()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_Keys
    open func get_Keys() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_KeyEnumerable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateDictionary_KeyEnumerable__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_KeyEnumerable(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerable get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_Values
    open func get_Values() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_ValueEnumerable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateDictionary_ValueEnumerable__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_ValueEnumerable(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsValid()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_IsValid
    open func get_IsValid() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_bool__get_IsValid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState get_ValidationState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_ValidationState
    open func get_ValidationState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelValidationState__get_ValidationState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ModelStateEntry__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    
            Gets the number of errors added to this instance of  via
             or .
            

    */
    open var ErrorCount : Swift.Int32 {
        get {
            return try! get_ErrorCount();
        }
    }
    /**
    
            Gets a value indicating whether or not the maximum number of errors have been
            recorded.
            

    */
    open var HasReachedMaxErrors : Bool {
        get {
            return try! get_HasReachedMaxErrors();
        }
    }
    /**
    
            Gets a value that indicates whether any model state values in this model state dictionary is invalid or not validated.
            

    */
    open var IsValid : Bool {
        get {
            return try! get_IsValid();
        }
    }
    /**
    
            Gets the key sequence.
            

    */
    open var Keys : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_KeyEnumerable {
        get {
            return try! get_Keys();
        }
    }
    /**
    
            Gets or sets the maximum allowed model state errors in this instance of .
            Defaults to 200.
            

    */
    open var MaxAllowedErrors : Swift.Int32 {
        get {
            return try! get_MaxAllowedErrors();
        }
        set(v) {
            return try! set_MaxAllowedErrors(value: v);
        }
    }
    /**
    
            Root entry for the .
            

    */
    open var Root : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry {
        get {
            return try! get_Root();
        }
    }
    /**
    */
    open var ValidationState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
            return try! get_ValidationState();
        }
    }
    /**
    
            Gets the value sequence.
            

    */
    open var Values : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_ValueEnumerable {
        get {
            return try! get_Values();
        }
    }
} // ModelStateDictionary


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+Enumerator
// boxed value type
    /**
    
            An  for .
            

    */
public final class ModelStateDictionary_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)
    /**
    
            Intializes a new instance of .
            

    - Parameter dictionary: The .
    - Parameter prefix: The prefix.
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, prefix : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_ctor_0__2__ModelStateDictionary_String(&__thrown, dictionary.get_handle(), prefix.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator.Reset
    /**
    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_Enumerator_System_Collections_Generic_KeyValuePair_string_Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // ModelStateDictionary_Enumerator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+KeyEnumerable
// boxed value type
    /**
    
            A  for keys in .
            

    */
public final class ModelStateDictionary_KeyEnumerable
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerable.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of .
            

    - Parameter dictionary: The .
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerable_ctor_0__1__ModelStateDictionary(&__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerable_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerable.GetEnumerator
    /**
    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_KeyEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerable_ModelStateDictionary_KeyEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_KeyEnumerator(hndl : __return);
        }
    }
} // ModelStateDictionary_KeyEnumerable


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+KeyEnumerator
// boxed value type
    /**
    
            An  for keys in .
            

    */
public final class ModelStateDictionary_KeyEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Current : dotnet.System.String {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter dictionary: The .
    - Parameter prefix: The prefix.
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, prefix : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_ctor_0__2__ModelStateDictionary_String(&__thrown, dictionary.get_handle(), prefix.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator.Reset
    /**
    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.KeyEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_KeyEnumerator_String__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ModelStateDictionary_KeyEnumerator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+PrefixEnumerable
// boxed value type
    /**
    
            Enumerates over  to provide entries that start with the
            specified prefix.
            

    */
public final class ModelStateDictionary_PrefixEnumerable
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_PrefixEnumerable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.PrefixEnumerable.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter dictionary: The .
    - Parameter prefix: The prefix.
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, prefix : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_PrefixEnumerable_ctor_0__2__ModelStateDictionary_String(&__thrown, dictionary.get_handle(), prefix.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_PrefixEnumerable_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.PrefixEnumerable.GetEnumerator
    /**
    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_PrefixEnumerable_ModelStateDictionary_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_Enumerator(hndl : __return);
        }
    }
} // ModelStateDictionary_PrefixEnumerable


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+ValueEnumerable
// boxed value type
    /**
    
            An  for .
            

    */
public final class ModelStateDictionary_ValueEnumerable
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerable.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of .
            

    - Parameter dictionary: The .
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerable_ctor_0__1__ModelStateDictionary(&__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerable_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerable.GetEnumerator
    /**
    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_ValueEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerable_ModelStateDictionary_ValueEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary_ValueEnumerator(hndl : __return);
        }
    }
} // ModelStateDictionary_ValueEnumerable


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary+ValueEnumerator
// boxed value type
    /**
    
            An enumerator for .
            

    */
public final class ModelStateDictionary_ValueEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Current : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter dictionary: The .
    - Parameter prefix: The prefix to enumerate.
    */
    public init(dictionary : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, prefix : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_ctor_0__2__ModelStateDictionary_String(&__thrown, dictionary.get_handle(), prefix.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator.Reset
    /**
    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary.ValueEnumerator.get_Current
    public func get_Current() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionary_ValueEnumerator_ModelStateEntry__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry(hndl : __return);
        }
    }
} // ModelStateDictionary_ValueEnumerator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
    /**
    
            An entry in a .
            

    */
open class ModelStateEntry
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry GetModelStateForProperty(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.GetModelStateForProperty(System.String)
    /**
    
            Gets the  for a sub-property with the specified
            .
            

    - Parameter propertyName: The property name to lookup.
    - Returns: 
            The  if a sub-property was found; otherwise .
            

    */
    open func GetModelStateForProperty(propertyName : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_ModelStateEntry__GetModelStateForProperty_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_RawValue()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_RawValue
    open func get_RawValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_Object__get_RawValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RawValue(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.set_RawValue(System.Object)
    open func set_RawValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_void__set_RawValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AttemptedValue()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_AttemptedValue
    open func get_AttemptedValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_String__get_AttemptedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AttemptedValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.set_AttemptedValue(System.String)
    open func set_AttemptedValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_void__set_AttemptedValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection get_Errors()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_Errors
    open func get_Errors() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_ModelErrorCollection__get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState get_ValidationState()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_ValidationState
    open func get_ValidationState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_ModelValidationState__get_ValidationState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: __return);
        }
    }
    // [IsSpecialName] void set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.set_ValidationState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState)
    open func set_ValidationState(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_void__set_ValidationState_0__1__ModelValidationState(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsContainerNode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_IsContainerNode
    open func get_IsContainerNode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_bool__get_IsContainerNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry> get_Children()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.get_Children
    open func get_Children() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateEntry___get_Children_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the set of values contained in , joined into a comma-separated string.
            

    */
    open var AttemptedValue : Optional<dotnet.System.String> {
        get {
            return try! get_AttemptedValue();
        }
        set(v) {
            return try! set_AttemptedValue(value: v!);
        }
    }
    /**
    
            Gets the  values for sub-properties.
            

    */
    open var Children : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>> {
        get {
            return try! get_Children();
        }
    }
    /**
    
            Gets the  for this entry.
            

    */
    open var Errors : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection {
        get {
            return try! get_Errors();
        }
    }
    /**
    
            Gets a value that determines if the current instance of  is a container node.
            Container nodes represent prefix nodes that aren't explicitly added to the
            .
            

    */
    open var IsContainerNode : Bool {
        get {
            return try! get_IsContainerNode();
        }
    }
    /**
    
            Gets the raw value from the request associated with this entry.
            

    */
    open var RawValue : Optional<dotnet.System.Object> {
        get {
            return try! get_RawValue();
        }
        set(v) {
            return try! set_RawValue(value: v!);
        }
    }
    /**
    
            Gets or sets the  for this entry.
            

    */
    open var ValidationState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
            return try! get_ValidationState();
        }
        set(v) {
            return try! set_ValidationState(value: v);
        }
    }
} // ModelStateEntry


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState
    /**
    
            The validation state of a  instance.
            
             of  is used to determine the validity
            of .  is , when
            the aggregate validity ()
            of the root node is .
            
            

    */
public struct ModelValidationState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ModelValidationState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState Unvalidated
    /**
    
            Validation has not been performed on the .
            
            For aggregate validity, the validation of a  is 
            if either the entry or one of thedescendants is .
            
            

    */
    public static var Unvalidated : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: Microsoft_AspNetCore_Mvc_ModelBinding_ModelValidationState_get_Unvalidated());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState Invalid
    /**
    
            Validation was performed on the  and was found to be invalid.
            
            For aggregate validity, the validation of a  is 
            if either the entry or one of the descendants is  and none are .
            
            

    */
    public static var Invalid : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: Microsoft_AspNetCore_Mvc_ModelBinding_ModelValidationState_get_Invalid());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState Valid
    /**
    
            Validation was performed on the 
            
            For aggregate validity, the validation of a  is 
            if the validity of the entry and all descendants is either  or .
            
            

    */
    public static var Valid : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: Microsoft_AspNetCore_Mvc_ModelBinding_ModelValidationState_get_Valid());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState Skipped
    /**
    
            Validation was skipped for the .
            
            The aggregate validity of an entry is never .
            
            

    */
    public static var Skipped : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState(val: Microsoft_AspNetCore_Mvc_ModelBinding_ModelValidationState_get_Skipped());
            return __return;
        }
    }
} // ModelValidationState


// type: Microsoft.AspNetCore.Mvc.ModelBinding.TooManyModelErrorsException
    /**
    
            The  that is thrown when too many model errors are encountered.
            

    */
open class TooManyModelErrorsException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_TooManyModelErrorsException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.TooManyModelErrorsException.#ctor(System.String)
    /**
    
            Creates a new instance of  with the specified
            exception .
            

    - Parameter message: The message that describes the error.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_TooManyModelErrorsException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // TooManyModelErrorsException


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderException
    /**
    
            Exception thrown by  when the input is unable to be read.
            

    */
public final class ValueProviderException
    :
    dotnet.System.Exception
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderException.#ctor(System.String)
    /**
    
            Initializes a new instance of  with the specified .
            

    - Parameter message: The exception message.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderException.#ctor(System.String,System.Exception)
    /**
    
            Initializes a new instance of  with the specified  and
            inner exception that is the cause of this exception.
            

    - Parameter message: The exception message.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ValueProviderException


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext
    /**
    
            A context for .
            

    */
open class ValueProviderFactoryContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderFactoryContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    
            Creates a new .
            

    - Parameter context: The .
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderFactoryContext_ctor_0__1__ActionContext(&__thrown, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderFactoryContext_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> get_ValueProviders()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext.get_ValueProviders
    open func get_ValueProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderFactoryContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider___get_ValueProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the  associated with this context.
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            Gets the list of  instances.
             instances should add the appropriate
             instances to this list.
            

    */
    open var ValueProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider> {
        get {
            return try! get_ValueProviders();
        }
    }
} // ValueProviderFactoryContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
// boxed value type
    /**
    
            Result of an  operation.
            

    */
public final class ValueProviderResult
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult None
    /**
    
            A  that represents a lack of data.
            

    */
    public class var None : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult(hndl: Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_get_None());
            return __return;
        }
    }
    /**
    
            Gets or sets the  associated with the values.
            

    */
    public var Culture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_Culture();
        }
    }
    /**
    
            Gets the first value based on the order values were provided in the request. Use 
            to get a single value for processing regardless of whether a single or multiple values were provided
            in the request.
            

    */
    public var FirstValue : Optional<dotnet.System.String> {
        get {
            return try! get_FirstValue();
        }
    }
    /**
    
            Gets the number of submitted values.
            

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    
            Gets or sets the values.
            

    */
    public var Values : aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        get {
            return try! get_Values();
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.#ctor(Microsoft.Extensions.Primitives.StringValues)
    /**
    
            Creates a new  using .
            

    - Parameter values: The submitted values.
    */
    public init(values : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_ctor_0__1__StringValues(&__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.Extensions.Primitives.StringValues, System.Globalization.CultureInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.#ctor(Microsoft.Extensions.Primitives.StringValues,System.Globalization.CultureInfo)
    /**
    
            Creates a new .
            

    - Parameter values: The submitted values.
    - Parameter culture: The  associated with this value.
    */
    public init(values : aspnetcore.Microsoft.Extensions.Primitives.StringValues, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_ctor_0__2__StringValues_CultureInfo(&__thrown, values.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.Equals(System.Object)
    /**
    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    /**
    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_bool__Equals_0__1__ValueProviderResult(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.ToString
    /**
    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerator<System.String> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.GetEnumerator
    /**
    
            Gets an  for this .
            

    - Returns: An .

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_System_Collections_Generic_IEnumerator_string___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String op_Explicit(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.op_Explicit(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    public class func op_Explicit(result : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_String__op_Explicit_0__1__ValueProviderResult(&__thrown, result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String[] op_Explicit(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.op_Explicit(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    public class func op_Explicit(result : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_StringArray__op_Explicit_0__1__ValueProviderResult(&__thrown, result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult, Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.op_Equality(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    /**
    
            Compares two  objects for equality.
            

    - Parameter x: A .
    - Parameter y: A .
    - Returns: true if the values are equal, otherwise false.

    */
    public class func op_Equality(x : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult, y : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_bool__op_Equality_0__2__ValueProviderResult_ValueProviderResult(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult, Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.op_Inequality(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)
    /**
    
            Compares two  objects for inequality.
            

    - Parameter x: A .
    - Parameter y: A .
    - Returns: false if the values are equal, otherwise true.

    */
    public class func op_Inequality(x : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult, y : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_bool__op_Inequality_0__2__ValueProviderResult_ValueProviderResult(&__thrown, x.get_handle(), y.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.get_Culture
    public func get_Culture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.get_Values
    public func get_Values() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_StringValues__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FirstValue()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.get_FirstValue
    public func get_FirstValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_String__get_FirstValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ValueProviderResult_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // ValueProviderResult


}
// Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
extension Microsoft.AspNetCore.Mvc.ModelBinding.Metadata {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider
    /**
    
            Provider for error messages the model binding system detects.
            

    */
open class ModelBindingMessageProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Func<System.String,System.String> get_MissingBindRequiredValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_MissingBindRequiredValueAccessor
    open func get_MissingBindRequiredValueAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_MissingBindRequiredValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_MissingKeyOrValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_MissingKeyOrValueAccessor
    open func get_MissingKeyOrValueAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string___get_MissingKeyOrValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_MissingRequestBodyRequiredValueAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_MissingRequestBodyRequiredValueAccessor
    open func get_MissingRequestBodyRequiredValueAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string___get_MissingRequestBodyRequiredValueAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueMustNotBeNullAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_ValueMustNotBeNullAccessor
    open func get_ValueMustNotBeNullAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_ValueMustNotBeNullAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String,System.String> get_AttemptedValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_AttemptedValueIsInvalidAccessor
    open func get_AttemptedValueIsInvalidAccessor() throws -> dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string_string___get_AttemptedValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_NonPropertyAttemptedValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_NonPropertyAttemptedValueIsInvalidAccessor
    open func get_NonPropertyAttemptedValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_NonPropertyAttemptedValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_UnknownValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_UnknownValueIsInvalidAccessor
    open func get_UnknownValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_UnknownValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_NonPropertyUnknownValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_NonPropertyUnknownValueIsInvalidAccessor
    open func get_NonPropertyUnknownValueIsInvalidAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string___get_NonPropertyUnknownValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueIsInvalidAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_ValueIsInvalidAccessor
    open func get_ValueIsInvalidAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_ValueIsInvalidAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String,System.String> get_ValueMustBeANumberAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_ValueMustBeANumberAccessor
    open func get_ValueMustBeANumberAccessor() throws -> dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string_string___get_ValueMustBeANumberAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<System.String> get_NonPropertyValueMustBeANumberAccessor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider.get_NonPropertyValueMustBeANumberAccessor
    open func get_NonPropertyValueMustBeANumberAccessor() throws -> dotnet.System.Func_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelBindingMessageProvider_System_Func_string___get_NonPropertyValueMustBeANumberAccessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_1(hndl : __return);
        }
    }
    /**
    
            Error message the model binding system adds when  is of type
             or , value is known, and error is associated
            with a property.
            

    */
    open var AttemptedValueIsInvalidAccessor : dotnet.System.Func_3<dotnet.System.String,dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_AttemptedValueIsInvalidAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when a property with an associated
            BindRequiredAttribute is not bound.
            

    */
    open var MissingBindRequiredValueAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_MissingBindRequiredValueAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when either the key or the value of a
             is bound but not both.
            

    */
    open var MissingKeyOrValueAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_MissingKeyOrValueAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when no value is provided for the request body,
            but a value is required.
            

    */
    open var MissingRequestBodyRequiredValueAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_MissingRequestBodyRequiredValueAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when  is of type
             or , value is known, and error is associated
            with a collection element or parameter.
            

    */
    open var NonPropertyAttemptedValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_NonPropertyAttemptedValueIsInvalidAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when  is of type
             or , value is unknown, and error is associated
            with a collection element or parameter.
            

    */
    open var NonPropertyUnknownValueIsInvalidAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_NonPropertyUnknownValueIsInvalidAccessor();
        }
    }
    /**
    
            Error message HTML and tag helpers add for client-side validation of numeric formats. Visible in the
            browser if the field for a float (for example) collection element or action parameter does not have a
            correctly-formatted value.
            

    */
    open var NonPropertyValueMustBeANumberAccessor : dotnet.System.Func_1<dotnet.System.String> {
        get {
            return try! get_NonPropertyValueMustBeANumberAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when  is of type
             or , value is unknown, and error is associated
            with a property.
            

    */
    open var UnknownValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_UnknownValueIsInvalidAccessor();
        }
    }
    /**
    
            Fallback error message HTML and tag helpers display when a property is invalid but the
            s have null s.
            

    */
    open var ValueIsInvalidAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueIsInvalidAccessor();
        }
    }
    /**
    
            Error message HTML and tag helpers add for client-side validation of numeric formats. Visible in the
            browser if the field for a float (for example) property does not have a correctly-formatted value.
            

    */
    open var ValueMustBeANumberAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueMustBeANumberAccessor();
        }
    }
    /**
    
            Error message the model binding system adds when a null value is bound to a
            non- property.
            

    */
    open var ValueMustNotBeNullAccessor : dotnet.System.Func_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_ValueMustNotBeNullAccessor();
        }
    }
} // ModelBindingMessageProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
// boxed value type
    /**
    
            A key type which identifies a .
            

    */
public final class ModelMetadataIdentity
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets a descriptor for the constructor, or null if this instance
            does not represent a constructor.
            

    */
    public var ConstructorInfo : Optional<dotnet.System.Reflection.ConstructorInfo> {
        get {
            return try! get_ConstructorInfo();
        }
    }
    /**
    
            Gets the  defining the model property represented by the current
            instance, or null if the current instance does not represent a property.
            

    */
    public var ContainerType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ContainerType();
        }
    }
    /**
    
            Gets a value indicating the kind of metadata represented by the current instance.
            

    */
    public var MetadataKind : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
            return try! get_MetadataKind();
        }
    }
    /**
    
            Gets the  represented by the current instance.
            

    */
    public var ModelType : dotnet.System.Type_ {
        get {
            return try! get_ModelType();
        }
    }
    /**
    
            Gets the name of the current instance if it represents a parameter or property, or null if
            the current instance represents a type.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets a descriptor for the parameter, or null if this instance
            does not represent a parameter.
            

    */
    public var ParameterInfo : Optional<dotnet.System.Reflection.ParameterInfo> {
        get {
            return try! get_ParameterInfo();
        }
    }
    /**
    
            Gets a descriptor for the property, or null if this instance
            does not represent a property.
            

    */
    public var PropertyInfo : Optional<dotnet.System.Reflection.PropertyInfo> {
        get {
            return try! get_PropertyInfo();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForType(System.Type)
    /**
    
            Creates a  for the provided model .
            

    - Parameter modelType: The model .
    - Returns: A .

    */
    public class func ForType(modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForType_0__1__Type(&__thrown, modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForProperty(System.Type, System.String, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForProperty(System.Type,System.String,System.Type)
    /**
    
            Creates a  for the provided property.
            

    - Parameter modelType: The model type.
    - Parameter name: The name of the property.
    - Parameter containerType: The container type of the model property.
    - Returns: A .

    */
    public class func ForProperty(modelType : dotnet.System.Type_, name : dotnet.System.String, containerType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForProperty_0__3__Type_String_Type(&__thrown, modelType.get_handle(), name.get_handle(), containerType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForProperty(System.Reflection.PropertyInfo, System.Type, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForProperty(System.Reflection.PropertyInfo,System.Type,System.Type)
    /**
    
            Creates a  for the provided property.
            

    - Parameter modelType: The model type.
    - Parameter propertyInfo: The property.
    - Parameter containerType: The container type of the model property.
    - Returns: A .

    */
    public class func ForProperty(propertyInfo : dotnet.System.Reflection.PropertyInfo, modelType : dotnet.System.Type_, containerType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForProperty_0__3__PropertyInfo_Type_Type(&__thrown, propertyInfo.get_handle(), modelType.get_handle(), containerType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForParameter(System.Reflection.ParameterInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForParameter(System.Reflection.ParameterInfo)
    /**
    
            Creates a  for the provided parameter.
            

    - Parameter parameter: The .
    - Returns: A .

    */
    public class func ForParameter(parameter : dotnet.System.Reflection.ParameterInfo) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForParameter_0__1__ParameterInfo(&__thrown, parameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForParameter(System.Reflection.ParameterInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForParameter(System.Reflection.ParameterInfo,System.Type)
    /**
    
            Creates a  for the provided parameter with the specified
            model type.
            

    - Parameter parameter: The .
    - Parameter modelType: The model type.
    - Returns: A .

    */
    public class func ForParameter(parameter : dotnet.System.Reflection.ParameterInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForParameter_0__2__ParameterInfo_Type(&__thrown, parameter.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity ForConstructor(System.Reflection.ConstructorInfo, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.ForConstructor(System.Reflection.ConstructorInfo,System.Type)
    /**
    
            Creates a  for the provided parameter with the specified
            model type.
            

    - Parameter constructor: The .
    - Parameter modelType: The model type.
    - Returns: A .

    */
    public class func ForConstructor(constructor : dotnet.System.Reflection.ConstructorInfo, modelType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataIdentity__ForConstructor_0__2__ConstructorInfo_Type(&__thrown, constructor.get_handle(), modelType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity(hndl : __return);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
    /**
    */
    public func Equals(other : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_bool__Equals_0__1__ModelMetadataIdentity(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.Equals(System.Object)
    /**
    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_ContainerType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_ContainerType
    public func get_ContainerType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_Type__get_ContainerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_ModelType
    public func get_ModelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_Type__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind get_MetadataKind()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_MetadataKind
    public func get_MetadataKind() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ModelMetadataKind__get_MetadataKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ParameterInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_ParameterInfo
    public func get_ParameterInfo() throws -> Optional<dotnet.System.Reflection.ParameterInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ParameterInfo__get_ParameterInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ParameterInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_PropertyInfo
    public func get_PropertyInfo() throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.ConstructorInfo get_ConstructorInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity.get_ConstructorInfo
    public func get_ConstructorInfo() throws -> Optional<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataIdentity_ConstructorInfo__get_ConstructorInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ConstructorInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ModelMetadataIdentity


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind
    /**
    
            Enumeration for the kinds of 
            

    */
public struct ModelMetadataKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind Type
    /**
    
            Used for  for a .
            

    */
    public static var Type_ : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataKind_get_Type());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind Property
    /**
    
            Used for  for a property.
            

    */
    public static var Property : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataKind_get_Property());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind Parameter
    /**
    
            Used for  for a parameter.
            

    */
    public static var Parameter : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataKind_get_Parameter());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind Constructor
    /**
    
             for a constructor.
            

    */
    public static var Constructor : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind(val: Microsoft_AspNetCore_Mvc_ModelBinding_Metadata_ModelMetadataKind_get_Constructor());
            return __return;
        }
    }
} // ModelMetadataKind


}

// Microsoft.AspNetCore.Mvc.ModelBinding.Validation
extension Microsoft.AspNetCore.Mvc.ModelBinding.Validation {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext
    /**
    
            The context for client-side model validation.
            

    */
open class ClientModelValidationContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientModelValidationContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Create a new instance of .
            

    - Parameter actionContext: The  for validation.
    - Parameter metadata: The  for validation.
    - Parameter metadataProvider: The  to be used in validation.
    - Parameter attributes: The attributes dictionary for the HTML tag being rendered.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, attributes : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientModelValidationContext_ctor_0__4__ActionContext_ModelMetadata_IModelMetadataProvider_System_Collections_Generic_IDictionary_string_string_(&__thrown, actionContext.get_handle(), metadata.get_handle(), metadataProvider.get_handle(), attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientModelValidationContext_System_Collections_Generic_IDictionary_string_string___get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    /**
    
            Gets the attributes dictionary for the HTML tag being rendered.
            

    */
    open var Attributes : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Attributes();
        }
    }
} // ClientModelValidationContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem
    /**
    
            Used to associate validators with  instances
            as part of . An  should
            inspect  and set  and
             as appropriate.
            

    */
open class ClientValidatorItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.#ctor(System.Object)
    /**
    
            Creates a new .
            

    - Parameter validatorMetadata: The .
    */
    public init(validatorMetadata : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_ctor_0__1__Object(&__thrown, validatorMetadata?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_Object__get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator get_Validator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.get_Validator
    open func get_Validator() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_IClientModelValidator__get_Validator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Validator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.set_Validator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator)
    open func set_Validator(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_void__set_Validator_0__1__IClientModelValidator(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value indicating whether or not  can be reused across requests.
            

    */
    open var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Validator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator> {
        get {
            return try! get_Validator();
        }
        set(v) {
            return try! set_Validator(value: v!);
        }
    }
    /**
    
            Gets the metadata associated with the .
            

    */
    open var ValidatorMetadata : Optional<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ClientValidatorItem


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext
    /**
    
            A context for .
            

    */
open class ClientValidatorProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem})
    /**
    
            Creates a new .
            

    - Parameter modelMetadata: The  for the model being validated.
            
    - Parameter items: The list of s.
    */
    public init(modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, items : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorProviderContext_ctor_0__2__ModelMetadata_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem_(&__thrown, modelMetadata.get_handle(), items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorProviderContext_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorProviderContext_System_Collections_Generic_IReadOnlyList_object___get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ClientValidatorItem___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
    }
    /**
    
            Gets the list of  instances. 
            instances should add the appropriate  properties when
            
            is called.
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorItem> {
        get {
            return try! get_Results();
        }
    }
    /**
    
            Gets the validator metadata.
            

    */
    open var ValidatorMetadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ClientValidatorProviderContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator
    /**
    
            Specifies the contract for performing validation in the browser.
            
            MVC's validation system invokes  to gather attributes that apply to the
            rendered HTML. The rendered view may have to reference JavaScript libraries, such as jQuery Unobtrusive Validation,
            to provide client validation based on the presence of these attributes.
            
            

    */
open class IClientModelValidator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddValidation(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator.AddValidation(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext)
    /**
    
            Called to add client-side model validation.
            

    - Parameter context: The .
    */
    open func AddValidation(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator_void__AddValidation_0__1__ClientModelValidationContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IClientModelValidator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider
    /**
    
            Provides a collection of s.
            

    */
open class IClientModelValidatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext)
    /**
    
            Creates set of s by updating
             in .
            

    - Parameter context: The  associated with this call.
    */
    open func CreateValidators(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider_void__CreateValidators_0__1__ClientValidatorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IClientModelValidatorProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator
    /**
    
            Validates a model value.
            

    */
open class IModelValidator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult> Validate(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext)
    /**
    
            Validates the model value.
            

    - Parameter context: The .
    - Returns: 
            A list of  indicating the results of validating the model value.
            

    */
    open func Validate(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidator_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationResult___Validate_0__1__ModelValidationContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IModelValidator


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider
    /**
    
            Provides validators for a model value.
            

    */
open class IModelValidatorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext)
    /**
    
            Creates the validators for .
            

    - Parameter context: The .
    */
    open func CreateValidators(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider_void__CreateValidators_0__1__ModelValidatorProviderContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IModelValidatorProvider


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter
    /**
    
            Contract for attributes that determine whether associated properties should be validated. When the attribute is
            applied to a property, the validation system calls  to determine whether to
            validate that property. When applied to a type, the validation system calls 
            for each property that type defines to determine whether to validate it.
            

    */
open class IPropertyValidationFilter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IPropertyValidationFilter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IPropertyValidationFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ShouldValidateEntry(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter.ShouldValidateEntry(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry)
    /**
    
            Gets an indication whether the  should be validated.
            

    - Parameter entry:  to check.
    - Parameter parentEntry:  containing .
    - Returns: true if  should be validated; false otherwise.

    */
    open func ShouldValidateEntry(entry : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry, parentEntry : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IPropertyValidationFilter_bool__ShouldValidateEntry_0__2__ValidationEntry_ValidationEntry(&__thrown, self.get_handle(), entry.get_handle(), parentEntry.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IPropertyValidationFilter


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy
    /**
    
            Defines a strategy for enumerating the child entries of a model object which should be validated.
            

    */
open class IValidationStrategy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IValidationStrategy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IValidationStrategy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerator<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry> GetChildren(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy.GetChildren(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Object)
    /**
    
            Gets an  containing a  for
            each child entry of the model object to be validated.
            

    - Parameter metadata: The  associated with .
    - Parameter key: The model prefix associated with .
    - Parameter model: The model object.
    - Returns: An .

    */
    open func GetChildren(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, key : dotnet.System.String, model : dotnet.System.Object) throws -> dotnet.System.Collections.Generic.IEnumerator_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IValidationStrategy_System_Collections_Generic_IEnumerator_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry___GetChildren_0__3__ModelMetadata_String_Object(&__thrown, self.get_handle(), metadata.get_handle(), key.get_handle(), model.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
} // IValidationStrategy


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext
    /**
    
            A context object for .
            

    */
open class ModelValidationContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Object,System.Object)
    /**
    
            Create a new instance of .
            

    - Parameter actionContext: The  for validation.
    - Parameter modelMetadata: The  for validation.
    - Parameter metadataProvider: The  to be used in validation.
    - Parameter container: The model container.
    - Parameter model: The model to be validated.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, container : Optional<dotnet.System.Object>, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContext_ctor_0__5__ActionContext_ModelMetadata_IModelMetadataProvider_Object_Object(&__thrown, actionContext.get_handle(), modelMetadata.get_handle(), metadataProvider.get_handle(), container?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContext_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Container()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContext.get_Container
    open func get_Container() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContext_Object__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the model container object.
            

    */
    open var Container : Optional<dotnet.System.Object> {
        get {
            return try! get_Container();
        }
    }
    /**
    
            Gets the model object.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
} // ModelValidationContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase
    /**
    
            A common base class for  and .
            

    */
open class ModelValidationContextBase
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContextBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Instantiates a new .
            

    - Parameter actionContext: The  for this context.
    - Parameter modelMetadata: The  for this model.
    - Parameter metadataProvider: The  to be used by this context.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContextBase_ctor_0__3__ActionContext_ModelMetadata_IModelMetadataProvider(&__thrown, actionContext.get_handle(), modelMetadata.get_handle(), metadataProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase.get_ActionContext
    open func get_ActionContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContextBase_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContextBase_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationContextBase.get_MetadataProvider
    open func get_MetadataProvider() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationContextBase_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ActionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
            Gets the .
            

    */
    open var MetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider {
        get {
            return try! get_MetadataProvider();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
    }
} // ModelValidationContextBase


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult
    /**
    
            The result of model validation.
            

    */
open class ModelValidationResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter memberName: The name of the entry on which validation was performed.
    - Parameter message: The validation message.
    */
    public init(memberName : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationResult_ctor_0__2__String_String(&__thrown, memberName?.get_handle() ?? nil, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_MemberName()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult.get_MemberName
    open func get_MemberName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationResult_String__get_MemberName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidationResult.get_Message
    open func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidationResult_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the name of the entry on which validation was performed.
            

    */
    open var MemberName : dotnet.System.String {
        get {
            return try! get_MemberName();
        }
    }
    /**
    
            Gets the validation message.
            

    */
    open var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
} // ModelValidationResult


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext
    /**
    
            A context for .
            

    */
open class ModelValidatorProviderContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem})
    /**
    
            Creates a new .
            

    - Parameter modelMetadata: The .
    - Parameter items: The list of s.
    */
    public init(modelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, items : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_ctor_0__2__ModelMetadata_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_(&__thrown, modelMetadata.get_handle(), items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext.set_ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_ModelMetadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_void__set_ModelMetadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Object> get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_System_Collections_Generic_IReadOnlyList_object___get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem> get_Results()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext.get_Results
    open func get_Results() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ModelValidatorProviderContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem___get_Results_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
        set(v) {
            return try! set_ModelMetadata(value: v);
        }
    }
    /**
    
            Gets the list of  instances.  instances
            should add the appropriate  properties when
            
            is called.
            

    */
    open var Results : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem> {
        get {
            return try! get_Results();
        }
    }
    /**
    
            Gets the validator metadata.
            

    */
    open var ValidatorMetadata : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Object> {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ModelValidatorProviderContext


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry
// boxed value type
    /**
    
            Contains data needed for validating a child entry of a model object. See .
            

    */
public final class ValidationEntry
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            The model prefix associated with .
            

    */
    public var Key : dotnet.System.String {
        get {
            return try! get_Key();
        }
    }
    /**
    
            The  associated with .
            

    */
    public var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            The model object.
            

    */
    public var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Object)
    /**
    
            Creates a new .
            

    - Parameter metadata: The  associated with .
    - Parameter key: The model prefix associated with .
    - Parameter model: The model object.
    */
    public init(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, key : dotnet.System.String, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_ctor_0__3__ModelMetadata_String_Object(&__thrown, metadata.get_handle(), key.get_handle(), model?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.String, System.Func<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.String,System.Func{System.Object})
    /**
    
            Creates a new .
            

    - Parameter metadata: The  associated with the .
    - Parameter key: The model prefix associated with the .
    - Parameter modelAccessor: A delegate that will return the .
    */
    public init(metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, key : dotnet.System.String, modelAccessor : dotnet.System.Func_1<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_ctor_0__3__ModelMetadata_String_System_Func_object_(&__thrown, metadata.get_handle(), key.get_handle(), modelAccessor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry.get_Key
    public func get_Key() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry.get_Metadata
    public func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry.get_Model
    public func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationEntry_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ValidationEntry


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary
    /**
    
            Used for tracking validation state to customize validation behavior for a model object.
            

    */
open class ValidationStateDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry})
    /**
    */
    open /* method final */ func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Object,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_void__Add_0__1__System_Collections_Generic_KeyValuePair_object_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Object, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Add(System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry)
    /**
    */
    open /* method final */ func Add(key : dotnet.System.Object, value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_void__Add_0__2__Object_ValidationStateEntry(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry})
    /**
    */
    open /* method final */ func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Object,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_object_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.ContainsKey(System.Object)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__ContainsKey_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>[], System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Object,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_object_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.GetEnumerator
    /**
    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Object,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_object_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry})
    /**
    */
    open /* method final */ func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.Object,aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_object_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.Remove(System.Object)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.Object, ref Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.TryGetValue(System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.Object, value : inout aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__TryGetValue_0__2__Object_outValidationStateEntry(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Object> get_Keys()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_System_Collections_Generic_ICollection_object___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry> get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_System_Collections_Generic_ICollection_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry get_Item(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.Object) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_ValidationStateEntry__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary.set_Item(System.Object,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry)
    open func set_Item(key : dotnet.System.Object, value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateDictionary_void__set_Item_0__2__Object_ValidationStateEntry(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        get {
            return try! get_Keys();
        }
    }
    /**
    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry> {
        get {
            return try! get_Values();
        }
    }
} // ValidationStateDictionary


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry
    /**
    
            An entry in a . Records state information to override the default
            behavior of validation for an object.
            

    */
open class ValidationStateEntry
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.get_Key
    open func get_Key() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Key(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.set_Key(System.String)
    open func set_Key(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_void__set_Key_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.get_Metadata
    open func get_Metadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Metadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.set_Metadata(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    open func set_Metadata(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_void__set_Metadata_0__1__ModelMetadata(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressValidation()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.get_SuppressValidation
    open func get_SuppressValidation() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_bool__get_SuppressValidation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressValidation(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.set_SuppressValidation(System.Boolean)
    open func set_SuppressValidation(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_void__set_SuppressValidation_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy get_Strategy()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.get_Strategy
    open func get_Strategy() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_IValidationStrategy__get_Strategy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Strategy(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry.set_Strategy(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy)
    open func set_Strategy(value : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidationStateEntry_void__set_Strategy_0__1__IValidationStrategy(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the model prefix associated with the entry.
            

    */
    open var Key : dotnet.System.String {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v);
        }
    }
    /**
    
            Gets or sets the  associated with the entry.
            

    */
    open var Metadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_Metadata();
        }
        set(v) {
            return try! set_Metadata(value: v);
        }
    }
    /**
    
            Gets or sets an  for enumerating child entries of the associated
            model object.
            

    */
    open var Strategy : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy {
        get {
            return try! get_Strategy();
        }
        set(v) {
            return try! set_Strategy(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether the associated model object should be validated.
            

    */
    open var SuppressValidation : Bool {
        get {
            return try! get_SuppressValidation();
        }
        set(v) {
            return try! set_SuppressValidation(value: v);
        }
    }
} // ValidationStateEntry


// type: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem
    /**
    
            Used to associate validators with  instances
            as part of . An  should
            inspect  and set  and
             as appropriate.
            

    */
open class ValidatorItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.#ctor(System.Object)
    /**
    
            Creates a new .
            

    - Parameter validatorMetadata: The .
    */
    public init(validatorMetadata : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_ctor_0__1__Object(&__thrown, validatorMetadata.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_ValidatorMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.get_ValidatorMetadata
    open func get_ValidatorMetadata() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_Object__get_ValidatorMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator get_Validator()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.get_Validator
    open func get_Validator() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_IModelValidator__get_Validator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Validator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.set_Validator(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator)
    open func set_Validator(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_void__set_Validator_0__1__IModelValidator(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.get_IsReusable
    open func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsReusable(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorItem.set_IsReusable(System.Boolean)
    open func set_IsReusable(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_Validation_ValidatorItem_void__set_IsReusable_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value indicating whether or not  can be reused across requests.
            

    */
    open var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
        set(v) {
            return try! set_IsReusable(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Validator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator> {
        get {
            return try! get_Validator();
        }
        set(v) {
            return try! set_Validator(value: v!);
        }
    }
    /**
    
            Gets the metadata associated with the .
            

    */
    open var ValidatorMetadata : dotnet.System.Object {
        get {
            return try! get_ValidatorMetadata();
        }
    }
} // ValidatorItem


}


// Microsoft.AspNetCore.Mvc.Routing
extension Microsoft.AspNetCore.Mvc.Routing {
// type: Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo
    /**
    
            Represents the routing information for an action that is attribute routed.
            

    */
open class AttributeRouteInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Template()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.get_Template
    open func get_Template() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_String__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Template(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.set_Template(System.String)
    open func set_Template(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_void__set_Template_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressLinkGeneration()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.get_SuppressLinkGeneration
    open func get_SuppressLinkGeneration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_bool__get_SuppressLinkGeneration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressLinkGeneration(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.set_SuppressLinkGeneration(System.Boolean)
    open func set_SuppressLinkGeneration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_void__set_SuppressLinkGeneration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressPathMatching()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.get_SuppressPathMatching
    open func get_SuppressPathMatching() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_bool__get_SuppressPathMatching_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressPathMatching(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo.set_SuppressPathMatching(System.Boolean)
    open func set_SuppressPathMatching(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_AttributeRouteInfo_void__set_SuppressPathMatching_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the name of the route associated with a given action. This property can be used
            to generate a link by referring to the route by name instead of attempting to match a
            route by provided route data.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets the order of the route associated with a given action. This property determines
            the order in which routes get executed. Routes with a lower order value are tried first. In case a route
            doesn't specify a value, it gets a default order of 0.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the route entry associated with this model participates in link generation.
            

    */
    open var SuppressLinkGeneration : Bool {
        get {
            return try! get_SuppressLinkGeneration();
        }
        set(v) {
            return try! set_SuppressLinkGeneration(value: v);
        }
    }
    /**
    
            Gets or sets a value that determines if the route entry associated with this model participates in path matching (inbound routing).
            

    */
    open var SuppressPathMatching : Bool {
        get {
            return try! get_SuppressPathMatching();
        }
        set(v) {
            return try! set_SuppressPathMatching(value: v);
        }
    }
    /**
    
            The route template. May be  if the action has no attribute routes.
            

    */
    open var Template : Optional<dotnet.System.String> {
        get {
            return try! get_Template();
        }
        set(v) {
            return try! set_Template(value: v!);
        }
    }
} // AttributeRouteInfo


// type: Microsoft.AspNetCore.Mvc.Routing.UrlActionContext
    /**
    
            Context object to be used for the URLs that  generates.
            

    */
open class UrlActionContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Action
    open func get_Action() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_String__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Action(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Action(System.String)
    open func set_Action(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Action_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Controller
    open func get_Controller() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_String__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Controller(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Controller(System.String)
    open func set_Controller(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Controller_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Values
    open func get_Values() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_Object__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Values(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Values(System.Object)
    open func set_Values(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Values_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Protocol
    open func get_Protocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Protocol(System.String)
    open func set_Protocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Host
    open func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Host(System.String)
    open func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlActionContext.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlActionContext_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the action method that  uses to generate URLs.
            

    */
    open var Action : Optional<dotnet.System.String> {
        get {
            return try! get_Action();
        }
        set(v) {
            return try! set_Action(value: v!);
        }
    }
    /**
    
            The name of the controller that  uses to generate URLs.
            

    */
    open var Controller : Optional<dotnet.System.String> {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v!);
        }
    }
    /**
    
            The fragment for the URLs that  generates.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            The host name for the URLs that  generates.
            

    */
    open var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    
            The protocol for the URLs that  generates,
            such as "http" or "https"
            

    */
    open var Protocol_ : Optional<dotnet.System.String> {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v!);
        }
    }
    /**
    
            The object that contains the route values that 
            uses to generate URLs.
            

    */
    open var Values : Optional<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
        set(v) {
            return try! set_Values(value: v!);
        }
    }
} // UrlActionContext


// type: Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext
    /**
    
            Context object to be used for the URLs that  generates.
            

    */
open class UrlRouteContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.get_Values
    open func get_Values() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_Object__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Values(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.set_Values(System.Object)
    open func set_Values(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_void__set_Values_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.get_Protocol
    open func get_Protocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.set_Protocol(System.String)
    open func set_Protocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.get_Host
    open func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.set_Host(System.String)
    open func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Routing_UrlRouteContext_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The fragment for the URLs that  generates.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            The host name for the URLs that  generates.
            

    */
    open var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    
            The protocol for the URLs that  generates,
            such as "http" or "https"
            

    */
    open var Protocol_ : Optional<dotnet.System.String> {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v!);
        }
    }
    /**
    
            The name of the route that  uses to generate URLs.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            The object that contains the route values that 
            uses to generate URLs.
            

    */
    open var Values : Optional<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
        set(v) {
            return try! set_Values(value: v!);
        }
    }
} // UrlRouteContext


}




public protocol Microsoft_AspNetCore_Mvc_Abstractions_IActionDescriptorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Abstractions_IActionInvoker
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Abstractions_IActionInvokerProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraint
    :
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintFactory
    :
    Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ActionConstraints_IActionConstraintProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ApiExplorer_IApiDescriptionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Authorization_IAllowAnonymousFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IActionFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAlwaysRunResultFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IResultFilter
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncAlwaysRunResultFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncAuthorizationFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncExceptionFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncResourceFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAsyncResultFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IAuthorizationFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IExceptionFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IFilterContainer
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IFilterFactory
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IFilterProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IResourceFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Filters_IResultFilter
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_Formatters_IInputFormatter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Formatters_IInputFormatterExceptionPolicy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Formatters_IOutputFormatter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_IActionResult
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_IUrlHelper
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IBinderTypeProviderMetadata
    :
    Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IBindingSourceMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IModelBinderProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IModelNameProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IPropertyFilterProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IRequestPredicateProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IValueProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_IValueProviderFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IModelValidatorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IPropertyValidationFilter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IValidationStrategy
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD T GetProperty<T>(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)
// TODO COPE extension method (unused generic param) T GetProperty<T>(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)

// EXTENSION METHOD void SetProperty<T>(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, T)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
    public func SetProperty<UT : SGBridgeGenericValue>(value : UT) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.SetProperty(actionDescriptor: self, value: value);
    }
}

