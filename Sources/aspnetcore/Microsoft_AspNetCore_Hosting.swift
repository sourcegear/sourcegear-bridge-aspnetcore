// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Hosting
extension Microsoft.AspNetCore.Hosting {
// type: Microsoft.AspNetCore.Hosting.DelegateStartup
    /**
    
            Used for initializing services and middlewares used by an application.
            

    */
open class DelegateStartup
    :
    aspnetcore.Microsoft.AspNetCore.Hosting.StartupBase_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_DelegateStartup_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<Microsoft.Extensions.DependencyInjection.IServiceCollection>, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.DelegateStartup.#ctor(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Creates a new  instance.
            

    - Parameter factory: A factory for creating  instances.
    - Parameter configureApp: An  for configuring the application.
    */
    public init(factory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>, configureApp : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_DelegateStartup_ctor_0__2__Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, factory.get_handle(), configureApp.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.DelegateStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Configures the  with the initialized .
            

    - Parameter app: The .
    */
    open override func Configure(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_DelegateStartup_void__Configure_0__1__IApplicationBuilder(&__thrown, self.get_handle(), app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DelegateStartup


// type: Microsoft.AspNetCore.Hosting.StartupBase
    /**
    
            Base class for initializing services and middlewares used by an application.
            

    */
open class StartupBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_IStartup
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_StartupBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Configures the application.
            

    - Parameter app: An  for the app to configure.
    */
    open func Configure(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_StartupBase_void__Configure_0__1__IApplicationBuilder(&__thrown, self.get_handle(), app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Register services into the .
            

    - Parameter services: The  to add the services to.
    */
    open func ConfigureServices(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_StartupBase_void__ConfigureServices_0__1__IServiceCollection(&__thrown, self.get_handle(), services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IServiceProvider CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Creates an  instance for a given .
            

    - Parameter services: The  to add the services to.
    - Returns: The .

    */
    open func CreateServiceProvider(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_StartupBase_IServiceProvider__CreateServiceProvider_0__1__IServiceCollection(&__thrown, self.get_handle(), services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
} // StartupBase


// type: Microsoft.AspNetCore.Hosting.StartupBase`1
    /**
    
            Base class for initializing services and middlewares used for configuring a .
            

    */
open class StartupBase_1<TBuilder : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Hosting.StartupBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_StartupBase_1_get_type_handle(TBuilder.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{`0})
    /**
    
            Constructor for StartupBase class.
            

    - Parameter factory: A factory used to generate  instances.
    */
    public init(factory : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceProviderFactory_1<TBuilder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_StartupBase_1_ctor_0__1__Microsoft_Extensions_DependencyInjection_IServiceProviderFactory_TBuilder_(TBuilder.get_type_handle(), &__thrown, factory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IServiceProvider CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase`1.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Creates an  instance for a given .
            

    - Parameter services: The  to add the services to.
    - Returns: The .

    */
    open override func CreateServiceProvider(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_StartupBase_1_IServiceProvider__CreateServiceProvider_0__1__IServiceCollection(TBuilder.get_type_handle(), &__thrown, self.get_handle(), services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // void ConfigureContainer(TBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.StartupBase`1.ConfigureContainer(`0)
    /**
    
            Sets up the service container.
            

    - Parameter builder: The builder associated with the container to configure.
    */
    open func ConfigureContainer(builder : TBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_StartupBase_1_void__ConfigureContainer_0__1__TBuilder(TBuilder.get_type_handle(), &__thrown, self.get_handle(), builder.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // StartupBase_1


// type: Microsoft.AspNetCore.Hosting.WebHostBuilder
    /**
    
            A builder for 
            

    */
open class WebHostBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_IWebHostBuilder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_WebHostBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_WebHostBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetSetting(System.String)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.GetSetting(System.String)
    /**
    
            Get the setting value from the configuration.
            

    - Parameter key: The key of the setting to look up.
    - Returns: The value the setting currently contains.

    */
    open /* method final */ func GetSetting(key : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_String__GetSetting_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseSetting(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.UseSetting(System.String,System.String)
    /**
    
            Add or replace a setting in the configuration.
            

    - Parameter key: The key of the setting to add or replace.
    - Parameter value: The value of the setting to add or replace.
    - Returns: The .

    */
    open /* method final */ func UseSetting(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_IWebHostBuilder__UseSetting_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Adds a delegate for configuring additional services for the host or web application. This may be called
            multiple times.
            

    - Parameter configureServices: A delegate for configuring the .
    - Returns: The .

    */
    open /* method final */ func ConfigureServices(configureServices : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open /* method final */ func ConfigureServices(configureServices : @escaping (aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureServices(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.ConfigureServices(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})
    /**
    
            Adds a delegate for configuring additional services for the host or web application. This may be called
            multiple times.
            

    - Parameter configureServices: A delegate for configuring the .
    - Returns: The .

    */
    open /* method final */ func ConfigureServices(configureServices : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_IWebHostBuilder__ConfigureServices_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_DependencyInjection_IServiceCollection_(&__thrown, self.get_handle(), configureServices.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open /* method final */ func ConfigureServices(configureServices : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureServices = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection>(configureServices);
        return try ConfigureServices(configureServices: del_configureServices);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    
            Adds a delegate for configuring the  that will construct an .
            

    - Parameter configureDelegate: The delegate for configuring the  that will be used to construct an .
    - Returns: The .

    */
    open /* method final */ func ConfigureAppConfiguration(configureDelegate : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_IWebHostBuilder__ConfigureAppConfiguration_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, self.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open /* method final */ func ConfigureAppConfiguration(configureDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(configureDelegate: del_configureDelegate);
    }
    // Microsoft.AspNetCore.Hosting.IWebHost Build()
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilder.Build
    /**
    
            Builds the required services and an  which hosts a web application.
            

    */
    open /* method final */ func Build() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilder_IWebHost__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl : __return);
        }
    }
} // WebHostBuilder


// type: Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions
public struct WebHostBuilderExtensions {
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Specify the startup method to be used to configure the web application.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configureApp: The delegate that configures the .
    - Returns: The .

    */
    public static func Configure(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureApp : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__Configure_0__2__IWebHostBuilder_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, hostBuilder.get_handle(), configureApp.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Configure(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureApp : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureApp = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configureApp);
        return try Configure(hostBuilder: hostBuilder, configureApp: del_configureApp);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Specify the startup method to be used to configure the web application.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configureApp: The delegate that configures the .
    - Returns: The .

    */
    public static func Configure(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureApp : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__Configure_0__2__IWebHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, hostBuilder.get_handle(), configureApp.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Configure(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureApp : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureApp = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configureApp);
        return try Configure(hostBuilder: hostBuilder, configureApp: del_configureApp);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Func<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,TStartup>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Func{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,``0})
    /**
    
            Specify a factory that creates the startup instance to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter startupFactory: A delegate that specifies a factory for the startup class.
    - Returns: The .

    */
    public static func UseStartup<UTStartup : SGBridgeGenericValue>(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, startupFactory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__UseStartup_1__2__IWebHostBuilder_System_Func_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_UTStartup_(UTStartup.get_type_handle(), &__thrown, hostBuilder.get_handle(), startupFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseStartup<UTStartup : SGBridgeGenericValue>(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, startupFactory : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext) throws -> UTStartup) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_startupFactory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>(startupFactory);
        return try UseStartup(hostBuilder: hostBuilder, startupFactory: del_startupFactory);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Type)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type)
    /**
    
            Specify the startup type to be used by the web host.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter startupType: The  to be used.
    - Returns: The .

    */
    public static func UseStartup(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, startupType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__UseStartup_0__2__IWebHostBuilder_Type(&__thrown, hostBuilder.get_handle(), startupType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})
    /**
    
            Configures the default service provider
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configure: A callback used to configure the  for the default .
    - Returns: The .

    */
    public static func UseDefaultServiceProvider(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__UseDefaultServiceProvider_0__2__IWebHostBuilder_System_Action_Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_(&__thrown, hostBuilder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseDefaultServiceProvider(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configure : @escaping (aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>(configure);
        return try UseDefaultServiceProvider(hostBuilder: hostBuilder, configure: del_configure);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})
    /**
    
            Configures the default service provider
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configure: A callback used to configure the  for the default .
    - Returns: The .

    */
    public static func UseDefaultServiceProvider(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configure : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__UseDefaultServiceProvider_0__2__IWebHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_DependencyInjection_ServiceProviderOptions_(&__thrown, hostBuilder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseDefaultServiceProvider(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>(configure);
        return try UseDefaultServiceProvider(hostBuilder: hostBuilder, configure: del_configure);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})
    /**
    
            Adds a delegate for configuring the  that will construct an .
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configureDelegate: The delegate for configuring the  that will be used to construct an .
    - Returns: The .

    */
    public static func ConfigureAppConfiguration(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureDelegate : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__ConfigureAppConfiguration_0__2__IWebHostBuilder_System_Action_Microsoft_Extensions_Configuration_IConfigurationBuilder_(&__thrown, hostBuilder.get_handle(), configureDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureAppConfiguration(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureDelegate : @escaping (aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try ConfigureAppConfiguration(hostBuilder: hostBuilder, configureDelegate: del_configureDelegate);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.Logging.ILoggingBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})
    /**
    
            Adds a delegate for configuring the provided . This may be called multiple times.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configureLogging: The delegate that configures the .
    - Returns: The .

    */
    public static func ConfigureLogging(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureLogging : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__ConfigureLogging_0__2__IWebHostBuilder_System_Action_Microsoft_Extensions_Logging_ILoggingBuilder_(&__thrown, hostBuilder.get_handle(), configureLogging.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureLogging(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureLogging : @escaping (aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureLogging = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>(configureLogging);
        return try ConfigureLogging(hostBuilder: hostBuilder, configureLogging: del_configureLogging);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})
    /**
    
            Adds a delegate for configuring the provided . This may be called multiple times.
            

    - Parameter hostBuilder: The  to configure.
    - Parameter configureLogging: The delegate that configures the .
    - Returns: The .

    */
    public static func ConfigureLogging(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureLogging : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__ConfigureLogging_0__2__IWebHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_Extensions_Logging_ILoggingBuilder_(&__thrown, hostBuilder.get_handle(), configureLogging.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureLogging(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureLogging : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureLogging = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>(configureLogging);
        return try ConfigureLogging(hostBuilder: hostBuilder, configureLogging: del_configureLogging);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStaticWebAssets(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStaticWebAssets(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
    /**
    
            Configures the  to use static web assets
            defined by referenced projects and packages.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func UseStaticWebAssets(builder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderExtensions_IWebHostBuilder__UseStaticWebAssets_0__1__IWebHostBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
} // WebHostBuilderExtensions


// type: Microsoft.AspNetCore.Hosting.WebHostExtensions
public struct WebHostExtensions {
    // System.Threading.Tasks.Task StopAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostExtensions.StopAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.TimeSpan)
    /**
    
            Attempts to gracefully stop the host with the given timeout.
            

    - Parameter host: 
    - Parameter timeout: The timeout for stopping gracefully. Once expired the
            server may terminate any remaining active connections.
    - Returns: A  that completes when the  stops.

    */
    public static func StopAsync(host : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost, timeout : dotnet.System.TimeSpan) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostExtensions_Task__StopAsync_0__2__IWebHost_TimeSpan(&__thrown, host.get_handle(), timeout.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // void WaitForShutdown(Microsoft.AspNetCore.Hosting.IWebHost)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdown(Microsoft.AspNetCore.Hosting.IWebHost)
    /**
    
            Block the calling thread until shutdown is triggered via Ctrl+C or SIGTERM.
            

    - Parameter host: The running .
    */
    public static func WaitForShutdown(host : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_WebHostExtensions_void__WaitForShutdown_0__1__IWebHost(&__thrown, host.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WaitForShutdownAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdownAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)
    /**
    
            Returns a Task that completes when shutdown is triggered via the given token, Ctrl+C or SIGTERM.
            

    - Parameter host: The running .
    - Parameter token: The token to trigger shutdown.
    - Returns: A  that completes when shutdown is triggered via Ctrl+C or SIGTERM.

    */
    public static func WaitForShutdownAsync(host : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost, token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostExtensions_Task__WaitForShutdownAsync_0__2__IWebHost_CancellationToken(&__thrown, host.get_handle(), token.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // void Run(Microsoft.AspNetCore.Hosting.IWebHost)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(Microsoft.AspNetCore.Hosting.IWebHost)
    /**
    
            Runs a web application and block the calling thread until host shutdown.
            

    - Parameter host: The  to run.
    */
    public static func Run(host : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_WebHostExtensions_void__Run_0__1__IWebHost(&__thrown, host.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task RunAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)
    /**
    
            Runs a web application and returns a Task that only completes when the token is triggered or shutdown is triggered.
            

    - Parameter host: The  to run.
    - Parameter token: The token to trigger shutdown.
    */
    public static func RunAsync(host : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost, token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostExtensions_Task__RunAsync_0__2__IWebHost_CancellationToken(&__thrown, host.get_handle(), token.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // WebHostExtensions


}
// Microsoft.AspNetCore.Hosting.Builder
extension Microsoft.AspNetCore.Hosting.Builder {
// type: Microsoft.AspNetCore.Hosting.Builder.ApplicationBuilderFactory
    /**
    
            A factory for creating  instances.
            

    */
open class ApplicationBuilderFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_Builder_IApplicationBuilderFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_Builder_ApplicationBuilderFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Hosting.Builder.ApplicationBuilderFactory.#ctor(System.IServiceProvider)
    /**
    
            Initialize a new factory instance with an .
            

    - Parameter serviceProvider: The  used to resolve dependencies and initialize components.
    */
    public init(serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_Builder_ApplicationBuilderFactory_ctor_0__1__IServiceProvider(&__thrown, serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder CreateBuilder(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Hosting.Builder.ApplicationBuilderFactory.CreateBuilder(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Create an  builder given a .
            

    - Parameter serverFeatures: An  of HTTP features.
    - Returns: An  configured with .

    */
    open /* method final */ func CreateBuilder(serverFeatures : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Builder_ApplicationBuilderFactory_IApplicationBuilder__CreateBuilder_0__1__IFeatureCollection(&__thrown, self.get_handle(), serverFeatures.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // ApplicationBuilderFactory


// type: Microsoft.AspNetCore.Hosting.Builder.IApplicationBuilderFactory
    /**
    
            Provides an interface for implementing a factory that produces  instances.
            

    */
open class IApplicationBuilderFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_Builder_IApplicationBuilderFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_Builder_IApplicationBuilderFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Builder.IApplicationBuilder CreateBuilder(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Hosting.Builder.IApplicationBuilderFactory.CreateBuilder(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Create an  builder given a 
            

    - Parameter serverFeatures: An  of HTTP features.
    - Returns: An  configured with .

    */
    open func CreateBuilder(serverFeatures : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Builder_IApplicationBuilderFactory_IApplicationBuilder__CreateBuilder_0__1__IFeatureCollection(&__thrown, self.get_handle(), serverFeatures.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // IApplicationBuilderFactory


}

// Microsoft.AspNetCore.Hosting.Infrastructure
extension Microsoft.AspNetCore.Hosting.Infrastructure {
// type: Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsConfigureWebHost
    /**
    
            An interface implemented by IWebHostBuilders that handle 
            directly.
            

    */
open class ISupportsConfigureWebHost
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsConfigureWebHost
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsConfigureWebHost_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHost(System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>, System.Action<Microsoft.Extensions.Hosting.WebHostBuilderOptions>)
// docid: M:Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsConfigureWebHost.ConfigureWebHost(System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder},System.Action{Microsoft.Extensions.Hosting.WebHostBuilderOptions})
    /**
    
            Adds and configures an ASP.NET Core web application.
            

    - Parameter configure: The delegate that configures the .
    - Parameter configureOptions: The delegate that configures the .
    - Returns: The .

    */
    open func ConfigureWebHost(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsConfigureWebHost_IHostBuilder__ConfigureWebHost_0__2__System_Action_Microsoft_AspNetCore_Hosting_IWebHostBuilder__System_Action_Microsoft_Extensions_Hosting_WebHostBuilderOptions_(&__thrown, self.get_handle(), configure.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func ConfigureWebHost(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> Void, configureOptions : @escaping (aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>(configureOptions);
        return try ConfigureWebHost(configure: del_configure, configureOptions: del_configureOptions);
    }
} // ISupportsConfigureWebHost


// type: Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup
    /**
    
            An interface implemented by IWebHostBuilders that handle ,
             and 
            directly.
            

    */
open class ISupportsStartup
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Specify the startup method to be used to configure the web application.
            

    - Parameter configure: The delegate that configures the .
    - Returns: The .

    */
    open func Configure(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup_IWebHostBuilder__Configure_0__1__System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, self.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func Configure(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configure);
        return try Configure(configure: del_configure);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.Configure(System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Specify the startup method to be used to configure the web application.
            

    - Parameter configure: The delegate that configures the .
    - Returns: The .

    */
    open func Configure(configure : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup_IWebHostBuilder__Configure_0__1__System_Action_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, self.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func Configure(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configure);
        return try Configure(configure: del_configure);
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(System.Type)
// docid: M:Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.UseStartup(System.Type)
    /**
    
            Specify the startup type to be used by the web host.
            

    - Parameter startupType: The  to be used.
    - Returns: The .

    */
    open func UseStartup(startupType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup_IWebHostBuilder__UseStartup_0__1__Type(&__thrown, self.get_handle(), startupType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(System.Func<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,TStartup>)
// docid: M:Microsoft.AspNetCore.Hosting.Infrastructure.ISupportsStartup.UseStartup``1(System.Func{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,``0})
    /**
    
            Specify a factory that creates the startup instance to be used by the web host.
            

    - Parameter startupFactory: A delegate that specifies a factory for the startup class.
    - Returns: The .

    */
    open func UseStartup<UTStartup : SGBridgeGenericValue>(startupFactory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup_IWebHostBuilder__UseStartup_1__1__System_Func_Microsoft_AspNetCore_Hosting_WebHostBuilderContext_UTStartup_(UTStartup.get_type_handle(), &__thrown, self.get_handle(), startupFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    open func UseStartup<UTStartup : SGBridgeGenericValue>(startupFactory : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext) throws -> UTStartup) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_startupFactory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>(startupFactory);
        return try UseStartup(startupFactory: del_startupFactory);
    }
} // ISupportsStartup


}

// Microsoft.AspNetCore.Hosting.Server
// Microsoft.AspNetCore.Hosting.Server.Features
extension Microsoft.AspNetCore.Hosting.Server.Features {
// type: Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature
    /**
    
            Specifies the address used by the server.
            

    */
open class ServerAddressesFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Hosting_Server_Features_IServerAddressesFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_Server_Features_ServerAddressesFeature_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_Server_Features_ServerAddressesFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Addresses()
// docid: M:Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature.get_Addresses
    open /* method final */ func get_Addresses() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Server_Features_ServerAddressesFeature_System_Collections_Generic_ICollection_string___get_Addresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_PreferHostingUrls()
// docid: M:Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature.get_PreferHostingUrls
    open /* method final */ func get_PreferHostingUrls() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_Server_Features_ServerAddressesFeature_bool__get_PreferHostingUrls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreferHostingUrls(bool)
// docid: M:Microsoft.AspNetCore.Hosting.Server.Features.ServerAddressesFeature.set_PreferHostingUrls(System.Boolean)
    open /* method final */ func set_PreferHostingUrls(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_Server_Features_ServerAddressesFeature_void__set_PreferHostingUrls_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Addresses : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Addresses();
        }
    }
    /**
    */
    public var PreferHostingUrls : Bool {
        get {
            return try! get_PreferHostingUrls();
        }
        set(v) {
            return try! set_PreferHostingUrls(value: v);
        }
    }
} // ServerAddressesFeature


}


// Microsoft.AspNetCore.Hosting.StaticWebAssets
extension Microsoft.AspNetCore.Hosting.StaticWebAssets {
// type: Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsLoader
    /**
    
            Loader for static web assets
            

    */
open class StaticWebAssetsLoader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Hosting_StaticWebAssets_StaticWebAssetsLoader_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsLoader.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Hosting_StaticWebAssets_StaticWebAssetsLoader_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void UseStaticWebAssets(Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.AspNetCore.Hosting.StaticWebAssets.StaticWebAssetsLoader.UseStaticWebAssets(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)
    /**
    
            Configure the  to use static web assets.
            

    - Parameter environment: The application .
    - Parameter configuration: The host .
    */
    open class func UseStaticWebAssets(environment : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment, configuration : aspnetcore.Microsoft.Extensions.Configuration.IConfiguration) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Hosting_StaticWebAssets_StaticWebAssetsLoader_void__UseStaticWebAssets_0__2__IWebHostEnvironment_IConfiguration(&__thrown, environment.get_handle(), configuration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // StaticWebAssetsLoader


}


// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.DefaultHttpContextFactory
    /**
    
            A factory for creating  instances.
            

    */
open class DefaultHttpContextFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_IHttpContextFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_DefaultHttpContextFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContextFactory.#ctor(System.IServiceProvider)
    /**
    
            Creates a factory for creating  instances.
            

    - Parameter serviceProvider: The  to be used when retrieving services.
    */
    public init(serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_DefaultHttpContextFactory_ctor_0__1__IServiceProvider(&__thrown, serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.HttpContext Create(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContextFactory.Create(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
    /**
    
            Create an  instance given an .
            

    - Parameter featureCollection: 
    - Returns: An initialized  object.

    */
    open /* method final */ func Create(featureCollection : aspnetcore.Microsoft.AspNetCore.Http.Features.IFeatureCollection) throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_DefaultHttpContextFactory_HttpContext__Create_0__1__IFeatureCollection(&__thrown, self.get_handle(), featureCollection.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // void Dispose(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Http.DefaultHttpContextFactory.Dispose(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Clears the current .
            

    */
    open /* method final */ func Dispose(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_DefaultHttpContextFactory_void__Dispose_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DefaultHttpContextFactory


}


// Microsoft.Extensions
// Microsoft.Extensions.Hosting
extension Microsoft.Extensions.Hosting {
// type: Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions
public struct GenericHostWebHostBuilderExtensions {
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>)
// docid: M:Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder})
    /**
    
            Adds and configures an ASP.NET Core web application.
            

    - Parameter builder: The  to add the  to.
    - Parameter configure: The delegate that configures the .
    - Returns: The .

    */
    public static func ConfigureWebHost(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_GenericHostWebHostBuilderExtensions_IHostBuilder__ConfigureWebHost_0__2__IHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_IWebHostBuilder_(&__thrown, builder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureWebHost(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        return try ConfigureWebHost(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>, System.Action<Microsoft.Extensions.Hosting.WebHostBuilderOptions>)
// docid: M:Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.IWebHostBuilder},System.Action{Microsoft.Extensions.Hosting.WebHostBuilderOptions})
    /**
    
            Adds and configures an ASP.NET Core web application.
            

    - Parameter builder: The  to add the  to.
    - Parameter configure: The delegate that configures the .
    - Parameter configureWebHostBuilder: The delegate that configures the .
    - Returns: The .

    */
    public static func ConfigureWebHost(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>, configureWebHostBuilder : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_GenericHostWebHostBuilderExtensions_IHostBuilder__ConfigureWebHost_0__3__IHostBuilder_System_Action_Microsoft_AspNetCore_Hosting_IWebHostBuilder__System_Action_Microsoft_Extensions_Hosting_WebHostBuilderOptions_(&__thrown, builder.get_handle(), configure.get_handle(), configureWebHostBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ConfigureWebHost(builder : aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder, configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> Void, configureWebHostBuilder : @escaping (aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        let del_configureWebHostBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>(configureWebHostBuilder);
        return try ConfigureWebHost(builder: builder, configure: del_configure, configureWebHostBuilder: del_configureWebHostBuilder);
    }
} // GenericHostWebHostBuilderExtensions


// type: Microsoft.Extensions.Hosting.WebHostBuilderOptions
    /**
    
            Builder options for use with ConfigureWebHost.
            

    */
open class WebHostBuilderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Hosting_WebHostBuilderOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Hosting.WebHostBuilderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Hosting_WebHostBuilderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SuppressEnvironmentConfiguration()
// docid: M:Microsoft.Extensions.Hosting.WebHostBuilderOptions.get_SuppressEnvironmentConfiguration
    open func get_SuppressEnvironmentConfiguration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Hosting_WebHostBuilderOptions_bool__get_SuppressEnvironmentConfiguration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressEnvironmentConfiguration(bool)
// docid: M:Microsoft.Extensions.Hosting.WebHostBuilderOptions.set_SuppressEnvironmentConfiguration(System.Boolean)
    open func set_SuppressEnvironmentConfiguration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Hosting_WebHostBuilderOptions_void__set_SuppressEnvironmentConfiguration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Indicates if "ASPNETCORE_" prefixed environment variables should be added to configuration.
            They are added by default.
            

    */
    open var SuppressEnvironmentConfiguration : Bool {
        get {
            return try! get_SuppressEnvironmentConfiguration();
        }
        set(v) {
            return try! set_SuppressEnvironmentConfiguration(value: v);
        }
    }
} // WebHostBuilderOptions


}



public protocol Microsoft_AspNetCore_Hosting_Builder_IApplicationBuilderFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsConfigureWebHost
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Hosting_Infrastructure_ISupportsStartup
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func Configure(configureApp : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureApp: configureApp);
    }
    // delegate closure overload
    public func Configure(configureApp : @escaping (aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureApp = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configureApp);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureApp: del_configureApp);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func Configure(configureApp : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureApp: configureApp);
    }
    // delegate closure overload
    public func Configure(configureApp : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureApp = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(configureApp);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureApp: del_configureApp);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Func<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,TStartup>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseStartup<UTStartup : SGBridgeGenericValue>(startupFactory : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), startupFactory: startupFactory);
    }
    // delegate closure overload
    public func UseStartup<UTStartup : SGBridgeGenericValue>(startupFactory : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext) throws -> UTStartup) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_startupFactory = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,UTStartup>(startupFactory);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), startupFactory: del_startupFactory);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Type)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseStartup(startupType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), startupType: startupType);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
// TODO COPE extension method (unused generic param) Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup<TStartup>(Microsoft.AspNetCore.Hosting.IWebHostBuilder)

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseDefaultServiceProvider(configure : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func UseDefaultServiceProvider(configure : @escaping (aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>(configure);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseDefaultServiceProvider(configure : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func UseDefaultServiceProvider(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configure = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.DependencyInjection.ServiceProviderOptions>(configure);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func ConfigureAppConfiguration(configureDelegate : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureAppConfiguration(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureDelegate: configureDelegate);
    }
    // delegate closure overload
    public func ConfigureAppConfiguration(configureDelegate : @escaping (aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureDelegate = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>(configureDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureAppConfiguration(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureDelegate: del_configureDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.Extensions.Logging.ILoggingBuilder>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func ConfigureLogging(configureLogging : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureLogging: configureLogging);
    }
    // delegate closure overload
    public func ConfigureLogging(configureLogging : @escaping (aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureLogging = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>(configureLogging);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureLogging: del_configureLogging);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func ConfigureLogging(configureLogging : dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureLogging: configureLogging);
    }
    // delegate closure overload
    public func ConfigureLogging(configureLogging : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext, aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureLogging = try dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderContext,aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>(configureLogging);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureLogging: del_configureLogging);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStaticWebAssets(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseStaticWebAssets() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStaticWebAssets(builder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task StopAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.TimeSpan)
extension Microsoft_AspNetCore_Hosting_IWebHost {
    public func StopAsync(timeout : dotnet.System.TimeSpan) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.Hosting.WebHostExtensions.StopAsync(host: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl: __copy_handle(self.get_handle())), timeout: timeout);
    }
}

// EXTENSION METHOD void WaitForShutdown(Microsoft.AspNetCore.Hosting.IWebHost)
extension Microsoft_AspNetCore_Hosting_IWebHost {
    public func WaitForShutdown() throws {
        try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdown(host: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task WaitForShutdownAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_Hosting_IWebHost {
    public func WaitForShutdownAsync(token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdownAsync(host: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl: __copy_handle(self.get_handle())), token: token);
    }
}

// EXTENSION METHOD void Run(Microsoft.AspNetCore.Hosting.IWebHost)
extension Microsoft_AspNetCore_Hosting_IWebHost {
    public func Run() throws {
        try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(host: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task RunAsync(Microsoft.AspNetCore.Hosting.IWebHost, System.Threading.CancellationToken)
extension Microsoft_AspNetCore_Hosting_IWebHost {
    public func RunAsync(token : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        return try await aspnetcore.Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(host: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHost(hndl: __copy_handle(self.get_handle())), token: token);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>)
extension Microsoft_Extensions_Hosting_IHostBuilder {
    public func ConfigureWebHost(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func ConfigureWebHost(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Hosting.IHostBuilder ConfigureWebHost(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>, System.Action<Microsoft.Extensions.Hosting.WebHostBuilderOptions>)
extension Microsoft_Extensions_Hosting_IHostBuilder {
    public func ConfigureWebHost(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>, configureWebHostBuilder : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: configure, configureWebHostBuilder: configureWebHostBuilder);
    }
    // delegate closure overload
    public func ConfigureWebHost(configure : @escaping (aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> Void, configureWebHostBuilder : @escaping (aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder>(configure);
        let del_configureWebHostBuilder = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Hosting.WebHostBuilderOptions>(configureWebHostBuilder);
        return try aspnetcore.Microsoft.Extensions.Hosting.GenericHostWebHostBuilderExtensions.ConfigureWebHost(builder: aspnetcore.Microsoft.Extensions.Hosting.IHostBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure, configureWebHostBuilder: del_configureWebHostBuilder);
    }
}

